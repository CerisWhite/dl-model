{"version":3,"sources":["../node_modules/three/examples/jsm/exporters/GLTFExporter.js"],"names":["WEBGL_CONSTANTS","identityArray","THREE_TO_WEBGL","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","PATH_PROPERTIES","scale","position","quaternion","morphTargetInfluences","GLTFExporter","prototype","constructor","parse","input","onDone","options","DEFAULT_OPTIONS","binary","trs","onlyVisible","truncateDrawRange","embedImages","maxTextureSize","Infinity","animations","includeCustomExtensions","Object","assign","length","cachedCanvas","outputJSON","asset","version","generator","byteOffset","buffers","pending","nodeMap","Map","skins","extensionsUsed","cachedData","meshes","attributes","attributesNormalized","materials","textures","images","uids","uid","getUID","object","has","set","get","equalArray","array1","array2","every","element","index","getPaddedBufferSize","bufferSize","Math","ceil","getPaddedArrayBuffer","arrayBuffer","paddingByte","paddedLength","byteLength","array","Uint8Array","i","buffer","serializeUserData","gltfProperty","keys","userData","json","JSON","stringify","gltfExtensions","extensionName","undefined","extensions","extras","error","console","warn","name","message","applyTextureTransform","mapDef","texture","didTransform","transformDef","offset","x","y","toArray","rotation","repeat","processBuffer","push","processAccessor","attribute","geometry","start","count","componentType","Float32Array","Uint32Array","Uint16Array","Error","end","end2","drawRange","max","min","bufferViewTarget","minMax","output","Array","itemSize","fill","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","a","value","getX","getY","getZ","getW","getMinMax","bufferView","target","componentSize","bufferViews","dataView","DataView","ArrayBuffer","setFloat32","setUint32","setUint16","setUint8","gltfBufferView","byteStride","id","processBufferView","gltfAccessor","type","1","2","3","4","16","normalized","accessors","processImage","image","format","flipY","cachedImages","mimeType","RGBAFormat","key","toString","gltfImage","canvas","document","createElement","width","height","ctx","getContext","translate","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","drawImage","RGBFormat","data","Uint8ClampedArray","j","putImageData","ImageData","Promise","resolve","toBlob","blob","reader","window","FileReader","readAsArrayBuffer","onloadend","result","processBufferViewImage","then","bufferViewIndex","uri","toDataURL","src","processSampler","map","samplers","gltfSampler","magFilter","minFilter","wrapS","wrapT","processTexture","gltfTexture","sampler","source","processMaterial","material","isShaderMaterial","gltfMaterial","pbrMetallicRoughness","isMeshBasicMaterial","KHR_materials_unlit","isGLTFSpecularGlossinessMaterial","KHR_materials_pbrSpecularGlossiness","isMeshStandardMaterial","color","concat","opacity","baseColorFactor","metallicFactor","metalness","roughnessFactor","roughness","diffuseFactor","specularFactor","specular","glossinessFactor","glossiness","metalnessMap","roughnessMap","metalRoughMapDef","metallicRoughnessTexture","baseColorMapDef","diffuseTexture","baseColorTexture","specularMap","specularMapDef","specularGlossinessTexture","emissive","clone","multiplyScalar","emissiveIntensity","emissiveFactor","emissiveMap","emissiveMapDef","emissiveTexture","normalMap","normalMapDef","normalScale","normalTexture","aoMap","occlusionMapDef","texCoord","aoMapIntensity","strength","occlusionTexture","transparent","alphaMode","alphaTest","alphaCutoff","side","DoubleSide","doubleSided","processMesh","mesh","meshCacheKeyParts","uuid","isArray","l","meshCacheKey","join","mode","isLineSegments","isLineLoop","isLine","isPoints","wireframe","isBufferGeometry","gltfMesh","primitives","targets","nameConversion","uv","uv2","skinWeight","skinIndex","originalNormal","getAttribute","normal","v","Vector3","il","abs","fromBufferAttribute","isNormalizedNormalAttribute","setAttribute","z","setX","normalize","setXYZ","createNormalizedNormalAttribute","modifiedAttribute","attributeName","substr","toUpperCase","test","BufferAttribute","accessor","weights","targetNames","reverseDictionary","morphTargetDictionary","warned","morphAttributes","gltfAttributeName","baseAttribute","relativeAttribute","morphTargetsRelative","jl","isMultiMaterial","groups","materialIndex","primitive","cacheKey","indices","processAnimation","clip","root","tracks","Utils","mergeMorphTargetTracks","channels","track","trackBinding","PropertyBinding","parseTrackName","trackNode","findNode","nodeName","trackProperty","propertyName","objectName","isSkinnedMesh","skeleton","getBoneByName","objectIndex","interpolation","outputItemSize","values","times","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","getInterpolation","InterpolateDiscrete","node","path","processSkin","nodes","rootJoint","bones","joints","inverseBindMatrices","temporaryBoneInverse","Matrix4","copy","boneInverses","multiply","bindMatrix","skin","processLight","light","lightDef","intensity","isDirectionalLight","isPointLight","distance","range","isSpotLight","spot","innerConeAngle","penumbra","angle","outerConeAngle","decay","parent","lights","processNode","gltfNode","translation","matrixAutoUpdate","updateMatrix","matrix","elements","String","isMesh","isCamera","camera","cameras","isOrtho","isOrthographicCamera","gltfCamera","orthographic","xmag","right","ymag","top","zfar","far","znear","near","perspective","aspectRatio","aspect","yfov","MathUtils","degToRad","fov","processCamera","isLight","children","child","visible","nodeIndex","processScene","scene","scenes","gltfScene","objectsWithoutScene","Scene","objects","processObjects","processInput","all","Blob","extensionsUsedList","size","binaryChunk","binaryChunkPrefix","jsonChunk","text","TextEncoder","encode","charCodeAt","stringToArrayBuffer","jsonChunkPrefix","header","headerView","totalByteLength","glbBlob","glbReader","readAsDataURL","base64data","insertKeyframe","time","tolerance","valueSize","getValueSize","TimeBufferType","ValueBufferType","interpolant","evaluate","slice","mergedTracks","sourceTracks","sourceTrack","sourceTrackBinding","sourceTrackNode","propertyIndex","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","setInterpolation","InterpolateLinear","mergedTrack","targetCount","targetIndex","sourceInterpolant","keyframeIndex","this"],"mappings":"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","file":"static/js/61.338402e4.chunk.js","sourcesContent":["import {\n\tBufferAttribute,\n\tClampToEdgeWrapping,\n\tDoubleSide,\n\tInterpolateDiscrete,\n\tInterpolateLinear,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLinearMipmapNearestFilter,\n\tMathUtils,\n\tMatrix4,\n\tMirroredRepeatWrapping,\n\tNearestFilter,\n\tNearestMipmapLinearFilter,\n\tNearestMipmapNearestFilter,\n\tPropertyBinding,\n\tRGBAFormat,\n\tRGBFormat,\n\tRepeatWrapping,\n\tScene,\n\tVector3\n} from '../../../build/three.module.js';\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nvar WEBGL_CONSTANTS = {\n\tPOINTS: 0x0000,\n\tLINES: 0x0001,\n\tLINE_LOOP: 0x0002,\n\tLINE_STRIP: 0x0003,\n\tTRIANGLES: 0x0004,\n\tTRIANGLE_STRIP: 0x0005,\n\tTRIANGLE_FAN: 0x0006,\n\n\tUNSIGNED_BYTE: 0x1401,\n\tUNSIGNED_SHORT: 0x1403,\n\tFLOAT: 0x1406,\n\tUNSIGNED_INT: 0x1405,\n\tARRAY_BUFFER: 0x8892,\n\tELEMENT_ARRAY_BUFFER: 0x8893,\n\n\tNEAREST: 0x2600,\n\tLINEAR: 0x2601,\n\tNEAREST_MIPMAP_NEAREST: 0x2700,\n\tLINEAR_MIPMAP_NEAREST: 0x2701,\n\tNEAREST_MIPMAP_LINEAR: 0x2702,\n\tLINEAR_MIPMAP_LINEAR: 0x2703,\n\n\tCLAMP_TO_EDGE: 33071,\n\tMIRRORED_REPEAT: 33648,\n\tREPEAT: 10497\n};\n\nvar identityArray = [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ];\n\nvar THREE_TO_WEBGL = {};\n\nTHREE_TO_WEBGL[ NearestFilter ] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[ NearestMipmapNearestFilter ] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[ NearestMipmapLinearFilter ] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[ LinearFilter ] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[ LinearMipmapNearestFilter ] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[ LinearMipmapLinearFilter ] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\n\nTHREE_TO_WEBGL[ ClampToEdgeWrapping ] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[ RepeatWrapping ] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[ MirroredRepeatWrapping ] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\n\nvar PATH_PROPERTIES = {\n\tscale: 'scale',\n\tposition: 'translation',\n\tquaternion: 'rotation',\n\tmorphTargetInfluences: 'weights'\n};\n\n//------------------------------------------------------------------------------\n// GLTF Exporter\n//------------------------------------------------------------------------------\nvar GLTFExporter = function () {};\n\nGLTFExporter.prototype = {\n\n\tconstructor: GLTFExporter,\n\n\t/**\n\t * Parse scenes and generate GLTF output\n\t * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n\t * @param  {Function} onDone  Callback on completed\n\t * @param  {Object} options options\n\t */\n\tparse: function ( input, onDone, options ) {\n\n\t\tvar DEFAULT_OPTIONS = {\n\t\t\tbinary: false,\n\t\t\ttrs: false,\n\t\t\tonlyVisible: true,\n\t\t\ttruncateDrawRange: true,\n\t\t\tembedImages: true,\n\t\t\tmaxTextureSize: Infinity,\n\t\t\tanimations: [],\n\t\t\tincludeCustomExtensions: false\n\t\t};\n\n\t\toptions = Object.assign( {}, DEFAULT_OPTIONS, options );\n\n\t\tif ( options.animations.length > 0 ) {\n\n\t\t\t// Only TRS properties, and not matrices, may be targeted by animation.\n\t\t\toptions.trs = true;\n\n\t\t}\n\n\t\tvar outputJSON = {\n\n\t\t\tasset: {\n\n\t\t\t\tversion: '2.0',\n\t\t\t\tgenerator: 'THREE.GLTFExporter'\n\n\t\t\t}\n\n\t\t};\n\n\t\tvar byteOffset = 0;\n\t\tvar buffers = [];\n\t\tvar pending = [];\n\t\tvar nodeMap = new Map();\n\t\tvar skins = [];\n\t\tvar extensionsUsed = {};\n\t\tvar cachedData = {\n\n\t\t\tmeshes: new Map(),\n\t\t\tattributes: new Map(),\n\t\t\tattributesNormalized: new Map(),\n\t\t\tmaterials: new Map(),\n\t\t\ttextures: new Map(),\n\t\t\timages: new Map()\n\n\t\t};\n\n\t\tvar cachedCanvas;\n\n\t\tvar uids = new Map();\n\t\tvar uid = 0;\n\n\t\t/**\n\t\t * Assign and return a temporal unique id for an object\n\t\t * especially which doesn't have .uuid\n\t\t * @param  {Object} object\n\t\t * @return {Integer}\n\t\t */\n\t\tfunction getUID( object ) {\n\n\t\t\tif ( ! uids.has( object ) ) uids.set( object, uid ++ );\n\n\t\t\treturn uids.get( object );\n\n\t\t}\n\n\t\t/**\n\t\t * Compare two arrays\n\t\t * @param  {Array} array1 Array 1 to compare\n\t\t * @param  {Array} array2 Array 2 to compare\n\t\t * @return {Boolean}        Returns true if both arrays are equal\n\t\t */\n\t\tfunction equalArray( array1, array2 ) {\n\n\t\t\treturn ( array1.length === array2.length ) && array1.every( function ( element, index ) {\n\n\t\t\t\treturn element === array2[ index ];\n\n\t\t\t} );\n\n\t\t}\n\n\t\t/**\n\t\t * Is identity matrix\n\t\t *\n\t\t * @param {Matrix4} matrix\n\t\t * @returns {Boolean} Returns true, if parameter is identity matrix\n\t\t */\n\t\tfunction isIdentityMatrix( matrix ) {\n\n\t\t\treturn equalArray( matrix.elements, identityArray );\n\n\t\t}\n\n\t\t/**\n\t\t * Converts a string to an ArrayBuffer.\n\t\t * @param  {string} text\n\t\t * @return {ArrayBuffer}\n\t\t */\n\t\tfunction stringToArrayBuffer( text ) {\n\n\t\t\tif ( window.TextEncoder !== undefined ) {\n\n\t\t\t\treturn new TextEncoder().encode( text ).buffer;\n\n\t\t\t}\n\n\t\t\tvar array = new Uint8Array( new ArrayBuffer( text.length ) );\n\n\t\t\tfor ( var i = 0, il = text.length; i < il; i ++ ) {\n\n\t\t\t\tvar value = text.charCodeAt( i );\n\n\t\t\t\t// Replacing multi-byte character with space(0x20).\n\t\t\t\tarray[ i ] = value > 0xFF ? 0x20 : value;\n\n\t\t\t}\n\n\t\t\treturn array.buffer;\n\n\t\t}\n\n\t\t/**\n\t\t * Get the min and max vectors from the given attribute\n\t\t * @param  {BufferAttribute} attribute Attribute to find the min/max in range from start to start + count\n\t\t * @param  {Integer} start\n\t\t * @param  {Integer} count\n\t\t * @return {Object} Object containing the `min` and `max` values (As an array of attribute.itemSize components)\n\t\t */\n\t\tfunction getMinMax( attribute, start, count ) {\n\n\t\t\tvar output = {\n\n\t\t\t\tmin: new Array( attribute.itemSize ).fill( Number.POSITIVE_INFINITY ),\n\t\t\t\tmax: new Array( attribute.itemSize ).fill( Number.NEGATIVE_INFINITY )\n\n\t\t\t};\n\n\t\t\tfor ( var i = start; i < start + count; i ++ ) {\n\n\t\t\t\tfor ( var a = 0; a < attribute.itemSize; a ++ ) {\n\n\t\t\t\t\tvar value;\n\n\t\t\t\t\tif ( attribute.itemSize > 4 ) {\n\n\t\t\t\t\t\t // no support for interleaved data for itemSize > 4\n\n\t\t\t\t\t\tvalue = attribute.array[ i * attribute.itemSize + a ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( a === 0 ) value = attribute.getX( i );\n\t\t\t\t\t\telse if ( a === 1 ) value = attribute.getY( i );\n\t\t\t\t\t\telse if ( a === 2 ) value = attribute.getZ( i );\n\t\t\t\t\t\telse if ( a === 3 ) value = attribute.getW( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.min[ a ] = Math.min( output.min[ a ], value );\n\t\t\t\t\toutput.max[ a ] = Math.max( output.max[ a ], value );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn output;\n\n\t\t}\n\n\t\t/**\n\t\t * Checks if normal attribute values are normalized.\n\t\t *\n\t\t * @param {BufferAttribute} normal\n\t\t * @returns {Boolean}\n\t\t *\n\t\t */\n\t\tfunction isNormalizedNormalAttribute( normal ) {\n\n\t\t\tif ( cachedData.attributesNormalized.has( normal ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tvar v = new Vector3();\n\n\t\t\tfor ( var i = 0, il = normal.count; i < il; i ++ ) {\n\n\t\t\t\t// 0.0005 is from glTF-validator\n\t\t\t\tif ( Math.abs( v.fromBufferAttribute( normal, i ).length() - 1.0 ) > 0.0005 ) return false;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t/**\n\t\t * Creates normalized normal buffer attribute.\n\t\t *\n\t\t * @param {BufferAttribute} normal\n\t\t * @returns {BufferAttribute}\n\t\t *\n\t\t */\n\t\tfunction createNormalizedNormalAttribute( normal ) {\n\n\t\t\tif ( cachedData.attributesNormalized.has( normal ) ) {\n\n\t\t\t\treturn cachedData.attributesNormalized.get( normal );\n\n\t\t\t}\n\n\t\t\tvar attribute = normal.clone();\n\n\t\t\tvar v = new Vector3();\n\n\t\t\tfor ( var i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\t\tv.fromBufferAttribute( attribute, i );\n\n\t\t\t\tif ( v.x === 0 && v.y === 0 && v.z === 0 ) {\n\n\t\t\t\t\t// if values can't be normalized set (1, 0, 0)\n\t\t\t\t\tv.setX( 1.0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tv.normalize();\n\n\t\t\t\t}\n\n\t\t\t\tattribute.setXYZ( i, v.x, v.y, v.z );\n\n\t\t\t}\n\n\t\t\tcachedData.attributesNormalized.set( normal, attribute );\n\n\t\t\treturn attribute;\n\n\t\t}\n\n\t\t/**\n\t\t * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\n\t\t * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\n\t\t *\n\t\t * @param {Integer} bufferSize The size the original buffer.\n\t\t * @returns {Integer} new buffer size with required padding.\n\t\t *\n\t\t */\n\t\tfunction getPaddedBufferSize( bufferSize ) {\n\n\t\t\treturn Math.ceil( bufferSize / 4 ) * 4;\n\n\t\t}\n\n\t\t/**\n\t\t * Returns a buffer aligned to 4-byte boundary.\n\t\t *\n\t\t * @param {ArrayBuffer} arrayBuffer Buffer to pad\n\t\t * @param {Integer} paddingByte (Optional)\n\t\t * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\n\t\t */\n\t\tfunction getPaddedArrayBuffer( arrayBuffer, paddingByte ) {\n\n\t\t\tpaddingByte = paddingByte || 0;\n\n\t\t\tvar paddedLength = getPaddedBufferSize( arrayBuffer.byteLength );\n\n\t\t\tif ( paddedLength !== arrayBuffer.byteLength ) {\n\n\t\t\t\tvar array = new Uint8Array( paddedLength );\n\t\t\t\tarray.set( new Uint8Array( arrayBuffer ) );\n\n\t\t\t\tif ( paddingByte !== 0 ) {\n\n\t\t\t\t\tfor ( var i = arrayBuffer.byteLength; i < paddedLength; i ++ ) {\n\n\t\t\t\t\t\tarray[ i ] = paddingByte;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn array.buffer;\n\n\t\t\t}\n\n\t\t\treturn arrayBuffer;\n\n\t\t}\n\n\t\t/**\n\t\t * Serializes a userData.\n\t\t *\n\t\t * @param {THREE.Object3D|THREE.Material} object\n\t\t * @param {Object} gltfProperty\n\t\t */\n\t\tfunction serializeUserData( object, gltfProperty ) {\n\n\t\t\tif ( Object.keys( object.userData ).length === 0 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\ttry {\n\n\t\t\t\tvar json = JSON.parse( JSON.stringify( object.userData ) );\n\n\t\t\t\tif ( options.includeCustomExtensions && json.gltfExtensions ) {\n\n\t\t\t\t\tif ( gltfProperty.extensions === undefined ) {\n\n\t\t\t\t\t\tgltfProperty.extensions = {};\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var extensionName in json.gltfExtensions ) {\n\n\t\t\t\t\t\tgltfProperty.extensions[ extensionName ] = json.gltfExtensions[ extensionName ];\n\t\t\t\t\t\textensionsUsed[ extensionName ] = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete json.gltfExtensions;\n\n\t\t\t\t}\n\n\t\t\t\tif ( Object.keys( json ).length > 0 ) {\n\n\t\t\t\t\tgltfProperty.extras = json;\n\n\t\t\t\t}\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: userData of \\'' + object.name + '\\' ' +\n\t\t\t\t\t'won\\'t be serialized because of JSON.stringify error - ' + error.message );\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Applies a texture transform, if present, to the map definition. Requires\n\t\t * the KHR_texture_transform extension.\n\t\t */\n\t\tfunction applyTextureTransform( mapDef, texture ) {\n\n\t\t\tvar didTransform = false;\n\t\t\tvar transformDef = {};\n\n\t\t\tif ( texture.offset.x !== 0 || texture.offset.y !== 0 ) {\n\n\t\t\t\ttransformDef.offset = texture.offset.toArray();\n\t\t\t\tdidTransform = true;\n\n\t\t\t}\n\n\t\t\tif ( texture.rotation !== 0 ) {\n\n\t\t\t\ttransformDef.rotation = texture.rotation;\n\t\t\t\tdidTransform = true;\n\n\t\t\t}\n\n\t\t\tif ( texture.repeat.x !== 1 || texture.repeat.y !== 1 ) {\n\n\t\t\t\ttransformDef.scale = texture.repeat.toArray();\n\t\t\t\tdidTransform = true;\n\n\t\t\t}\n\n\t\t\tif ( didTransform ) {\n\n\t\t\t\tmapDef.extensions = mapDef.extensions || {};\n\t\t\t\tmapDef.extensions[ 'KHR_texture_transform' ] = transformDef;\n\t\t\t\textensionsUsed[ 'KHR_texture_transform' ] = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * Process a buffer to append to the default one.\n\t\t * @param  {ArrayBuffer} buffer\n\t\t * @return {Integer}\n\t\t */\n\t\tfunction processBuffer( buffer ) {\n\n\t\t\tif ( ! outputJSON.buffers ) {\n\n\t\t\t\toutputJSON.buffers = [ { byteLength: 0 } ];\n\n\t\t\t}\n\n\t\t\t// All buffers are merged before export.\n\t\t\tbuffers.push( buffer );\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\t/**\n\t\t * Process and generate a BufferView\n\t\t * @param  {BufferAttribute} attribute\n\t\t * @param  {number} componentType\n\t\t * @param  {number} start\n\t\t * @param  {number} count\n\t\t * @param  {number} target (Optional) Target usage of the BufferView\n\t\t * @return {Object}\n\t\t */\n\t\tfunction processBufferView( attribute, componentType, start, count, target ) {\n\n\t\t\tif ( ! outputJSON.bufferViews ) {\n\n\t\t\t\toutputJSON.bufferViews = [];\n\n\t\t\t}\n\n\t\t\t// Create a new dataview and dump the attribute's array into it\n\n\t\t\tvar componentSize;\n\n\t\t\tif ( componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE ) {\n\n\t\t\t\tcomponentSize = 1;\n\n\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT ) {\n\n\t\t\t\tcomponentSize = 2;\n\n\t\t\t} else {\n\n\t\t\t\tcomponentSize = 4;\n\n\t\t\t}\n\n\t\t\tvar byteLength = getPaddedBufferSize( count * attribute.itemSize * componentSize );\n\t\t\tvar dataView = new DataView( new ArrayBuffer( byteLength ) );\n\t\t\tvar offset = 0;\n\n\t\t\tfor ( var i = start; i < start + count; i ++ ) {\n\n\t\t\t\tfor ( var a = 0; a < attribute.itemSize; a ++ ) {\n\n\t\t\t\t\tvar value;\n\n\t\t\t\t\tif ( attribute.itemSize > 4 ) {\n\n\t\t\t\t\t\t // no support for interleaved data for itemSize > 4\n\n\t\t\t\t\t\tvalue = attribute.array[ i * attribute.itemSize + a ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( a === 0 ) value = attribute.getX( i );\n\t\t\t\t\t\telse if ( a === 1 ) value = attribute.getY( i );\n\t\t\t\t\t\telse if ( a === 2 ) value = attribute.getZ( i );\n\t\t\t\t\t\telse if ( a === 3 ) value = attribute.getW( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( componentType === WEBGL_CONSTANTS.FLOAT ) {\n\n\t\t\t\t\t\tdataView.setFloat32( offset, value, true );\n\n\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_INT ) {\n\n\t\t\t\t\t\tdataView.setUint32( offset, value, true );\n\n\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT ) {\n\n\t\t\t\t\t\tdataView.setUint16( offset, value, true );\n\n\t\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE ) {\n\n\t\t\t\t\t\tdataView.setUint8( offset, value );\n\n\t\t\t\t\t}\n\n\t\t\t\t\toffset += componentSize;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar gltfBufferView = {\n\n\t\t\t\tbuffer: processBuffer( dataView.buffer ),\n\t\t\t\tbyteOffset: byteOffset,\n\t\t\t\tbyteLength: byteLength\n\n\t\t\t};\n\n\t\t\tif ( target !== undefined ) gltfBufferView.target = target;\n\n\t\t\tif ( target === WEBGL_CONSTANTS.ARRAY_BUFFER ) {\n\n\t\t\t\t// Only define byteStride for vertex attributes.\n\t\t\t\tgltfBufferView.byteStride = attribute.itemSize * componentSize;\n\n\t\t\t}\n\n\t\t\tbyteOffset += byteLength;\n\n\t\t\toutputJSON.bufferViews.push( gltfBufferView );\n\n\t\t\t// @TODO Merge bufferViews where possible.\n\t\t\tvar output = {\n\n\t\t\t\tid: outputJSON.bufferViews.length - 1,\n\t\t\t\tbyteLength: 0\n\n\t\t\t};\n\n\t\t\treturn output;\n\n\t\t}\n\n\t\t/**\n\t\t * Process and generate a BufferView from an image Blob.\n\t\t * @param {Blob} blob\n\t\t * @return {Promise<Integer>}\n\t\t */\n\t\tfunction processBufferViewImage( blob ) {\n\n\t\t\tif ( ! outputJSON.bufferViews ) {\n\n\t\t\t\toutputJSON.bufferViews = [];\n\n\t\t\t}\n\n\t\t\treturn new Promise( function ( resolve ) {\n\n\t\t\t\tvar reader = new window.FileReader();\n\t\t\t\treader.readAsArrayBuffer( blob );\n\t\t\t\treader.onloadend = function () {\n\n\t\t\t\t\tvar buffer = getPaddedArrayBuffer( reader.result );\n\n\t\t\t\t\tvar bufferView = {\n\t\t\t\t\t\tbuffer: processBuffer( buffer ),\n\t\t\t\t\t\tbyteOffset: byteOffset,\n\t\t\t\t\t\tbyteLength: buffer.byteLength\n\t\t\t\t\t};\n\n\t\t\t\t\tbyteOffset += buffer.byteLength;\n\n\t\t\t\t\toutputJSON.bufferViews.push( bufferView );\n\n\t\t\t\t\tresolve( outputJSON.bufferViews.length - 1 );\n\n\t\t\t\t};\n\n\t\t\t} );\n\n\t\t}\n\n\t\t/**\n\t\t * Process attribute to generate an accessor\n\t\t * @param  {BufferAttribute} attribute Attribute to process\n\t\t * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n\t\t * @param  {Integer} start (Optional)\n\t\t * @param  {Integer} count (Optional)\n\t\t * @return {Integer}           Index of the processed accessor on the \"accessors\" array\n\t\t */\n\t\tfunction processAccessor( attribute, geometry, start, count ) {\n\n\t\t\tvar types = {\n\n\t\t\t\t1: 'SCALAR',\n\t\t\t\t2: 'VEC2',\n\t\t\t\t3: 'VEC3',\n\t\t\t\t4: 'VEC4',\n\t\t\t\t16: 'MAT4'\n\n\t\t\t};\n\n\t\t\tvar componentType;\n\n\t\t\t// Detect the component type of the attribute array (float, uint or ushort)\n\t\t\tif ( attribute.array.constructor === Float32Array ) {\n\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.FLOAT;\n\n\t\t\t} else if ( attribute.array.constructor === Uint32Array ) {\n\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n\n\t\t\t} else if ( attribute.array.constructor === Uint16Array ) {\n\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n\n\t\t\t} else if ( attribute.array.constructor === Uint8Array ) {\n\n\t\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Unsupported bufferAttribute component type.' );\n\n\t\t\t}\n\n\t\t\tif ( start === undefined ) start = 0;\n\t\t\tif ( count === undefined ) count = attribute.count;\n\n\t\t\t// @TODO Indexed buffer geometry with drawRange not supported yet\n\t\t\tif ( options.truncateDrawRange && geometry !== undefined && geometry.index === null ) {\n\n\t\t\t\tvar end = start + count;\n\t\t\t\tvar end2 = geometry.drawRange.count === Infinity\n\t\t\t\t\t? attribute.count\n\t\t\t\t\t: geometry.drawRange.start + geometry.drawRange.count;\n\n\t\t\t\tstart = Math.max( start, geometry.drawRange.start );\n\t\t\t\tcount = Math.min( end, end2 ) - start;\n\n\t\t\t\tif ( count < 0 ) count = 0;\n\n\t\t\t}\n\n\t\t\t// Skip creating an accessor if the attribute doesn't have data to export\n\t\t\tif ( count === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tvar minMax = getMinMax( attribute, start, count );\n\n\t\t\tvar bufferViewTarget;\n\n\t\t\t// If geometry isn't provided, don't infer the target usage of the bufferView. For\n\t\t\t// animation samplers, target must not be set.\n\t\t\tif ( geometry !== undefined ) {\n\n\t\t\t\tbufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n\n\t\t\t}\n\n\t\t\tvar bufferView = processBufferView( attribute, componentType, start, count, bufferViewTarget );\n\n\t\t\tvar gltfAccessor = {\n\n\t\t\t\tbufferView: bufferView.id,\n\t\t\t\tbyteOffset: bufferView.byteOffset,\n\t\t\t\tcomponentType: componentType,\n\t\t\t\tcount: count,\n\t\t\t\tmax: minMax.max,\n\t\t\t\tmin: minMax.min,\n\t\t\t\ttype: types[ attribute.itemSize ]\n\n\t\t\t};\n\n\t\t\tif ( attribute.normalized === true ) {\n\n\t\t\t\tgltfAccessor.normalized = true;\n\n\t\t\t}\n\n\t\t\tif ( ! outputJSON.accessors ) {\n\n\t\t\t\toutputJSON.accessors = [];\n\n\t\t\t}\n\n\t\t\toutputJSON.accessors.push( gltfAccessor );\n\n\t\t\treturn outputJSON.accessors.length - 1;\n\n\t\t}\n\n\t\t/**\n\t\t * Process image\n\t\t * @param  {Image} image to process\n\t\t * @param  {Integer} format of the image (e.g. RGBFormat, RGBAFormat etc)\n\t\t * @param  {Boolean} flipY before writing out the image\n\t\t * @return {Integer}     Index of the processed texture in the \"images\" array\n\t\t */\n\t\tfunction processImage( image, format, flipY ) {\n\n\t\t\tif ( ! cachedData.images.has( image ) ) {\n\n\t\t\t\tcachedData.images.set( image, {} );\n\n\t\t\t}\n\n\t\t\tvar cachedImages = cachedData.images.get( image );\n\t\t\tvar mimeType = format === RGBAFormat ? 'image/png' : 'image/jpeg';\n\t\t\tvar key = mimeType + ':flipY/' + flipY.toString();\n\n\t\t\tif ( cachedImages[ key ] !== undefined ) {\n\n\t\t\t\treturn cachedImages[ key ];\n\n\t\t\t}\n\n\t\t\tif ( ! outputJSON.images ) {\n\n\t\t\t\toutputJSON.images = [];\n\n\t\t\t}\n\n\t\t\tvar gltfImage = { mimeType: mimeType };\n\n\t\t\tif ( options.embedImages ) {\n\n\t\t\t\tvar canvas = cachedCanvas = cachedCanvas || document.createElement( 'canvas' );\n\n\t\t\t\tcanvas.width = Math.min( image.width, options.maxTextureSize );\n\t\t\t\tcanvas.height = Math.min( image.height, options.maxTextureSize );\n\n\t\t\t\tvar ctx = canvas.getContext( '2d' );\n\n\t\t\t\tif ( flipY === true ) {\n\n\t\t\t\t\tctx.translate( 0, canvas.height );\n\t\t\t\t\tctx.scale( 1, - 1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t\t( typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas ) ||\n\t\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\t\tctx.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( format !== RGBAFormat && format !== RGBFormat ) {\n\n\t\t\t\t\t\tconsole.error( 'GLTFExporter: Only RGB and RGBA formats are supported.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( image.width > options.maxTextureSize || image.height > options.maxTextureSize ) {\n\n\t\t\t\t\t\tconsole.warn( 'GLTFExporter: Image size is bigger than maxTextureSize', image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet data = image.data;\n\n\t\t\t\t\tif ( format === RGBFormat ) {\n\n\t\t\t\t\t\tdata = new Uint8ClampedArray( image.height * image.width * 4 );\n\n\t\t\t\t\t\tfor ( var i = 0, j = 0; i < data.length; i += 4, j += 3 ) {\n\n\t\t\t\t\t\t\tdata[ i + 0 ] = image.data[ j + 0 ];\n\t\t\t\t\t\t\tdata[ i + 1 ] = image.data[ j + 1 ];\n\t\t\t\t\t\t\tdata[ i + 2 ] = image.data[ j + 2 ];\n\t\t\t\t\t\t\tdata[ i + 3 ] = 255;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.putImageData( new ImageData( data, image.width, image.height ), 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( options.binary === true ) {\n\n\t\t\t\t\tpending.push( new Promise( function ( resolve ) {\n\n\t\t\t\t\t\tcanvas.toBlob( function ( blob ) {\n\n\t\t\t\t\t\t\tprocessBufferViewImage( blob ).then( function ( bufferViewIndex ) {\n\n\t\t\t\t\t\t\t\tgltfImage.bufferView = bufferViewIndex;\n\n\t\t\t\t\t\t\t\tresolve();\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}, mimeType );\n\n\t\t\t\t\t} ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgltfImage.uri = canvas.toDataURL( mimeType );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tgltfImage.uri = image.src;\n\n\t\t\t}\n\n\t\t\toutputJSON.images.push( gltfImage );\n\n\t\t\tvar index = outputJSON.images.length - 1;\n\t\t\tcachedImages[ key ] = index;\n\n\t\t\treturn index;\n\n\t\t}\n\n\t\t/**\n\t\t * Process sampler\n\t\t * @param  {Texture} map Texture to process\n\t\t * @return {Integer}     Index of the processed texture in the \"samplers\" array\n\t\t */\n\t\tfunction processSampler( map ) {\n\n\t\t\tif ( ! outputJSON.samplers ) {\n\n\t\t\t\toutputJSON.samplers = [];\n\n\t\t\t}\n\n\t\t\tvar gltfSampler = {\n\n\t\t\t\tmagFilter: THREE_TO_WEBGL[ map.magFilter ],\n\t\t\t\tminFilter: THREE_TO_WEBGL[ map.minFilter ],\n\t\t\t\twrapS: THREE_TO_WEBGL[ map.wrapS ],\n\t\t\t\twrapT: THREE_TO_WEBGL[ map.wrapT ]\n\n\t\t\t};\n\n\t\t\toutputJSON.samplers.push( gltfSampler );\n\n\t\t\treturn outputJSON.samplers.length - 1;\n\n\t\t}\n\n\t\t/**\n\t\t * Process texture\n\t\t * @param  {Texture} map Map to process\n\t\t * @return {Integer}     Index of the processed texture in the \"textures\" array\n\t\t */\n\t\tfunction processTexture( map ) {\n\n\t\t\tif ( cachedData.textures.has( map ) ) {\n\n\t\t\t\treturn cachedData.textures.get( map );\n\n\t\t\t}\n\n\t\t\tif ( ! outputJSON.textures ) {\n\n\t\t\t\toutputJSON.textures = [];\n\n\t\t\t}\n\n\t\t\tvar gltfTexture = {\n\n\t\t\t\tsampler: processSampler( map ),\n\t\t\t\tsource: processImage( map.image, map.format, map.flipY )\n\n\t\t\t};\n\n\t\t\tif ( map.name ) {\n\n\t\t\t\tgltfTexture.name = map.name;\n\n\t\t\t}\n\n\t\t\toutputJSON.textures.push( gltfTexture );\n\n\t\t\tvar index = outputJSON.textures.length - 1;\n\t\t\tcachedData.textures.set( map, index );\n\n\t\t\treturn index;\n\n\t\t}\n\n\t\t/**\n\t\t * Process material\n\t\t * @param  {THREE.Material} material Material to process\n\t\t * @return {Integer}      Index of the processed material in the \"materials\" array\n\t\t */\n\t\tfunction processMaterial( material ) {\n\n\t\t\tif ( cachedData.materials.has( material ) ) {\n\n\t\t\t\treturn cachedData.materials.get( material );\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\tconsole.warn( 'GLTFExporter: THREE.ShaderMaterial not supported.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( ! outputJSON.materials ) {\n\n\t\t\t\toutputJSON.materials = [];\n\n\t\t\t}\n\n\t\t\t// @QUESTION Should we avoid including any attribute that has the default value?\n\t\t\tvar gltfMaterial = {\n\n\t\t\t\tpbrMetallicRoughness: {}\n\n\t\t\t};\n\n\t\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\t\tgltfMaterial.extensions = { KHR_materials_unlit: {} };\n\n\t\t\t\textensionsUsed[ 'KHR_materials_unlit' ] = true;\n\n\t\t\t} else if ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t\tgltfMaterial.extensions = { KHR_materials_pbrSpecularGlossiness: {} };\n\n\t\t\t\textensionsUsed[ 'KHR_materials_pbrSpecularGlossiness' ] = true;\n\n\t\t\t} else if ( ! material.isMeshStandardMaterial ) {\n\n\t\t\t\tconsole.warn( 'GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.' );\n\n\t\t\t}\n\n\t\t\t// pbrMetallicRoughness.baseColorFactor\n\t\t\tvar color = material.color.toArray().concat( [ material.opacity ] );\n\n\t\t\tif ( ! equalArray( color, [ 1, 1, 1, 1 ] ) ) {\n\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.baseColorFactor = color;\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshStandardMaterial ) {\n\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;\n\n\t\t\t} else if ( material.isMeshBasicMaterial ) {\n\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = 0.0;\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.9;\n\n\t\t\t} else {\n\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicFactor = 0.5;\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.5;\n\n\t\t\t}\n\n\t\t\t// pbrSpecularGlossiness diffuse, specular and glossiness factor\n\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t\tif ( gltfMaterial.pbrMetallicRoughness.baseColorFactor ) {\n\n\t\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;\n\n\t\t\t\t}\n\n\t\t\t\tvar specularFactor = [ 1, 1, 1 ];\n\t\t\t\tmaterial.specular.toArray( specularFactor, 0 );\n\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor = specularFactor;\n\n\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor = material.glossiness;\n\n\t\t\t}\n\n\t\t\t// pbrMetallicRoughness.metallicRoughnessTexture\n\t\t\tif ( material.metalnessMap || material.roughnessMap ) {\n\n\t\t\t\tif ( material.metalnessMap === material.roughnessMap ) {\n\n\t\t\t\t\tvar metalRoughMapDef = { index: processTexture( material.metalnessMap ) };\n\t\t\t\t\tapplyTextureTransform( metalRoughMapDef, material.metalnessMap );\n\t\t\t\t\tgltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\n\t\t\tif ( material.map ) {\n\n\t\t\t\tvar baseColorMapDef = { index: processTexture( material.map ) };\n\t\t\t\tapplyTextureTransform( baseColorMapDef, material.map );\n\n\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture = baseColorMapDef;\n\n\t\t\t\t}\n\n\t\t\t\tgltfMaterial.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n\n\t\t\t}\n\n\t\t\t// pbrSpecularGlossiness specular map\n\t\t\tif ( material.isGLTFSpecularGlossinessMaterial && material.specularMap ) {\n\n\t\t\t\tvar specularMapDef = { index: processTexture( material.specularMap ) };\n\t\t\t\tapplyTextureTransform( specularMapDef, material.specularMap );\n\t\t\t\tgltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture = specularMapDef;\n\n\t\t\t}\n\n\t\t\tif ( material.emissive ) {\n\n\t\t\t\t// emissiveFactor\n\t\t\t\tvar emissive = material.emissive.clone().multiplyScalar( material.emissiveIntensity ).toArray();\n\n\t\t\t\tif ( ! equalArray( emissive, [ 0, 0, 0 ] ) ) {\n\n\t\t\t\t\tgltfMaterial.emissiveFactor = emissive;\n\n\t\t\t\t}\n\n\t\t\t\t// emissiveTexture\n\t\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\t\tvar emissiveMapDef = { index: processTexture( material.emissiveMap ) };\n\t\t\t\t\tapplyTextureTransform( emissiveMapDef, material.emissiveMap );\n\t\t\t\t\tgltfMaterial.emissiveTexture = emissiveMapDef;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// normalTexture\n\t\t\tif ( material.normalMap ) {\n\n\t\t\t\tvar normalMapDef = { index: processTexture( material.normalMap ) };\n\n\t\t\t\tif ( material.normalScale && material.normalScale.x !== - 1 ) {\n\n\t\t\t\t\tif ( material.normalScale.x !== material.normalScale.y ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnormalMapDef.scale = material.normalScale.x;\n\n\t\t\t\t}\n\n\t\t\t\tapplyTextureTransform( normalMapDef, material.normalMap );\n\n\t\t\t\tgltfMaterial.normalTexture = normalMapDef;\n\n\t\t\t}\n\n\t\t\t// occlusionTexture\n\t\t\tif ( material.aoMap ) {\n\n\t\t\t\tvar occlusionMapDef = {\n\t\t\t\t\tindex: processTexture( material.aoMap ),\n\t\t\t\t\ttexCoord: 1\n\t\t\t\t};\n\n\t\t\t\tif ( material.aoMapIntensity !== 1.0 ) {\n\n\t\t\t\t\tocclusionMapDef.strength = material.aoMapIntensity;\n\n\t\t\t\t}\n\n\t\t\t\tapplyTextureTransform( occlusionMapDef, material.aoMap );\n\n\t\t\t\tgltfMaterial.occlusionTexture = occlusionMapDef;\n\n\t\t\t}\n\n\t\t\t// alphaMode\n\t\t\tif ( material.transparent ) {\n\n\t\t\t\tgltfMaterial.alphaMode = 'BLEND';\n\n\t\t\t} else {\n\n\t\t\t\tif ( material.alphaTest > 0.0 ) {\n\n\t\t\t\t\tgltfMaterial.alphaMode = 'MASK';\n\t\t\t\t\tgltfMaterial.alphaCutoff = material.alphaTest;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// doubleSided\n\t\t\tif ( material.side === DoubleSide ) {\n\n\t\t\t\tgltfMaterial.doubleSided = true;\n\n\t\t\t}\n\n\t\t\tif ( material.name !== '' ) {\n\n\t\t\t\tgltfMaterial.name = material.name;\n\n\t\t\t}\n\n\t\t\tserializeUserData( material, gltfMaterial );\n\n\t\t\toutputJSON.materials.push( gltfMaterial );\n\n\t\t\tvar index = outputJSON.materials.length - 1;\n\t\t\tcachedData.materials.set( material, index );\n\n\t\t\treturn index;\n\n\t\t}\n\n\t\t/**\n\t\t * Process mesh\n\t\t * @param  {THREE.Mesh} mesh Mesh to process\n\t\t * @return {Integer}      Index of the processed mesh in the \"meshes\" array\n\t\t */\n\t\tfunction processMesh( mesh ) {\n\n\t\t\tvar meshCacheKeyParts = [ mesh.geometry.uuid ];\n\t\t\tif ( Array.isArray( mesh.material ) ) {\n\n\t\t\t\tfor ( var i = 0, l = mesh.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tmeshCacheKeyParts.push( mesh.material[ i ].uuid\t);\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmeshCacheKeyParts.push( mesh.material.uuid );\n\n\t\t\t}\n\n\t\t\tvar meshCacheKey = meshCacheKeyParts.join( ':' );\n\t\t\tif ( cachedData.meshes.has( meshCacheKey ) ) {\n\n\t\t\t\treturn cachedData.meshes.get( meshCacheKey );\n\n\t\t\t}\n\n\t\t\tvar geometry = mesh.geometry;\n\n\t\t\tvar mode;\n\n\t\t\t// Use the correct mode\n\t\t\tif ( mesh.isLineSegments ) {\n\n\t\t\t\tmode = WEBGL_CONSTANTS.LINES;\n\n\t\t\t} else if ( mesh.isLineLoop ) {\n\n\t\t\t\tmode = WEBGL_CONSTANTS.LINE_LOOP;\n\n\t\t\t} else if ( mesh.isLine ) {\n\n\t\t\t\tmode = WEBGL_CONSTANTS.LINE_STRIP;\n\n\t\t\t} else if ( mesh.isPoints ) {\n\n\t\t\t\tmode = WEBGL_CONSTANTS.POINTS;\n\n\t\t\t} else {\n\n\t\t\t\tmode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n\n\t\t\t}\n\n\t\t\tif ( geometry.isBufferGeometry !== true ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Geometry is not of type THREE.BufferGeometry.' );\n\n\t\t\t}\n\n\t\t\tvar gltfMesh = {};\n\n\t\t\tvar attributes = {};\n\t\t\tvar primitives = [];\n\t\t\tvar targets = [];\n\n\t\t\t// Conversion between attributes names in threejs and gltf spec\n\t\t\tvar nameConversion = {\n\n\t\t\t\tuv: 'TEXCOORD_0',\n\t\t\t\tuv2: 'TEXCOORD_1',\n\t\t\t\tcolor: 'COLOR_0',\n\t\t\t\tskinWeight: 'WEIGHTS_0',\n\t\t\t\tskinIndex: 'JOINTS_0'\n\n\t\t\t};\n\n\t\t\tvar originalNormal = geometry.getAttribute( 'normal' );\n\n\t\t\tif ( originalNormal !== undefined && ! isNormalizedNormalAttribute( originalNormal ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.' );\n\n\t\t\t\tgeometry.setAttribute( 'normal', createNormalizedNormalAttribute( originalNormal ) );\n\n\t\t\t}\n\n\t\t\t// @QUESTION Detect if .vertexColors = true?\n\t\t\t// For every attribute create an accessor\n\t\t\tvar modifiedAttribute = null;\n\t\t\tfor ( var attributeName in geometry.attributes ) {\n\n\t\t\t\t// Ignore morph target attributes, which are exported later.\n\t\t\t\tif ( attributeName.substr( 0, 5 ) === 'morph' ) continue;\n\n\t\t\t\tvar attribute = geometry.attributes[ attributeName ];\n\t\t\t\tattributeName = nameConversion[ attributeName ] || attributeName.toUpperCase();\n\n\t\t\t\t// Prefix all geometry attributes except the ones specifically\n\t\t\t\t// listed in the spec; non-spec attributes are considered custom.\n\t\t\t\tvar validVertexAttributes =\n\t\t\t\t\t\t/^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n\t\t\t\tif ( ! validVertexAttributes.test( attributeName ) ) {\n\n\t\t\t\t\tattributeName = '_' + attributeName;\n\n\t\t\t\t}\n\n\t\t\t\tif ( cachedData.attributes.has( getUID( attribute ) ) ) {\n\n\t\t\t\t\tattributes[ attributeName ] = cachedData.attributes.get( getUID( attribute ) );\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\n\t\t\t\tmodifiedAttribute = null;\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tif ( attributeName === 'JOINTS_0' &&\n\t\t\t\t\t! ( array instanceof Uint16Array ) &&\n\t\t\t\t\t! ( array instanceof Uint8Array ) ) {\n\n\t\t\t\t\tconsole.warn( 'GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.' );\n\t\t\t\t\tmodifiedAttribute = new BufferAttribute( new Uint16Array( array ), attribute.itemSize, attribute.normalized );\n\n\t\t\t\t}\n\n\t\t\t\tvar accessor = processAccessor( modifiedAttribute || attribute, geometry );\n\t\t\t\tif ( accessor !== null ) {\n\n\t\t\t\t\tattributes[ attributeName ] = accessor;\n\t\t\t\t\tcachedData.attributes.set( getUID( attribute ), accessor );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( originalNormal !== undefined ) geometry.setAttribute( 'normal', originalNormal );\n\n\t\t\t// Skip if no exportable attributes found\n\t\t\tif ( Object.keys( attributes ).length === 0 ) {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\t// Morph targets\n\t\t\tif ( mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0 ) {\n\n\t\t\t\tvar weights = [];\n\t\t\t\tvar targetNames = [];\n\t\t\t\tvar reverseDictionary = {};\n\n\t\t\t\tif ( mesh.morphTargetDictionary !== undefined ) {\n\n\t\t\t\t\tfor ( var key in mesh.morphTargetDictionary ) {\n\n\t\t\t\t\t\treverseDictionary[ mesh.morphTargetDictionary[ key ] ] = key;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0; i < mesh.morphTargetInfluences.length; ++ i ) {\n\n\t\t\t\t\tvar target = {};\n\n\t\t\t\t\tvar warned = false;\n\n\t\t\t\t\tfor ( var attributeName in geometry.morphAttributes ) {\n\n\t\t\t\t\t\t// glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\n\t\t\t\t\t\t// Three.js doesn't support TANGENT yet.\n\n\t\t\t\t\t\tif ( attributeName !== 'position' && attributeName !== 'normal' ) {\n\n\t\t\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'GLTFExporter: Only POSITION and NORMAL morph are supported.' );\n\t\t\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar attribute = geometry.morphAttributes[ attributeName ][ i ];\n\t\t\t\t\t\tvar gltfAttributeName = attributeName.toUpperCase();\n\n\t\t\t\t\t\t// Three.js morph attribute has absolute values while the one of glTF has relative values.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// glTF 2.0 Specification:\n\t\t\t\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\n\n\t\t\t\t\t\tvar baseAttribute = geometry.attributes[ attributeName ];\n\n\t\t\t\t\t\tif ( cachedData.attributes.has( getUID( attribute ) ) ) {\n\n\t\t\t\t\t\t\ttarget[ gltfAttributeName ] = cachedData.attributes.get( getUID( attribute ) );\n\t\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Clones attribute not to override\n\t\t\t\t\t\tvar relativeAttribute = attribute.clone();\n\n\t\t\t\t\t\tif ( ! geometry.morphTargetsRelative ) {\n\n\t\t\t\t\t\t\tfor ( var j = 0, jl = attribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\trelativeAttribute.setXYZ(\n\t\t\t\t\t\t\t\t\tj,\n\t\t\t\t\t\t\t\t\tattribute.getX( j ) - baseAttribute.getX( j ),\n\t\t\t\t\t\t\t\t\tattribute.getY( j ) - baseAttribute.getY( j ),\n\t\t\t\t\t\t\t\t\tattribute.getZ( j ) - baseAttribute.getZ( j )\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget[ gltfAttributeName ] = processAccessor( relativeAttribute, geometry );\n\t\t\t\t\t\tcachedData.attributes.set( getUID( baseAttribute ), target[ gltfAttributeName ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargets.push( target );\n\n\t\t\t\t\tweights.push( mesh.morphTargetInfluences[ i ] );\n\t\t\t\t\tif ( mesh.morphTargetDictionary !== undefined ) targetNames.push( reverseDictionary[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tgltfMesh.weights = weights;\n\n\t\t\t\tif ( targetNames.length > 0 ) {\n\n\t\t\t\t\tgltfMesh.extras = {};\n\t\t\t\t\tgltfMesh.extras.targetNames = targetNames;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar isMultiMaterial = Array.isArray( mesh.material );\n\n\t\t\tif ( isMultiMaterial && geometry.groups.length === 0 ) return null;\n\n\t\t\tvar materials = isMultiMaterial ? mesh.material : [ mesh.material ];\n\t\t\tvar groups = isMultiMaterial ? geometry.groups : [ { materialIndex: 0, start: undefined, count: undefined } ];\n\n\t\t\tfor ( var i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tvar primitive = {\n\t\t\t\t\tmode: mode,\n\t\t\t\t\tattributes: attributes,\n\t\t\t\t};\n\n\t\t\t\tserializeUserData( geometry, primitive );\n\n\t\t\t\tif ( targets.length > 0 ) primitive.targets = targets;\n\n\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\tvar cacheKey = getUID( geometry.index );\n\n\t\t\t\t\tif ( groups[ i ].start !== undefined || groups[ i ].count !== undefined ) {\n\n\t\t\t\t\t\tcacheKey += ':' + groups[ i ].start + ':' + groups[ i ].count;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cachedData.attributes.has( cacheKey ) ) {\n\n\t\t\t\t\t\tprimitive.indices = cachedData.attributes.get( cacheKey );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tprimitive.indices = processAccessor( geometry.index, geometry, groups[ i ].start, groups[ i ].count );\n\t\t\t\t\t\tcachedData.attributes.set( cacheKey, primitive.indices );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( primitive.indices === null ) delete primitive.indices;\n\n\t\t\t\t}\n\n\t\t\t\tvar material = processMaterial( materials[ groups[ i ].materialIndex ] );\n\n\t\t\t\tif ( material !== null ) {\n\n\t\t\t\t\tprimitive.material = material;\n\n\t\t\t\t}\n\n\t\t\t\tprimitives.push( primitive );\n\n\t\t\t}\n\n\t\t\tgltfMesh.primitives = primitives;\n\n\t\t\tif ( ! outputJSON.meshes ) {\n\n\t\t\t\toutputJSON.meshes = [];\n\n\t\t\t}\n\n\t\t\toutputJSON.meshes.push( gltfMesh );\n\n\t\t\tvar index = outputJSON.meshes.length - 1;\n\t\t\tcachedData.meshes.set( meshCacheKey, index );\n\n\t\t\treturn index;\n\n\t\t}\n\n\t\t/**\n\t\t * Process camera\n\t\t * @param  {THREE.Camera} camera Camera to process\n\t\t * @return {Integer}      Index of the processed mesh in the \"camera\" array\n\t\t */\n\t\tfunction processCamera( camera ) {\n\n\t\t\tif ( ! outputJSON.cameras ) {\n\n\t\t\t\toutputJSON.cameras = [];\n\n\t\t\t}\n\n\t\t\tvar isOrtho = camera.isOrthographicCamera;\n\n\t\t\tvar gltfCamera = {\n\n\t\t\t\ttype: isOrtho ? 'orthographic' : 'perspective'\n\n\t\t\t};\n\n\t\t\tif ( isOrtho ) {\n\n\t\t\t\tgltfCamera.orthographic = {\n\n\t\t\t\t\txmag: camera.right * 2,\n\t\t\t\t\tymag: camera.top * 2,\n\t\t\t\t\tzfar: camera.far <= 0 ? 0.001 : camera.far,\n\t\t\t\t\tznear: camera.near < 0 ? 0 : camera.near\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tgltfCamera.perspective = {\n\n\t\t\t\t\taspectRatio: camera.aspect,\n\t\t\t\t\tyfov: MathUtils.degToRad( camera.fov ),\n\t\t\t\t\tzfar: camera.far <= 0 ? 0.001 : camera.far,\n\t\t\t\t\tznear: camera.near < 0 ? 0 : camera.near\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tif ( camera.name !== '' ) {\n\n\t\t\t\tgltfCamera.name = camera.type;\n\n\t\t\t}\n\n\t\t\toutputJSON.cameras.push( gltfCamera );\n\n\t\t\treturn outputJSON.cameras.length - 1;\n\n\t\t}\n\n\t\t/**\n\t\t * Creates glTF animation entry from AnimationClip object.\n\t\t *\n\t\t * Status:\n\t\t * - Only properties listed in PATH_PROPERTIES may be animated.\n\t\t *\n\t\t * @param {THREE.AnimationClip} clip\n\t\t * @param {THREE.Object3D} root\n\t\t * @return {number}\n\t\t */\n\t\tfunction processAnimation( clip, root ) {\n\n\t\t\tif ( ! outputJSON.animations ) {\n\n\t\t\t\toutputJSON.animations = [];\n\n\t\t\t}\n\n\t\t\tclip = GLTFExporter.Utils.mergeMorphTargetTracks( clip.clone(), root );\n\n\t\t\tvar tracks = clip.tracks;\n\t\t\tvar channels = [];\n\t\t\tvar samplers = [];\n\n\t\t\tfor ( var i = 0; i < tracks.length; ++ i ) {\n\n\t\t\t\tvar track = tracks[ i ];\n\t\t\t\tvar trackBinding = PropertyBinding.parseTrackName( track.name );\n\t\t\t\tvar trackNode = PropertyBinding.findNode( root, trackBinding.nodeName );\n\t\t\t\tvar trackProperty = PATH_PROPERTIES[ trackBinding.propertyName ];\n\n\t\t\t\tif ( trackBinding.objectName === 'bones' ) {\n\n\t\t\t\t\tif ( trackNode.isSkinnedMesh === true ) {\n\n\t\t\t\t\t\ttrackNode = trackNode.skeleton.getBoneByName( trackBinding.objectIndex );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttrackNode = undefined;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! trackNode || ! trackProperty ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Could not export animation track \"%s\".', track.name );\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tvar inputItemSize = 1;\n\t\t\t\tvar outputItemSize = track.values.length / track.times.length;\n\n\t\t\t\tif ( trackProperty === PATH_PROPERTIES.morphTargetInfluences ) {\n\n\t\t\t\t\toutputItemSize /= trackNode.morphTargetInfluences.length;\n\n\t\t\t\t}\n\n\t\t\t\tvar interpolation;\n\n\t\t\t\t// @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\n\n\t\t\t\t// Detecting glTF cubic spline interpolant by checking factory method's special property\n\t\t\t\t// GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\n\t\t\t\t// valid value from .getInterpolation().\n\t\t\t\tif ( track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true ) {\n\n\t\t\t\t\tinterpolation = 'CUBICSPLINE';\n\n\t\t\t\t\t// itemSize of CUBICSPLINE keyframe is 9\n\t\t\t\t\t// (VEC3 * 3: inTangent, splineVertex, and outTangent)\n\t\t\t\t\t// but needs to be stored as VEC3 so dividing by 3 here.\n\t\t\t\t\toutputItemSize /= 3;\n\n\t\t\t\t} else if ( track.getInterpolation() === InterpolateDiscrete ) {\n\n\t\t\t\t\tinterpolation = 'STEP';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinterpolation = 'LINEAR';\n\n\t\t\t\t}\n\n\t\t\t\tsamplers.push( {\n\n\t\t\t\t\tinput: processAccessor( new BufferAttribute( track.times, inputItemSize ) ),\n\t\t\t\t\toutput: processAccessor( new BufferAttribute( track.values, outputItemSize ) ),\n\t\t\t\t\tinterpolation: interpolation\n\n\t\t\t\t} );\n\n\t\t\t\tchannels.push( {\n\n\t\t\t\t\tsampler: samplers.length - 1,\n\t\t\t\t\ttarget: {\n\t\t\t\t\t\tnode: nodeMap.get( trackNode ),\n\t\t\t\t\t\tpath: trackProperty\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\toutputJSON.animations.push( {\n\n\t\t\t\tname: clip.name || 'clip_' + outputJSON.animations.length,\n\t\t\t\tsamplers: samplers,\n\t\t\t\tchannels: channels\n\n\t\t\t} );\n\n\t\t\treturn outputJSON.animations.length - 1;\n\n\t\t}\n\n\t\tfunction processSkin( object ) {\n\n\t\t\tvar node = outputJSON.nodes[ nodeMap.get( object ) ];\n\n\t\t\tvar skeleton = object.skeleton;\n\n\t\t\tif ( skeleton === undefined ) return null;\n\n\t\t\tvar rootJoint = object.skeleton.bones[ 0 ];\n\n\t\t\tif ( rootJoint === undefined ) return null;\n\n\t\t\tvar joints = [];\n\t\t\tvar inverseBindMatrices = new Float32Array( skeleton.bones.length * 16 );\n\t\t\tvar temporaryBoneInverse = new Matrix4();\n\n\t\t\tfor ( var i = 0; i < skeleton.bones.length; ++ i ) {\n\n\t\t\t\tjoints.push( nodeMap.get( skeleton.bones[ i ] ) );\n\n\t\t\t\ttemporaryBoneInverse.copy( skeleton.boneInverses[ i ] );\n\n\t\t\t\ttemporaryBoneInverse.multiply( object.bindMatrix ).toArray( inverseBindMatrices, i * 16 );\n\n\t\t\t}\n\n\t\t\tif ( outputJSON.skins === undefined ) {\n\n\t\t\t\toutputJSON.skins = [];\n\n\t\t\t}\n\n\t\t\toutputJSON.skins.push( {\n\n\t\t\t\tinverseBindMatrices: processAccessor( new BufferAttribute( inverseBindMatrices, 16 ) ),\n\t\t\t\tjoints: joints,\n\t\t\t\tskeleton: nodeMap.get( rootJoint )\n\n\t\t\t} );\n\n\t\t\tvar skinIndex = node.skin = outputJSON.skins.length - 1;\n\n\t\t\treturn skinIndex;\n\n\t\t}\n\n\t\tfunction processLight( light ) {\n\n\t\t\tvar lightDef = {};\n\n\t\t\tif ( light.name ) lightDef.name = light.name;\n\n\t\t\tlightDef.color = light.color.toArray();\n\n\t\t\tlightDef.intensity = light.intensity;\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tlightDef.type = 'directional';\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tlightDef.type = 'point';\n\t\t\t\tif ( light.distance > 0 ) lightDef.range = light.distance;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tlightDef.type = 'spot';\n\t\t\t\tif ( light.distance > 0 ) lightDef.range = light.distance;\n\t\t\t\tlightDef.spot = {};\n\t\t\t\tlightDef.spot.innerConeAngle = ( light.penumbra - 1.0 ) * light.angle * - 1.0;\n\t\t\t\tlightDef.spot.outerConeAngle = light.angle;\n\n\t\t\t}\n\n\t\t\tif ( light.decay !== undefined && light.decay !== 2 ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, '\n\t\t\t\t\t+ 'and expects light.decay=2.' );\n\n\t\t\t}\n\n\t\t\tif ( light.target\n\t\t\t\t\t&& ( light.target.parent !== light\n\t\t\t\t\t || light.target.position.x !== 0\n\t\t\t\t\t || light.target.position.y !== 0\n\t\t\t\t\t || light.target.position.z !== - 1 ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Light direction may be lost. For best results, '\n\t\t\t\t\t+ 'make light.target a child of the light with position 0,0,-1.' );\n\n\t\t\t}\n\n\t\t\tvar lights = outputJSON.extensions[ 'KHR_lights_punctual' ].lights;\n\t\t\tlights.push( lightDef );\n\t\t\treturn lights.length - 1;\n\n\t\t}\n\n\t\t/**\n\t\t * Process Object3D node\n\t\t * @param  {THREE.Object3D} node Object3D to processNode\n\t\t * @return {Integer}      Index of the node in the nodes list\n\t\t */\n\t\tfunction processNode( object ) {\n\n\t\t\tif ( ! outputJSON.nodes ) {\n\n\t\t\t\toutputJSON.nodes = [];\n\n\t\t\t}\n\n\t\t\tvar gltfNode = {};\n\n\t\t\tif ( options.trs ) {\n\n\t\t\t\tvar rotation = object.quaternion.toArray();\n\t\t\t\tvar position = object.position.toArray();\n\t\t\t\tvar scale = object.scale.toArray();\n\n\t\t\t\tif ( ! equalArray( rotation, [ 0, 0, 0, 1 ] ) ) {\n\n\t\t\t\t\tgltfNode.rotation = rotation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! equalArray( position, [ 0, 0, 0 ] ) ) {\n\n\t\t\t\t\tgltfNode.translation = position;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! equalArray( scale, [ 1, 1, 1 ] ) ) {\n\n\t\t\t\t\tgltfNode.scale = scale;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( object.matrixAutoUpdate ) {\n\n\t\t\t\t\tobject.updateMatrix();\n\n\t\t\t\t}\n\n\t\t\t\tif ( isIdentityMatrix( object.matrix ) === false ) {\n\n\t\t\t\t\tgltfNode.matrix = object.matrix.elements;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// We don't export empty strings name because it represents no-name in Three.js.\n\t\t\tif ( object.name !== '' ) {\n\n\t\t\t\tgltfNode.name = String( object.name );\n\n\t\t\t}\n\n\t\t\tserializeUserData( object, gltfNode );\n\n\t\t\tif ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tvar mesh = processMesh( object );\n\n\t\t\t\tif ( mesh !== null ) {\n\n\t\t\t\t\tgltfNode.mesh = mesh;\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isCamera ) {\n\n\t\t\t\tgltfNode.camera = processCamera( object );\n\n\t\t\t} else if ( object.isDirectionalLight || object.isPointLight || object.isSpotLight ) {\n\n\t\t\t\tif ( ! extensionsUsed[ 'KHR_lights_punctual' ] ) {\n\n\t\t\t\t\toutputJSON.extensions = outputJSON.extensions || {};\n\t\t\t\t\toutputJSON.extensions[ 'KHR_lights_punctual' ] = { lights: [] };\n\t\t\t\t\textensionsUsed[ 'KHR_lights_punctual' ] = true;\n\n\t\t\t\t}\n\n\t\t\t\tgltfNode.extensions = gltfNode.extensions || {};\n\t\t\t\tgltfNode.extensions[ 'KHR_lights_punctual' ] = { light: processLight( object ) };\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Only directional, point, and spot lights are supported.', object );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\tskins.push( object );\n\n\t\t\t}\n\n\t\t\tif ( object.children.length > 0 ) {\n\n\t\t\t\tvar children = [];\n\n\t\t\t\tfor ( var i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar child = object.children[ i ];\n\n\t\t\t\t\tif ( child.visible || options.onlyVisible === false ) {\n\n\t\t\t\t\t\tvar node = processNode( child );\n\n\t\t\t\t\t\tif ( node !== null ) {\n\n\t\t\t\t\t\t\tchildren.push( node );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( children.length > 0 ) {\n\n\t\t\t\t\tgltfNode.children = children;\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\toutputJSON.nodes.push( gltfNode );\n\n\t\t\tvar nodeIndex = outputJSON.nodes.length - 1;\n\t\t\tnodeMap.set( object, nodeIndex );\n\n\t\t\treturn nodeIndex;\n\n\t\t}\n\n\t\t/**\n\t\t * Process Scene\n\t\t * @param  {Scene} node Scene to process\n\t\t */\n\t\tfunction processScene( scene ) {\n\n\t\t\tif ( ! outputJSON.scenes ) {\n\n\t\t\t\toutputJSON.scenes = [];\n\t\t\t\toutputJSON.scene = 0;\n\n\t\t\t}\n\n\t\t\tvar gltfScene = {};\n\n\t\t\tif ( scene.name !== '' ) {\n\n\t\t\t\tgltfScene.name = scene.name;\n\n\t\t\t}\n\n\t\t\toutputJSON.scenes.push( gltfScene );\n\n\t\t\tvar nodes = [];\n\n\t\t\tfor ( var i = 0, l = scene.children.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = scene.children[ i ];\n\n\t\t\t\tif ( child.visible || options.onlyVisible === false ) {\n\n\t\t\t\t\tvar node = processNode( child );\n\n\t\t\t\t\tif ( node !== null ) {\n\n\t\t\t\t\t\tnodes.push( node );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodes.length > 0 ) {\n\n\t\t\t\tgltfScene.nodes = nodes;\n\n\t\t\t}\n\n\t\t\tserializeUserData( scene, gltfScene );\n\n\t\t}\n\n\t\t/**\n\t\t * Creates a Scene to hold a list of objects and parse it\n\t\t * @param  {Array} objects List of objects to process\n\t\t */\n\t\tfunction processObjects( objects ) {\n\n\t\t\tvar scene = new Scene();\n\t\t\tscene.name = 'AuxScene';\n\n\t\t\tfor ( var i = 0; i < objects.length; i ++ ) {\n\n\t\t\t\t// We push directly to children instead of calling `add` to prevent\n\t\t\t\t// modify the .parent and break its original scene and hierarchy\n\t\t\t\tscene.children.push( objects[ i ] );\n\n\t\t\t}\n\n\t\t\tprocessScene( scene );\n\n\t\t}\n\n\t\tfunction processInput( input ) {\n\n\t\t\tinput = input instanceof Array ? input : [ input ];\n\n\t\t\tvar objectsWithoutScene = [];\n\n\t\t\tfor ( var i = 0; i < input.length; i ++ ) {\n\n\t\t\t\tif ( input[ i ] instanceof Scene ) {\n\n\t\t\t\t\tprocessScene( input[ i ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tobjectsWithoutScene.push( input[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( objectsWithoutScene.length > 0 ) {\n\n\t\t\t\tprocessObjects( objectsWithoutScene );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < skins.length; ++ i ) {\n\n\t\t\t\tprocessSkin( skins[ i ] );\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < options.animations.length; ++ i ) {\n\n\t\t\t\tprocessAnimation( options.animations[ i ], input[ 0 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tprocessInput( input );\n\n\t\tPromise.all( pending ).then( function () {\n\n\t\t\t// Merge buffers.\n\t\t\tvar blob = new Blob( buffers, { type: 'application/octet-stream' } );\n\n\t\t\t// Declare extensions.\n\t\t\tvar extensionsUsedList = Object.keys( extensionsUsed );\n\t\t\tif ( extensionsUsedList.length > 0 ) outputJSON.extensionsUsed = extensionsUsedList;\n\n\t\t\t// Update bytelength of the single buffer.\n\t\t\tif ( outputJSON.buffers && outputJSON.buffers.length > 0 ) outputJSON.buffers[ 0 ].byteLength = blob.size;\n\n\t\t\tif ( options.binary === true ) {\n\n\t\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n\n\t\t\t\tvar GLB_HEADER_BYTES = 12;\n\t\t\t\tvar GLB_HEADER_MAGIC = 0x46546C67;\n\t\t\t\tvar GLB_VERSION = 2;\n\n\t\t\t\tvar GLB_CHUNK_PREFIX_BYTES = 8;\n\t\t\t\tvar GLB_CHUNK_TYPE_JSON = 0x4E4F534A;\n\t\t\t\tvar GLB_CHUNK_TYPE_BIN = 0x004E4942;\n\n\t\t\t\tvar reader = new window.FileReader();\n\t\t\t\treader.readAsArrayBuffer( blob );\n\t\t\t\treader.onloadend = function () {\n\n\t\t\t\t\t// Binary chunk.\n\t\t\t\t\tvar binaryChunk = getPaddedArrayBuffer( reader.result );\n\t\t\t\t\tvar binaryChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );\n\t\t\t\t\tbinaryChunkPrefix.setUint32( 0, binaryChunk.byteLength, true );\n\t\t\t\t\tbinaryChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_BIN, true );\n\n\t\t\t\t\t// JSON chunk.\n\t\t\t\t\tvar jsonChunk = getPaddedArrayBuffer( stringToArrayBuffer( JSON.stringify( outputJSON ) ), 0x20 );\n\t\t\t\t\tvar jsonChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );\n\t\t\t\t\tjsonChunkPrefix.setUint32( 0, jsonChunk.byteLength, true );\n\t\t\t\t\tjsonChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_JSON, true );\n\n\t\t\t\t\t// GLB header.\n\t\t\t\t\tvar header = new ArrayBuffer( GLB_HEADER_BYTES );\n\t\t\t\t\tvar headerView = new DataView( header );\n\t\t\t\t\theaderView.setUint32( 0, GLB_HEADER_MAGIC, true );\n\t\t\t\t\theaderView.setUint32( 4, GLB_VERSION, true );\n\t\t\t\t\tvar totalByteLength = GLB_HEADER_BYTES\n\t\t\t\t\t\t+ jsonChunkPrefix.byteLength + jsonChunk.byteLength\n\t\t\t\t\t\t+ binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n\t\t\t\t\theaderView.setUint32( 8, totalByteLength, true );\n\n\t\t\t\t\tvar glbBlob = new Blob( [\n\t\t\t\t\t\theader,\n\t\t\t\t\t\tjsonChunkPrefix,\n\t\t\t\t\t\tjsonChunk,\n\t\t\t\t\t\tbinaryChunkPrefix,\n\t\t\t\t\t\tbinaryChunk\n\t\t\t\t\t], { type: 'application/octet-stream' } );\n\n\t\t\t\t\tvar glbReader = new window.FileReader();\n\t\t\t\t\tglbReader.readAsArrayBuffer( glbBlob );\n\t\t\t\t\tglbReader.onloadend = function () {\n\n\t\t\t\t\t\tonDone( glbReader.result );\n\n\t\t\t\t\t};\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tif ( outputJSON.buffers && outputJSON.buffers.length > 0 ) {\n\n\t\t\t\t\tvar reader = new window.FileReader();\n\t\t\t\t\treader.readAsDataURL( blob );\n\t\t\t\t\treader.onloadend = function () {\n\n\t\t\t\t\t\tvar base64data = reader.result;\n\t\t\t\t\t\toutputJSON.buffers[ 0 ].uri = base64data;\n\t\t\t\t\t\tonDone( outputJSON );\n\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tonDone( outputJSON );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n};\n\nGLTFExporter.Utils = {\n\n\tinsertKeyframe: function ( track, time ) {\n\n\t\tvar tolerance = 0.001; // 1ms\n\t\tvar valueSize = track.getValueSize();\n\n\t\tvar times = new track.TimeBufferType( track.times.length + 1 );\n\t\tvar values = new track.ValueBufferType( track.values.length + valueSize );\n\t\tvar interpolant = track.createInterpolant( new track.ValueBufferType( valueSize ) );\n\n\t\tvar index;\n\n\t\tif ( track.times.length === 0 ) {\n\n\t\t\ttimes[ 0 ] = time;\n\n\t\t\tfor ( var i = 0; i < valueSize; i ++ ) {\n\n\t\t\t\tvalues[ i ] = 0;\n\n\t\t\t}\n\n\t\t\tindex = 0;\n\n\t\t} else if ( time < track.times[ 0 ] ) {\n\n\t\t\tif ( Math.abs( track.times[ 0 ] - time ) < tolerance ) return 0;\n\n\t\t\ttimes[ 0 ] = time;\n\t\t\ttimes.set( track.times, 1 );\n\n\t\t\tvalues.set( interpolant.evaluate( time ), 0 );\n\t\t\tvalues.set( track.values, valueSize );\n\n\t\t\tindex = 0;\n\n\t\t} else if ( time > track.times[ track.times.length - 1 ] ) {\n\n\t\t\tif ( Math.abs( track.times[ track.times.length - 1 ] - time ) < tolerance ) {\n\n\t\t\t\treturn track.times.length - 1;\n\n\t\t\t}\n\n\t\t\ttimes[ times.length - 1 ] = time;\n\t\t\ttimes.set( track.times, 0 );\n\n\t\t\tvalues.set( track.values, 0 );\n\t\t\tvalues.set( interpolant.evaluate( time ), track.values.length );\n\n\t\t\tindex = times.length - 1;\n\n\t\t} else {\n\n\t\t\tfor ( var i = 0; i < track.times.length; i ++ ) {\n\n\t\t\t\tif ( Math.abs( track.times[ i ] - time ) < tolerance ) return i;\n\n\t\t\t\tif ( track.times[ i ] < time && track.times[ i + 1 ] > time ) {\n\n\t\t\t\t\ttimes.set( track.times.slice( 0, i + 1 ), 0 );\n\t\t\t\t\ttimes[ i + 1 ] = time;\n\t\t\t\t\ttimes.set( track.times.slice( i + 1 ), i + 2 );\n\n\t\t\t\t\tvalues.set( track.values.slice( 0, ( i + 1 ) * valueSize ), 0 );\n\t\t\t\t\tvalues.set( interpolant.evaluate( time ), ( i + 1 ) * valueSize );\n\t\t\t\t\tvalues.set( track.values.slice( ( i + 1 ) * valueSize ), ( i + 2 ) * valueSize );\n\n\t\t\t\t\tindex = i + 1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\ttrack.times = times;\n\t\ttrack.values = values;\n\n\t\treturn index;\n\n\t},\n\n\tmergeMorphTargetTracks: function ( clip, root ) {\n\n\t\tvar tracks = [];\n\t\tvar mergedTracks = {};\n\t\tvar sourceTracks = clip.tracks;\n\n\t\tfor ( var i = 0; i < sourceTracks.length; ++ i ) {\n\n\t\t\tvar sourceTrack = sourceTracks[ i ];\n\t\t\tvar sourceTrackBinding = PropertyBinding.parseTrackName( sourceTrack.name );\n\t\t\tvar sourceTrackNode = PropertyBinding.findNode( root, sourceTrackBinding.nodeName );\n\n\t\t\tif ( sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined ) {\n\n\t\t\t\t// Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\n\t\t\t\ttracks.push( sourceTrack );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete\n\t\t\t\t&& sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear ) {\n\n\t\t\t\tif ( sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\t\t// This should never happen, because glTF morph target animations\n\t\t\t\t\t// affect all targets already.\n\t\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.' );\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.' );\n\n\t\t\t\tsourceTrack = sourceTrack.clone();\n\t\t\t\tsourceTrack.setInterpolation( InterpolateLinear );\n\n\t\t\t}\n\n\t\t\tvar targetCount = sourceTrackNode.morphTargetInfluences.length;\n\t\t\tvar targetIndex = sourceTrackNode.morphTargetDictionary[ sourceTrackBinding.propertyIndex ];\n\n\t\t\tif ( targetIndex === undefined ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex );\n\n\t\t\t}\n\n\t\t\tvar mergedTrack;\n\n\t\t\t// If this is the first time we've seen this object, create a new\n\t\t\t// track to store merged keyframe data for each morph target.\n\t\t\tif ( mergedTracks[ sourceTrackNode.uuid ] === undefined ) {\n\n\t\t\t\tmergedTrack = sourceTrack.clone();\n\n\t\t\t\tvar values = new mergedTrack.ValueBufferType( targetCount * mergedTrack.times.length );\n\n\t\t\t\tfor ( var j = 0; j < mergedTrack.times.length; j ++ ) {\n\n\t\t\t\t\tvalues[ j * targetCount + targetIndex ] = mergedTrack.values[ j ];\n\n\t\t\t\t}\n\n\t\t\t\t// We need to take into consideration the intended target node\n\t\t\t\t// of our original un-merged morphTarget animation.\n\t\t\t\tmergedTrack.name = ( sourceTrackBinding.nodeName || '' ) + '.morphTargetInfluences';\n\t\t\t\tmergedTrack.values = values;\n\n\t\t\t\tmergedTracks[ sourceTrackNode.uuid ] = mergedTrack;\n\t\t\t\ttracks.push( mergedTrack );\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tvar sourceInterpolant = sourceTrack.createInterpolant( new sourceTrack.ValueBufferType( 1 ) );\n\n\t\t\tmergedTrack = mergedTracks[ sourceTrackNode.uuid ];\n\n\t\t\t// For every existing keyframe of the merged track, write a (possibly\n\t\t\t// interpolated) value from the source track.\n\t\t\tfor ( var j = 0; j < mergedTrack.times.length; j ++ ) {\n\n\t\t\t\tmergedTrack.values[ j * targetCount + targetIndex ] = sourceInterpolant.evaluate( mergedTrack.times[ j ] );\n\n\t\t\t}\n\n\t\t\t// For every existing keyframe of the source track, write a (possibly\n\t\t\t// new) keyframe to the merged track. Values from the previous loop may\n\t\t\t// be written again, but keyframes are de-duplicated.\n\t\t\tfor ( var j = 0; j < sourceTrack.times.length; j ++ ) {\n\n\t\t\t\tvar keyframeIndex = this.insertKeyframe( mergedTrack, sourceTrack.times[ j ] );\n\t\t\t\tmergedTrack.values[ keyframeIndex * targetCount + targetIndex ] = sourceTrack.values[ j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tclip.tracks = tracks;\n\n\t\treturn clip;\n\n\t}\n\n};\n\nexport { GLTFExporter };\n"],"sourceRoot":""}