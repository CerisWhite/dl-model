{"version":3,"sources":["helpers/downloadBlob.js","helpers/exportModel/exportOptions.js","helpers/exportModel/exportModel.js"],"names":["downloadBlob","blob","fileName","url","URL","createObjectURL","a","document","createElement","style","display","href","download","body","appendChild","click","window","revokeObjectURL","removeChild","exportOptions","format","name","options","exporters","stl","gltf","usdz","ply","exportModel","model","settings","optionList","find","option","filterObject","model2stl","rotateX","Math","PI","STLExporter","exporter","output","parse","fileContent","Blob","type","model2gltf","GLTFExporter","Promise","resolve","binary","JSON","stringify","model2usdz","USDZExporter","model2ply","PLYExporter"],"mappings":"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","file":"static/js/51.877dcd3b.chunk.js","sourcesContent":["/**\r\n * download a blob as the given file name\r\n * @param {Blob} blob\r\n * @param {string} fileName\r\n */\r\nexport default function downloadBlob(blob, fileName) {\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.style.display = \"none\";\r\n    a.href = url;\r\n    a.download = fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n\r\n    window.URL.revokeObjectURL(url);\r\n    document.body.removeChild(a);\r\n}\r\n","/**\r\n * @typedef {Object} ExportType\r\n * @property {string} format\r\n * @property {string} name\r\n * @property {string[]} options\r\n */\r\n/**\r\n * @type {ExportType[]}\r\n */\r\nconst exportOptions = [\r\n    { format: \"stl\", name: \"STL\", options: [\"binary\"] },\r\n    { format: \"ply\", name: \"PLY\", options: [\"binary\"] },\r\n    // { format: \"gltf\", name: \"glTF\", options: [\"binary\"] },\r\n    // { format: \"usdz\", name: \"USDZ\", options: [] },\r\n];\r\nexport default exportOptions;\r\n","import downloadBlob from \"../downloadBlob\";\r\nimport { filterObject } from \"../helpers\";\r\nimport exportOptions from \"./exportOptions\";\r\n\r\nconst exporters = {\r\n    stl: exportSTL,\r\n    gltf: exportGLTF,\r\n    usdz: exportUSDZ,\r\n    ply: exportPLY,\r\n};\r\n\r\n/**\r\n * export 3d model\r\n * @param {THREE.Object3D} model\r\n * @param {AppExportState} settings\r\n */\r\nexport async function exportModel(model, settings) {\r\n    const { format } = settings;\r\n    const optionList = exportOptions.find(option => option.format === format)\r\n        .options;\r\n\r\n    const options = filterObject(settings, optionList);\r\n\r\n    exporters[format](model, options);\r\n}\r\n\r\n// /**\r\n//  * create a copy of the model without outlines\r\n//  * @param {THREE.Object3D} model\r\n//  */\r\n// function cloneModel(model) {\r\n//     const clone = model.clone(true);\r\n\r\n//     /**\r\n//      * @type {THREE.Object3D[]}\r\n//      */\r\n//     const outlines = [];\r\n//     clone.traverseVisible(\r\n//         child => child.name === \"outline\" && outlines.push(child)\r\n//     );\r\n\r\n//     outlines.forEach(outline => outline.parent.remove(outline));\r\n\r\n//     return clone;\r\n// }\r\n\r\n/**\r\n * convert model to stl data\r\n * @param {THREE.Object3D} model\r\n * @param {Object} options\r\n */\r\nasync function model2stl(model, options) {\r\n    model.rotateX(Math.PI / 2);\r\n\r\n    const { STLExporter } = await import(\r\n        \"three/examples/jsm/exporters/STLExporter\"\r\n    );\r\n    const exporter = new STLExporter();\r\n\r\n    const output = exporter.parse(model, options);\r\n    model.rotateX(-Math.PI / 2);\r\n\r\n    return output;\r\n}\r\n\r\n/**\r\n * ! NEEDS SMOOTHING\r\n */\r\n/**\r\n * export model to stl\r\n * @param {THREE.Object3D} model\r\n * @param {Object} options\r\n */\r\nasync function exportSTL(model, options) {\r\n    const fileContent = await model2stl(model, options);\r\n    const blob = new Blob([fileContent], { type: \"text/plain\" });\r\n    const fileName = \"model.stl\";\r\n\r\n    downloadBlob(blob, fileName);\r\n}\r\n\r\n/**\r\n * convert model to glTF data\r\n * @param {THREE.Object3D} model\r\n * @param {{ }} options\r\n */\r\nasync function model2gltf(model, options) {\r\n    const { GLTFExporter } = await import(\r\n        \"three/examples/jsm/exporters/GLTFExporter\"\r\n    );\r\n    const exporter = new GLTFExporter();\r\n\r\n    return new Promise(resolve => exporter.parse(model, resolve, options));\r\n}\r\n\r\n/**\r\n * ! NOT WORKING WITH MULTIPLE MATERIALS\r\n */\r\n/**\r\n * export model to glTF\r\n * @param {THREE.Object3D} model\r\n * @param {Object} options\r\n */\r\nasync function exportGLTF(model, options) {\r\n    const fileContent = await model2gltf(model, options);\r\n\r\n    const { binary } = options;\r\n    const blob = binary\r\n        ? new Blob([fileContent], { type: \"application/octet-stream\" })\r\n        : new Blob([JSON.stringify(fileContent)], { type: \"text/plain\" });\r\n\r\n    const ext = binary ? \"glb\" : \"gltf\";\r\n    const fileName = `model.${ext}`;\r\n\r\n    downloadBlob(blob, fileName);\r\n}\r\n\r\n/**\r\n * convert a model to USDZ\r\n * @param {THREE.Object3D} model\r\n */\r\nasync function model2usdz(model) {\r\n    const { USDZExporter } = await import(\r\n        \"three/examples/jsm/exporters/USDZExporter\"\r\n    );\r\n    const exporter = new USDZExporter();\r\n    return exporter.parse(model);\r\n}\r\n\r\n/**\r\n * ! NOT WORKING WITH MULTIPLE MATERIALS\r\n */\r\n/**\r\n * Export a model to USDZ\r\n * @param {THREE.Object3D} model\r\n */\r\nasync function exportUSDZ(model) {\r\n    const fileContent = await model2usdz(model);\r\n\r\n    const blob = new Blob([fileContent], { type: \"application/octet-stream\" });\r\n    const fileName = \"model.usdz\";\r\n\r\n    downloadBlob(blob, fileName);\r\n}\r\n\r\n/**\r\n * convert model to ply data\r\n * @param {THREE.Object3D} model\r\n * @param {Object} options\r\n */\r\nasync function model2ply(model, options) {\r\n    const { PLYExporter } = await import(\r\n        \"three/examples/jsm/exporters/PLYExporter\"\r\n    );\r\n    const exporter = new PLYExporter();\r\n\r\n    return new Promise(resolve => exporter.parse(model, resolve, options));\r\n}\r\n\r\n/**\r\n * ! NEEDS SMOOTHING\r\n */\r\n/**\r\n * export model to stl\r\n * @param {THREE.Object3D} model\r\n * @param {Object} options\r\n */\r\nasync function exportPLY(model, options) {\r\n    const fileContent = await model2ply(model, options);\r\n\r\n    const { binary } = options;\r\n    const blob = binary\r\n        ? new Blob([fileContent], { type: \"application/octet-stream\" })\r\n        : new Blob([fileContent], { type: \"text/plain\" });\r\n    const fileName = \"model.ply\";\r\n\r\n    downloadBlob(blob, fileName);\r\n}\r\n"],"sourceRoot":""}