{"version":3,"sources":["helpers/downloadBlob.js","helpers/exportModel/exportOptions.js","helpers/exportModel/exportModel.js"],"names":["downloadBlob","blob","fileName","url","URL","createObjectURL","a","document","createElement","style","display","href","download","body","appendChild","click","window","revokeObjectURL","removeChild","exportOptions","format","name","options","exporters","stl","gltf","usdz","exportModel","model","settings","clone","cloneModel","optionList","find","option","filterObject","scene2stl","STLExporter","exporter","parse","fileContent","Blob","type","model2gltf","GLTFExporter","Promise","resolve","binary","JSON","stringify","model2usdz","USDZExporter","output","traverse","child","parent","remove"],"mappings":"6GAKe,SAASA,EAAaC,EAAMC,GACvC,IAAMC,EAAMC,IAAIC,gBAAgBJ,GAE1BK,EAAIC,SAASC,cAAc,KACjCF,EAAEG,MAAMC,QAAU,OAClBJ,EAAEK,KAAOR,EACTG,EAAEM,SAAWV,EACbK,SAASM,KAAKC,YAAYR,GAC1BA,EAAES,QAEFC,OAAOZ,IAAIa,gBAAgBd,GAC3BI,SAASM,KAAKK,YAAYZ,GAhB9B,mC,iCCcea,IALO,CAClB,CAAEC,OAAQ,MAAOC,KAAM,MAAOC,QAAS,CAAC,a,2ICNtCC,EAAY,CAAEC,I,8CAAgBC,K,8CAAkBC,K,6CAO/C,SAAeC,EAAtB,oC,4CAAO,WAA2BC,EAAOC,GAAlC,qBAAAvB,EAAA,sDACGwB,EAAQC,EAAWH,GACjBR,EAAWS,EAAXT,OACFY,EAAab,IAAcc,MAAK,SAAAC,GAAM,OAAIA,EAAOd,SAAWA,KAC7DE,QAECA,EAAUa,YAAaN,EAAUG,GAEvCT,EAAUH,GAAQU,EAAOR,GARtB,4C,+BAgBQc,E,gFAAf,WAAyBR,EAAON,GAAhC,mBAAAhB,EAAA,sEACkC,+BADlC,uBACY+B,EADZ,EACYA,YAGFC,EAAW,IAAID,EAJzB,kBAMWC,EAASC,MAAMX,EAAON,IANjC,4C,kEAiBA,WAAyBM,EAAON,GAAhC,iBAAAhB,EAAA,sEAC8B8B,EAAUR,EAAON,GAD/C,OACUkB,EADV,OAEUvC,EAAO,IAAIwC,KAAK,CAACD,GAAc,CAAEE,KAAM,eAC5B,YAEjB1C,YAAaC,EAFI,aAHrB,4C,+BAae0C,E,gFAAf,WAA0Bf,EAAON,GAAjC,mBAAAhB,EAAA,sEACmC,+BADnC,uBACYsC,EADZ,EACYA,aAGFN,EAAW,IAAIM,EAJzB,kBAMW,IAAIC,SAAQ,SAAAC,GAAO,OAAIR,EAASC,MAAMX,EAAOkB,EAASxB,OANjE,4C,kEAiBA,WAA0BM,EAAON,GAAjC,qBAAAhB,EAAA,sEAC8BqC,EAAWf,EAAON,GADhD,OACUkB,EADV,OAGYO,EAAWzB,EAAXyB,OACF9C,EAAO8C,EACP,IAAIN,KAAK,CAACD,GAAc,CAAEE,KAAM,6BAChC,IAAID,KAAK,CAACO,KAAKC,UAAUT,IAAe,CAAEE,KAAM,eAGhDxC,EATV,gBAQgB6C,EAAS,MAAQ,QAG7B/C,YAAaC,EAAMC,GAXvB,4C,+BAkBegD,E,8EAAf,WAA0BtB,GAA1B,mBAAAtB,EAAA,sEACmC,+BADnC,uBACY6C,EADZ,EACYA,aAGFb,EAAW,IAAIa,EAJzB,kBAKWb,EAASC,MAAMX,IAL1B,4C,kEAeA,WAA0BA,GAA1B,iBAAAtB,EAAA,sEAC8B4C,EAAWtB,GADzC,OACUY,EADV,OAGUvC,EAAO,IAAIwC,KAAK,CAACD,GAAc,CAAEE,KAAM,6BAC5B,aAEjB1C,YAAaC,EAFI,cAJrB,4C,sBAaA,IAAM8B,EAAa,SAAAH,GACf,IAAMwB,EAASxB,EAAME,OAAM,GAM3B,OAJAsB,EAAOC,UAAS,SAAAC,GACO,YAAfA,EAAMjC,MAAoBiC,EAAMC,OAAOC,OAAOF,MAG/CF","file":"static/js/51.94ea8b75.chunk.js","sourcesContent":["/**\r\n * download a blob as the given file name\r\n * @param {Blob} blob\r\n * @param {string} fileName\r\n */\r\nexport default function downloadBlob(blob, fileName) {\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.style.display = \"none\";\r\n    a.href = url;\r\n    a.download = fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n\r\n    window.URL.revokeObjectURL(url);\r\n    document.body.removeChild(a);\r\n}\r\n","/**\r\n * @typedef {Object} ExportType\r\n * @property {string} format\r\n * @property {string} name\r\n * @property {string[]} options\r\n */\r\n/**\r\n * @type {ExportType[]}\r\n */\r\nconst exportOptions = [\r\n    { format: \"stl\", name: \"STL\", options: [\"binary\"] },\r\n    // { format: \"gltf\", name: \"glTF\", options: [\"binary\"] },\r\n    // { format: \"usdz\", name: \"USDZ\", options: [] },\r\n];\r\nexport default exportOptions;\r\n","import downloadBlob from \"../downloadBlob\";\r\nimport { filterObject } from \"../helpers\";\r\nimport exportOptions from \"./exportOptions\";\r\n\r\nconst exporters = { stl: exportSTL, gltf: exportGLTF, usdz: exportUSDZ };\r\n\r\n/**\r\n * export 3d model\r\n * @param {THREE.Object3D} model\r\n * @param {AppExportState} settings\r\n */\r\nexport async function exportModel(model, settings) {\r\n    const clone = cloneModel(model);\r\n    const { format } = settings;\r\n    const optionList = exportOptions.find(option => option.format === format)\r\n        .options;\r\n\r\n    const options = filterObject(settings, optionList);\r\n\r\n    exporters[format](clone, options);\r\n}\r\n\r\n/**\r\n * convert model to stl data\r\n * @param {THREE.Object3D} model\r\n * @param {Object} options\r\n */\r\nasync function scene2stl(model, options) {\r\n    const { STLExporter } = await import(\r\n        \"three/examples/jsm/exporters/STLExporter\"\r\n    );\r\n    const exporter = new STLExporter();\r\n\r\n    return exporter.parse(model, options);\r\n}\r\n\r\n/**\r\n * ! NOT WORKING\r\n */\r\n/**\r\n * export model to stl\r\n * @param {THREE.Object3D} model\r\n * @param {Object} options\r\n */\r\nasync function exportSTL(model, options) {\r\n    const fileContent = await scene2stl(model, options);\r\n    const blob = new Blob([fileContent], { type: \"text/plain\" });\r\n    const fileName = \"model.stl\";\r\n\r\n    downloadBlob(blob, fileName);\r\n}\r\n\r\n/**\r\n * convert model to glTF data\r\n * @param {THREE.Object3D} model\r\n * @param {{ }} options\r\n */\r\nasync function model2gltf(model, options) {\r\n    const { GLTFExporter } = await import(\r\n        \"three/examples/jsm/exporters/GLTFExporter\"\r\n    );\r\n    const exporter = new GLTFExporter();\r\n\r\n    return new Promise(resolve => exporter.parse(model, resolve, options));\r\n}\r\n\r\n/**\r\n * ! NOT WORKING\r\n */\r\n/**\r\n * export model to glTF\r\n * @param {THREE.Object3D} model\r\n * @param {Object} options\r\n */\r\nasync function exportGLTF(model, options) {\r\n    const fileContent = await model2gltf(model, options);\r\n\r\n    const { binary } = options;\r\n    const blob = binary\r\n        ? new Blob([fileContent], { type: \"application/octet-stream\" })\r\n        : new Blob([JSON.stringify(fileContent)], { type: \"text/plain\" });\r\n\r\n    const ext = binary ? \"glb\" : \"gltf\";\r\n    const fileName = `model.${ext}`;\r\n\r\n    downloadBlob(blob, fileName);\r\n}\r\n\r\n/**\r\n * convert a model to USDZ\r\n * @param {THREE.Object3D} model\r\n */\r\nasync function model2usdz(model) {\r\n    const { USDZExporter } = await import(\r\n        \"three/examples/jsm/exporters/USDZExporter\"\r\n    );\r\n    const exporter = new USDZExporter();\r\n    return exporter.parse(model);\r\n}\r\n\r\n/**\r\n * ! NOT WORKING\r\n */\r\n/**\r\n * Export a model to USDZ\r\n * @param {THREE.Object3D} model\r\n */\r\nasync function exportUSDZ(model) {\r\n    const fileContent = await model2usdz(model);\r\n\r\n    const blob = new Blob([fileContent], { type: \"application/octet-stream\" });\r\n    const fileName = \"model.usdz\";\r\n\r\n    downloadBlob(blob, fileName);\r\n}\r\n\r\n/**\r\n * create a copy of the model without outlines\r\n * @param {THREE.Object3D} model\r\n */\r\nconst cloneModel = model => {\r\n    const output = model.clone(true);\r\n\r\n    output.traverse(child => {\r\n        if (child.name === \"outline\") child.parent.remove(child);\r\n    });\r\n\r\n    return output;\r\n};\r\n"],"sourceRoot":""}