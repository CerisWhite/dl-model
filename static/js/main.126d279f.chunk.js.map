{"version":3,"sources":["viewerHelpers.js","shader/outlineFragShader.js","shader/outlineVertShader.js","reducer/settingsReducer.js","context/SettingsContext.js","helpers.js","ModelViewer.js","Display.js","MainPage.js","App.js","hooks/useToggleState.js","data/face_offset.js","consts.js","styles/MainPageStyles.js","styles/Rose-Petals.svg","serviceWorker.js","index.js"],"names":["loadModel","url","Promise","resolve","FBXLoader","load","createInvisibleFloor","floorGeometry","THREE","rotateX","Math","PI","floorMaterial","visible","getModelPath","id","fbxSource","getTexturePath","analyzeWeaponCode","code","flipped","endsWith","weaponCode","substring","length","modelPath","texturePath","disposeItem","item","disposedList","Set","needToDispose","object","has","uuid","notDisposed","dispose","add","disposeObject","meshes","traverse","child","isMesh","shift","forEach","mesh","callbackOnEach","material","mat","map","backupMap","geometry","isSimpleViewer","modelId","startsWith","incompatibleModels","isDragon","initDragonFace","model","name","test","includes","createNewMaterial","materialType","params","matType","changeMaterial","target","checkParam","materials","flat","matIsArray","Array","isArray","every","i","texture","encoding","newMaterial","skinning","createOutline","outlines","outline","clone","push","createOutlineMaterial","replaceMaterial","enable","isSkinnedMesh","bind","skeleton","bindMatrix","parent","size","color","opacity","uniforms","type","value","tyle","side","transparent","fragmentShader","vertexShader","applyOutlineSettings","settings","key","fill","calculateTextureOffset","currentTexture","prevTexture","offset","x","y","prevOffset","textureOffsets","currentOffset","calculateIdxOffset","currentIdx","prevIdx","idxOffsets","applyOffset","part","groups","targetGroup","find","group","materialIndex","start","end","count","uv","attributes","u","getX","v","getY","setXY","needsUpdate","applyEyeOffset","applyMouthOffset","applyTexture","textureId","applyEyeTexture","applyMouthTexture","analyzeChainCode","aniCodes","split","nAni","fileList","animationList","currentAni","timeScale","repetitions","fileIdx","aniName","fileName","details","faceChanges","currentParts","parseFloat","Infinity","parseInt","time","faceMod","processFaceChanges","sorted","sort","change","timeStamps","simplified","output","eyeIdx","mouthIdx","filter","Object","assign","getFaceChangesArray","_","others","chainCodeToList","ani","concat","createGradientMap","nTones","colors","Uint8Array","minFilter","magFilter","generateMipmaps","settingsReducer","state","action","subkey","currentValue","defaultSetting","defaultSettings","update","SettingsContext","createContext","DispatchContext","initSettings","chainMaker","chain","animation","SettingsProvider","props","useReducer","dispatch","Provider","children","keys","scene","lights","light","isBlade","list","callback","setInitialSettings","eyeTextureDefined","mouthTextureDefined","param","keycode","setValue","join","chainList","n","initKey","isBooleanValue","Boolean","generateChainCode","modCode","generateAniModCode","faceCode","generateFaceCode","aniModList","modKey","defaultValue","collectFilter","toggleState","collected","tmp","k","multiCondFilter","input","filters","filterKeys","el","getTextColor","rgb","hex","result","exec","r","g","b","hexToRgb","aniButtonsFromObject","handleSelect","groupName","style","maxWidth","variant","data-value","data-name","onClick","getStandbyCode","weapon","gender","WEAPON_CODE","GENDER_CODE","getVictoryCode","getDashAtkCode","getRollCode","getComboCode","comboLength","COMBO_LENGTH","slice","getFSCode","fsAniLength","FS_LENGTH","getLobbyCode","SIDES","ModelViewer","initScene","models","modelInfo","main","weaponLeft","weaponRight","outlineParams","viewport","width","window","innerWidth","height","innerHeight","clock","bgColor","floor","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","addLights","loadedFX","Map","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","AAEnabled","antiAliasing","_AA","renderer","finalRenderer","canvas","domElement","setSize","appendChild","animate","intensity","constructor","entries","removeLights","remove","initLoad","loadMain","loadWeaponR","loadWeaponL","all","addToScene","basicMainProcessing","initFace","_eyeIdx","_mouthIdx","DEFAULT_FACE_IDX","defaultFaceParams","mouthTexture","eyeTexture","updateFace","initMainModel","initPos","initRot","rotation","initModels","initAllWeapons","attachAllWeapons","applyMaterialSettings","weaponInfo","attachWeapon","boneName","detachWeapon","detachAllWeapons","playNextAni","capture","_aniIdx","mediaRecorder","stop","toggleCapture","newIdx","aniIdx","addAnimation","a","aniCode","setIsLoading","mixer","addEventListener","aniSettings","batchLoader","file","path","animFiles","animations","anim","removeAnimation","mainModel","stopAllAction","copy","updateViewport","prev","current","aspect","captureAnimation","chunks","videoStream","captureStream","MediaRecorder","mimeType","codec","ondataavailable","event","data","onstop","superBuffer","Blob","URL","createObjectURL","document","createElement","href","download","body","click","revokeObjectURL","removeChild","updateEyeTexture","updateMouthTexture","updateFaceTexture","eyeUpdated","mouthUpdated","updateFaceOffset","disposeMainModel","updateMainModel","updateWeapons","updateModel","some","updateAnimation","updateOutlineParams","updateOutline","updatedKeys","saveMaterialReference","forEachMaterial","applyMaterialParams","materialParams","paramsList","matCommonParams","matExtraParams","hasGradientMap","gradientMap","matDirectSetParams","matColorParams","currentColor","useTexture","flatShading","updateMaterialParams","updatedParams","paramFilter","newMap","updateMaterial","updateLights","updateAscii","newCanvas","setCanvas","AsciiEffect","showAscii","ascii","charSet","invert","get","effect","background","rotateFloor","dt","rotateSpeed","rotateY","frameId","requestAnimationFrame","getDelta","faceChangeTime","render","app","this","AA","cancelAnimationFrame","renderLists","ref","enabled","currentSize","getSize","clipAction","currentAniSettings","currentClipDuration","setLoop","clampWhenFinished","setTime","duration","play","oldIdx","PureComponent","AniControl","lazy","Display","useContext","initCameraPosition","showAniControl","useCallback","defaultCameraPosition","cameraPositions","isNaN","controlsPositions","className","fallback","ControlPanel","SideBar","MainPage","location","classes","useStyles","useState","currentMode","setCurrentMode","useToggleState","sidebarOpen","toggleSidebarOpen","controlOpen","toggleControlOpen","isLoading","initLoadDone","setInitLoadDone","useRef","showSettings","viewerRef","setViewport","useEffect","pathname","updateViewportSize","removeEventListener","clientHeight","clientWidth","loadingMsg","root","CssBaseline","mode","open","openSidebarButton","openControl","handler","content","process","App","routeProps","initVal","setState","faceOffset","c110350_02","c110340_02","c110018_02","c110370_01","c100015_04","c110267_01","c110050_02","c110291_01","c110354_01","c110345_01","c110266_01","c110365_01","c110346_01","c110366_01","c110299_02","c110360_01","c110307_01","c110322_01","c110356_01","c110300_01","c110344_01","c110053_03","c110368_01","c110367_01","c110003_02","c110270_02","c110341_03","DRAWER_WIDTH","DRAWER_BGCOLOR","baseUrl","matParamsDetails","wireframe","default","emissive","min","max","step","emissiveIntensity","specular","metalness","roughness","shininess","options","defaultMatParams","asciiSet","lightId","sideContent","supportedCodecs","et","ei","mt","mi","wr","wl","bg","cam","ts","showAC","showOutline","rot","cc","MATERIALS","Basic","Toon","Lambert","Phong","Standard","Sword","Blade","Dagger","Axe","Lance","Bow","Wand","Staff","Manacaster","WEAPON_LIST","Male","Female","FILTERS","rarity","element","WEAPON_FILTERS","spFaceTextures","commonBG","green","black","grey","white","c","d","w","e","h","o","c100034_01","d210078_01","d210114_01","h0010001","h0010001_02","h0040101","r0070401","r0080401","smith","face1","face2","face3","face4","face5","face6","face7","face8","face9","videoCodecs","drawerWidth","drawerBG","makeStyles","theme","display","drawer","overflowY","drawerPaper","alignItems","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","marginBottom","padding","top","left","margin","borderRadius","transition","cursor","zIndex","justifyContent","fontSize","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+5BAaaA,EAAY,SAAAC,GACrB,OACIA,GACA,IAAIC,SAAQ,SAAAC,IACR,IAAIC,KAAYC,KAAKJ,EAAKE,OAczBG,EAAuB,WAChC,IAAMC,EAAgB,IAAIC,sBAA0B,GAAK,IACzDD,EAAcE,QAAQC,KAAKC,GAAK,GAChC,IAAMC,EAAgB,IAAIJ,oBAE1B,OADAI,EAAcC,SAAU,EACjB,IAAIL,OAAWD,EAAeK,IAG5BE,EAAe,SAAAC,GAAE,gBAAOC,IAAP,gBAAwBD,EAAxB,YAA8BA,EAA9B,SAEjBE,EAAiB,SAAAF,GAAE,gBAAOC,IAAP,gBAAwBD,EAAxB,YAA8BA,EAA9B,SAEnBG,EAAoB,SAAAC,GAC7B,IAAKA,EAAM,MAAO,GAClB,IAAMC,EAAUD,EAAKE,SAAS,KACxBC,EAAaH,EAAKI,UAAU,EAAGJ,EAAKK,OAAS,GAInD,MAAO,CAAEC,UAHSX,EAAaQ,GAGXI,YAFAT,EAAeK,GAEFF,YAGxBO,EAAc,SAAAC,GACvB,GAAKA,EAAL,CAEA,IAAMC,EAAe,IAAIC,IAInBC,EAAgB,SAAAC,GAAM,OAAIA,GAFZ,SAAAA,GAAM,OAAKH,EAAaI,IAAID,EAAOE,MAEbC,CAAYH,IAMhDI,EAAU,SAAAJ,GACRD,EAAcC,IALA,SAAAA,GAClBH,EAAaQ,IAAIL,EAAOE,MACxBF,EAAOI,UAGoBE,CAAcN,IAUvCO,EAAS,GACfX,EAAKY,UAAS,SAAAC,GAAK,OAAIA,EAAMC,QAAUH,EAAOI,MAAMF,MAEpDF,EAAOK,SAAQ,SAAAC,GAXS,IAAAb,IAYJa,EAXhBC,YAAed,EAAOe,UAAU,SAAAC,GAC5BZ,EAAQY,EAAIC,KACZb,EAAQY,EAAIE,WACZd,EAAQY,MASZZ,EAAQS,EAAKM,eAIRC,EAAiB,SAAAC,GAAO,OAChCA,EAAQC,WAAW,MACpBD,EAAQhC,SAAS,OACjBkC,IAAmBtB,IAAIoB,IAEdG,EAAW,SAAAH,GAAO,OAC3BA,EAAQC,WAAW,MAAoB,UAAZD,GAGlBI,EAAiB,SAAAC,GAC1BA,EAAMlB,UAAS,SAAAC,GACX,GAAKA,EAAMC,OAAX,CAEA,IACQiB,EAASlB,EAATkB,KADU,aAEJC,KAAKD,KACflB,EAAM5B,QAAU8C,EAAKE,SAAS,YAKpCC,EAAoB,SAACC,EAAcC,GACrC,IAAMC,EAAO,cAAUF,EAAV,YACb,OAAO,IAAIvD,EAAMyD,GAASD,IAGjBE,EAAiB,SAACC,EAAD,GAA4C,IAAjCJ,EAAgC,EAAhCA,aAAcrC,EAAkB,EAAlBA,YAC9CyC,GACLA,EAAO3B,UAAS,SAAAC,GACZ,GAAKA,EAAMC,QAAyB,YAAfD,EAAMkB,KAA3B,CAEA,IAAMS,EAAU,gBAAYL,EAAZ,YACVM,EAAY,CAAC5B,EAAMM,UAAUuB,OAC7BC,EAAaC,MAAMC,QAAQhC,EAAMM,UAEnCsB,EAAUK,OAAM,SAAA1B,GAAG,OAAIA,EAAIoB,QAAiB1C,GAEhD2C,EAAUzB,SAAQ,SAACI,EAAK2B,GACpB,IAAMC,EAAUlD,GACV,IAAIlB,iBAAsBH,KAAKqB,GAC/B2C,EAAUM,GAAG1B,IAEfvB,IAAakD,EAAQC,SAAWrE,gBAEpC,IAIMsE,EAAchB,EAAkBC,EAJf,CACnBd,IAAK2B,EACLG,UAAU,IAGdD,EAAYnB,KAAOX,EAAIW,KACnBX,EAAIE,YAAW4B,EAAY5B,UAAYF,EAAIE,WAE3CxB,GAAe2C,EAAUM,GAAG1B,KAC5BoB,EAAUM,GAAG1B,IAAIb,UAErBiC,EAAUM,GAAGvC,UAETmC,EACA9B,EAAMM,SAAS4B,GAAKG,EAEpBrC,EAAMM,SAAW+B,UAOpBE,EAAgB,SAAChD,EAAQgC,GAClC,GAAKhC,EAAL,CACA,IAAMiD,EAAW,GAiBjB,OAhBAjD,EAAOQ,UAAS,SAAAC,GACZ,GAAKA,EAAMC,OAAX,CAEA,IAAMwC,EAAUzC,EAAM0C,QACtBF,EAASG,KAAKF,GAEd,IAAMJ,EAAcO,EAAsBrB,GAC1CsB,EAAgBJ,EAASJ,GACzBI,EAAQrE,QAAUmD,EAAOuB,OACzBL,EAAQvB,KAAO,UAEXlB,EAAM+C,eACNN,EAAQO,KAAKhD,EAAMiD,SAAUjD,EAAMkD,YAEvClD,EAAMmD,OAAOvD,IAAI6C,OAEdD,IAGLI,EAAwB,SAAC,GAA8B,IAA5BQ,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACpCC,EAAW,CACbH,KAAM,CAAEI,KAAM,QAASC,MAAOL,GAC9BC,MAAO,CAAEK,KAAM,OAAQD,MAAO,IAAI1F,QAAYsF,IAC9CC,QAAS,CAAEE,KAAM,QAASC,MAAOH,IAWrC,OARiB,IAAIvF,iBAAqB,CACtCuE,UAAU,EACVqB,KAAM5F,WACN6F,aAAa,EACbL,WACAM,eC3Le,2HD4LfC,aE5Le,+nBFiMVC,EAAuB,SAACtB,EAASuB,GAC1C,GAAKvB,GAAYuB,EAAjB,CADuD,IAG/C1D,EAAamC,EAAbnC,SACR0D,EAAS7D,SAAQ,SAACsD,EAAOQ,GACrB,OAAQA,GACJ,IAAK,SACDxB,EAAQrE,QAAUqF,EAClB,MACJ,IAAK,QACDpD,YACIC,GACA,SAAAC,GAAG,OAAKA,EAAIgD,SAASF,MAAMI,MAAQ,IAAI1F,QAAY0F,MAEvD,MACJ,QACIpD,YACIC,GACA,SAAAC,GAAG,OAAKA,EAAIgD,SAASU,GAAKR,MAAQA,WAOhDZ,EAAkB,SAACtD,EAAQ8C,GAAiB,IACtC/B,EAAaf,EAAbe,SAERD,YAAeC,GAAU,SAAAC,GAEjBA,EAAIC,KAAKD,EAAIC,IAAIb,UACrBY,EAAIZ,aAGR,IAAMmC,EAAaC,MAAMC,QAAQzC,EAAOe,UACxCf,EAAOe,SAAWwB,EACZ,IAAIC,MAAMxC,EAAOe,SAASvB,QAAQmF,KAAK7B,GACvCA,GAGG8B,EAAyB,SAACC,EAAgBC,GACnD,IAAMC,EAAS,CAAEC,EAAG,EAAGC,EAAG,GAC1B,GAAIJ,IAAmBC,EAAa,CAChC,IAAMI,EAAaC,IAAeL,IAAgB,CAAEE,EAAG,EAAGC,EAAG,GACvDG,EAAgBD,IAAeN,IAAmB,CAAEG,EAAG,EAAGC,EAAG,GAEnEF,EAAOC,EAAII,EAAcJ,EAAIE,EAAWF,EACxCD,EAAOE,EAAIG,EAAcH,EAAIC,EAAWD,EAE5C,OAAOF,GAGEM,EAAqB,SAACC,EAAYC,GAC3C,IAAMR,EAAS,CAAEC,EAAG,EAAGC,EAAG,GAC1B,GAAIK,IAAeC,EAAS,CACxB,IAAML,EAAaM,IAAW,OAAD,OAAQD,IAC/BH,EAAgBI,IAAW,OAAD,OAAQF,IAExCP,EAAOC,EAAII,EAAcJ,EAAIE,EAAWF,EACxCD,EAAOE,EAAIG,EAAcH,EAAIC,EAAWD,EAE5C,OAAOF,GAGLU,EAAc,SAAAC,GAAI,OAAI,SAACvD,EAAQ4C,GACjC5C,EAAO3B,UAAS,SAAAC,GACZ,GAAmB,aAAfA,EAAMkB,MAAwD,IAAjClB,EAAMU,SAASwE,OAAOnG,OAAvD,CAGA,IAAMoG,EAAcnF,EAAMU,SAASwE,OAAOE,MACtC,SAAAC,GAAK,OAAIrF,EAAMM,SAAS+E,EAAMC,eAAepE,OAApC,YAAkD+D,EAAlD,SAEb,GAAKE,EAAL,CAKA,IAZqB,IASbI,EAAiBJ,EAAjBI,MACFC,EAAMD,EADaJ,EAAVM,MAETC,EAAK1F,EAAMU,SAASiF,WAAWD,GAC5BxD,EAAIqD,EAAOrD,EAAIsD,EAAKtD,IAAK,CAC9B,IAAM0D,EAAIF,EAAGG,KAAK3D,GAAK,IAAOoC,EAAOC,EAC/BuB,EAAIJ,EAAGK,KAAK7D,GAAK,IAAOoC,EAAOE,EACrCkB,EAAGM,MAAM9D,EAAG0D,EAAGE,GAEnBJ,EAAGO,aAAc,SAIZC,EAAiBlB,EAAY,OAC7BmB,EAAmBnB,EAAY,SAGtCoB,EAAe,SAAAnB,GAAI,OAAI,SAACvD,EAAD,GAA0C,IAA/BJ,EAA8B,EAA9BA,aAAc+E,EAAgB,EAAhBA,UAC5CpH,EAAcT,EAAe6H,GAC7BlE,GAAU,IAAIpE,iBAAsBH,KAAKqB,GAC/CkD,EAAQC,SAAWrE,eAEnB,IAIMsE,EAAchB,EAAkBC,EAJf,CACnBd,IAAK2B,EACLG,UAAU,IAGdZ,EAAO3B,UAAS,SAAAC,GACZ,GAAmB,aAAfA,EAAMkB,MAAwD,IAAjClB,EAAMU,SAASwE,OAAOnG,OAAvD,CAEA,IAAMoG,EAAcnF,EAAMU,SAASwE,OAAOE,MACtC,SAAAC,GAAK,OAAIrF,EAAMM,SAAS+E,EAAMC,eAAepE,OAApC,YAAkD+D,EAAlD,SAEb,GAAKE,EAAL,CANqB,IAQbG,EAAkBH,EAAlBG,cACRjD,EAAYnB,KAAOlB,EAAMM,SAASgF,GAAepE,KAEjDlB,EAAMM,SAASgF,GAAiBjD,SAI3BiE,EAAkBF,EAAa,OAC/BG,EAAoBH,EAAa,SAIjCI,EAAmB,SAAA9H,GAC5B,IAAKA,EAAM,MAAO,CAAC,GAAI,IAKvB,IAJA,IAAM+H,EAAW/H,EAAKgI,MAAM,KACtBC,EAAOF,EAAS1H,OAChB6H,EAAW,GACXC,EAAgB,GACb3E,EAAI,EAAGA,EAAIyE,EAAMzE,IAAK,CAC3B,IAMI4E,EANAC,EAAY,EACZC,EAAc,EACdC,EAAU,KACVC,EAAU,KACVC,EAAW,KACXC,OAAO,EAEPC,EAAc,GACZC,EAAeb,EAASvE,GAAGwE,MAAM,KAEvC,GAD8C,IAAxBY,EAAavI,OAE/BqI,EAAUE,EAAa,OACpB,CAAC,IAAD,cACmBA,EADnB,GACFH,EADE,KACQC,EADR,KAEHH,EAAUL,EAAS7H,OAAS,EAMhC,GAJIoI,IACAF,EAAUL,EAAS7H,OACnB6H,EAASjE,KAAKwE,IAEdC,EAAQhG,SAAS,KAAM,CAAC,IAAD,EACKgG,EAAQV,MAAM,KADnB,iBAChBxF,EADgB,KACP8C,EADO,WAEvBkD,EAAUhG,EAFa,oBAGH8C,GAHG,IAGvB,2BAA8B,CAAC,IAAD,UACG0C,MAAM,KADT,mBACnBzC,EADmB,KACdR,EADc,KAQ1B,GANY,OAARQ,IACA8C,EAAYQ,WAAW9D,IAEf,MAARQ,IACA+C,EAAwB,QAAVvD,EAAkB+D,IAAWC,SAAShE,IAEpDQ,EAAI7C,SAAS,KAAM,CAAC,IAAD,EACE6C,EAAIyC,MAAM,KADZ,mBACZzB,EADY,KACNyC,EADM,KAEbC,EAAU,CAAED,KAAMH,WAAWG,IAEnCC,EADe,UAAe,MAAT1C,EAAe,MAAQ,QAA7B,QACMxB,EACrB4D,EAAY1E,KAAKgF,KAhBF,oCAoBvBT,EAAUE,EAEdN,EAAa,CACTG,UACAC,UACAH,YACAC,cACAK,YAAaO,EAAmBP,IAEpCR,EAAclE,KAAKmE,GAEvB,MAAO,CAACF,EAAUC,IAGTe,EAAqB,SAAAP,GAC9B,IAAKA,EAAYtI,OAAQ,OAAOsI,EAEhC,IAAMQ,EAASR,EAAYS,MAAK,SAAAC,GAAM,OAAIA,EAAOL,QAC3CM,EAAa,IAAI3I,IAAIgI,EAAY7G,KAAI,SAAAuH,GAAM,OAAIA,EAAOL,SAC5D,GAAIL,EAAYtI,SAAWiJ,EAAW5E,KAIlC,OAHAyE,EAAO1H,SAAQ,SAAA4H,GACXA,EAAOzJ,GAAKmB,iBAEToI,EAGX,IAAMI,EAAa,GAOnB,OANAD,EAAW7H,SAAQ,SAAAuH,GACf,IAAIQ,EAAS,CAAER,OAAMpJ,GAAImB,cAAQ0I,OAAQ,GAAIC,SAAU,IACvCP,EAAOQ,QAAO,SAAAN,GAAM,OAAIA,EAAOL,OAASA,KAChDvH,SAAQ,SAAA4H,GAAM,OAAKG,EAASI,OAAOC,OAAOL,EAAQH,MAC1DE,EAAWtF,KAAKuF,MAEbD,GAGEO,EAAsB,SAACnB,EAAaL,GAC7C,IAAKK,EAAa,MAAO,GACzB,GAAoB,IAAhBL,EAAmB,OAAO,YAAIK,GAUlC,OARmB,IAAItF,MAAMiF,GAAa9C,OAAO1D,KAAI,SAACiI,EAAGvG,GAAJ,OAAc,IAAJA,KAQ7C1B,KANQ,SAAA8D,GAAM,OAC5B+C,EAAY7G,KAAI,gBAAGkH,EAAH,EAAGA,KAAagB,GAAhB,EAASpK,GAAT,iDAAC,eACVoK,GADS,IAEZhB,KAAMA,EAAOpD,UAGoBzC,QAGhC8G,EAAkB,SAACjK,EAAMwC,GAAU,IAAD,EACTsF,EAAiB9H,GADR,mBACpCkI,EADoC,KAC1BC,EAD0B,KAErC9H,EAAS8H,EAAc9H,OAe7B,OAde8H,EAAcrG,KAAI,SAACoI,EAAK1G,GAAO,IAClC+E,EAA0D2B,EAA1D3B,QAASC,EAAiD0B,EAAjD1B,QAASH,EAAwC6B,EAAxC7B,UAAWC,EAA6B4B,EAA7B5B,YAAaK,EAAgBuB,EAAhBvB,YAWlD,MATiB,CACbnG,KAFaA,EAAK2H,OAAO9J,EAAS,EAAT,WAAiBmD,EAAI,GAAM,IAGpDiF,SAAUP,EAASK,GACnBC,UACAH,YACAC,cACAK,cACA/I,GAAImB,mBAOHqJ,EAAoB,SAAAC,GAC7B,IAAMC,EAAS,IAAIC,WAAWF,GAAQvI,KAAI,SAACiI,EAAGvG,GAAJ,OAAe,IAAJA,EAAW6G,KAC1DvI,EAAM,IAAIzC,cAAkBiL,EAAQD,EAAQ,EAAGhL,mBAKrD,OAJAyC,EAAI0I,UAAYnL,gBAChByC,EAAI2I,UAAYpL,gBAChByC,EAAI4I,iBAAkB,EAEf5I,I,wNGpbE6I,EAAkB,SAACC,EAAOC,GAAY,IACvC/F,EAA6B+F,EAA7B/F,KAAMS,EAAuBsF,EAAvBtF,IAAKuF,EAAkBD,EAAlBC,OAAQ/F,EAAU8F,EAAV9F,MAC3B,OAAQD,GACJ,IAAK,SACD,IAAIiG,EACJ,OAAID,GACAC,EAAeH,EAAMrF,GAAKuF,GAAQ/F,GAC3B,2BACA6F,GADP,kBAEKrF,EAFL,2BAGWqF,EAAMrF,IAHjB,kBAISuF,EAJT,2BAKeF,EAAMrF,GAAKuF,IAL1B,kBAMa/F,GAASgG,UAK1BA,EAAeH,EAAMrF,GAAKR,GACnB,2BACA6F,GADP,kBAEKrF,EAFL,2BAEgBqF,EAAMrF,IAFtB,kBAE6BR,GAASgG,OAE1C,IAAK,QAGD,IAAMC,EAAiBF,EACjBG,IAAgB1F,GAAKuF,GACrBG,IAAgB1F,GAEtB,IAAKR,EACD,OAAO+F,EAAM,2BAEAF,GAFA,kBAGFrF,EAHE,2BAIIqF,EAAMrF,IAJV,kBAKEuF,EALF,2BAMQF,EAAMrF,GAAKuF,IACXE,OAPR,2BAYAJ,GAZA,kBAaFrF,EAbE,2BAaSqF,EAAMrF,IAASyF,KAGzC,IAAME,EAAS,GAIf,OAHAnG,EAAMtD,SAAQ,SAAA2F,GACV8D,EAAO9D,GAAK4D,EAAe5D,MAExB0D,EAAM,2BAEAF,GAFA,kBAGFrF,EAHE,2BAIIqF,EAAMrF,IAJV,kBAKEuF,EALF,2BAKgBF,EAAMrF,GAAKuF,IAAYI,OALvC,2BAQFN,GARE,kBAQMrF,EARN,2BAQiBqF,EAAMrF,IAAS2F,KACjD,IAAK,OAED,OACJ,IAAK,SAED,OAAOJ,EAAM,2BAEAF,GAFA,kBAGFrF,EAHE,2BAIIqF,EAAMrF,IAJV,kBAKEuF,EALF,2BAKgBF,EAAMrF,GAAKuF,IAAY/F,OALvC,2BAQF6F,GARE,kBAQMrF,EARN,2BAQiBqF,EAAMrF,IAASR,KACjD,QACI,OAAO6F,I,QCxENO,EAAkBC,0BAClBC,EAAkBD,0BAIzBE,EAAe,CAAEC,WAAY,CAAEC,MAFhBvB,YAAgBgB,IAAgBQ,UAAUzL,KAAM,UAY9D,SAAS0L,EAAiBC,GAAQ,IAAD,EACPC,qBAAWjB,EAAiBW,GADrB,mBAC7BhG,EAD6B,KACnBuG,EADmB,KAGpC,OACI,cAACV,EAAgBW,SAAjB,CAA0B/G,MAAOO,EAAjC,SACI,cAAC+F,EAAgBS,SAAjB,CAA0B/G,MAAO8G,EAAjC,SACKF,EAAMI,aAfvBnC,OAAOoC,KAAKf,KAAiBxJ,SACzB,SAAA8D,GAAG,OAAK+F,EAAa/F,GAAb,eAAyB0F,IAAgB1F,OAErD+F,EAAaW,MAAMC,OAASjB,IAAgBgB,MAAMC,OAAOpK,KAAI,SAAAqK,GAAK,sBAC3DA,O,ilBCDMC,EAAU,SAAApM,GAAI,OAAIA,EAAKmC,WAAW,SAIlCR,EAAiB,SAAC0K,EAAMC,GAC7BjJ,MAAMC,QAAQ+I,GACdA,EAAK5K,SAAQ,SAAAH,GAAK,OAAIgL,EAAShL,MAGnCgL,EAASD,IAGAE,EAAqB,SAAA1J,GAC9B,GAAsB,IAAlBA,EAAOxC,OAAX,CACA,IAAImM,GAAoB,EACpBC,GAAsB,EAC1B5J,EAAOpB,SAAQ,SAAAiL,GACX,GAAKA,EAAL,CADoB,MAGQA,EAAM1E,MAAM,KAHpB,iBAGb2E,EAHa,KAGD5H,EAHC,WAKpB,GAAKA,EAAM,GAAX,CAEA,IAAI6H,EAA4B,IAAjB7H,EAAM1E,OAAe0E,EAAM,GAAKA,EAAM8H,KAAK,KAE1D,OAAQF,GACJ,IAAK,KACDH,GAAoB,EACpB,MACJ,IAAK,KACDC,GAAsB,EACtB,MACJ,IAAK,KAED,IAAMK,EAAY7C,YAAgB2C,EAAU,aAC5CtB,IAAY,WAAZ,MAAsCwB,EACtC,MACJ,IAAK,KACgB,gBAAbF,IACAA,EAAQ,WAAOA,IAEnB,MACJ,IAAK,MACDA,EAAWA,EAAS5E,MAAM,KAAKlG,KAAI,SAAAiL,GAAC,OAAIlE,WAAWkE,MA3BvC,MA+BGC,IAAQL,GAAvBhG,EA/BY,EA+BZA,MAAOpB,EA/BK,EA+BLA,IAET0H,EAA8B,SAAbL,GAAoC,UAAbA,EAE9CtB,IAAa3E,GAAOpB,GAAO0H,EACrBC,QAAqB,SAAbN,GACRA,OAGVtB,IAAY,MAAZ,QAAmCA,IAAY,MAAZ,GAE9BkB,IACDlB,IAAY,MAAZ,WAAsCA,IAAY,MAAZ,IAErCmB,IACDnB,IAAY,MAAZ,aAAwCA,IAAY,MAAZ,MAInC6B,EAAoB,SAAA3B,GAC7B,IAAMnL,EAASmL,EAAMnL,OACjBmJ,EAAS,GAyBb,OAxBAgC,EAAM/J,SAAQ,SAACyI,EAAK1G,GAAO,IACfiF,EAAmCyB,EAAnCzB,SAAUD,EAAyB0B,EAAzB1B,QAASG,EAAgBuB,EAAhBvB,YACvBF,IAQAe,GANIA,EADM,IAANhG,EACSgG,EAAOW,OAAO1B,GAEde,EAAOW,OACZ1B,IAAa+C,EAAMhI,EAAI,GAAGiF,SAAWA,EAAW,KAGxC0B,OAAO,MAE3BX,EAASA,EAAOW,OAAO3B,GAGvB,IAAM4E,EAAUC,EAAmBnD,GACnCV,EAASA,EAAOW,OAAOiD,GACvB,IAAME,EAAWC,EAAiB5E,GAClCa,EAASA,EAAOW,OAAOmD,GAEnB9J,EAAInD,EAAS,IACbmJ,EAASA,EAAOW,OAAO,SAGxBX,GAGL6D,EAAqB,SAAAnD,GACvB,IAAIV,EAAS,GAOb,OANAI,OAAOoC,KAAKwB,KAAY/L,SAAQ,SAAAgM,GAAW,IAAD,EACRD,IAAWC,GAAjClI,EAD8B,EAC9BA,IAAKmI,EADyB,EACzBA,aACTxD,EAAI3E,KAASmI,IACblE,EAASA,EAAOW,OAAP,WAAkBsD,EAAlB,YAA4BvD,EAAI3E,SAG1CiE,GAGL+D,EAAmB,SAAA5E,GACrB,IAAKA,EAAa,MAAO,GACzB,IAAIa,EAAS,GAWb,OAVAb,EAAYlH,SAAQ,SAAA4H,GAAW,IACnBL,EAA2BK,EAA3BL,KAAMS,EAAqBJ,EAArBI,OAAQC,EAAaL,EAAbK,SACjBV,IACDS,IACAD,EAASA,EAAOW,OAAP,aAAoBnB,EAApB,YAA4BS,KAErCC,IACAF,EAASA,EAAOW,OAAP,aAAoBnB,EAApB,YAA4BU,SAGtCF,GAGEmE,EAAgB,SAAAC,GACzB,IAAIC,EAAY,GAUhB,OATAjE,OAAOoC,KAAK4B,GAAanM,SAAQ,SAAA8D,GAC7B,IAAIuI,EAAM,GACVlE,OAAOoC,KAAK4B,EAAYrI,IAAM9D,SAAQ,SAAAsM,GAC9BH,EAAYrI,GAAKwI,IACjBD,EAAI7J,KAAK8J,MAGjBF,EAAUtI,GAAOuI,KAEdD,GAGEG,EAAkB,SAACC,EAAOC,GACnC,IAAMC,EAAavE,OAAOoC,KAAKkC,GAE/B,OAAOD,EAAMtE,QAAO,SAAAyE,GAChB,OAAOD,EAAW5K,OAAM,SAAAgC,GACpB,OAAK2I,EAAQ3I,GAAKlF,QACX6N,EAAQ3I,GAAK7C,SAAS0L,EAAG7I,WAyB/B8I,EAAe,SAAA1J,GACxB,IAJ0B,EAIpB2J,EAfO,SAAAC,GACb,IAAIC,EAAS,4CAA4CC,KAAKF,GAC9D,OAAOC,EACD,CACIE,EAAG3F,SAASyF,EAAO,GAAI,IACvBG,EAAG5F,SAASyF,EAAO,GAAI,IACvBI,EAAG7F,SAASyF,EAAO,GAAI,KAE3B,KAOMK,CAASlK,GACrB,OAJK,KADqB,EAKL2J,GALOI,EACb,IADU,EAAMC,EACN,IADA,EAASC,GACF,IAIJ,IAAM,UAAY,WAGrCE,EAAuB,SAACjO,EAAQkO,EAAcC,GACvD,IAAKnO,EAAQ,OAAO,KACpB,IAAMoO,EAAQ,CAAEC,SAAU,WAC1B,OAAOtF,OAAOoC,KAAKnL,GAAQiB,KAAI,SAAAyD,GAAG,OAC9B,cAAC,IAAD,CACI4J,QAAQ,YAERC,aAAYvO,EAAO0E,GACnB8J,YAAA,UAAcL,EAAS,UAAMA,EAAN,KAAqB,IAA5C,OAAiDzJ,GACjD+J,QAASP,EACTE,MAAOA,EANX,SAQK1J,GANIA,OAYJgK,EAAiB,SAACC,EAAQC,GAAT,oBACnBC,IAAYF,GADO,YACIE,IAAYF,GADhB,gBAC+BG,IAAYF,KAE5DG,EAAiB,SAAAJ,GAAM,oBACzBE,IAAYF,GADa,YACFE,IAAYF,GADV,oBAC6BE,IAAYF,GADzC,YAGvBK,EAAiB,SAAAL,GAAM,oBAAWE,IAAYF,GAAvB,YAEvBM,EAAc,SAAAN,GAAM,oBAAWE,IAAYF,GAAvB,YAEpBO,EAAe,SAAAP,GAIxB,IAHA,IAAMQ,EAAcC,IAAaT,GAC3BxP,EAAO0P,IAAYF,GACrBhB,EAAM,cAAUxO,GACXwD,EAAI,EAAGA,GAAKwM,EAAaxM,IAC9BgL,EAASA,EAAOrE,OAAP,WAAkBnK,EAAlB,iBAA+BwD,EAA/B,MAGb,OADAgL,EAASA,EAAO0B,MAAM,GAAI,IAKjBC,EAAY,SAAAX,GAKrB,IAJA,IAAMY,EAAcC,IAAUb,GACxBxP,EAAO0P,IAAYF,GACrBhB,EAAM,aAASxO,GAEVwD,EAAI,EAAGA,GAAK4M,EAAa5M,IAC9BgL,EAASA,EAAOrE,OAAP,WAAkBnK,EAAlB,iBAA+BwD,EAA/B,MAGb,OADAgL,EAASA,EAAO0B,MAAM,GAAI,IAKjBI,EAAe,SAACd,EAAQC,GACjC,IAAMzP,EAAO0P,IAAYF,GACzB,MAAe,SAAXC,EACM,OAAN,OAAczP,EAAd,YAAsBA,EAAtB,4BAA8CA,EAA9C,oBAA8DA,EAA9D,oBAA8EA,EAA9E,oBAA8FA,EAA9F,WAEE,OAAN,OAAcA,EAAd,YAAsBA,EAAtB,4BAA8CA,EAA9C,oBAA8DA,EAA9D,oBAA8EA,EAA9E,oBAA8FA,EAA9F,a,yRC/MEuQ,EAAQ,CAAC,QAAS,QA43BTC,E,4MAlxBXC,UAAY,WAAO,IAAD,IACd,EAAKC,OAAS,GACd,EAAKC,UAAY,CACbC,KAAM,EAAKjF,MAAMpJ,MAAM3C,GACvBiR,WAAY9Q,YAAkB,EAAK4L,MAAMpJ,MAAMsO,YAC/CC,YAAa/Q,YAAkB,EAAK4L,MAAMpJ,MAAMuO,cAEpD,EAAK5N,UAAY,GAGjB,EAAKY,SAAW,GAChB,EAAKiN,cAAL,eAA0B,EAAKpF,MAAM5H,SAGrC,EAAKiN,SAAW,EAAKrF,MAAMqF,UAAY,CACnCC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAInB,EAAKC,MAAQ,IAAIjS,QAGjB,EAAK4M,MAAQ,IAAI5M,QACjB,EAAKkS,QAAU,EAAK5F,MAAM4F,QAG1B,EAAKC,MAAQrS,cACb,EAAK8M,MAAM/K,IAAI,EAAKsQ,OAGpB,EAAKC,OAAS,IAAIpS,oBACdqS,IAAWC,MACX,EAAKX,SAASC,MAAQ,EAAKD,SAASI,OACpCM,IAAWE,KACXF,IAAWG,KAEf,EAAKC,eAAiB,EAAKnG,MAAMmG,gBAAkB,CAAC,EAAG,EAAG,KAC1D,IAAKL,OAAOM,UAASC,IAArB,oBAA4B,EAAKF,iBACjC,EAAKL,OAAOQ,yBAGZ,EAAKC,SAAW,IAAIC,IAAc,EAAKV,OAAQ,EAAKW,OACpD,EAAKC,iBAAmB,EAAK1G,MAAM0G,kBAAoB,CAAC,EAAG,EAAG,IAC9D,IAAKH,SAASlP,QAAOgP,IAArB,oBAA4B,EAAKK,mBACjC,EAAKH,SAAShH,SA7CA,IAgDNgB,EAAW,EAAKP,MAAhBO,OACR,EAAKoG,UAAUpG,GAGf,EAAKqG,SAAW,IAAIC,IAGpB,EAAKC,WAAa,IAAIpT,gBAAoB,CACtCqT,WAAW,EACXC,OAAO,IAEX,EAAKF,WAAWG,eAAiBvT,eAEjC,EAAKwT,aAAe,IAAIxT,gBAAoB,CACxCqT,WAAW,EACXC,OAAO,IAEX,EAAKE,aAAaD,eAAiBvT,eAEnC,IAAMyT,EAAY,EAAKnH,MAAMoH,aAC7B,EAAKC,IAAMF,EAEX,EAAKG,SAAWH,EAAY,EAAKL,WAAa,EAAKI,aAEnD,EAAKK,cAAgB,EAAKD,SAC1B,EAAKE,OAAS,EAAKD,cAAcE,WACjC,EAAKF,cAAcG,QAAQ,EAAKrC,SAASC,MAAO,EAAKD,SAASI,QAC9D,EAAKgB,MAAMkB,YAAY,EAAKH,QAE5B,EAAKI,W,EAoBTjB,UAAY,SAAApG,GACR,EAAKA,OAAS,GACdA,EAAOzK,SAAQ,YAAoD,IAAD,EAAhD2C,EAAgD,EAAhDA,OAAQU,EAAwC,EAAxCA,KAAMH,EAAkC,EAAlCA,MAAO6O,EAA2B,EAA3BA,UAAc3Q,EAAa,qDAC9D,GAAKuB,EAAL,CAIA,IAHA,IAAMqP,EAAW,UAAM3O,EAAN,SACXqH,EAAQ,IAAI9M,EAAMoU,GAAa9O,EAAO6O,GAE5C,MAA2B5J,OAAO8J,QAAQ7Q,GAA1C,eAAmD,CAAC,IAAD,sBAAvC0C,EAAuC,KAAlCR,EAAkC,KAC/C,OAAQQ,GACJ,IAAK,WACD,IAAMqH,EAAW7H,EAAMjD,KAAI,SAAAsF,GAAC,OAAIA,GAAK,MACrC,EAAA+E,EAAM4F,UAASC,IAAf,oBAAsBpF,IACtB,MACJ,QACIT,EAAM5G,GAAOR,GAGzB,EAAKkH,MAAM/K,IAAIiL,GACf,EAAKD,OAAOjI,KAAKkI,Q,EAIzBwH,aAAe,kBAAM,EAAKzH,OAAOzK,SAAQ,SAAA0K,GAAK,OAAI,EAAKF,MAAM2H,OAAOzH,O,EAGpE0H,SAAW,WAAO,IAAD,IACP3R,EAAU,EAAKyO,UAAUC,KACzBtQ,EAAYX,YAAauC,GACzB4R,EAAWjV,YAAUyB,GAErBwQ,EAAW,UAAG,EAAKH,UAAUG,mBAAlB,aAAG,EAA4BxQ,UAC1CyT,EAAclV,YAAUiS,GAExBD,EAAU,UAAG,EAAKF,UAAUE,kBAAlB,aAAG,EAA2BvQ,UACxC0T,EAAcnV,YAAUgS,GAE9B,OAAO9R,QAAQkV,IAAI,CAACH,EAAUC,EAAaC,K,EAG/CE,WAAa,SAAA3R,GAAK,OAAI,EAAKiP,MAAMtQ,IAAIqB,I,EAErC4R,oBAAsB,WAClB,IAAM5R,EAAQ,EAAKmO,OAAOE,KAE1B,EAAK9M,SAAS8M,KAAO/M,YAActB,EAAO,EAAKwO,eAHvB,IAKhBnO,EAAiB,EAAK+I,MAAMpJ,MAA5BK,aACRG,YAAeR,EAAO,CAAEK,iBAExB,EAAKsR,WAAW3R,I,EAGpB6R,SAAW,WACP,IAAMlS,EAAU,EAAKyJ,MAAMpJ,MAAM3C,GACjC,EAAKyU,QAAU,EAAKC,UAAYC,IAChC,IAAMC,EAAoB,CACtBC,aAAcvS,EACdwH,SAAU6K,IACVG,WAAYxS,EACZuH,OAAQ8K,KAEZ,EAAKI,WAAWH,EAAmB,EAAK7I,MAAMpJ,Q,EAGlDqS,cAAgB,WACZ,EAAKT,sBACL,EAAKC,WAEL,IAAM7R,EAAQ,EAAKmO,OAAOE,KAC1BrO,EAAMsS,QAAUtS,EAAMwP,SAAS/N,QAC/BzB,EAAMuS,QAAUvS,EAAMwS,SAAS/Q,S,EAGnCgR,WAAa,WACT,EAAKJ,gBACL,EAAKK,iBACL,EAAKC,mBACL,EAAKC,yB,EAGTF,eAAiB,WAAO,IACZrS,EAAiB,EAAK+I,MAAMpJ,MAA5BK,aACR2N,EAAM9O,SAAQ,SAAAwD,GACV,IAAMM,EAAG,gBAAYN,GACfuK,EAAS,EAAKkB,OAAOnL,GAC3B,GAAKiK,EAAL,CAEA,IAAM4F,EAAa,EAAKzE,UAAUpL,GAC1BhF,EAAyB6U,EAAzB7U,YAAaN,EAAYmV,EAAZnV,QACrB8C,YAAeyM,EAAQ,CAAE5M,eAAcrC,gBACnCN,IAASuP,EAAOuF,SAASjP,GAAKvG,KAAKC,IAEvC,EAAKsE,SAASyB,GAAO1B,YAAc2L,EAAQ,EAAKuB,oB,EAIxDsE,aAAe,SAAC7F,EAAQvK,GACpB,IAAMqQ,EAAQ,iBAAarQ,EAAK,IAChC,EAAKyL,OAAOE,KAAKvP,UAAS,SAAAC,GAClBA,EAAMkB,OAAS8S,GAAsC,IAA1BhU,EAAMyK,SAAS1L,QAC1CiB,EAAMJ,IAAIsO,O,EAKtB0F,iBAAmB,WACf3E,EAAM9O,SAAQ,SAAAwD,GACV,IAAMM,EAAG,gBAAYN,GACfuK,EAAS,EAAKkB,OAAOnL,GACtBiK,GAEL,EAAK6F,aAAa7F,EAAQvK,O,EAIlCsQ,aAAe,SAAAtQ,GACX,IAAMM,EAAG,gBAAYN,GACf1C,EAAQ,EAAKmO,OAAOnL,GACrBhD,GAELA,EAAMkC,OAAOmP,OAAOrR,I,EAGxBiT,iBAAmB,kBAAMjF,EAAM9O,SAAQ,SAAAwD,GAAI,OAAI,EAAKsQ,aAAatQ,O,EAEjEwQ,YAAc,WAAO,IACTxN,EADQ,eACRA,KAGJ,EAAK0D,MAAM+J,QAAQtR,QAAU,EAAKuR,UAAY1N,EAAO,IAErD,EAAK2N,cAAcC,OACnB,EAAKlK,MAAMmK,iBAEf,IAAMC,GAAU,EAAKJ,QAAU,GAAK1N,EACpC,EAAK+N,OAASD,G,EAGlBE,a,sBAAe,8CAAAC,EAAA,2DAC0B,EAAKvK,MAAMF,UAAlC0K,EADH,EACHnW,KAAeqI,EADZ,EACYA,UAClB8N,EAFM,wDAIL5T,EAAQ,EAAKmO,OAAOE,KAJf,EAKuB9I,YAAiBqO,GALxC,mBAKJjO,EALI,KAKMC,EALN,KAMX,EAAKF,KAAOE,EAAc9H,OAE1B,EAAKsL,MAAMyK,cAAa,GAExB7T,EAAM8T,MAAQ,IAAIhX,iBAAqBkD,GACvC,EAAK8T,MAAQ9T,EAAM8T,MAEnB,EAAKV,QAAU,EACfpT,EAAM8T,MAAMhO,UAAYA,EACxB9F,EAAM8T,MAAMC,iBAAiB,WAAY,EAAKb,aAC9C,EAAKc,YAAcpO,EAAcrG,KAAI,SAAAoI,GAAG,MAAK,CACzC7B,UAAW6B,EAAI7B,UACfC,YAAa4B,EAAI5B,YACjBK,YAAauB,EAAIvB,gBAIf6N,EAActO,EAASpG,KAAI,SAAA2U,GAC7B,IAAMC,EAAI,UAAM7W,EAAN,gBAAuB4W,EAAvB,QACV,OAAO5X,YAAU6X,MAzBV,UA2Ba3X,QAAQkV,IAAIuC,GA3BzB,QA2BLG,EA3BK,OA6BX,EAAKC,WAAa,GAClBzO,EAAc1G,SAAQ,SAAAoV,GAAS,IACnBtO,EAAqBsO,EAArBtO,QAASC,EAAYqO,EAAZrO,QACXiD,EAAYjD,EACZmO,EAAUpO,GAASqO,WAAWlQ,MAC1B,SAAAwD,GAAG,OAAIA,EAAI1H,OAASgG,KAExBmO,EAAUpO,GAASqO,WAAW,GACpC,EAAKA,WAAW3S,KAAKwH,MAGzB,EAAKuK,OAAS,EACd,EAAKrK,MAAMyK,cAAa,GAzCb,4C,EA4CfU,gBAAkB,WACd,IAAMC,EAAY,EAAKrG,OAAOE,KAC9BmG,EAAUV,MAAMW,gBAFI,IAKZnC,EAAqBkC,EAArBlC,QAASC,EAAYiC,EAAZjC,QACjBiC,EAAUhF,SAASkF,KAAKpC,GACxBkC,EAAUhC,SAASkC,KAAKnC,GAPJ,MAUS,EAAKnJ,MAAMpJ,MAAhCkH,EAVY,EAUZA,OAAQC,EAVI,EAUJA,SAChB,EAAKD,OAASA,EACd,EAAKC,SAAWA,EAEhB,EAAK2M,MAAQ,KACb,EAAKO,WAAa,I,EA2BtBM,eAAiB,SAACC,EAAMC,GAAa,IACzBnG,EAAkBmG,EAAlBnG,MAAOG,EAAWgG,EAAXhG,OACX+F,EAAKlG,QAAUA,GAASkG,EAAK/F,SAAWA,IAE5C,EAAK8B,cAAcG,QAAQpC,EAAOG,GAClC,EAAKK,OAAO4F,OAASpG,EAAQG,EAC7B,EAAKK,OAAOQ,2B,EAGhBqF,iBAAmB,WACf,EAAKC,OAAS,GACd,EAAKC,YAAc,EAAKrE,OAAOsE,cAAc,IAExC,EAAK7B,gBACN,EAAKA,cAAgB,IAAI8B,cAAc,EAAKF,YAAa,CACrDG,SAAU,EAAKhM,MAAM+J,QAAQkC,QAEjC,EAAKhC,cAAciC,gBAAkB,SAAAC,GAAK,OACtC,EAAKP,OAAOtT,KAAK6T,EAAMC,OAC3B,EAAKnC,cAAcoC,OAAS,WACxB,EAAKrM,MAAMyK,cAAa,GACxB,IAAM6B,EAAc,IAAIC,KAAK,EAAKX,OAAQ,CACtCzS,KAAM,eAEJhG,EAAMqZ,IAAIC,gBAAgBH,GAC1B/B,EAAImC,SAASC,cAAc,KACjCpC,EAAEjH,MAAQ,gBACViH,EAAEqC,KAAOzZ,EACToX,EAAEsC,SAAW,iBACbH,SAASI,KAAKnF,YAAY4C,GAC1BA,EAAEwC,QACFxH,OAAOiH,IAAIQ,gBAAgB7Z,GAC3BuZ,SAASI,KAAKG,YAAY1C,KAIlC,EAAKvK,MAAMyK,cAAa,GAExB,EAAK3M,OAAS,EAAKkC,MAAMpJ,MAAMkH,OAC/B,EAAKC,SAAW,EAAKiC,MAAMpJ,MAAMmH,SAEjC,EAAKsM,OAAS,EACd,EAAKJ,cAAc/O,S,EAGvBgS,iBAAmB,SAAC1B,EAAMC,GACtB,IAAM1R,EAAiB0R,EAAQ1C,WACzB/O,EAAcwR,EAAKzC,WAEzB,GAAIhP,IAAmBC,EAAa,OAAO,EAJT,IAM1B/C,EAAiBwU,EAAjBxU,aACRgF,YAAgB,EAAK8I,OAAOE,KAAM,CAC9BhO,eACA+E,UAAWjC,IAEf,IAAME,EAASH,YAAuBC,EAAgBC,GAGtD,OAFA6B,YAAe,EAAKkJ,OAAOE,KAAMhL,IAE1B,G,EAeXkT,mBAAqB,SAAC3B,EAAMC,GACxB,IAAM1R,EAAiB0R,EAAQ3C,aACzB9O,EAAcwR,EAAK1C,aAEzB,GAAI/O,IAAmBC,EAAa,OAAO,EAJP,IAM5B/C,EAAiBwU,EAAjBxU,aACRiF,YAAkB,EAAK6I,OAAOE,KAAM,CAChChO,eACA+E,UAAWjC,IAEf,IAAME,EAASH,YAAuBC,EAAgBC,GAGtD,OAFA8B,YAAiB,EAAKiJ,OAAOE,KAAMhL,IAE5B,G,EAeXmT,kBAAoB,SAAC5B,EAAMC,GACvB,IAAM4B,EAAa,EAAKH,iBAAiB1B,EAAMC,GACzC6B,EAAe,EAAKH,mBAAmB3B,EAAMC,IAC/C4B,GAAcC,IACd,EAAK9D,yB,EAIb+D,iBAAmB,YAA2B,IAAxBzP,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC1B,EAAKD,OAASA,EACd,EAAKC,SAAWA,G,EAGpBiL,WAAa,SAACwC,EAAMC,GAChB,EAAK2B,kBAAkB5B,EAAMC,GAC7B,EAAK8B,iBAAiB9B,I,EAG1B+B,iBAAmB,WACf,IAAMpC,EAAY,EAAKrG,OAAOE,KAC9B,EAAKY,MAAMoC,OAAOmD,GAClBvW,YAAYuW,I,EAGhBqC,gB,uCAAkB,WAAOjC,EAAMC,GAAb,mBAAAlB,EAAA,yDACRhU,EAAUkV,EAAQxX,GACpBuX,EAAKvX,KAAOsC,EAFF,wBAGV,EAAKyJ,MAAMyK,cAAa,GAClB9V,EAAYX,YAAauC,GAJrB,SAKUrD,YAAUyB,GALpB,cAKJiC,EALI,OAOV,EAAKiT,mBACL,EAAK2D,mBAEL,EAAKzI,OAAOE,KAAOrO,EAEnB,EAAKqS,gBACL,EAAKM,mBACL,EAAKC,wBAEL,EAAKc,eAEL,EAAKtK,MAAMyK,cAAa,GAlBd,2BAsBd,EAAKzB,WAAWwC,EAAMC,GAtBR,4C,0DAyBlBiC,c,uCAAgB,WAAOlC,EAAMC,GAAb,SAAAlB,EAAA,sDACZ,EAAKvK,MAAMyK,cAAa,GACxB7F,EAAM9O,QAAN,uCAAc,WAAMwD,GAAN,yBAAAiR,EAAA,yDACJ3Q,EADI,gBACWN,GACjBkS,EAAK5R,KAAS6R,EAAQ7R,GAFhB,oDAKV,EAAKgQ,aAAatQ,GAClBzE,YAAY,EAAKkQ,OAAOnL,IAGnB6R,EAAQ7R,GATH,wBAUN,EAAKmL,OAAOnL,GAAO,KACnB,EAAKoL,UAAUpL,GAAO,GAEtB,EAAKzB,SAASyB,GAAO,KAbf,kCAkBV,EAAKoL,UAAUpL,GAAOxF,YAAkB,EAAK4L,MAAMpJ,MAAMgD,IAlB/C,EAmByB,EAAKoL,UAAUpL,GAA1CjF,EAnBE,EAmBFA,UAAWC,EAnBT,EAmBSA,YAnBT,UAsBU1B,YAAUyB,GAtBpB,QAsBJiC,EAtBI,OAuBV,EAAKmO,OAAOnL,GAAOhD,EAGXK,EAAiBwU,EAAjBxU,aACRG,YAAeR,EAAO,CAAEK,eAAcrC,gBAElC,EAAKoQ,UAAUpL,GAAKtF,UACpBsC,EAAMwS,SAASjP,GAAKvG,KAAKC,IAE7B,EAAKsE,SAASyB,GAAO1B,YAActB,EAAO,EAAKwO,eAC/C,EAAKsE,aAAa9S,EAAO0C,GACzB,EAAKkQ,wBAlCK,4CAAd,uDAoCA,EAAKxJ,MAAMyK,cAAa,GAtCZ,2C,0DAyChBkD,Y,uCAAc,WAAOnC,EAAMC,GAAb,SAAAlB,EAAA,yDACMtM,OAAOoC,KAAKmL,GAAMoC,MAC9B,SAAAhU,GAAG,OAAI4R,EAAK5R,KAAS6R,EAAQ7R,MAFvB,iEAMJ,EAAK6T,gBAAgBjC,EAAMC,GANvB,OAOV,EAAKiC,cAAclC,EAAMC,GAPf,2C,0DAUdoC,gBAAkB,SAACrC,EAAMC,GAAa,IAC1BpX,EAAoBoX,EAApBpX,KAAMqI,EAAc+O,EAAd/O,UACd,GAAI8O,EAAKnX,OAASA,EAGd,OAFAmX,EAAKnX,MAAQ,EAAK8W,uBAClB,EAAKb,eAILkB,EAAK9O,YAAcA,IACnB,EAAKgO,MAAMhO,UAAYA,I,EAI/BoR,oBAAsB,SAAAvO,GACLtB,OAAOoC,KAAK,EAAKlI,UAAU6F,QACpC,SAAApE,GAAG,OAAI,EAAKzB,SAASyB,MAEHzD,KAAI,SAAAyD,GAAG,OAAI,EAAKzB,SAASyB,MAAMpC,OAC5C1B,SAAQ,SAAAsC,GACbsB,YAAqBtB,EAASmH,O,EAItCwO,cAAgB,SAACvC,EAAMC,GACnB,GAAID,IAASC,EAAb,CAEA,EAAKrG,cAAgBqG,EACrB,IAAMuC,EAAc/P,OAAOoC,KAAKoL,GAASzN,QACrC,SAAApE,GAAG,OAAI4R,EAAK5R,KAAS6R,EAAQ7R,MAEjC,GAA2B,IAAvBoU,EAAYtZ,OAAhB,CAEA,IAAM6K,EAAS,IAAIsH,IAAImH,EAAY7X,KAAI,SAAAyD,GAAG,MAAI,CAACA,EAAK6R,EAAQ7R,QAC5D,EAAKkU,oBAAoBvO,M,EAG7B0O,sBAAwB,WACpB,IAAM7C,EAAY,EAAKrG,OAAOE,KACxBxP,EAAS,GACf2V,EAAU1V,UAAS,SAAAC,GACXA,EAAMC,QAAyB,YAAfD,EAAMkB,MAAoBpB,EAAO6C,KAAK3C,MAE9D,EAAK4B,UAAY9B,EAAOU,KAAI,SAAAJ,GAAI,OAAIA,EAAKE,YAAUuB,Q,EAGvD0W,gBAAkB,SAAAvN,GAAQ,OAAI,EAAKpJ,UAAUzB,SAAQ,SAAAI,GAAG,OAAIyK,EAASzK,O,EAErEiY,oBAAsB,WAAO,IACjBlX,EAAiB,EAAK+I,MAAMpJ,MAA5BK,aACFwU,EAAU,EAAKzL,MAAMoO,eACrBC,EAAU,sBACTC,KADS,YAETC,IAAetX,KAEhBuX,EACe,SAAjBvX,GAAmD,SAAxBwU,EAAQgD,YAEjC/P,EAAS8P,GAAkBpR,SAASqO,EAAQgD,aAC5CA,EAAcD,GAAkB/P,YAAkBC,GAExD,EAAKwP,iBAAgB,SAAAhY,GACjBwY,IAAmB5Y,SAAQ,SAAAiL,GACnBsN,EAAWtX,SAASgK,KACpB7K,EAAI6K,GAAS0K,EAAQ1K,OAI7B4N,IAAe7Y,SAAQ,SAAAiL,GACnB,GAAKsN,EAAWtX,SAASgK,GAAzB,CACA,IAAM6N,EAAenD,EAAQ1K,GAC7B7K,EAAI6K,GAAS,IAAIrN,QAAYkb,OAG5BnD,EAAQoD,aACL3Y,EAAIC,MAAKD,EAAIE,UAAYF,EAAIC,KACjCD,EAAIC,IAAM,MAGVsV,EAAQqD,cACR5Y,EAAI4Y,YAAcrD,EAAQqD,YAC1B5Y,EAAI0F,aAAc,GAGlB4S,IACAtY,EAAIuY,YAAcA,EAClBvY,EAAI0F,aAAc,O,EAK9B4N,sBAAwB,WACpB,EAAKyE,wBACL,EAAKE,uB,EAGTY,qBAAuB,SAACvD,EAAMC,GAAa,IAC/BxU,EAAiB,EAAK+I,MAAMpJ,MAA5BK,aACA4X,EAAyCpD,EAAzCoD,WAAYC,EAA6BrD,EAA7BqD,YAAaL,EAAgBhD,EAAhBgD,YAK3BO,EAJU,sBACTV,KADS,YAETC,IAAetX,KAEW+G,QAC7B,SAAA+C,GAAK,OAAIyK,EAAKzK,KAAW0K,EAAQ1K,MAG/BkO,EAAc,SAAAlO,GAAK,OAAIiO,EAAcjY,SAASgK,IAkCpD,GAhCwB2N,IAAmB1Q,OAAOiR,GAClCnZ,SAAQ,SAAAiL,GACpB,EAAKmN,iBAAgB,SAAAhY,GAAG,OAAKA,EAAI6K,GAAS0K,EAAQ1K,SAGlC4N,IAAe3Q,OAAOiR,GAC9BnZ,SAAQ,SAAAiL,GAChB,IAAM6N,EAAenD,EAAQ1K,GACvB/H,EAAQ,IAAItF,QAAYkb,GAC9B,EAAKV,iBAAgB,SAAAhY,GAAG,OAAKA,EAAI6K,GAAS/H,QAG1CwS,EAAKqD,aAAeA,GACpB,EAAKX,iBAAgB,SAAAhY,GACZ2Y,GAID3Y,EAAIC,IAAMD,EAAIE,iBACPF,EAAIE,YAJXF,EAAIE,UAAYF,EAAIC,IACpBD,EAAIC,IAAM,MAKdD,EAAI0F,aAAc,KAItB4P,EAAKsD,cAAgBA,GACrB,EAAKZ,iBAAgB,SAAAhY,GACjBA,EAAI4Y,YAAcA,EAClB5Y,EAAI0F,aAAc,KAItB4P,EAAKiD,cAAgBA,EAAa,CAClC,IAAIS,EAAS,KACb,GAAoB,SAAhBT,EAAwB,CACxB,IAAM/P,EAAStB,SAASqR,GACxBS,EAASzQ,YAAkBC,GAG/B,EAAKwP,iBAAgB,SAAAhY,GACjBA,EAAIuY,YAAcS,EAClBhZ,EAAI0F,aAAc,O,EAK9BuT,eAAiB,SAAC3D,EAAMC,GAAY,IAExBxU,EAAiBwU,EAAQ7U,MAAzBK,aACR,GAAIuU,EAAK5U,MAAMK,eAAiBA,EAI5B,OAHAG,YAAe,EAAK2N,OAAOE,KAAM,CAAEhO,sBAEnC,EAAKuS,wBAGT,EAAKuF,qBAAqBvD,EAAK4C,eAAgB3C,EAAQ2C,iB,EAG3DgB,aAAe,SAAC5D,EAAMC,GACdD,IAASC,IACT,EAAKzD,eACL,EAAKrB,UAAU8E,K,EAIvB4D,Y,uCAAc,WAAO7D,EAAMC,GAAb,mBAAAlB,EAAA,yDACMtM,OAAOoC,KAAKmL,GAAMoC,MAC9B,SAAAhU,GAAG,OAAI4R,EAAK5R,KAAS6R,EAAQ7R,MAFvB,oDAMS6R,EAAXhT,OANE,uBAQN,EAAK8O,cAAgB,EAAKD,SACpBgI,EAAY,EAAKhI,SAASG,WAChC,EAAK8H,UAAUD,GAVT,6BAcL,EAAK1I,SAASzR,IAAI,SAdb,kCAewB,+BAfxB,iBAeEqa,EAfF,EAeEA,YAGR,EAAK5I,SAASP,IAAI,QAASmJ,GAC3B,EAAKC,YAnBC,wBAoBH,EAAKA,YApBF,QAsBV,EAAKlI,cAAcG,QAAQ,EAAKrC,SAASC,MAAO,EAAKD,SAASI,QAtBpD,4C,0DAyBdgK,UAAY,WAAO,IAAD,EAC8B,EAAKzP,MAAM0P,MAA/CC,EADM,EACNA,QAAS3W,EADH,EACGA,MAAO4M,EADV,EACUA,QAASgK,EADnB,EACmBA,OAC3BJ,EAAc,EAAK5I,SAASiJ,IAAI,SAEtC,EAAKC,OAAS,IAAIN,EAAY,EAAKlI,SAAUqI,EAAS,CAAEC,WACxD,EAAKE,OAAOpI,QAAQ,EAAKrC,SAASC,MAAO,EAAKD,SAASI,QAEvD,IAAM6J,EAAY,EAAKQ,OAAOrI,WAC9B6H,EAAUhM,MAAMtK,MAAQA,EACxBsW,EAAUhM,MAAMyM,WAAanK,EAC7B,EAAK2J,UAAUD,GAEf,EAAK/H,cAAgB,EAAKuI,Q,EAQ9BP,UAAY,SAAAD,GAAc,IACd9H,EADa,eACbA,OACR,EAAKf,MAAMwG,YAAYzF,GACvB,EAAKf,MAAMkB,YAAY2H,GACvB,EAAK9H,OAAS8H,G,EAGlBU,YAAc,SAAAC,GAAO,IACTC,EAAgB,EAAKlQ,MAArBkQ,YACFlK,EAASkK,EAAcD,EAAKrc,KAAKC,GAAM,EAC7Cqc,GAAe,EAAKrK,MAAMsK,QAAQnK,I,EAGtC4B,QAAU,WACN,EAAKwI,QAAUC,sBAAsB,EAAKzI,SAE1C,IAAMqI,EAAK,EAAKtK,MAAM2K,WAItB,IAHA,EAAKN,YAAYC,GACjB,EAAKvF,OAAS,EAAKA,MAAMnL,OAAO0Q,GAE5B,EAAKjT,aAAe,EAAKA,YAAYtI,SACjB,EAAKgW,MAAMrN,MACJ,EAAKkT,eAAe,GACR,CACnC,EAAKA,eAAe1a,QADe,MAEN,EAAKmH,YAAYnH,QAAtCiI,EAF2B,EAE3BA,OAAQC,EAFmB,EAEnBA,SAChB,EAAKD,OAASA,EACd,EAAKC,SAAWA,EAGxB,EAAKwJ,cAAciJ,OAAO,EAAKlQ,MAAO,EAAKwF,S,yMA12B3CP,OAAOkL,IAAMC,KACbA,KAAK5L,YACL4L,KAAK1Q,MAAMyK,cAAa,G,SAGsBiG,KAAKxI,W,sCAA5CjD,E,KAAME,E,KAAaD,E,KAG1BwL,KAAK3L,OAAS,CAAEE,OAAME,cAAaD,cAG7B3O,EAAUma,KAAK1Q,MAAMpJ,MAAM3C,IAC7BqC,YAAeC,G,wBACXkK,YAAQlK,KACAU,EAAiByZ,KAAK1Q,MAAMpJ,MAA5BK,aADU,EAEM7C,YAAkB,GAAD,OAAImC,EAAJ,MAAjC3B,EAFU,EAEVA,YACRwC,YAAe6N,EAAM,CAAEhO,eAAcrC,iBAGzC8b,KAAKlI,sBAEL9R,YAASH,IAAYI,YAAesO,GAGpCyL,KAAK1Q,MAAMyK,cAAa,G,2BAG5BiG,KAAKrH,aAELqH,KAAK1Q,MAAMyK,cAAa,GAExBiG,KAAKpG,e,yLAGgBkB,G,uEACfC,EAAUiF,KAAK1Q,MA6BrB0Q,KAAKnF,eAAeC,EAAKnG,SAAUoG,EAAQpG,UAC3CqL,KAAK/C,YAAYnC,EAAK5U,MAAO6U,EAAQ7U,OACrC8Z,KAAK7C,gBAAgBrC,EAAK1L,UAAW2L,EAAQ3L,WAC7C4Q,KAAK3C,cAAcvC,EAAKpT,QAASqT,EAAQrT,SACzCsY,KAAKvB,eAAe3D,EAAMC,GAC1BiF,KAAKtB,aAAa5D,EAAKjL,OAAQkL,EAAQlL,QACvCmQ,KAAKrB,YAAY7D,EAAKkE,MAAOjE,EAAQiE,OAGjClE,EAAK5F,UAAY6F,EAAQ7F,UACzB8K,KAAK9K,QAAU6F,EAAQ7F,SAIvB6F,EAAQ1B,QAAQtR,SAAW+S,EAAKzB,QAAQtR,QACxCiY,KAAK/E,mBAGT+E,KAAKC,GAAKlF,EAAQrE,a,qJAIlBwJ,qBAAqBF,KAAKN,SAC1Bvb,YAAY6b,KAAKpQ,OACjBoQ,KAAKhG,MAAQ,KACbgG,KAAK/K,MAAQ,KACb+K,KAAK5K,OAAS,KACd4K,KAAKnK,SAAW,KAChBmK,KAAKpQ,MAAQ,KACboQ,KAAKpJ,SAAW,KAChBoJ,KAAK5J,WAAW+J,YAAYvb,UAC5Bob,KAAK5J,WAAWxR,UAChBob,KAAK5J,WAAa,KAClB4J,KAAKxJ,aAAa2J,YAAYvb,UAC9Bob,KAAKxJ,aAAa5R,UAClBob,KAAKxJ,aAAe,O,+BA0wBd,IAAD,OACL,OACI,qBACI4J,IAAK,SAAArO,GACD,EAAKgE,MAAQhE,O,uBA3rBtBsO,GACH,GAAIA,IAAYL,KAAKrJ,IAArB,CAEAqJ,KAAKrJ,IAAM0J,EACX,IAAMC,EAAc,IAAItd,UAKxB,GAJAgd,KAAKpJ,SAAS2J,QAAQD,GACtBN,KAAKpJ,SAAWyJ,EAAUL,KAAK5J,WAAa4J,KAAKxJ,aACjDwJ,KAAKpJ,SAASI,QAAQsJ,EAAY9W,EAAG8W,EAAY7W,IAE7CuW,KAAK1Q,MAAM0P,MAAMjX,OAArB,CAEAiY,KAAKnJ,cAAgBmJ,KAAKpJ,SAE1B,IAAMgI,EAAYoB,KAAKpJ,SAASG,WAChCiJ,KAAKnB,UAAUD,O,2BA4MRlF,GAAS,IAAD,OACfsG,KAAK1G,QAAUI,EADA,IAEPM,EAAUgG,KAAVhG,MACFQ,EAAOwF,KAAKzF,WAAWb,GAC7BM,EAAMW,gBACN,IAAMnM,EAASwL,EAAMwG,WAAWhG,GAC1BiG,EAAqBT,KAAK9F,YAAYR,GACpC1N,EAAwCyU,EAAxCzU,UAAWC,EAA6BwU,EAA7BxU,YAAaK,EAAgBmU,EAAhBnU,YAChC0T,KAAK1T,YAAcmB,YAAoBnB,EAAaL,GACpD+T,KAAKH,eAAiBG,KAAK1T,YAAY7G,KACnC,SAAAuH,GAAM,OAAK,EAAK0T,oBAAsB1T,EAAOL,KAAQ,OAGzD6B,EAAOmS,QAAQ3d,aAAkBiJ,GACjCuC,EAAOoS,mBAAoB,EAC3BpS,EAAOxC,UAAYA,EACnBwC,EAAO7B,KAAO,EAEdqN,EAAM6G,QAAQ,GACdb,KAAKU,oBAAsBlG,EAAKsG,SAChCtS,EAAOuS,S,2BAiEArH,GACP,GAAKA,EAAL,CAEA,IAAMsH,EAAShB,KAAKhI,QACpB,GAAI0B,IAAWsH,EAAf,CAEA,IAAMzX,EAASM,YAAmB6P,EAAQsH,GAC1C7V,YAAe6U,KAAK3L,OAAOE,KAAMhL,GAEjCyW,KAAKhI,QAAU0B,M,6BAoBNA,GACT,GAAKA,EAAL,CAEA,IAAMsH,EAAShB,KAAK/H,UACpB,GAAIyB,IAAWsH,EAAf,CAEA,IAAMzX,EAASM,YAAmB6P,EAAQsH,GAC1C5V,YAAiB4U,KAAK3L,OAAOE,KAAMhL,GAEnCyW,KAAK/H,UAAYyB,M,4BA4TTpR,GACR0X,KAAKpQ,MAAMyP,WACG,gBAAV/W,EAA0B,IAAItF,QAAYsF,GAAS,S,GA30BrC2Y,iBC/BpBC,G,MAAaC,gBAAK,kBAAM,yDAqEfC,MAnEf,SAAiB9R,GAAQ,IACbqF,EAAarF,EAAbqF,SAEF1L,EAAWoY,qBAAWvS,KAEXjJ,EAGboD,EAHA/C,MAAS3C,GALO,EAQhB0F,EAFA2G,MAAS4P,EANO,EAMPA,YAAyBtK,EANlB,EAMMmK,WAAqBiC,EAN3B,EAM2BA,mBAAoBzR,EAN/C,EAM+CA,OAN/C,EAQhB5G,EADA8W,IAAOwB,EAPS,EAOTA,eAAgB7K,EAPP,EAOOA,aAGrBlH,EAAW6R,qBAAWrS,KACtByK,EAAgB+H,uBAAY,WAM9BhS,EALe,CACX/G,KAAM,SACNS,IAAK,UACLR,MAAO,aAGZ,CAAC8G,IAEE/G,EAAO5C,EAAQ,GAEf4b,EACFC,IAAgB7b,IAAY6b,IAAgBjZ,GAE1CgN,EAAiB6L,EACjBA,EAAmB7b,KAAI,SAACiL,EAAGvJ,GAAJ,OACnBwa,MAAMjR,GAAK+Q,EAAsBta,GAAKuJ,KAE1C+Q,EAEAzL,EACF4L,IAAkB/b,IAAY+b,IAAkBnZ,GAEpD,OACI,sBAAKoZ,UAAU,UAAf,UACKN,GACG,qBACIM,UAAU,qBACVjP,MAAO,CAAEtK,MAAO0J,YAAakD,IAFjC,SAII,cAAC,WAAD,CAAU4M,SAAU,KAApB,SACI,cAACZ,EAAD,CAAYxY,MAAOO,EAASmG,UAAUpD,gBAIlD,cAAC,EAAD,CACI+N,aAAczK,EAAMyK,aACpBV,QAASpQ,EAASoQ,QAClBI,cAAeA,EACf9E,SAAUA,EACVc,eAAgBA,EAChBO,iBAAkBA,EAClB9P,MAAO+C,EAAS/C,MAChBwX,eAAgBzU,EAASyU,eACzBhW,QAASuB,EAASvB,QAClB0H,UAAWnG,EAASmG,UACpBoQ,YAAaA,EACb3P,OAAQA,EACRqF,QAASA,EACTwB,aAAcA,EACdsI,MAAO/V,EAAS+V,YC5D1B+C,EAAeZ,gBAAK,kBAAM,gEAC1Ba,EAAUb,gBAAK,kBAAM,gEAwFZc,MAtFf,YAAiC,IAAbC,EAAY,EAAZA,SACVC,EAAUC,cADY,EAGUC,mBAAS,SAHnB,mBAGrBC,EAHqB,KAGRC,EAHQ,OAIaC,aAAe,GAJ5B,mBAIrBC,EAJqB,KAIRC,EAJQ,OAKaF,aAAe,GAL5B,mBAKrBG,EALqB,KAKRC,EALQ,OAMMP,oBAAS,GANf,mBAMrBQ,EANqB,KAMV9I,EANU,OAOYsI,oBAAS,GAPrB,mBAOrBS,EAPqB,KAOPC,EAPO,KAStBrQ,EAAesQ,iBAAO,MAEjBC,EACP5B,qBAAWvS,KADXiR,IAAOkD,aAGLC,EAAYF,mBAdU,EAeIX,mBAAS,CACrCzN,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,cAjBS,mBAerBL,EAfqB,KAeXwO,EAfW,KAoB5BC,qBAAU,WACN,IAAM5c,EAAS0b,EAASmB,SAAS1X,MAAM,KAMvC,OALAuE,YAAmB1J,GACnBuc,GAAgB,GAEhBlO,OAAOoF,iBAAiB,SAAUqJ,GAE3B,WACHzO,OAAO0O,oBAAoB,SAAUD,MAE1C,CAACpB,EAASmB,WAEb,IAAMC,EAAqB,WACvB,IAAMvO,EAASmO,EAAUnI,QAAQyI,aAC3B5O,EAAQsO,EAAUnI,QAAQ0I,YAChCN,EAAY,CAAEvO,QAAOG,YASzB,OACI,qCACK8N,GAAa,qBAAKhB,UAAWM,EAAQuB,WAAxB,wBACd,sBAAK7B,UAAWM,EAAQwB,KAAxB,UACI,eAAC,WAAD,CAAU7B,SAAU,KAApB,UACI,cAAC8B,EAAA,EAAD,IACA,cAAC7B,EAAD,CACI8B,KAAMvB,EACN5P,aAAcA,EAAaqI,QAC3B+I,KAAMnB,EACNC,kBAAmBA,IAEtBE,GAAgBG,GACb,qCACI,wBACIhQ,QAASyP,EACTb,UAAWM,EAAQ4B,kBAFvB,SAII,cAAC,IAAD,MAGJ,cAAC/B,EAAD,CACIU,kBAAmBA,EACnBoB,KAAMrB,EACNuB,YA9BR,SAACH,EAAMI,GACvB1B,EAAesB,GACfnR,EAAaqI,QAAUkJ,EACvBrB,aAgCSE,GACG,sBAAM1C,IAAK8C,EAAWrB,UAAWM,EAAQ+B,QAAzC,SACI,cAAC,EAAD,CACInK,aAAcA,EACdpF,SAAUA,a,MC3E/B,IAAMnR,EAAY2gB,YAEVC,IAZf,WACI,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOtE,OAAQ,SAAAuE,GAAU,OAAI,cAAC,EAAD,eAAcA,a,mDCD5C7B,IARf,WAA0C,IAAlB8B,EAAiB,0DACXjC,mBAASiC,GADE,mBAC9B/V,EAD8B,KACvBgW,EADuB,KAE/BhT,EAAciQ,uBAAY,WAC5B+C,GAAS,SAAAhW,GAAK,OAAKA,OACpB,CAACgW,IACJ,MAAO,CAAChW,EAAOgD,K,gCCsBJiT,IA7BI,CACfC,WAAY,CAAEjb,EAAG,KAAOC,GAAI,OAC5Bib,WAAY,CAAElb,EAAG,KAAOC,GAAI,OAC5Bkb,WAAY,CAAEnb,EAAG,KAAOC,GAAI,OAC5Bmb,WAAY,CAAEpb,EAAG,KAAOC,GAAI,OAC5Bob,WAAY,CAAErb,EAAG,IAAMC,GAAI,KAC3Bqb,WAAY,CAAEtb,EAAG,IAAMC,GAAI,KAC3Bsb,WAAY,CAAEvb,EAAG,IAAMC,EAAG,KAC1Bub,WAAY,CAAExb,EAAG,IAAMC,EAAG,KAC1Bwb,WAAY,CAAEzb,EAAG,IAAMC,EAAG,KAC1Byb,WAAY,CAAE1b,EAAG,IAAMC,GAAI,KAC3B0b,WAAY,CAAE3b,EAAG,IAAMC,EAAG,KAC1B2b,WAAY,CAAE5b,EAAG,KAAOC,GAAI,OAC5B4b,WAAY,CAAE7b,EAAG,IAAMC,EAAG,KAC1B6b,WAAY,CAAE9b,EAAG,KAAOC,GAAI,OAC5B8b,WAAY,CAAE/b,EAAG,IAAMC,EAAG,KAC1B+b,WAAY,CAAEhc,EAAG,IAAMC,EAAG,KAC1Bgc,WAAY,CAAEjc,EAAG,IAAMC,GAAI,KAC3Bic,WAAY,CAAElc,EAAG,KAAOC,EAAG,KAC3Bkc,WAAY,CAAEnc,EAAG,IAAMC,EAAG,KAC1Bmc,WAAY,CAAEpc,EAAG,IAAMC,GAAI,IAC3Boc,WAAY,CAAErc,EAAG,IAAMC,GAAI,KAC3Bqc,WAAY,CAAEtc,EAAG,KAAOC,GAAI,OAC5Bsc,WAAY,CAAEvc,EAAG,KAAOC,GAAI,OAC5Buc,WAAY,CAAExc,EAAG,KAAOC,GAAI,OAC5Bwc,WAAY,CAAEzc,EAAG,KAAOC,GAAI,OAC5Byc,WAAY,CAAE1c,EAAG,KAAOC,GAAI,OAC5B0c,WAAY,CAAE3c,EAAG,KAAOC,GAAI,S,ogCC3BnB2c,EAAe,QACfC,EAAiB,UAEjBnO,EAAmB,IAEnBoO,EAAU,wCAIVC,EAAmB,CAC5BC,UAAW,CACPrgB,KAAM,YACNsC,KAAM,UACNge,SAAS,GAEbtI,WAAY,CACRhY,KAAM,UACNsC,KAAM,UACNge,SAAS,GAEb5d,YAAa,CACT1C,KAAM,cACNsC,KAAM,UACNge,SAAS,GAEbrI,YAAa,CACTjY,KAAM,eACNsC,KAAM,UACNge,SAAS,GAEbne,MAAO,CACHnC,KAAM,QACNsC,KAAM,QACNge,QAAS,WAEbC,SAAU,CACNvgB,KAAM,WACNsC,KAAM,QACNge,QAAS,WAEble,QAAS,CACLpC,KAAM,UACNsC,KAAM,aACNge,QAAS,EACTE,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVC,kBAAmB,CACf3gB,KAAM,qBACNsC,KAAM,aACNge,QAAS,EACTE,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVE,SAAU,CACN5gB,KAAM,WACNsC,KAAM,QACNge,QAAS,WAEbO,UAAW,CACP7gB,KAAM,YACNsC,KAAM,aACNge,QAAS,EACTE,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVI,UAAW,CACP9gB,KAAM,YACNsC,KAAM,aACNge,QAAS,EACTE,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVK,UAAW,CACP/gB,KAAM,YACNsC,KAAM,SACNge,QAAS,GACTE,IAAK,EACLC,IAAK,IACLC,KAAM,GAEV9I,YAAa,CACT5X,KAAM,eACNsC,KAAM,SACNge,QAAS,OACTU,QAAS,CAAC,OAAQ,UAAW,UAAW,UAAW,aAI9CnJ,EAAqB,CAC9B,cACA,UACA,YACA,oBACA,YACA,YACA,aAGSC,EAAiB,CAAC,QAAS,WAAY,YAE9CmJ,EAAmB,GACzB7Z,OAAOoC,KAAK4W,GAAkBnhB,SAAQ,SAAA8D,GAClCke,EAAiBle,GAAOqd,EAAiBrd,GAAKud,WAGlD,IAkBaY,EAAW,CACpB,aACA,wEAGSzY,EAAkB,CAC3B1I,MAAO,CACHK,aAAc,QACdhD,GAAI,aACJ6D,QAAS,aACTiR,WAAY,aACZjL,OAAQ,IACRgL,aAAc,aACd/K,SAAU,IACVoH,YAAa,GACbD,WAAY,IAEhBkJ,eAAe,eAAM0J,GACrBxX,MAAO,CACH4P,YAAa,EACbH,WAAY,UACZiC,mBAAoB,KACpBzR,OAxCc,CAClB,CACIyX,QAAS,IACT7e,KAAM,UACNH,MAAO,UACPP,QAAQ,EACRoP,UAAW,GAEf,CACImQ,QAAS,IACT7e,KAAM,cACNH,MAAO,UACPP,QAAQ,EACR2N,SAAU,CAAC,GAAI,EAAG,KAClByB,UAAW,MA4Bf/H,UAAW,CACPzL,KAlJW,qBAmJXqI,UAAW,GAEf+T,IAAK,CACDwH,YAAa,WACbtE,cAAc,EACd1B,gBAAgB,EAChB7K,cAAc,GAElBhP,QAAS,CACLK,QAAQ,EACRM,KAAM,EACNC,MAAO,UACPC,QAAS,GAEb8Q,QAAS,CACLtR,QAAQ,EACRyf,gBAAiB,GACjBjM,MAAO,IAEXyD,MAAO,CACHjX,QAAQ,EACRkX,QAASoI,EAAS,GAClBnI,QAAQ,EACR5W,MAAO,UACP4M,QAAS,YAIJvE,EAAU,CACnBpN,GAAI,CAAE+G,MAAO,QAASpB,IAAK,MAC3Bue,GAAI,CAAEnd,MAAO,QAASpB,IAAK,cAC3Bwe,GAAI,CAAEpd,MAAO,QAASpB,IAAK,UAC3Bye,GAAI,CAAErd,MAAO,QAASpB,IAAK,gBAC3B0e,GAAI,CAAEtd,MAAO,QAASpB,IAAK,YAC3B2e,GAAI,CAAEvd,MAAO,QAASpB,IAAK,eAC3B4e,GAAI,CAAExd,MAAO,QAASpB,IAAK,cAC3B6e,GAAI,CAAEzd,MAAO,QAASpB,IAAK,cAC3B8e,IAAK,CAAE1d,MAAO,QAASpB,IAAK,sBAC5B+e,GAAI,CAAE3d,MAAO,YAAapB,IAAK,aAC/Bgf,OAAQ,CAAE5d,MAAO,MAAOpB,IAAK,kBAC7B+Z,aAAc,CAAE3Y,MAAO,MAAOpB,IAAK,gBACnCif,YAAa,CAAE7d,MAAO,UAAWpB,IAAK,UACtC+W,GAAI,CAAE3V,MAAO,MAAOpB,IAAK,gBACzBkf,IAAK,CAAE9d,MAAO,QAASpB,IAAK,eAC5Bmf,GAAI,CAAE/d,MAAO,YAAapB,IAAK,SAGtBof,EAAY,CAAC,QAAS,OAAQ,UAAW,QAAS,YAElD1K,EAAkB,CAC3B,cACA,UACA,YACA,aACA,SAGSC,EAAiB,CAC1B0K,MAAO,GACPC,KAAM,CAAC,WAAY,oBAAqB,eACxCC,QAAS,CAAC,WAAY,qBACtBC,MAAO,CACH,WACA,oBACA,WACA,YACA,eAEJC,SAAU,CACN,WACA,oBACA,YACA,YACA,gBAIKtV,EAAc,CACvBuV,MAAO,MACPC,MAAO,MACPC,OAAQ,MACRC,IAAK,MACLC,MAAO,MACPC,IAAK,MACLC,KAAM,MACNC,MAAO,MACPC,WAAY,OAGHC,EAAc,CACvB,QACA,QACA,SACA,MACA,QACA,MACA,OACA,QACA,cAGS/V,EAAc,CACvBgW,KAAM,GACNC,OAAQ,IAGC3V,EAAe,CACxBmV,IAAK,EACLE,IAAK,EACLE,MAAO,EACPL,OAAQ,EACRD,MAAO,EACPG,MAAO,EACPE,KAAM,EACNN,MAAO,GAGE5U,EAAY,CACrB+U,IAAK,EACLE,IAAK,EACLE,MAAO,EACPL,OAAQ,EACRD,MAAO,EACPG,MAAO,EACPE,KAAM,EACNN,MAAO,GAGEY,EAAU,CACnBC,OAAQ,CAAC,IAAK,IAAK,KACnBC,QAAS,CAAC,QAAS,QAAS,OAAQ,QAAS,UAC7CvW,OAAQ,CACJ,QACA,QACA,SACA,MACA,QACA,MACA,OACA,QACA,eAIKwW,EAAiB,CAC1BF,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAClCC,QAAS,CAAC,QAAS,QAAS,OAAQ,QAAS,SAAU,QACvDvW,OAAQ,CACJ,QACA,QACA,SACA,MACA,QACA,MACA,OACA,QACA,eAIKyW,EAAiB,CAC1BhE,WAAY,eAGH7f,EAAqB,IAAIzB,IAAI,CACtC,aACA,aACA,aACA,aACA,aACA,aACA,eAGSulB,EAAW,CACpBC,MAAO,UACPC,MAAO,UACPC,KAAM,UACNC,MAAO,WAGE5U,EAAa,CACtBC,MAAO,GACPE,IAAK,IACLD,KAAM,KAGGmM,EAAkB,CAC3BwI,EAAG,CAAC,EAAG,GAAK,KACZC,EAAG,CAAC,EAAG,GAAK,GACZC,EAAG,CAAC,EAAG,EAAG,GACV7X,EAAG,CAAC,EAAG,GAAK,GACZ8X,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,GAAK,GACZC,EAAG,CAAC,EAAG,GAAK,GACZlY,EAAG,CAAC,EAAG,EAAG,IAEVmY,WAAY,CAAC,EAAG,GAAK,MACrBC,WAAY,CAAC,EAAG,EAAG,IACnBC,WAAY,CAAC,EAAG,EAAG,IACnBC,SAAU,CAAC,EAAG,GAAK,GACnBC,YAAa,CAAC,EAAG,EAAG,GACpBC,SAAU,CAAC,EAAG,GAAK,GACnBC,SAAU,CAAC,GAAI,GAAI,KACnBC,SAAU,CAAC,EAAG,EAAG,GAEjBC,MAAO,CAAC,EAAG,EAAG,IAGLpJ,EAAoB,CAC7BsI,EAAG,CAAC,EAAG,GAAK,GACZC,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,EAAG,GACV7X,EAAG,CAAC,EAAG,EAAG,GACV8X,EAAG,CAAC,EAAG,GAAK,GACZC,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,EAAG,GACVlY,EAAG,CAAC,EAAG,EAAG,GAEVoY,WAAY,CAAC,EAAG,EAAG,GACnBC,WAAY,CAAC,EAAG,EAAG,GACnBE,YAAa,CAAC,EAAG,EAAG,GACpBE,SAAU,CAAC,EAAG,GAAI,GAClBC,SAAU,CAAC,EAAG,EAAG,GAEjBC,MAAO,CAAC,EAAG,GAAK,IAGPhhB,EAAa,CACtBihB,MAAO,CAAEzhB,EAAG,EAAGC,EAAG,GAClByhB,MAAO,CAAE1hB,EAAG,EAAGC,EAAG,GAClB0hB,MAAO,CAAE3hB,EAAG,EAAGC,EAAG,GAClB2hB,MAAO,CAAE5hB,EAAG,EAAGC,EAAG,GAClB4hB,MAAO,CAAE7hB,EAAG,EAAGC,EAAG,GAClB6hB,MAAO,CAAE9hB,EAAG,EAAGC,GAAI,GACnB8hB,MAAO,CAAE/hB,EAAG,EAAGC,GAAI,GACnB+hB,MAAO,CAAEhiB,EAAG,EAAGC,GAAI,GACnBgiB,MAAO,CAAEjiB,EAAG,EAAGC,GAAI,IAGV0H,EAAa,CACtB8W,GAAI,CAAE/e,IAAK,YAAamI,aAAc,GACtCgB,EAAG,CAAEnJ,IAAK,cAAemI,aAAc,IAG9Bqa,EAAc,CACvB,yBACA,wBACA,wBACA,e,gCCnZJ,4BAIMC,EAAcvF,IACdwF,EAAWvF,IAEXjE,EAAYyJ,aAAW,SAAAC,GAAK,MAAK,CACnCnI,KAAM,CACFoI,QAAS,QACTnX,MAAO,QACPG,OAAQ,SAEZiX,OAAQ,CACJpX,MAAO+W,EACPM,UAAW,UAEfC,YAAa,CACTC,WAAY,SACZC,gBAAiBR,EACjBS,gBAAgB,OAAD,OAAStE,IAAT,KAEfuE,eAAgB,QAChBC,mBAAoB,SACpB3X,MAAO+W,EACP,WAAY,CACRa,aAAc,WAGtBtI,QAAS,CACLnP,OAAQ,QACRH,MAAO,QACP6X,QAAS,GAEb1I,kBAAmB,CACfrO,SAAU,WACVgX,IAAK,EACLC,KAAM,EACNC,OAAQ,OACRrkB,QAAS,MACTskB,aAAc,UACdC,WAAY,uBACZV,gBAAiB,UACjBW,OAAQ,UACR,UAAW,CACPxkB,QAAS,MAGjBmb,WAAY,CACRhO,SAAU,WACVsX,OAAQ,OACRpY,MAAO,QACPG,OAAQ,QACRgX,QAAS,OACTkB,eAAgB,SAChBd,WAAY,SACZ7jB,MAAO,QACP4kB,SAAU,UACVd,gBAAiB,uBAIVhK,O,gCC9DA,QAA0B,yC,2JCYrBvR,QACW,cAA7BgE,OAAOqN,SAASiL,UAEe,UAA7BtY,OAAOqN,SAASiL,UAEhBtY,OAAOqN,SAASiL,SAASC,MACvB,2DCZNC,IAASvN,OACL,cAAC,IAAD,UACI,cAACsE,EAAA,EAAD,MAEJpI,SAASsR,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.126d279f.chunk.js","sourcesContent":["import * as THREE from \"three\";\r\nimport { fbxSource } from \"./App\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport { idxOffsets, incompatibleModels } from \"./consts\";\r\nimport textureOffsets from \"./data/face_offset\";\r\n\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { callbackOnEach } from \"./helpers\";\r\n\r\nimport outlineFragShader from \"./shader/outlineFragShader\";\r\nimport outlineVertShader from \"./shader/outlineVertShader\";\r\n\r\nexport const loadModel = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new FBXLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const loadTexture = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new THREE.TextureLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const createInvisibleFloor = () => {\r\n    const floorGeometry = new THREE.PlaneBufferGeometry(0.1, 0.1);\r\n    floorGeometry.rotateX(Math.PI / 2);\r\n    const floorMaterial = new THREE.MeshBasicMaterial();\r\n    floorMaterial.visible = false;\r\n    return new THREE.Mesh(floorGeometry, floorMaterial);\r\n};\r\n\r\nexport const getModelPath = id => `${fbxSource}/fbx/${id}/${id}.fbx`;\r\n\r\nexport const getTexturePath = id => `${fbxSource}/fbx/${id}/${id}.png`;\r\n\r\nexport const analyzeWeaponCode = code => {\r\n    if (!code) return \"\";\r\n    const flipped = code.endsWith(\"b\");\r\n    const weaponCode = code.substring(0, code.length - 1);\r\n    const modelPath = getModelPath(weaponCode);\r\n    const texturePath = getTexturePath(weaponCode);\r\n\r\n    return { modelPath, texturePath, flipped };\r\n};\r\n\r\nexport const disposeItem = item => {\r\n    if (!item) return;\r\n\r\n    const disposedList = new Set();\r\n\r\n    const notDisposed = object => !disposedList.has(object.uuid);\r\n\r\n    const needToDispose = object => object && notDisposed(object);\r\n\r\n    const disposeObject = object => {\r\n        disposedList.add(object.uuid);\r\n        object.dispose();\r\n    };\r\n    const dispose = object => {\r\n        if (needToDispose(object)) disposeObject(object);\r\n    };\r\n    const disposeMaterial = object => {\r\n        callbackOnEach(object.material, mat => {\r\n            dispose(mat.map);\r\n            dispose(mat.backupMap);\r\n            dispose(mat);\r\n        });\r\n    };\r\n\r\n    const meshes = [];\r\n    item.traverse(child => child.isMesh && meshes.shift(child));\r\n\r\n    meshes.forEach(mesh => {\r\n        disposeMaterial(mesh);\r\n        dispose(mesh.geometry);\r\n    });\r\n};\r\n\r\nexport const isSimpleViewer = modelId =>\r\n    !modelId.startsWith(\"c\") ||\r\n    modelId.endsWith(\"_h\") ||\r\n    incompatibleModels.has(modelId);\r\n\r\nexport const isDragon = modelId =>\r\n    modelId.startsWith(\"d\") || modelId === \"smith\";\r\n\r\n// Hide all eye and mouth that's not mEye_01 or mMouth_01\r\nexport const initDragonFace = model => {\r\n    model.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const nameRegex = /m[A-Z].*_/m;\r\n        const { name } = child;\r\n        if (nameRegex.test(name)) {\r\n            child.visible = name.includes(\"01\");\r\n        }\r\n    });\r\n};\r\n\r\nconst createNewMaterial = (materialType, params) => {\r\n    const matType = `Mesh${materialType}Material`;\r\n    return new THREE[matType](params);\r\n};\r\n\r\nexport const changeMaterial = (target, { materialType, texturePath }) => {\r\n    if (!target) return;\r\n    target.traverse(child => {\r\n        if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n        const checkParam = `isMesh${materialType}Material`;\r\n        const materials = [child.material].flat();\r\n        const matIsArray = Array.isArray(child.material);\r\n\r\n        if (materials.every(mat => mat[checkParam]) && !texturePath) return;\r\n\r\n        materials.forEach((mat, i) => {\r\n            const texture = texturePath\r\n                ? new THREE.TextureLoader().load(texturePath)\r\n                : materials[i].map;\r\n\r\n            if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n\r\n            const materialParams = {\r\n                map: texture,\r\n                skinning: true,\r\n            };\r\n            const newMaterial = createNewMaterial(materialType, materialParams);\r\n            newMaterial.name = mat.name;\r\n            if (mat.backupMap) newMaterial.backupMap = mat.backupMap;\r\n\r\n            if (texturePath && materials[i].map) {\r\n                materials[i].map.dispose();\r\n            }\r\n            materials[i].dispose();\r\n\r\n            if (matIsArray) {\r\n                child.material[i] = newMaterial;\r\n            } else {\r\n                child.material = newMaterial;\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n// Add outline to object and return reference to outlines\r\nexport const createOutline = (object, params) => {\r\n    if (!object) return;\r\n    const outlines = []; // return value\r\n    object.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const outline = child.clone();\r\n        outlines.push(outline);\r\n\r\n        const newMaterial = createOutlineMaterial(params);\r\n        replaceMaterial(outline, newMaterial);\r\n        outline.visible = params.enable;\r\n        outline.name = \"outline\";\r\n\r\n        if (child.isSkinnedMesh) {\r\n            outline.bind(child.skeleton, child.bindMatrix);\r\n        }\r\n        child.parent.add(outline);\r\n    });\r\n    return outlines;\r\n};\r\n\r\nconst createOutlineMaterial = ({ size, color, opacity }) => {\r\n    const uniforms = {\r\n        size: { type: \"float\", value: size },\r\n        color: { tyle: \"vec3\", value: new THREE.Color(color) },\r\n        opacity: { type: \"float\", value: opacity },\r\n    };\r\n\r\n    const material = new THREE.ShaderMaterial({\r\n        skinning: true,\r\n        side: THREE.BackSide,\r\n        transparent: true,\r\n        uniforms,\r\n        fragmentShader: outlineFragShader,\r\n        vertexShader: outlineVertShader,\r\n    });\r\n    return material;\r\n};\r\n\r\nexport const applyOutlineSettings = (outline, settings) => {\r\n    if (!outline || !settings) return;\r\n\r\n    const { material } = outline;\r\n    settings.forEach((value, key) => {\r\n        switch (key) {\r\n            case \"enable\":\r\n                outline.visible = value;\r\n                break;\r\n            case \"color\":\r\n                callbackOnEach(\r\n                    material,\r\n                    mat => (mat.uniforms.color.value = new THREE.Color(value))\r\n                );\r\n                break;\r\n            default:\r\n                callbackOnEach(\r\n                    material,\r\n                    mat => (mat.uniforms[key].value = value)\r\n                );\r\n        }\r\n    });\r\n};\r\n\r\n// replace material of an object\r\nconst replaceMaterial = (object, newMaterial) => {\r\n    const { material } = object;\r\n    // dispose old material\r\n    callbackOnEach(material, mat => {\r\n        // obj.map?.dispose?.()\r\n        if (mat.map) mat.map.dispose();\r\n        mat.dispose();\r\n    });\r\n    // apply new material\r\n    const matIsArray = Array.isArray(object.material);\r\n    object.material = matIsArray\r\n        ? new Array(object.material.length).fill(newMaterial)\r\n        : newMaterial;\r\n};\r\n\r\nexport const calculateTextureOffset = (currentTexture, prevTexture) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentTexture !== prevTexture) {\r\n        const prevOffset = textureOffsets[prevTexture] || { x: 0, y: 0 };\r\n        const currentOffset = textureOffsets[currentTexture] || { x: 0, y: 0 };\r\n\r\n        offset.x = currentOffset.x - prevOffset.x;\r\n        offset.y = currentOffset.y - prevOffset.y;\r\n    }\r\n    return offset;\r\n};\r\n\r\nexport const calculateIdxOffset = (currentIdx, prevIdx) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentIdx !== prevIdx) {\r\n        const prevOffset = idxOffsets[`face${prevIdx}`];\r\n        const currentOffset = idxOffsets[`face${currentIdx}`];\r\n\r\n        offset.x = currentOffset.x - prevOffset.x;\r\n        offset.y = currentOffset.y - prevOffset.y;\r\n    }\r\n    return offset;\r\n};\r\n\r\nconst applyOffset = part => (target, offset) => {\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { start, count } = targetGroup;\r\n        const end = start + count;\r\n        const uv = child.geometry.attributes.uv;\r\n        for (let i = start; i < end; i++) {\r\n            const u = uv.getX(i) + 0.25 * offset.x;\r\n            const v = uv.getY(i) + 0.25 * offset.y;\r\n            uv.setXY(i, u, v);\r\n        }\r\n        uv.needsUpdate = true;\r\n    });\r\n};\r\n\r\nexport const applyEyeOffset = applyOffset(\"Eye\");\r\nexport const applyMouthOffset = applyOffset(\"Mouth\");\r\n// export const applyBodyOffset = applyOffset(\"BodyAll\");\r\n\r\nconst applyTexture = part => (target, { materialType, textureId }) => {\r\n    const texturePath = getTexturePath(textureId);\r\n    const texture = new THREE.TextureLoader().load(texturePath);\r\n    texture.encoding = THREE.sRGBEncoding;\r\n\r\n    const materialParams = {\r\n        map: texture,\r\n        skinning: true,\r\n    };\r\n    const newMaterial = createNewMaterial(materialType, materialParams);\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { materialIndex } = targetGroup;\r\n        newMaterial.name = child.material[materialIndex].name;\r\n\r\n        child.material[materialIndex] = newMaterial;\r\n    });\r\n};\r\n\r\nexport const applyEyeTexture = applyTexture(\"Eye\");\r\nexport const applyMouthTexture = applyTexture(\"Mouth\");\r\n// export const applyBodyTexture = applyTexture(\"BodyAll\");\r\n\r\n// Chain Code is invalid if starts with the character \"+\"\r\nexport const analyzeChainCode = code => {\r\n    if (!code) return [\"\", \"\"];\r\n    const aniCodes = code.split(\">\");\r\n    const nAni = aniCodes.length;\r\n    const fileList = [];\r\n    const animationList = [];\r\n    for (let i = 0; i < nAni; i++) {\r\n        let timeScale = 1,\r\n            repetitions = 1,\r\n            fileIdx = null,\r\n            aniName = null,\r\n            fileName = null,\r\n            details,\r\n            currentAni = {},\r\n            faceChanges = [];\r\n        const currentParts = aniCodes[i].split(\"+\");\r\n        const fromModelFile = currentParts.length === 1;\r\n        if (fromModelFile) {\r\n            details = currentParts[0];\r\n        } else {\r\n            [fileName, details] = currentParts;\r\n            fileIdx = fileList.length - 1;\r\n        }\r\n        if (fileName) {\r\n            fileIdx = fileList.length;\r\n            fileList.push(fileName);\r\n        }\r\n        if (details.includes(\"&\")) {\r\n            const [name, ...settings] = details.split(\"&\");\r\n            aniName = name;\r\n            for (let setting of settings) {\r\n                const [key, value] = setting.split(\"=\");\r\n                if (key === \"ts\") {\r\n                    timeScale = parseFloat(value);\r\n                }\r\n                if (key === \"r\") {\r\n                    repetitions = value === \"inf\" ? Infinity : parseInt(value);\r\n                }\r\n                if (key.includes(\"-\")) {\r\n                    const [part, time] = key.split(\"-\");\r\n                    const faceMod = { time: parseFloat(time) };\r\n                    const indexName = `${part === \"e\" ? \"eye\" : \"mouth\"}Idx`;\r\n                    faceMod[indexName] = value;\r\n                    faceChanges.push(faceMod);\r\n                }\r\n            }\r\n        } else {\r\n            aniName = details;\r\n        }\r\n        currentAni = {\r\n            fileIdx,\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            faceChanges: processFaceChanges(faceChanges),\r\n        };\r\n        animationList.push(currentAni);\r\n    }\r\n    return [fileList, animationList];\r\n};\r\n\r\nexport const processFaceChanges = faceChanges => {\r\n    if (!faceChanges.length) return faceChanges;\r\n\r\n    const sorted = faceChanges.sort(change => change.time);\r\n    const timeStamps = new Set(faceChanges.map(change => change.time));\r\n    if (faceChanges.length === timeStamps.size) {\r\n        sorted.forEach(change => {\r\n            change.id = uuid();\r\n        });\r\n        return sorted;\r\n    }\r\n\r\n    const simplified = [];\r\n    timeStamps.forEach(time => {\r\n        let output = { time, id: uuid(), eyeIdx: \"\", mouthIdx: \"\" };\r\n        const changes = sorted.filter(change => change.time === time);\r\n        changes.forEach(change => (output = Object.assign(output, change)));\r\n        simplified.push(output);\r\n    });\r\n    return simplified;\r\n};\r\n\r\nexport const getFaceChangesArray = (faceChanges, repetitions) => {\r\n    if (!faceChanges) return [];\r\n    if (repetitions === 1) return [...faceChanges];\r\n    // [0, 100, 200,...]\r\n    const timeOffset = new Array(repetitions).fill().map((_, i) => i * 100);\r\n\r\n    const offsetFaceChanges = offset =>\r\n        faceChanges.map(({ time, id, ...others }) => ({\r\n            ...others,\r\n            time: time + offset,\r\n        }));\r\n\r\n    return timeOffset.map(offsetFaceChanges).flat();\r\n};\r\n\r\nexport const chainCodeToList = (code, name) => {\r\n    const [fileList, animationList] = analyzeChainCode(code);\r\n    const length = animationList.length;\r\n    const output = animationList.map((ani, i) => {\r\n        const { fileIdx, aniName, timeScale, repetitions, faceChanges } = ani;\r\n        const partName = name.concat(length > 1 ? `#${i + 1}` : \"\");\r\n        const listItem = {\r\n            name: partName,\r\n            fileName: fileList[fileIdx],\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            faceChanges,\r\n            id: uuid(),\r\n        };\r\n        return listItem;\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const createGradientMap = nTones => {\r\n    const colors = new Uint8Array(nTones).map((_, i) => (i * 256) / nTones);\r\n    const map = new THREE.DataTexture(colors, nTones, 1, THREE.LuminanceFormat);\r\n    map.minFilter = THREE.NearestFilter;\r\n    map.magFilter = THREE.NearestFilter;\r\n    map.generateMipmaps = false;\r\n\r\n    return map;\r\n};\r\n","const outlineFragShader = `#define OUTLINE\r\nuniform float opacity;\r\nuniform vec3 color;\r\nvoid main() {\r\n\tgl_FragColor = vec4( color, opacity );\r\n}`;\r\n\r\nexport default outlineFragShader;\r\n","const outlineVertShader = `#define OUTLINE\r\nuniform float size;\r\nvarying vec3 vViewPosition;\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\nvoid main() {\r\n\t#include <color_vertex>\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\t\r\n    vec3 transformed = position + objectNormal*0.0005*size;\r\n        \r\n\t#include <skinning_vertex>\r\n\t#include <project_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\tvViewPosition = - mvPosition.xyz;\r\n\t#include <worldpos_vertex>\r\n}`;\r\n\r\nexport default outlineVertShader;\r\n","import { defaultSettings } from \"../consts\";\r\n\r\nexport const settingsReducer = (state, action) => {\r\n    const { type, key, subkey, value } = action;\r\n    switch (type) {\r\n        case \"toggle\":\r\n            let currentValue;\r\n            if (subkey) {\r\n                currentValue = state[key][subkey][value];\r\n                return {\r\n                    ...state,\r\n                    [key]: {\r\n                        ...state[key],\r\n                        [subkey]: {\r\n                            ...state[key][subkey],\r\n                            [value]: !currentValue,\r\n                        },\r\n                    },\r\n                };\r\n            }\r\n            currentValue = state[key][value];\r\n            return {\r\n                ...state,\r\n                [key]: { ...state[key], [value]: !currentValue },\r\n            };\r\n        case \"reset\":\r\n            // reset values\r\n            // value = array of keys in settings[key] or settings[key][subkey] to be reset, null -> reset all\r\n            const defaultSetting = subkey\r\n                ? defaultSettings[key][subkey]\r\n                : defaultSettings[key];\r\n            // no value -> reset all\r\n            if (!value)\r\n                return subkey\r\n                    ? {\r\n                          ...state,\r\n                          [key]: {\r\n                              ...state[key],\r\n                              [subkey]: {\r\n                                  ...state[key][subkey],\r\n                                  ...defaultSetting,\r\n                              },\r\n                          },\r\n                      }\r\n                    : {\r\n                          ...state,\r\n                          [key]: { ...state[key], ...defaultSetting },\r\n                      };\r\n            // if value is defined, reset only the specified keys\r\n            const update = {};\r\n            value.forEach(v => {\r\n                update[v] = defaultSetting[v];\r\n            });\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...update },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...update } };\r\n        case \"load\":\r\n            // load preset values\r\n            return;\r\n        case \"update\":\r\n            // update state[key] or state[key][subkey] with values from value\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...value },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...value } };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createContext, useReducer } from \"react\";\r\nimport { settingsReducer } from \"../reducer/settingsReducer\";\r\nimport { defaultSettings } from \"../consts\";\r\nimport { chainCodeToList } from \"../viewerHelpers\";\r\n\r\nexport const SettingsContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nconst initAniChain = chainCodeToList(defaultSettings.animation.code, \"init\");\r\n\r\nconst initSettings = { chainMaker: { chain: initAniChain } };\r\nObject.keys(defaultSettings).forEach(\r\n    key => (initSettings[key] = { ...defaultSettings[key] })\r\n);\r\ninitSettings.scene.lights = defaultSettings.scene.lights.map(light => ({\r\n    ...light,\r\n}));\r\n\r\nexport { initSettings };\r\n\r\nexport function SettingsProvider(props) {\r\n    const [settings, dispatch] = useReducer(settingsReducer, initSettings);\r\n\r\n    return (\r\n        <SettingsContext.Provider value={settings}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                {props.children}\r\n            </DispatchContext.Provider>\r\n        </SettingsContext.Provider>\r\n    );\r\n}\r\n","import Button from \"@material-ui/core/Button\";\r\n\r\nimport { initSettings } from \"./context/SettingsContext\";\r\nimport {\r\n    initKey,\r\n    WEAPON_CODE,\r\n    GENDER_CODE,\r\n    COMBO_LENGTH,\r\n    FS_LENGTH,\r\n    aniModList,\r\n} from \"./consts\";\r\n\r\nimport { chainCodeToList } from \"./viewerHelpers\";\r\n\r\nexport const isBlade = code => code.startsWith(\"w302\");\r\n\r\nexport const isSheath = code => isBlade(code) && code.endsWith(\"02\");\r\n\r\nexport const callbackOnEach = (list, callback) => {\r\n    if (Array.isArray(list)) {\r\n        list.forEach(child => callback(child));\r\n        return;\r\n    }\r\n    callback(list);\r\n};\r\n\r\nexport const setInitialSettings = params => {\r\n    if (params.length === 0) return;\r\n    let eyeTextureDefined = false;\r\n    let mouthTextureDefined = false;\r\n    params.forEach(param => {\r\n        if (!param) return;\r\n\r\n        const [keycode, ...value] = param.split(\"=\"); // animation code can have \"=\" inside\r\n        // if no value given, skip\r\n        if (!value[0]) return;\r\n\r\n        let setValue = value.length === 1 ? value[0] : value.join(\"=\");\r\n\r\n        switch (keycode) {\r\n            case \"et\":\r\n                eyeTextureDefined = true;\r\n                break;\r\n            case \"mt\":\r\n                mouthTextureDefined = true;\r\n                break;\r\n            case \"cc\":\r\n                // initialize chain maker chain\r\n                const chainList = chainCodeToList(setValue, \"Animation\");\r\n                initSettings[\"chainMaker\"][\"chain\"] = chainList;\r\n                break;\r\n            case \"bg\":\r\n                if (setValue !== \"transparent\") {\r\n                    setValue = `#${setValue}`;\r\n                }\r\n                break;\r\n            case \"cam\": // parameters in form x, y, z\r\n                setValue = setValue.split(\",\").map(n => parseFloat(n));\r\n                break;\r\n            default:\r\n        }\r\n        const { group, key } = initKey[keycode];\r\n\r\n        const isBooleanValue = setValue === \"true\" || setValue === \"false\";\r\n\r\n        initSettings[group][key] = isBooleanValue\r\n            ? Boolean(setValue === \"true\")\r\n            : setValue;\r\n    });\r\n\r\n    initSettings[\"model\"][\"texture\"] = initSettings[\"model\"][\"id\"];\r\n\r\n    if (!eyeTextureDefined) {\r\n        initSettings[\"model\"][\"eyeTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n    if (!mouthTextureDefined) {\r\n        initSettings[\"model\"][\"mouthTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n};\r\n\r\nexport const generateChainCode = chain => {\r\n    const length = chain.length;\r\n    let output = \"\";\r\n    chain.forEach((ani, i) => {\r\n        const { fileName, aniName, faceChanges } = ani;\r\n        if (fileName) {\r\n            if (i === 0) {\r\n                output = output.concat(fileName);\r\n            } else {\r\n                output = output.concat(\r\n                    fileName !== chain[i - 1].fileName ? fileName : \"\"\r\n                );\r\n            }\r\n            output = output.concat(\"+\");\r\n        }\r\n        output = output.concat(aniName);\r\n\r\n        // Add modifiers\r\n        const modCode = generateAniModCode(ani);\r\n        output = output.concat(modCode);\r\n        const faceCode = generateFaceCode(faceChanges);\r\n        output = output.concat(faceCode);\r\n\r\n        if (i < length - 1) {\r\n            output = output.concat(\">\");\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nconst generateAniModCode = ani => {\r\n    let output = \"\";\r\n    Object.keys(aniModList).forEach(modKey => {\r\n        const { key, defaultValue } = aniModList[modKey];\r\n        if (ani[key] !== defaultValue) {\r\n            output = output.concat(`&${modKey}=${ani[key]}`);\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nconst generateFaceCode = faceChanges => {\r\n    if (!faceChanges) return \"\";\r\n    let output = \"\";\r\n    faceChanges.forEach(change => {\r\n        const { time, eyeIdx, mouthIdx } = change;\r\n        if (!time) return;\r\n        if (eyeIdx) {\r\n            output = output.concat(`&e-${time}=${eyeIdx}`);\r\n        }\r\n        if (mouthIdx) {\r\n            output = output.concat(`&m-${time}=${mouthIdx}`);\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const collectFilter = toggleState => {\r\n    let collected = {};\r\n    Object.keys(toggleState).forEach(key => {\r\n        let tmp = [];\r\n        Object.keys(toggleState[key]).forEach(k => {\r\n            if (toggleState[key][k]) {\r\n                tmp.push(k);\r\n            }\r\n        });\r\n        collected[key] = tmp;\r\n    });\r\n    return collected;\r\n};\r\n\r\nexport const multiCondFilter = (input, filters) => {\r\n    const filterKeys = Object.keys(filters);\r\n\r\n    return input.filter(el => {\r\n        return filterKeys.every(key => {\r\n            if (!filters[key].length) return true;\r\n            return filters[key].includes(el[key]);\r\n        });\r\n    });\r\n};\r\n\r\nexport const complementaryColor = color => {\r\n    const hexColor = color.replace(\"#\", \"0x\");\r\n\r\n    return `#${(\"000000\" + (\"0xffffff\" ^ hexColor).toString(16)).slice(-6)}`;\r\n};\r\n\r\nconst hexToRgb = hex => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n        ? {\r\n              r: parseInt(result[1], 16),\r\n              g: parseInt(result[2], 16),\r\n              b: parseInt(result[3], 16),\r\n          }\r\n        : null;\r\n};\r\n\r\nexport const getBrightness = ({ r, g, b }) =>\r\n    (r * 299 + g * 587 + b * 114) / 1000;\r\n\r\nexport const getTextColor = color => {\r\n    const rgb = hexToRgb(color);\r\n    return getBrightness(rgb) > 128 ? \"#000000\" : \"#ffffff\";\r\n};\r\n\r\nexport const aniButtonsFromObject = (object, handleSelect, groupName) => {\r\n    if (!object) return null;\r\n    const style = { maxWidth: \"13.5rem\" };\r\n    return Object.keys(object).map(key => (\r\n        <Button\r\n            variant=\"contained\"\r\n            key={key}\r\n            data-value={object[key]}\r\n            data-name={`${groupName ? `${groupName} ` : \"\"}${key}`}\r\n            onClick={handleSelect}\r\n            style={style}\r\n        >\r\n            {key}\r\n        </Button>\r\n    ));\r\n};\r\n\r\n// Animation chain code generator\r\nexport const getStandbyCode = (weapon, gender) =>\r\n    `LOB_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_ONT_${GENDER_CODE[gender]}`;\r\n\r\nexport const getVictoryCode = weapon =>\r\n    `WIN_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_WIN_01>+${WEAPON_CODE[weapon]}_WIN_02`;\r\n\r\nexport const getDashAtkCode = weapon => `DAS+${WEAPON_CODE[weapon]}_DAS_02`;\r\n\r\nexport const getRollCode = weapon => `ROL+${WEAPON_CODE[weapon]}_ROL_01`;\r\n\r\nexport const getComboCode = weapon => {\r\n    const comboLength = COMBO_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `CMB_${code}`;\r\n    for (let i = 1; i <= comboLength; i++) {\r\n        result = result.concat(`+${code}_CMB_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Force Strike chain code\r\nexport const getFSCode = weapon => {\r\n    const fsAniLength = FS_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `FS_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= fsAniLength; i++) {\r\n        result = result.concat(`+${code}_CHR_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Join Lobby chain code\r\nexport const getLobbyCode = (weapon, gender) => {\r\n    const code = WEAPON_CODE[weapon];\r\n    if (gender === \"Male\")\r\n        return `LOB_${code}+${code}_ONT_05&ts=-0.5>+${code}_ONT_02>+${code}_ONT_07>+${code}_ONT_08>+${code}_ONT_21`;\r\n    // Female\r\n    return `LOB_${code}+${code}_ONT_06&ts=-0.5>+${code}_ONT_04>+${code}_ONT_09>+${code}_ONT_10>+${code}_ONT_23`;\r\n};\r\n","import { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { fbxSource } from \"./App\";\r\nimport { CAM_PARAMS, DEFAULT_FACE_IDX } from \"./consts\";\r\nimport {\r\n    matDirectSetParams,\r\n    matColorParams,\r\n    matCommonParams,\r\n    matExtraParams,\r\n} from \"./consts\";\r\nimport {\r\n    createInvisibleFloor,\r\n    isSimpleViewer,\r\n    isDragon,\r\n    initDragonFace,\r\n    calculateTextureOffset,\r\n    calculateIdxOffset,\r\n    getModelPath,\r\n    analyzeWeaponCode,\r\n    analyzeChainCode,\r\n    loadModel,\r\n    applyEyeTexture,\r\n    applyMouthTexture,\r\n    applyEyeOffset,\r\n    applyMouthOffset,\r\n    disposeItem,\r\n    createOutline,\r\n    applyOutlineSettings,\r\n    changeMaterial,\r\n    createGradientMap,\r\n    getFaceChangesArray,\r\n} from \"./viewerHelpers\";\r\n\r\nimport { isBlade } from \"./helpers\";\r\n\r\nconst SIDES = [\"Right\", \"Left\"];\r\n\r\nclass ModelViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        window.app = this;\r\n        this.initScene();\r\n        this.props.setIsLoading(true);\r\n\r\n        // Load the models\r\n        const [main, weaponRight, weaponLeft] = await this.initLoad();\r\n\r\n        // save references to models\r\n        this.models = { main, weaponRight, weaponLeft };\r\n\r\n        // basic viewer for incompatible assets\r\n        const modelId = this.props.model.id;\r\n        if (isSimpleViewer(modelId)) {\r\n            if (isBlade(modelId)) {\r\n                const { materialType } = this.props.model;\r\n                const { texturePath } = analyzeWeaponCode(`${modelId}n`);\r\n                changeMaterial(main, { materialType, texturePath });\r\n            }\r\n\r\n            this.basicMainProcessing();\r\n\r\n            isDragon(modelId) && initDragonFace(main);\r\n\r\n            // loading finished\r\n            this.props.setIsLoading(false);\r\n            return;\r\n        }\r\n        this.initModels();\r\n\r\n        this.props.setIsLoading(false);\r\n\r\n        this.addAnimation();\r\n    }\r\n\r\n    async componentDidUpdate(prev) {\r\n        const current = this.props;\r\n\r\n        // // print updated props to console\r\n        // console.log(\"Updated\");\r\n        // Object.keys(prev).forEach(key => {\r\n        //     const oldValue = prev[key];\r\n        //     const currentValue = this.props[key];\r\n        //     const subkeys = Object.keys(oldValue);\r\n        //     if (subkeys.length === 0 || typeof oldValue === \"string\") {\r\n        //         if (oldValue !== currentValue) {\r\n        //             console.log(\r\n        //                 `${key}: ${JSON.stringify(\r\n        //                     oldValue\r\n        //                 )} to ${JSON.stringify(currentValue)}`\r\n        //             );\r\n        //         }\r\n        //     } else {\r\n        //         subkeys.forEach(subkey => {\r\n        //             if (oldValue[subkey] !== currentValue[subkey]) {\r\n        //                 console.log(\r\n        //                     `${key}.${subkey}: ${JSON.stringify(\r\n        //                         oldValue[subkey]\r\n        //                     )} to ${JSON.stringify(currentValue[subkey])}`\r\n        //                 );\r\n        //             }\r\n        //         });\r\n        //     }\r\n        // });\r\n\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n        this.updateModel(prev.model, current.model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n        this.updateOutline(prev.outline, current.outline);\r\n        this.updateMaterial(prev, current);\r\n        this.updateLights(prev.lights, current.lights);\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n\r\n        // Update background color\r\n        if (prev.bgColor !== current.bgColor) {\r\n            this.bgColor = current.bgColor;\r\n        }\r\n\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n\r\n        this.AA = current.antiAliasing;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixer = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n\r\n    initScene = () => {\r\n        this.models = {};\r\n        this.modelInfo = {\r\n            main: this.props.model.id,\r\n            weaponLeft: analyzeWeaponCode(this.props.model.weaponLeft),\r\n            weaponRight: analyzeWeaponCode(this.props.model.weaponRight),\r\n        };\r\n        this.materials = [];\r\n\r\n        // save reference and specifications for outlines\r\n        this.outlines = {};\r\n        this.outlineParams = { ...this.props.outline };\r\n\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.bgColor = this.props.bgColor;\r\n\r\n        // Floor for auto rotate\r\n        this.floor = createInvisibleFloor();\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addLights(lights);\r\n\r\n        // effects\r\n        this.loadedFX = new Map();\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        const AAEnabled = this.props.antiAliasing;\r\n        this._AA = AAEnabled;\r\n\r\n        this.renderer = AAEnabled ? this.rendererAA : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        this.canvas = this.finalRenderer.domElement;\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n        this.mount.appendChild(this.canvas);\r\n\r\n        this.animate();\r\n    };\r\n\r\n    set AA(enabled) {\r\n        if (enabled === this._AA) return;\r\n\r\n        this._AA = enabled;\r\n        const currentSize = new THREE.Vector2();\r\n        this.renderer.getSize(currentSize);\r\n        this.renderer = enabled ? this.rendererAA : this.rendererNoAA;\r\n        this.renderer.setSize(currentSize.x, currentSize.y);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const newCanvas = this.renderer.domElement;\r\n        this.setCanvas(newCanvas);\r\n    }\r\n\r\n    addLights = lights => {\r\n        this.lights = [];\r\n        lights.forEach(({ enable, type, color, intensity, ...params }) => {\r\n            if (!enable) return;\r\n            const constructor = `${type}Light`;\r\n            const light = new THREE[constructor](color, intensity);\r\n\r\n            for (const [key, value] of Object.entries(params)) {\r\n                switch (key) {\r\n                    case \"position\":\r\n                        const setValue = value.map(v => v || 0);\r\n                        light.position.set(...setValue);\r\n                        break;\r\n                    default:\r\n                        light[key] = value;\r\n                }\r\n            }\r\n            this.scene.add(light);\r\n            this.lights.push(light);\r\n        });\r\n    };\r\n\r\n    removeLights = () => this.lights.forEach(light => this.scene.remove(light));\r\n\r\n    // Promise to load all models at initialize\r\n    initLoad = () => {\r\n        const modelId = this.modelInfo.main;\r\n        const modelPath = getModelPath(modelId);\r\n        const loadMain = loadModel(modelPath);\r\n\r\n        const weaponRight = this.modelInfo.weaponRight?.modelPath;\r\n        const loadWeaponR = loadModel(weaponRight);\r\n\r\n        const weaponLeft = this.modelInfo.weaponLeft?.modelPath;\r\n        const loadWeaponL = loadModel(weaponLeft);\r\n\r\n        return Promise.all([loadMain, loadWeaponR, loadWeaponL]);\r\n    };\r\n\r\n    addToScene = model => this.floor.add(model);\r\n\r\n    basicMainProcessing = () => {\r\n        const model = this.models.main;\r\n\r\n        this.outlines.main = createOutline(model, this.outlineParams);\r\n\r\n        const { materialType } = this.props.model;\r\n        changeMaterial(model, { materialType });\r\n\r\n        this.addToScene(model);\r\n    };\r\n\r\n    initFace = () => {\r\n        const modelId = this.props.model.id;\r\n        this._eyeIdx = this._mouthIdx = DEFAULT_FACE_IDX;\r\n        const defaultFaceParams = {\r\n            mouthTexture: modelId,\r\n            mouthIdx: DEFAULT_FACE_IDX,\r\n            eyeTexture: modelId,\r\n            eyeIdx: DEFAULT_FACE_IDX,\r\n        };\r\n        this.updateFace(defaultFaceParams, this.props.model);\r\n    };\r\n\r\n    initMainModel = () => {\r\n        this.basicMainProcessing();\r\n        this.initFace();\r\n        // Save initial position and rotation\r\n        const model = this.models.main;\r\n        model.initPos = model.position.clone();\r\n        model.initRot = model.rotation.clone();\r\n    };\r\n\r\n    initModels = () => {\r\n        this.initMainModel();\r\n        this.initAllWeapons();\r\n        this.attachAllWeapons();\r\n        this.applyMaterialSettings();\r\n    };\r\n\r\n    initAllWeapons = () => {\r\n        const { materialType } = this.props.model;\r\n        SIDES.forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weapon = this.models[key];\r\n            if (!weapon) return;\r\n\r\n            const weaponInfo = this.modelInfo[key];\r\n            const { texturePath, flipped } = weaponInfo;\r\n            changeMaterial(weapon, { materialType, texturePath });\r\n            if (flipped) weapon.rotation.y += Math.PI;\r\n\r\n            this.outlines[key] = createOutline(weapon, this.outlineParams);\r\n        });\r\n    };\r\n\r\n    attachWeapon = (weapon, side) => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name === boneName && child.children.length === 0) {\r\n                child.add(weapon);\r\n            }\r\n        });\r\n    };\r\n\r\n    attachAllWeapons = () => {\r\n        SIDES.forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weapon = this.models[key];\r\n            if (!weapon) return;\r\n\r\n            this.attachWeapon(weapon, side);\r\n        });\r\n    };\r\n\r\n    detachWeapon = side => {\r\n        const key = `weapon${side}`;\r\n        const model = this.models[key];\r\n        if (!model) return;\r\n\r\n        model.parent.remove(model);\r\n    };\r\n\r\n    detachAllWeapons = () => SIDES.forEach(side => this.detachWeapon(side));\r\n\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    addAnimation = async () => {\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        if (!aniCode) return;\r\n\r\n        const model = this.models.main;\r\n        const [fileList, animationList] = analyzeChainCode(aniCode);\r\n        this.nAni = animationList.length;\r\n\r\n        this.props.setIsLoading(true);\r\n\r\n        model.mixer = new THREE.AnimationMixer(model);\r\n        this.mixer = model.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        model.mixer.timeScale = timeScale; // Global timeScale\r\n        model.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = animationList.map(ani => ({\r\n            timeScale: ani.timeScale,\r\n            repetitions: ani.repetitions,\r\n            faceChanges: ani.faceChanges,\r\n        }));\r\n\r\n        // load all animation files\r\n        const batchLoader = fileList.map(file => {\r\n            const path = `${fbxSource}/fbx/${file}.fbx`;\r\n            return loadModel(path);\r\n        });\r\n        const animFiles = await Promise.all(batchLoader);\r\n\r\n        this.animations = [];\r\n        animationList.forEach(anim => {\r\n            const { fileIdx, aniName } = anim;\r\n            const animation = aniName\r\n                ? animFiles[fileIdx].animations.find(\r\n                      ani => ani.name === aniName\r\n                  )\r\n                : animFiles[fileIdx].animations[0];\r\n            this.animations.push(animation);\r\n        });\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.props.setIsLoading(false);\r\n    };\r\n\r\n    removeAnimation = () => {\r\n        const mainModel = this.models.main;\r\n        mainModel.mixer.stopAllAction();\r\n\r\n        // Reset position and rotation to initial value\r\n        const { initPos, initRot } = mainModel;\r\n        mainModel.position.copy(initPos);\r\n        mainModel.rotation.copy(initRot);\r\n\r\n        // Reset facial expression\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n\r\n        this.mixer = null;\r\n        this.animations = [];\r\n    };\r\n\r\n    // this.aniIdx = n => play animation with index n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n        const { mixer } = this;\r\n        const anim = this.animations[newIdx];\r\n        mixer.stopAllAction();\r\n        const action = mixer.clipAction(anim);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n        this.faceChanges = getFaceChangesArray(faceChanges, repetitions);\r\n        this.faceChangeTime = this.faceChanges.map(\r\n            change => (this.currentClipDuration * change.time) / 100\r\n        );\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        mixer.setTime(0);\r\n        this.currentClipDuration = anim.duration;\r\n        action.play();\r\n    }\r\n\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: this.props.capture.codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.props.setIsLoading(false);\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                const url = URL.createObjectURL(superBuffer);\r\n                const a = document.createElement(\"a\");\r\n                a.style = \"display: none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n            };\r\n        }\r\n        // disable user input\r\n        this.props.setIsLoading(true);\r\n        // Reset facial expression\r\n        this.eyeIdx = this.props.model.eyeIdx;\r\n        this.mouthIdx = this.props.model.mouthIdx;\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    updateEyeTexture = (prev, current) => {\r\n        const currentTexture = current.eyeTexture;\r\n        const prevTexture = prev.eyeTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const { materialType } = current;\r\n        applyEyeTexture(this.models.main, {\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyEyeOffset(this.models.main, offset);\r\n\r\n        return true;\r\n    };\r\n\r\n    set eyeIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._eyeIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyEyeOffset(this.models.main, offset);\r\n\r\n        this._eyeIdx = newIdx;\r\n    }\r\n\r\n    updateMouthTexture = (prev, current) => {\r\n        const currentTexture = current.mouthTexture;\r\n        const prevTexture = prev.mouthTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const { materialType } = current;\r\n        applyMouthTexture(this.models.main, {\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyMouthOffset(this.models.main, offset);\r\n\r\n        return true;\r\n    };\r\n\r\n    set mouthIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._mouthIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyMouthOffset(this.models.main, offset);\r\n\r\n        this._mouthIdx = newIdx;\r\n    }\r\n\r\n    updateFaceTexture = (prev, current) => {\r\n        const eyeUpdated = this.updateEyeTexture(prev, current);\r\n        const mouthUpdated = this.updateMouthTexture(prev, current);\r\n        if (eyeUpdated || mouthUpdated) {\r\n            this.applyMaterialSettings();\r\n        }\r\n    };\r\n\r\n    updateFaceOffset = ({ eyeIdx, mouthIdx }) => {\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    updateFace = (prev, current) => {\r\n        this.updateFaceTexture(prev, current);\r\n        this.updateFaceOffset(current);\r\n    };\r\n\r\n    disposeMainModel = () => {\r\n        const mainModel = this.models.main;\r\n        this.floor.remove(mainModel);\r\n        disposeItem(mainModel);\r\n    };\r\n\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        if (prev.id !== modelId) {\r\n            this.props.setIsLoading(true);\r\n            const modelPath = getModelPath(modelId);\r\n            const model = await loadModel(modelPath);\r\n\r\n            this.detachAllWeapons();\r\n            this.disposeMainModel();\r\n\r\n            this.models.main = model;\r\n\r\n            this.initMainModel();\r\n            this.attachAllWeapons();\r\n            this.applyMaterialSettings();\r\n\r\n            this.addAnimation();\r\n\r\n            this.props.setIsLoading(false);\r\n            return;\r\n        }\r\n        // Update face when main model not changed\r\n        this.updateFace(prev, current);\r\n    };\r\n\r\n    updateWeapons = async (prev, current) => {\r\n        this.props.setIsLoading(true);\r\n        SIDES.forEach(async side => {\r\n            const key = `weapon${side}`;\r\n            if (prev[key] === current[key]) return;\r\n\r\n            // remove old weapon\r\n            this.detachWeapon(side);\r\n            disposeItem(this.models[key]); // dispose old weapon\r\n\r\n            // if current weapon is empty (weapon removed)\r\n            if (!current[key]) {\r\n                this.models[key] = null;\r\n                this.modelInfo[key] = \"\";\r\n                // remove reference to outline\r\n                this.outlines[key] = null;\r\n                return;\r\n            }\r\n\r\n            // load new weapon\r\n            this.modelInfo[key] = analyzeWeaponCode(this.props.model[key]);\r\n            const { modelPath, texturePath } = this.modelInfo[key];\r\n\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            this.models[key] = model;\r\n\r\n            // process new weapon\r\n            const { materialType } = current;\r\n            changeMaterial(model, { materialType, texturePath });\r\n\r\n            if (this.modelInfo[key].flipped) {\r\n                model.rotation.y += Math.PI;\r\n            }\r\n            this.outlines[key] = createOutline(model, this.outlineParams);\r\n            this.attachWeapon(model, side);\r\n            this.applyMaterialSettings();\r\n        });\r\n        this.props.setIsLoading(false);\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        await this.updateMainModel(prev, current);\r\n        this.updateWeapons(prev, current);\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            prev.code && this.removeAnimation();\r\n            this.addAnimation();\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    updateOutlineParams = update => {\r\n        const keys = Object.keys(this.outlines).filter(\r\n            key => this.outlines[key]\r\n        );\r\n        const outlines = keys.map(key => this.outlines[key]).flat();\r\n        outlines.forEach(outline => {\r\n            applyOutlineSettings(outline, update);\r\n        });\r\n    };\r\n\r\n    updateOutline = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        this.outlineParams = current;\r\n        const updatedKeys = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedKeys.length === 0) return;\r\n\r\n        const update = new Map(updatedKeys.map(key => [key, current[key]]));\r\n        this.updateOutlineParams(update);\r\n    };\r\n\r\n    saveMaterialReference = () => {\r\n        const mainModel = this.models.main;\r\n        const meshes = [];\r\n        mainModel.traverse(child => {\r\n            if (child.isMesh && child.name !== \"outline\") meshes.push(child);\r\n        });\r\n        this.materials = meshes.map(mesh => mesh.material).flat();\r\n    };\r\n\r\n    forEachMaterial = callback => this.materials.forEach(mat => callback(mat));\r\n\r\n    applyMaterialParams = () => {\r\n        const { materialType } = this.props.model;\r\n        const current = this.props.materialParams;\r\n        const paramsList = [\r\n            ...matCommonParams,\r\n            ...matExtraParams[materialType],\r\n        ];\r\n        const hasGradientMap =\r\n            materialType === \"Toon\" && current.gradientMap !== \"none\";\r\n\r\n        const nTones = hasGradientMap && parseInt(current.gradientMap);\r\n        const gradientMap = hasGradientMap && createGradientMap(nTones);\r\n\r\n        this.forEachMaterial(mat => {\r\n            matDirectSetParams.forEach(param => {\r\n                if (paramsList.includes(param)) {\r\n                    mat[param] = current[param];\r\n                }\r\n            });\r\n\r\n            matColorParams.forEach(param => {\r\n                if (!paramsList.includes(param)) return;\r\n                const currentColor = current[param];\r\n                mat[param] = new THREE.Color(currentColor);\r\n            });\r\n\r\n            if (!current.useTexture) {\r\n                if (mat.map) mat.backupMap = mat.map;\r\n                mat.map = null;\r\n            }\r\n\r\n            if (current.flatShading) {\r\n                mat.flatShading = current.flatShading;\r\n                mat.needsUpdate = true;\r\n            }\r\n\r\n            if (hasGradientMap) {\r\n                mat.gradientMap = gradientMap;\r\n                mat.needsUpdate = true;\r\n            }\r\n        });\r\n    };\r\n\r\n    applyMaterialSettings = () => {\r\n        this.saveMaterialReference();\r\n        this.applyMaterialParams();\r\n    };\r\n\r\n    updateMaterialParams = (prev, current) => {\r\n        const { materialType } = this.props.model;\r\n        const { useTexture, flatShading, gradientMap } = current;\r\n        const paramsList = [\r\n            ...matCommonParams,\r\n            ...matExtraParams[materialType],\r\n        ];\r\n        const updatedParams = paramsList.filter(\r\n            param => prev[param] !== current[param]\r\n        );\r\n\r\n        const paramFilter = param => updatedParams.includes(param);\r\n\r\n        const directSetParams = matDirectSetParams.filter(paramFilter);\r\n        directSetParams.forEach(param => {\r\n            this.forEachMaterial(mat => (mat[param] = current[param]));\r\n        });\r\n\r\n        const colorParams = matColorParams.filter(paramFilter);\r\n        colorParams.forEach(param => {\r\n            const currentColor = current[param];\r\n            const color = new THREE.Color(currentColor);\r\n            this.forEachMaterial(mat => (mat[param] = color));\r\n        });\r\n\r\n        if (prev.useTexture !== useTexture) {\r\n            this.forEachMaterial(mat => {\r\n                if (!useTexture) {\r\n                    mat.backupMap = mat.map;\r\n                    mat.map = null;\r\n                } else {\r\n                    mat.map = mat.backupMap;\r\n                    delete mat.backupMap;\r\n                }\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n\r\n        if (prev.flatShading !== flatShading) {\r\n            this.forEachMaterial(mat => {\r\n                mat.flatShading = flatShading;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n\r\n        if (prev.gradientMap !== gradientMap) {\r\n            let newMap = null;\r\n            if (gradientMap !== \"none\") {\r\n                const nTones = parseInt(gradientMap);\r\n                newMap = createGradientMap(nTones);\r\n            }\r\n\r\n            this.forEachMaterial(mat => {\r\n                mat.gradientMap = newMap;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n    };\r\n\r\n    updateMaterial = (prev, current) => {\r\n        // update material type\r\n        const { materialType } = current.model;\r\n        if (prev.model.materialType !== materialType) {\r\n            changeMaterial(this.models.main, { materialType });\r\n\r\n            this.applyMaterialSettings();\r\n            return;\r\n        }\r\n        this.updateMaterialParams(prev.materialParams, current.materialParams);\r\n    };\r\n\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeLights();\r\n            this.addLights(current);\r\n        }\r\n    };\r\n\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n            const newCanvas = this.renderer.domElement;\r\n            this.setCanvas(newCanvas);\r\n            return;\r\n        }\r\n\r\n        if (!this.loadedFX.has(\"ascii\")) {\r\n            const { AsciiEffect } = await import(\r\n                \"three/examples/jsm/effects/AsciiEffect\"\r\n            );\r\n            this.loadedFX.set(\"ascii\", AsciiEffect);\r\n            this.showAscii();\r\n        } else this.showAscii();\r\n\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n    };\r\n\r\n    showAscii = () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const AsciiEffect = this.loadedFX.get(\"ascii\");\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n        this.effect.setSize(this.viewport.width, this.viewport.height);\r\n\r\n        const newCanvas = this.effect.domElement;\r\n        newCanvas.style.color = color;\r\n        newCanvas.style.background = bgColor;\r\n        this.setCanvas(newCanvas);\r\n\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    set bgColor(color) {\r\n        this.scene.background =\r\n            color !== \"transparent\" ? new THREE.Color(color) : null;\r\n    }\r\n\r\n    setCanvas = newCanvas => {\r\n        const { canvas } = this;\r\n        this.mount.removeChild(canvas);\r\n        this.mount.appendChild(newCanvas);\r\n        this.canvas = newCanvas;\r\n    };\r\n\r\n    rotateFloor = dt => {\r\n        const { rotateSpeed } = this.props;\r\n        const angle = (rotateSpeed * dt * Math.PI) / 2;\r\n        rotateSpeed && this.floor.rotateY(angle);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n\r\n        const dt = this.clock.getDelta();\r\n        this.rotateFloor(dt);\r\n        this.mixer && this.mixer.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length) {\r\n            const elapsedTime = this.mixer.time;\r\n            const nextFaceChangeTime = this.faceChangeTime[0];\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                this.faceChangeTime.shift();\r\n                const { eyeIdx, mouthIdx } = this.faceChanges.shift();\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModelViewer;\r\n","import { lazy, Suspense, useContext, useCallback } from \"react\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"./context/SettingsContext\";\r\nimport ModelViewer from \"./ModelViewer\";\r\nimport \"./styles/Display.css\";\r\n\r\nimport { getTextColor } from \"./helpers\";\r\nimport { cameraPositions, controlsPositions } from \"./consts\";\r\n\r\nconst AniControl = lazy(() => import(\"./AniControl\"));\r\n\r\nfunction Display(props) {\r\n    const { viewport } = props;\r\n\r\n    const settings = useContext(SettingsContext);\r\n    const {\r\n        model: { id: modelId },\r\n        scene: { rotateSpeed, background: bgColor, initCameraPosition, lights },\r\n        app: { showAniControl, antiAliasing },\r\n    } = settings;\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n    const toggleCapture = useCallback(() => {\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"capture\",\r\n            value: \"enable\",\r\n        };\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const type = modelId[0];\r\n\r\n    const defaultCameraPosition =\r\n        cameraPositions[modelId] || cameraPositions[type];\r\n\r\n    const cameraPosition = initCameraPosition\r\n        ? initCameraPosition.map((n, i) =>\r\n              isNaN(n) ? defaultCameraPosition[i] : n\r\n          )\r\n        : defaultCameraPosition;\r\n\r\n    const controlsPosition =\r\n        controlsPositions[modelId] || controlsPositions[type];\r\n\r\n    return (\r\n        <div className=\"Display\">\r\n            {showAniControl && (\r\n                <div\r\n                    className=\"Display-AniControl\"\r\n                    style={{ color: getTextColor(bgColor) }}\r\n                >\r\n                    <Suspense fallback={null}>\r\n                        <AniControl value={settings.animation.timeScale} />\r\n                    </Suspense>\r\n                </div>\r\n            )}\r\n            <ModelViewer\r\n                setIsLoading={props.setIsLoading}\r\n                capture={settings.capture}\r\n                toggleCapture={toggleCapture}\r\n                viewport={viewport}\r\n                cameraPosition={cameraPosition}\r\n                controlsPosition={controlsPosition}\r\n                model={settings.model}\r\n                materialParams={settings.materialParams}\r\n                outline={settings.outline}\r\n                animation={settings.animation}\r\n                rotateSpeed={rotateSpeed}\r\n                lights={lights}\r\n                bgColor={bgColor}\r\n                antiAliasing={antiAliasing}\r\n                ascii={settings.ascii}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n","import { lazy, Suspense, useState, useRef, useEffect, useContext } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\n\r\nimport Menu from \"@material-ui/icons/Menu\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport useStyles from \"./styles/MainPageStyles\";\r\n\r\nimport Display from \"./Display\";\r\nimport { SettingsContext } from \"./context/SettingsContext\";\r\nimport { setInitialSettings } from \"./helpers\";\r\n\r\nconst ControlPanel = lazy(() => import(\"./ControlPanel\"));\r\nconst SideBar = lazy(() => import(\"./SideBar\"));\r\n\r\nfunction MainPage({ location }) {\r\n    const classes = useStyles();\r\n\r\n    const [currentMode, setCurrentMode] = useState(\"model\");\r\n    const [sidebarOpen, toggleSidebarOpen] = useToggleState(true);\r\n    const [controlOpen, toggleControlOpen] = useToggleState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [initLoadDone, setInitLoadDone] = useState(false);\r\n    // const [handleSelect, setHandleSelect] = useState(null);\r\n    const handleSelect = useRef(null);\r\n    const {\r\n        app: { showSettings },\r\n    } = useContext(SettingsContext);\r\n\r\n    const viewerRef = useRef();\r\n    const [viewport, setViewport] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const params = location.pathname.split(\"/\");\r\n        setInitialSettings(params);\r\n        setInitLoadDone(true);\r\n\r\n        window.addEventListener(\"resize\", updateViewportSize);\r\n\r\n        return function () {\r\n            window.removeEventListener(\"resize\", updateViewportSize);\r\n        };\r\n    }, [location.pathname]);\r\n\r\n    const updateViewportSize = () => {\r\n        const height = viewerRef.current.clientHeight;\r\n        const width = viewerRef.current.clientWidth;\r\n        setViewport({ width, height });\r\n    };\r\n\r\n    const openControl = (mode, handler) => {\r\n        setCurrentMode(mode);\r\n        handleSelect.current = handler;\r\n        toggleControlOpen();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <div className={classes.loadingMsg}>Loading...</div>}\r\n            <div className={classes.root}>\r\n                <Suspense fallback={null}>\r\n                    <CssBaseline />\r\n                    <ControlPanel\r\n                        mode={currentMode}\r\n                        handleSelect={handleSelect.current}\r\n                        open={controlOpen}\r\n                        toggleControlOpen={toggleControlOpen}\r\n                    />\r\n                    {initLoadDone && showSettings && (\r\n                        <>\r\n                            <button\r\n                                onClick={toggleSidebarOpen}\r\n                                className={classes.openSidebarButton}\r\n                            >\r\n                                <Menu />\r\n                            </button>\r\n\r\n                            <SideBar\r\n                                toggleSidebarOpen={toggleSidebarOpen}\r\n                                open={sidebarOpen}\r\n                                openControl={openControl}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </Suspense>\r\n                {initLoadDone && (\r\n                    <main ref={viewerRef} className={classes.content}>\r\n                        <Display\r\n                            setIsLoading={setIsLoading}\r\n                            viewport={viewport}\r\n                        />\r\n                    </main>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import { SettingsProvider } from \"./context/SettingsContext\";\r\n\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\nimport MainPage from \"./MainPage\";\r\n\r\nimport \"./styles/App.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <SettingsProvider>\r\n            <HashRouter>\r\n                <Route render={routeProps => <MainPage {...routeProps} />} />\r\n            </HashRouter>\r\n        </SettingsProvider>\r\n    );\r\n}\r\n\r\nexport const fbxSource = process.env.PUBLIC_URL;\r\n\r\nexport default App;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nfunction useToggleState(initVal = false) {\r\n    const [state, setState] = useState(initVal);\r\n    const toggleState = useCallback(() => {\r\n        setState(state => !state);\r\n    }, [setState]);\r\n    return [state, toggleState];\r\n}\r\n\r\nexport default useToggleState;\r\n","const faceOffset = {\r\n    c110350_02: { x: 0.043, y: -0.0625 }, // Formal Joachim\r\n    c110340_02: { x: 0.043, y: -0.0625 }, // Formal Noelle\r\n    c110018_02: { x: 0.043, y: -0.0625 }, // Opera Karina\r\n    c110370_01: { x: 0.043, y: -0.0625 }, // Lapis\r\n    c100015_04: { x: 0.05, y: -0.08 }, // Chelle\r\n    c110267_01: { x: 0.08, y: -0.03 }, // Hawk\r\n    c110050_02: { x: 0.07, y: 0.13 }, // HBerserker\r\n    c110291_01: { x: 0.07, y: 0.14 }, // Marth\r\n    c110354_01: { x: 0.07, y: 0.01 }, // Mega Man\r\n    c110345_01: { x: 0.08, y: -0.13 }, // Mitsuhide\r\n    c110266_01: { x: 0.01, y: 0.03 }, // Naveed\r\n    c110365_01: { x: 0.043, y: -0.0625 }, // Nevin\r\n    c110346_01: { x: 0.07, y: 0.08 }, // Nobunaga\r\n    c110366_01: { x: 0.043, y: -0.0625 }, // Pinon\r\n    c110299_02: { x: 0.07, y: 0.08 }, // RXZ\r\n    c110360_01: { x: 0.07, y: 0.14 }, // Tiki\r\n    c110307_01: { x: 0.08, y: -0.03 }, // Victor\r\n    c110322_01: { x: 0.043, y: 0.08 }, // Zhu Bajie\r\n    c110356_01: { x: 0.07, y: 0.08 }, // Gauld\r\n    c110300_01: { x: 0.07, y: -0.1 }, // Pipple\r\n    c110344_01: { x: 0.07, y: -0.02 }, // Yuya\r\n    c110053_03: { x: 0.043, y: -0.0625 }, // INefi\r\n    c110368_01: { x: 0.043, y: -0.0625 }, // Meene\r\n    c110367_01: { x: 0.043, y: -0.0625 }, // Ilia\r\n    c110003_02: { x: 0.043, y: -0.0625 }, // Gun Joe\r\n    c110270_02: { x: 0.043, y: -0.0625 }, // HMelsa\r\n    c110341_03: { x: 0.043, y: -0.0625 }, // Hakasha\r\n};\r\nexport default faceOffset;\r\n","export const DRAWER_WIDTH = \"16rem\";\r\nexport const DRAWER_BGCOLOR = \"#330000\";\r\n\r\nexport const DEFAULT_FACE_IDX = \"2\";\r\n\r\nexport const baseUrl = \"https://dgk3593.github.io/dl-model/#/\";\r\n\r\nconst defaultAni = \"MWM_CMN+CMN_MWM_03\";\r\n\r\nexport const matParamsDetails = {\r\n    wireframe: {\r\n        name: \"Wireframe\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    useTexture: {\r\n        name: \"Texture\",\r\n        type: \"boolean\",\r\n        default: true,\r\n    },\r\n    transparent: {\r\n        name: \"Transparent\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    flatShading: {\r\n        name: \"Flat Shading\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    color: {\r\n        name: \"Color\",\r\n        type: \"color\",\r\n        default: \"#ffffff\",\r\n    },\r\n    emissive: {\r\n        name: \"Emissive\",\r\n        type: \"color\",\r\n        default: \"#000000\",\r\n    },\r\n    opacity: {\r\n        name: \"Opacity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    emissiveIntensity: {\r\n        name: \"Emissive Intensity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    specular: {\r\n        name: \"Specular\",\r\n        type: \"color\",\r\n        default: \"#111111\",\r\n    },\r\n    metalness: {\r\n        name: \"Metalness\",\r\n        type: \"percentage\",\r\n        default: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    roughness: {\r\n        name: \"Roughness\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    shininess: {\r\n        name: \"Shininess\",\r\n        type: \"number\",\r\n        default: 30,\r\n        min: 1,\r\n        max: 100,\r\n        step: 1,\r\n    },\r\n    gradientMap: {\r\n        name: \"Gradient Map\",\r\n        type: \"select\",\r\n        default: \"none\",\r\n        options: [\"none\", \"2 Tones\", \"3 Tones\", \"4 Tones\", \"5 Tones\"],\r\n    },\r\n};\r\n\r\nexport const matDirectSetParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"emissiveIntensity\",\r\n    \"metalness\",\r\n    \"roughness\",\r\n    \"shininess\",\r\n];\r\n\r\nexport const matColorParams = [\"color\", \"emissive\", \"specular\"];\r\n\r\nconst defaultMatParams = {};\r\nObject.keys(matParamsDetails).forEach(key => {\r\n    defaultMatParams[key] = matParamsDetails[key].default;\r\n});\r\n\r\nconst defaultLights = [\r\n    {\r\n        lightId: \"0\",\r\n        type: \"Ambient\",\r\n        color: \"#444444\",\r\n        enable: true,\r\n        intensity: 1,\r\n    },\r\n    {\r\n        lightId: \"1\",\r\n        type: \"Directional\",\r\n        color: \"#ffffff\",\r\n        enable: true,\r\n        position: [50, 0, 100],\r\n        intensity: 0.8,\r\n    },\r\n];\r\n\r\nexport const asciiSet = [\r\n    \" .:-=+*#%@\",\r\n    \" .'`^\\\",:;Il!i~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$\",\r\n];\r\n\r\nexport const defaultSettings = {\r\n    model: {\r\n        materialType: \"Basic\",\r\n        id: \"c100001_01\",\r\n        texture: \"c100001_01\",\r\n        eyeTexture: \"c100001_01\",\r\n        eyeIdx: \"2\",\r\n        mouthTexture: \"c100001_01\",\r\n        mouthIdx: \"2\",\r\n        weaponRight: \"\",\r\n        weaponLeft: \"\",\r\n    },\r\n    materialParams: { ...defaultMatParams },\r\n    scene: {\r\n        rotateSpeed: 0,\r\n        background: \"#cccccc\",\r\n        initCameraPosition: null,\r\n        lights: defaultLights,\r\n    },\r\n    animation: {\r\n        code: defaultAni,\r\n        timeScale: 1,\r\n    },\r\n    app: {\r\n        sideContent: \"settings\",\r\n        showSettings: true,\r\n        showAniControl: true,\r\n        antiAliasing: false,\r\n    },\r\n    outline: {\r\n        enable: true,\r\n        size: 5, // 1 -> 10\r\n        color: \"#000000\",\r\n        opacity: 1, // 0.1 -> 10%, 1-> 100%\r\n    },\r\n    capture: {\r\n        enable: false,\r\n        supportedCodecs: [],\r\n        codec: \"\",\r\n    },\r\n    ascii: {\r\n        enable: false,\r\n        charSet: asciiSet[1],\r\n        invert: false,\r\n        color: \"#00ff00\",\r\n        bgColor: \"#000000\",\r\n    },\r\n};\r\n\r\nexport const initKey = {\r\n    id: { group: \"model\", key: \"id\" },\r\n    et: { group: \"model\", key: \"eyeTexture\" },\r\n    ei: { group: \"model\", key: \"eyeIdx\" },\r\n    mt: { group: \"model\", key: \"mouthTexture\" },\r\n    mi: { group: \"model\", key: \"mouthIdx\" },\r\n    wr: { group: \"model\", key: \"weaponRight\" },\r\n    wl: { group: \"model\", key: \"weaponLeft\" },\r\n    bg: { group: \"scene\", key: \"background\" },\r\n    cam: { group: \"scene\", key: \"initCameraPosition\" },\r\n    ts: { group: \"animation\", key: \"timeScale\" },\r\n    showAC: { group: \"app\", key: \"showAniControl\" },\r\n    showSettings: { group: \"app\", key: \"showSettings\" },\r\n    showOutline: { group: \"outline\", key: \"enable\" },\r\n    AA: { group: \"app\", key: \"antiAliasing\" },\r\n    rot: { group: \"scene\", key: \"rotateSpeed\" },\r\n    cc: { group: \"animation\", key: \"code\" },\r\n};\r\n\r\nexport const MATERIALS = [\"Basic\", \"Toon\", \"Lambert\", \"Phong\", \"Standard\"];\r\n\r\nexport const matCommonParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"useTexture\",\r\n    \"color\",\r\n];\r\n\r\nexport const matExtraParams = {\r\n    Basic: [],\r\n    Toon: [\"emissive\", \"emissiveIntensity\", \"gradientMap\"],\r\n    Lambert: [\"emissive\", \"emissiveIntensity\"],\r\n    Phong: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"specular\",\r\n        \"shininess\",\r\n        \"flatShading\",\r\n    ],\r\n    Standard: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"metalness\",\r\n        \"roughness\",\r\n        \"flatShading\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_CODE = {\r\n    Sword: \"SWD\",\r\n    Blade: \"KAT\",\r\n    Dagger: \"DAG\",\r\n    Axe: \"AXE\",\r\n    Lance: \"LAN\",\r\n    Bow: \"BOW\",\r\n    Wand: \"ROD\",\r\n    Staff: \"CAN\",\r\n    Manacaster: \"GUN\",\r\n};\r\n\r\nexport const WEAPON_LIST = [\r\n    \"Sword\",\r\n    \"Blade\",\r\n    \"Dagger\",\r\n    \"Axe\",\r\n    \"Lance\",\r\n    \"Bow\",\r\n    \"Wand\",\r\n    \"Staff\",\r\n    \"Manacaster\",\r\n];\r\n\r\nexport const GENDER_CODE = {\r\n    Male: 21,\r\n    Female: 23,\r\n};\r\n\r\nexport const COMBO_LENGTH = {\r\n    Axe: 5,\r\n    Bow: 6,\r\n    Staff: 5,\r\n    Dagger: 6,\r\n    Blade: 5,\r\n    Lance: 5,\r\n    Wand: 5,\r\n    Sword: 5,\r\n};\r\n\r\nexport const FS_LENGTH = {\r\n    Axe: 3,\r\n    Bow: 3,\r\n    Staff: 5,\r\n    Dagger: 3,\r\n    Blade: 3,\r\n    Lance: 4,\r\n    Wand: 3,\r\n    Sword: 3,\r\n};\r\n\r\nexport const FILTERS = {\r\n    rarity: [\"3\", \"4\", \"5\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_FILTERS = {\r\n    rarity: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\", \"None\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const spFaceTextures = {\r\n    c110300_01: \"ec110300_01\",\r\n};\r\n\r\nexport const incompatibleModels = new Set([\r\n    \"c100007_01\",\r\n    \"c100007_05\",\r\n    \"c100007_09\",\r\n    \"c100034_01\",\r\n    \"c100036_01\",\r\n    \"c100037_01\",\r\n    \"c100041_01\",\r\n]);\r\n\r\nexport const commonBG = {\r\n    green: \"#00ff00\",\r\n    black: \"#000000\",\r\n    grey: \"#cccccc\",\r\n    white: \"#ffffff\",\r\n};\r\n\r\nexport const CAM_PARAMS = {\r\n    angle: 45,\r\n    far: 300,\r\n    near: 0.01,\r\n};\r\n\r\nexport const cameraPositions = {\r\n    c: [0, 0.5, 1.5],\r\n    d: [3, 0.5, 6],\r\n    w: [2, 0, 0],\r\n    b: [1, 0.5, 6],\r\n    e: [1, 1, 4],\r\n    h: [1, 0.5, 3],\r\n    o: [0, 0.5, 8],\r\n    r: [3, 3, 20],\r\n\r\n    c100034_01: [0, 0.5, 1.75],\r\n    d210078_01: [3, 3, 20],\r\n    d210114_01: [3, 3, 20],\r\n    h0010001: [6, 0.5, 8],\r\n    h0010001_02: [2, 0, 0],\r\n    h0040101: [1, 0.5, 4],\r\n    r0070401: [30, 30, 100],\r\n    r0080401: [1, 2, 5],\r\n\r\n    smith: [1, 1, 2],\r\n};\r\n\r\nexport const controlsPositions = {\r\n    c: [0, 0.5, 0],\r\n    d: [0, 1, 0],\r\n    w: [0, 0, 0],\r\n    b: [0, 1, 0],\r\n    e: [0, 0.5, 0],\r\n    h: [0, 1, 0],\r\n    o: [0, 0, 0],\r\n    r: [0, 3, 0],\r\n\r\n    d210078_01: [0, 3, 0],\r\n    d210114_01: [0, 3, 0],\r\n    h0010001_02: [0, 3, 0],\r\n    r0070401: [0, 20, 0],\r\n    r0080401: [0, 2, 0],\r\n\r\n    smith: [0, 0.5, 0],\r\n};\r\n\r\nexport const idxOffsets = {\r\n    face1: { x: 2, y: 1 },\r\n    face2: { x: 0, y: 0 },\r\n    face3: { x: 1, y: 0 },\r\n    face4: { x: 2, y: 0 },\r\n    face5: { x: 3, y: 0 },\r\n    face6: { x: 0, y: -1 },\r\n    face7: { x: 1, y: -1 },\r\n    face8: { x: 2, y: -1 },\r\n    face9: { x: 3, y: -1 },\r\n};\r\n\r\nexport const aniModList = {\r\n    ts: { key: \"timeScale\", defaultValue: 1 },\r\n    r: { key: \"repetitions\", defaultValue: 1 },\r\n};\r\n\r\nexport const videoCodecs = [\r\n    \"video/webm;codecs=h264\",\r\n    \"video/webm;codecs=vp9\",\r\n    \"video/webm;codecs=vp8\",\r\n    \"video/webm\",\r\n];\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_WIDTH, DRAWER_BGCOLOR } from \"../consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst drawerWidth = DRAWER_WIDTH;\r\nconst drawerBG = DRAWER_BGCOLOR;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"block\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        overflowY: \"scroll\",\r\n    },\r\n    drawerPaper: {\r\n        alignItems: \"center\",\r\n        backgroundColor: drawerBG,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        width: drawerWidth,\r\n        \"& button\": {\r\n            marginBottom: \"0.2rem\",\r\n        },\r\n    },\r\n    content: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        padding: 0,\r\n    },\r\n    openSidebarButton: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        margin: \"2rem\",\r\n        opacity: \"0.5\",\r\n        borderRadius: \"0.25rem\",\r\n        transition: \"0.5s all ease-in-out\",\r\n        backgroundColor: \"#cccccc\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            opacity: \"1\",\r\n        },\r\n    },\r\n    loadingMsg: {\r\n        position: \"absolute\",\r\n        zIndex: \"9999\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"white\",\r\n        fontSize: \"x-large\",\r\n        backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","export default __webpack_public_path__ + \"static/media/Rose-Petals.bc11ecc7.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}