{"version":3,"sources":["viewerHelpers.js","reducer/settingsReducer.js","context/SettingsContext.js","helpers.js","ModelViewer.js","Display.js","MainPage.js","App.js","hooks/useToggleState.js","data/face_offset.js","consts.js","styles/MainPageStyles.js","styles/Rose-Petals.svg","serviceWorker.js","index.js"],"names":["loadModel","url","Promise","resolve","FBXLoader","load","createInvisibleFloor","floorGeometry","THREE","rotateX","Math","PI","floorMaterial","visible","getModelPath","id","fbxSource","getTexturePath","analyzeWeaponCode","code","flipped","endsWith","weaponCode","substring","length","modelPath","texturePath","isSheath","disposeItem","item","disposedList","Set","needToDispose","object","has","uuid","notDisposed","dispose","add","disposeObject","traverse","child","isMesh","callbackOnPotentialArray","material","mat","map","backupMap","geometry","createNewMaterial","materialType","params","matType","changeMaterial","target","name","checkParam","Array","isArray","every","forEach","i","texture","encoding","newMaterial","skinning","changeOpacity","opacity","obj","updateOutlineShader","size","fog","needsUpdate","onBeforeCompile","shader","customTransform","vertexShader","replace","setTimeout","changeOutlineSize","updated","m","changeOutlineColor","color","createOutline","outlines","outline","clone","enable","push","matIsArray","fill","replaceMaterial","side","transparent","createOutlineMaterial","isSkinnedMesh","bind","skeleton","bindMatrix","parent","calculateTextureOffset","currentTexture","prevTexture","offset","x","y","prevOffset","textureOffsets","currentOffset","calculateIdxOffset","currentIdx","prevIdx","idxOffsets","applyOffset","part","groups","targetGroup","find","group","materialIndex","start","end","count","uv","attributes","u","getX","v","getY","setXY","applyEyeOffset","applyMouthOffset","applyTexture","textureId","applyEyeTexture","applyMouthTexture","analyzeChainCode","aniCodes","split","nAni","fileList","animationList","currentAni","timeScale","repetitions","fileIdx","aniName","fileName","details","faceChanges","currentParts","includes","settings","key","value","parseFloat","Infinity","parseInt","time","faceMod","processFaceChanges","sorted","sort","change","timeStamps","simplified","output","eyeIdx","mouthIdx","filter","Object","assign","getFaceChangesArray","_","others","flat","chainCodeToList","ani","listItem","concat","createGradientMap","nTones","colors","Uint8Array","minFilter","magFilter","generateMipmaps","settingsReducer","state","action","type","subkey","currentValue","defaultSetting","defaultSettings","update","SettingsContext","createContext","DispatchContext","initSettings","chainMaker","chain","animation","SettingsProvider","props","useReducer","dispatch","Provider","children","keys","scene","lights","light","isBlade","startsWith","callback","setInitialSettings","eyeTextureDefined","mouthTextureDefined","param","keycode","setValue","join","chainList","n","initKey","isBooleanValue","Boolean","generateChainCode","modCode","generateAniModCode","faceCode","generateFaceCode","aniModList","modKey","defaultValue","collectFilter","toggleState","collected","tmp","k","multiCondFilter","input","filters","filterKeys","el","complementaryColor","hexColor","toString","slice","aniButtonsFromObject","handleSelect","groupName","style","maxWidth","variant","data-value","data-name","onClick","getStandbyCode","weapon","gender","WEAPON_CODE","GENDER_CODE","getVictoryCode","getDashAtkCode","getRollCode","getComboCode","comboLength","COMBO_LENGTH","result","getFSCode","fsAniLength","FS_LENGTH","getLobbyCode","ModelViewer","initScene","models","modelInfo","main","model","weaponLeft","weaponRight","materials","outlineParams","viewport","width","window","innerWidth","height","innerHeight","clock","bgColor","floor","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","addLights","loadedFX","fxConstructors","Map","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","AAEnabled","antiAliasing","_AA","renderer","finalRenderer","canvas","domElement","setSize","appendChild","animate","intensity","constructor","entries","removeLights","remove","initLoad","modelId","loadMain","loadWeaponR","loadWeaponL","all","attachWeapon","boneName","detachWeapon","saveMaterialReference","playNextAni","capture","_aniIdx","mediaRecorder","stop","toggleCapture","newIdx","aniIdx","addAnimationChain","animationChain","a","setIsLoading","mixer","addEventListener","aniSettings","batchLoader","file","path","animations","animFiles","anim","updateViewport","prev","current","aspect","captureAnimation","chunks","videoStream","captureStream","MediaRecorder","mimeType","codec","ondataavailable","event","data","onstop","superBuffer","Blob","URL","createObjectURL","document","createElement","body","href","download","click","revokeObjectURL","updateEyeTexture","eyeTexture","updateMouthTexture","mouthTexture","updateFaceTexture","updateFaceOffset","updateFace","updateMainModel","initPos","initRot","rotation","_eyeIdx","DEFAULT_FACE_IDX","_mouthIdx","weaponModel","aniCode","applyMaterialParams","updateWeapons","updateModel","some","updateAnimation","mainModel","stopAllAction","copy","updateOutline","updatedParams","outlineName","outlineGroup","materialParams","paramsList","materialCommonParams","materialExtraParams","directSetMatParams","matColorParams","currentColor","matColor","useTexture","flatShading","gradientMap","newMap","updateMaterialParams","updateMaterial","updateLights","updateAscii","newCanvas","replaceCanvas","AsciiEffect","showAscii","ascii","charSet","invert","get","effect","currentCanvas","background","oldCanvas","removeChild","frameId","requestAnimationFrame","dt","getDelta","rotateSpeed","rotateY","currentClipDuration","currentFaceChange","shift","render","app","this","incompatibleModels","weaponInfo","defaultFaceParams","AA","cancelAnimationFrame","renderLists","ref","enabled","currentSize","getSize","clipAction","currentAniSettings","setLoop","clampWhenFinished","setTime","duration","play","oldIdx","PureComponent","AniControl","lazy","Display","useContext","initCameraPosition","showAniControl","useCallback","defaultCameraPosition","cameraPositions","isNaN","controlsPositions","className","fallback","ControlPanel","SideBar","MainPage","location","classes","useStyles","useState","currentMode","setCurrentMode","useToggleState","sidebarOpen","toggleSidebarOpen","controlOpen","toggleControlOpen","isLoading","initLoadDone","setInitLoadDone","useRef","showSettings","viewerRef","setViewport","useEffect","pathname","updateViewportSize","removeEventListener","clientHeight","clientWidth","loadingMsg","root","CssBaseline","mode","open","openSidebarButton","openControl","handler","content","process","App","routeProps","initVal","setState","faceOffset","c110350_02","c110340_02","c110018_02","c110370_01","c100015_04","c110267_01","c110050_02","c110291_01","c110354_01","c110345_01","c110266_01","c110365_01","c110346_01","c110366_01","c110299_02","c110360_01","c110307_01","c110322_01","c110356_01","c110300_01","c110344_01","c110053_03","c110368_01","c110367_01","c110003_02","c110270_02","c110341_03","DRAWER_WIDTH","DRAWER_BGCOLOR","baseUrl","matParamsDetails","wireframe","default","emissive","min","max","step","emissiveIntensity","specular","metalness","roughness","shininess","options","defaultMatParams","asciiSet","lightId","sideContent","supportedCodecs","et","ei","mt","mi","wr","wl","bg","cam","ts","showAC","showOutline","rot","cc","MATERIALS","Basic","Toon","Lambert","Phong","Standard","Sword","Blade","Dagger","Axe","Lance","Bow","Wand","Staff","Manacaster","WEAPON_LIST","Male","Female","FILTERS","rarity","element","WEAPON_FILTERS","spFaceTextures","commonBG","green","black","grey","white","c","d","w","b","e","h","o","r","c100034_01","d210078_01","d210114_01","h0010001","h0010001_02","h0040101","r0070401","r0080401","smith","face1","face2","face3","face4","face5","face6","face7","face8","face9","videoCodecs","drawerWidth","drawerBG","makeStyles","theme","display","drawer","overflowY","drawerPaper","alignItems","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","marginBottom","padding","top","left","margin","borderRadius","transition","cursor","zIndex","justifyContent","fontSize","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"43BAUaA,EAAY,SAAAC,GACrB,OACIA,GACA,IAAIC,SAAQ,SAAAC,IACR,IAAIC,KAAYC,KAAKJ,EAAKE,OAczBG,EAAuB,WAChC,IAAMC,EAAgB,IAAIC,sBAA0B,GAAK,IACzDD,EAAcE,QAAQC,KAAKC,GAAK,GAChC,IAAMC,EAAgB,IAAIJ,oBAE1B,OADAI,EAAcC,SAAU,EACjB,IAAIL,OAAWD,EAAeK,IAG5BE,EAAe,SAAAC,GAAE,gBAAOC,IAAP,gBAAwBD,EAAxB,YAA8BA,EAA9B,SAEjBE,EAAiB,SAAAF,GAAE,gBAAOC,IAAP,gBAAwBD,EAAxB,YAA8BA,EAA9B,SAEnBG,EAAoB,SAAAC,GAC7B,IAAKA,EAAM,MAAO,GAClB,IAAMC,EAAUD,EAAKE,SAAS,KACxBC,EAAaH,EAAKI,UAAU,EAAGJ,EAAKK,OAAS,GAInD,MAAO,CACHC,UAJcX,EAAaQ,GAK3BI,YAJgBT,EAAeK,GAK/BF,UACAO,SAAUA,YAASL,KAIdM,EAAc,SAAAC,GACvB,GAAKA,EAAL,CAEA,IAAMC,EAAe,IAAIC,IAInBC,EAAgB,SAAAC,GAAM,OAAIA,GAFZ,SAAAA,GAAM,OAAKH,EAAaI,IAAID,EAAOE,MAEbC,CAAYH,IAOhDI,EAAU,SAAAJ,GACRD,EAAcC,IANA,SAAAA,GAClBH,EAAaQ,IAAIL,EAAOE,MACxBF,EAAOI,UAIoBE,CAAcN,IAG7CJ,EAAKW,UAAS,SAAAC,GACLA,EAAMC,SAGXC,YAAyBF,EAAMG,UAAU,SAAAC,GACjCA,EAAIC,KAAKT,EAAQQ,EAAIC,KACrBD,EAAIE,WAAWV,EAAQQ,EAAIE,WAE/BV,EAAQQ,MAGZR,EAAQI,EAAMO,gBAIhBC,EAAoB,SAACC,EAAcC,GACrC,IAAMC,EAAO,cAAUF,EAAV,YACb,OAAO,IAAI1C,EAAM4C,GAASD,IAGjBE,EAAiB,SAAC,GAIxB,IAHHC,EAGE,EAHFA,OAGE,IAFFJ,oBAEE,MAFa,QAEb,EADFxB,EACE,EADFA,YAEK4B,GACLA,EAAOd,UAAS,SAAAC,GACZ,GAAKA,EAAMC,QAAyB,YAAfD,EAAMc,KAA3B,CAEA,IAAMC,EAAU,gBAAYN,EAAZ,YACVN,EAAWH,EAAMG,SAEvB,GAAIa,MAAMC,QAAQd,GAAW,CACzB,GAAIA,EAASe,OAAM,SAAAd,GAAG,OAAIA,EAAIW,QAAiB9B,EAAa,OAE5DkB,EAASgB,SAAQ,SAACf,EAAKgB,GACnB,IAAMC,EAAUpC,GACV,IAAIlB,iBAAsBH,KAAKqB,GAC/BkB,EAASiB,GAAGf,IAEdpB,IAAaoC,EAAQC,SAAWvD,gBAEpC,IAIMwD,EAAcf,EAChBC,EALmB,CACnBJ,IAAKgB,EACLG,UAAU,IAMdD,EAAYT,KAAOV,EAAIU,KACnBV,EAAIE,YAAWiB,EAAYjB,UAAYF,EAAIE,WAE3CrB,GAAekB,EAASiB,GAAGf,KAC3BF,EAASiB,GAAGf,IAAIT,UAEpBO,EAASiB,GAAGxB,UACZI,EAAMG,SAASiB,GAAKG,SAErB,CACH,GAAIpB,EAASY,KAAgB9B,EAAa,OAC1C,IAAMoC,EAAUpC,GACV,IAAIlB,iBAAsBH,KAAKqB,GAC/BkB,EAASE,IAEXpB,IAAaoC,EAAQC,SAAWvD,gBACpC,IAIMwD,EAAcf,EAAkBC,EAJf,CACnBJ,IAAKgB,EACLG,UAAU,IAIdD,EAAYT,KAAOX,EAASW,KAExBX,EAASG,YAAWiB,EAAYjB,UAAYH,EAASG,WAErDrB,GAAekB,EAASE,KACxBF,EAASE,IAAIT,UAEjBO,EAASP,UAETI,EAAMG,SAAWoB,QA0ChBE,EAAgB,SAAC,EAAcC,GAAa,IAAzBvB,EAAwB,EAAxBA,SAC5BD,YAAyBC,GAAU,SAAAwB,GAC/BA,EAAID,QAAUA,MAKhBE,EAAsB,SAACzB,EAAU0B,GAEnC1B,EAAS2B,KAAO3B,EAAS2B,IACzB3B,EAAS4B,aAAc,EAEvB5B,EAAS6B,gBAAkB,SAAAC,GACvB,IACMC,EAAe,uEACuC,KAAPL,EADhC,mBAGrBI,EAAOE,aAAeF,EAAOE,aAAaC,QAJ5B,0BAMVF,IAGRG,YAAW,WACPlC,EAAS2B,KAAO3B,EAAS2B,IACzB3B,EAAS4B,aAAc,IACxB,MAIMO,EAAoB,SAAC,EAAcT,GAAU,IAAtB1B,EAAqB,EAArBA,SAEhC,GADmBa,MAAMC,QAAQd,GACjC,CACI,IAAMoC,EAAU,IAAIjD,IACpBa,EAASgB,SAAQ,SAAAqB,GACTD,EAAQ9C,IAAI+C,EAAE9C,QAElBkC,EAAoBY,EAAGX,GACvBU,EAAQ1C,IAAI2C,EAAE9C,eAItBkC,EAAoBzB,EAAU0B,IAIrBY,EAAqB,SAAC,EAAcC,GAAW,IAAvBvC,EAAsB,EAAtBA,SAEjC,GADmBa,MAAMC,QAAQd,GACjC,CACI,IAAMoC,EAAU,IAAIjD,IACpBa,EAASgB,SAAQ,SAAAqB,GACTD,EAAQ9C,IAAI+C,EAAE9C,QAElB8C,EAAEE,MAAQ,IAAI3E,QAAY2E,GAC1BH,EAAQ1C,IAAI2C,EAAE9C,eAItBS,EAASuC,MAAQ,IAAI3E,QAAY2E,IAIxBC,EAAgB,SAACnD,EAAQkB,GAClC,GAAKlB,EAAL,CACA,IAAMoD,EAAW,GAiBjB,OAhBApD,EAAOO,UAAS,SAAAC,GACZ,GAAKA,EAAMC,OAAX,CAEA,IAAM4C,EAAU7C,EAAM8C,QACtBD,EAAQ/B,KAAO,UACf+B,EAAQzE,QAAUsC,EAAOqC,OAEzBH,EAASI,KAAKH,IAtFE,SAACrD,EAAQ+B,GAE7BrB,YAAyBV,EAAOW,UAAU,SAAAwB,GAElCA,EAAItB,KAAKsB,EAAItB,IAAIT,UACrB+B,EAAI/B,aAGR,IAAMqD,EAAajC,MAAMC,QAAQzB,EAAOW,UACxCX,EAAOW,SAAW8C,EACZ,IAAIjC,MAAMxB,EAAOW,SAASpB,QAAQmE,KAAK3B,GACvCA,EA6EF4B,CAAgBN,EA9GM,SAAC,GAA8B,IAA5BhB,EAA2B,EAA3BA,KAAMa,EAAqB,EAArBA,MAAOhB,EAAc,EAAdA,QACpCH,EAAc,IAAIxD,mBAAuB,CAC3C2E,QACAhB,UACA0B,KAAMrF,WACNsF,aAAa,EACb7B,UAAU,IAYd,OAVAD,EAAYS,gBAAkB,SAAAC,GAC1B,IACMC,EAAe,mEACmC,KAAPL,EAD5B,eAGrBI,EAAOE,aAAeF,EAAOE,aAAaC,QAJ5B,0BAMVF,IAGDX,EA2FiB+B,CAAsB5C,IAGtCV,EAAMuD,eACNV,EAAQW,KAAKxD,EAAMyD,SAAUzD,EAAM0D,YAEvC1D,EAAM2D,OAAO9D,IAAIgD,OAEdD,IAGEgB,EAAyB,SAACC,EAAgBC,GACnD,IAAMC,EAAS,CAAEC,EAAG,EAAGC,EAAG,GAC1B,GAAIJ,IAAmBC,EAAa,CAChC,IAAMI,EAAaC,IAAeL,IAAgB,CAC9CE,EAAG,EACHC,EAAG,GAEDG,EAAgBD,IAAeN,IAAmB,CAAEG,EAAG,EAAGC,EAAG,GAEnEF,EAAOC,EAAII,EAAcJ,EAAIE,EAAWF,EACxCD,EAAOE,EAAIG,EAAcH,EAAIC,EAAWD,EAE5C,OAAOF,GAGEM,EAAqB,SAACC,EAAYC,GAC3C,IAAMR,EAAS,CAAEC,EAAG,EAAGC,EAAG,GAC1B,GAAIK,IAAeC,EAAS,CACxB,IAAML,EAAaM,IAAW,OAAD,OAAQD,IAC/BH,EAAgBI,IAAW,OAAD,OAAQF,IAExCP,EAAOC,EAAII,EAAcJ,EAAIE,EAAWF,EACxCD,EAAOE,EAAIG,EAAcH,EAAIC,EAAWD,EAE5C,OAAOF,GAGLU,EAAc,SAAAC,GAAI,OAAI,YAAyB,IAAtB7D,EAAqB,EAArBA,OAAQkD,EAAa,EAAbA,OACnClD,EAAOd,UAAS,SAAAC,GACZ,GAAmB,aAAfA,EAAMc,MAAwD,IAAjCd,EAAMO,SAASoE,OAAO5F,OAAvD,CAGA,IAAM6F,EAAc5E,EAAMO,SAASoE,OAAOE,MACtC,SAAAC,GAAK,OAAI9E,EAAMG,SAAS2E,EAAMC,eAAejE,OAApC,YAAkD4D,EAAlD,SAEb,GAAKE,EAAL,CAKA,IAZqB,IASbI,EAAiBJ,EAAjBI,MACFC,EAAMD,EADaJ,EAAVM,MAETC,EAAKnF,EAAMO,SAAS6E,WAAWD,GAC5B/D,EAAI4D,EAAO5D,EAAI6D,EAAK7D,IAAK,CAC9B,IAAMiE,EAAIF,EAAGG,KAAKlE,GAAK,IAAO2C,EAAOC,EAC/BuB,EAAIJ,EAAGK,KAAKpE,GAAK,IAAO2C,EAAOE,EACrCkB,EAAGM,MAAMrE,EAAGiE,EAAGE,GAEnBJ,EAAGpD,aAAc,SAIZ2D,EAAiBjB,EAAY,OAC7BkB,EAAmBlB,EAAY,SAGtCmB,EAAe,SAAAlB,GAAI,OAAI,YAItB,IAHH7D,EAGE,EAHFA,OAGE,IAFFJ,oBAEE,MAFa,QAEb,EADFoF,EACE,EADFA,UAEM5G,EAAcT,EAAeqH,GAC7BxE,GAAU,IAAItD,iBAAsBH,KAAKqB,GAC/CoC,EAAQC,SAAWvD,eAEnB,IAIMwD,EAAcf,EAAkBC,EAJf,CACnBJ,IAAKgB,EACLG,UAAU,IAGdX,EAAOd,UAAS,SAAAC,GACZ,GAAmB,aAAfA,EAAMc,MAAwD,IAAjCd,EAAMO,SAASoE,OAAO5F,OAAvD,CAEA,IAAM6F,EAAc5E,EAAMO,SAASoE,OAAOE,MACtC,SAAAC,GAAK,OAAI9E,EAAMG,SAAS2E,EAAMC,eAAejE,OAApC,YAAkD4D,EAAlD,SAEb,GAAKE,EAAL,CANqB,IAQbG,EAAkBH,EAAlBG,cACRxD,EAAYT,KAAOd,EAAMG,SAAS4E,GAAejE,KAEjDd,EAAMG,SAAS4E,GAAiBxD,SAI3BuE,EAAkBF,EAAa,OAC/BG,EAAoBH,EAAa,SAIjCI,EAAmB,SAAAtH,GAC5B,IAAKA,EAAM,MAAO,CAAC,GAAI,IAKvB,IAJA,IAAMuH,EAAWvH,EAAKwH,MAAM,KACtBC,EAAOF,EAASlH,OAChBqH,EAAW,GACXC,EAAgB,GACbjF,EAAI,EAAGA,EAAI+E,EAAM/E,IAAK,CAC3B,IAMIkF,EANAC,EAAY,EACZC,EAAc,EACdC,EAAU,KACVC,EAAU,KACVC,EAAW,KACXC,OAAO,EAEPC,EAAc,GACZC,EAAeb,EAAS7E,GAAG8E,MAAM,KAEvC,GAD8C,IAAxBY,EAAa/H,OAE/B6H,EAAUE,EAAa,OACpB,CAAC,IAAD,cACmBA,EADnB,GACFH,EADE,KACQC,EADR,KAEHH,EAAUL,EAASrH,OAAS,EAMhC,GAJI4H,IACAF,EAAUL,EAASrH,OACnBqH,EAASpD,KAAK2D,IAEdC,EAAQG,SAAS,KAAM,CAAC,IAAD,EACKH,EAAQV,MAAM,KADnB,iBAChBpF,EADgB,KACPkG,EADO,WAEvBN,EAAU5F,EAFa,oBAGHkG,GAHG,IAGvB,2BAA8B,CAAC,IAAD,UACGd,MAAM,KADT,mBACnBe,EADmB,KACdC,EADc,KAQ1B,GANY,OAARD,IACAV,EAAYY,WAAWD,IAEf,MAARD,IACAT,EAAwB,QAAVU,EAAkBE,IAAWC,SAASH,IAEpDD,EAAIF,SAAS,KAAM,CAAC,IAAD,EACEE,EAAIf,MAAM,KADZ,mBACZxB,EADY,KACN4C,EADM,KAEbC,EAAU,CAAED,KAAMH,WAAWG,IAEnCC,EADe,UAAe,MAAT7C,EAAe,MAAQ,QAA7B,QACMwC,EACrBL,EAAY7D,KAAKuE,KAhBF,oCAoBvBb,EAAUE,EAEdN,EAAa,CACTG,UACAC,UACAH,YACAC,cACAK,YAAaW,EAAmBX,IAGpCR,EAAcrD,KAAKsD,GAEvB,MAAO,CAACF,EAAUC,IAGTmB,EAAqB,SAAAX,GAC9B,IAAMY,EAASZ,EAAYa,MAAK,SAAAC,GAAM,OAAIA,EAAOL,QAC3CM,EAAa,IAAItI,IAAIuH,EAAYxG,KAAI,SAAAsH,GAAM,OAAIA,EAAOL,SAE5D,GAAIT,EAAY9H,SAAW6I,EAAW/F,KAIlC,OAHA4F,EAAOtG,SAAQ,SAAAwG,GACXA,EAAOrJ,GAAKoB,iBAET+H,EAGX,IAAMI,EAAa,GAOnB,OANAD,EAAWzG,SAAQ,SAAAmG,GACf,IAAIQ,EAAS,CAAER,OAAMhJ,GAAIoB,cAAQqI,OAAQ,GAAIC,SAAU,IACvCP,EAAOQ,QAAO,SAAAN,GAAM,OAAIA,EAAOL,OAASA,KAChDnG,SAAQ,SAAAwG,GAAM,OAAKG,EAASI,OAAOC,OAAOL,EAAQH,MAC1DE,EAAW7E,KAAK8E,MAEbD,GAGEO,EAAsB,SAACvB,EAAaL,GAC7C,IAAKK,EAAa,MAAO,GACzB,GAAoB,IAAhBL,EAAmB,OAAO,YAAIK,GAUlC,OARmB,IAAI7F,MAAMwF,GAAatD,OAAO7C,KAAI,SAACgI,EAAGjH,GAAJ,OAAc,IAAJA,KAQ7Cf,KANQ,SAAA0D,GAAM,OAC5B8C,EAAYxG,KAAI,gBAAGiH,EAAH,EAAGA,KAAagB,GAAhB,EAAShK,GAAT,iDAAC,eACVgK,GADS,IAEZhB,KAAMA,EAAOvD,UAGoBwE,QAGhCC,EAAkB,SAAC9J,EAAMoC,GAAU,IAAD,EACTkF,EAAiBtH,GADR,mBACpC0H,EADoC,KAC1BC,EAD0B,KAErCtH,EAASsH,EAActH,OAiB7B,OAhBesH,EAAchG,KAAI,SAACoI,EAAKrH,GAAO,IAClCqF,EAA0DgC,EAA1DhC,QAASC,EAAiD+B,EAAjD/B,QAASH,EAAwCkC,EAAxClC,UAAWC,EAA6BiC,EAA7BjC,YAAaK,EAAgB4B,EAAhB5B,YAE5C6B,EAAW,CACb5H,KAFaA,EAAK6H,OAAO5J,EAAS,EAAT,WAAiBqC,EAAI,GAAM,IAGpDuF,SAAUP,EAASK,GACnBC,UACAH,YACAC,cACAlI,GAAIoB,eAKR,OAHImH,IACA6B,EAAS7B,YAAcA,GAEpB6B,MAKFE,EAAoB,SAAAC,GAC7B,IAAMC,EAAS,IAAIC,WAAWF,GAAQxI,KAAI,SAACgI,EAAGjH,GAAJ,OAAe,IAAJA,EAAWyH,KAC1DxI,EAAM,IAAItC,cAAkB+K,EAAQD,EAAQ,EAAG9K,mBAKrD,OAJAsC,EAAI2I,UAAYjL,gBAChBsC,EAAI4I,UAAYlL,gBAChBsC,EAAI6I,iBAAkB,EAEf7I,I,wNC3eE8I,EAAkB,SAACC,EAAOC,GAAY,IACvCC,EAA6BD,EAA7BC,KAAMrC,EAAuBoC,EAAvBpC,IAAKsC,EAAkBF,EAAlBE,OAAQrC,EAAUmC,EAAVnC,MAC3B,OAAQoC,GACJ,IAAK,SACD,IAAIE,EACJ,OAAID,GACAC,EAAeJ,EAAMnC,GAAKsC,GAAQrC,GAC3B,2BACAkC,GADP,kBAEKnC,EAFL,2BAGWmC,EAAMnC,IAHjB,kBAISsC,EAJT,2BAKeH,EAAMnC,GAAKsC,IAL1B,kBAMarC,GAASsC,UAK1BA,EAAeJ,EAAMnC,GAAKC,GACnB,2BACAkC,GADP,kBAEKnC,EAFL,2BAEgBmC,EAAMnC,IAFtB,kBAE6BC,GAASsC,OAE1C,IAAK,QAGD,IAAMC,EAAiBF,EACjBG,IAAgBzC,GAAKsC,GACrBG,IAAgBzC,GAEtB,IAAKC,EACD,OAAOqC,EAAM,2BAEAH,GAFA,kBAGFnC,EAHE,2BAIImC,EAAMnC,IAJV,kBAKEsC,EALF,2BAMQH,EAAMnC,GAAKsC,IACXE,OAPR,2BAYAL,GAZA,kBAaFnC,EAbE,2BAaSmC,EAAMnC,IAASwC,KAGzC,IAAME,EAAS,GAIf,OAHAzC,EAAM/F,SAAQ,SAAAoE,GACVoE,EAAOpE,GAAKkE,EAAelE,MAExBgE,EAAM,2BAEAH,GAFA,kBAGFnC,EAHE,2BAIImC,EAAMnC,IAJV,kBAKEsC,EALF,2BAKgBH,EAAMnC,GAAKsC,IAAYI,OALvC,2BAQFP,GARE,kBAQMnC,EARN,2BAQiBmC,EAAMnC,IAAS0C,KACjD,IAAK,OAED,OACJ,IAAK,SAED,OAAOJ,EAAM,2BAEAH,GAFA,kBAGFnC,EAHE,2BAIImC,EAAMnC,IAJV,kBAKEsC,EALF,2BAKgBH,EAAMnC,GAAKsC,IAAYrC,OALvC,2BAQFkC,GARE,kBAQMnC,EARN,2BAQiBmC,EAAMnC,IAASC,KACjD,QACI,OAAOkC,I,QCxENQ,EAAkBC,0BAClBC,EAAkBD,0BAIzBE,EAAe,CAAEC,WAAY,CAAEC,MAFhBzB,YAAgBkB,IAAgBQ,UAAUxL,KAAM,UAY9D,SAASyL,EAAiBC,GAAQ,IAAD,EACPC,qBAAWlB,EAAiBY,GADrB,mBAC7B/C,EAD6B,KACnBsD,EADmB,KAGpC,OACI,cAACV,EAAgBW,SAAjB,CAA0BrD,MAAOF,EAAjC,SACI,cAAC8C,EAAgBS,SAAjB,CAA0BrD,MAAOoD,EAAjC,SACKF,EAAMI,aAfvBtC,OAAOuC,KAAKf,KAAiBvI,SACzB,SAAA8F,GAAG,OAAK8C,EAAa9C,GAAb,eAAyByC,IAAgBzC,OAErD8C,EAAaW,MAAMC,OAASjB,IAAgBgB,MAAMC,OAAOtK,KAAI,SAAAuK,GAAK,sBAC3DA,O,mnBCDMC,EAAU,SAAAnM,GAAI,OAAIA,EAAKoM,WAAW,SAElC5L,EAAW,SAAAR,GAAI,OAAImM,EAAQnM,IAASA,EAAKE,SAAS,OAGlDsB,EAA2B,SAACV,EAAQuL,GACzC/J,MAAMC,QAAQzB,GACdA,EAAO2B,SAAQ,SAAAnB,GAAK,OAAI+K,EAAS/K,MAGrC+K,EAASvL,IAGAwL,EAAqB,SAAAtK,GAC9B,GAAsB,IAAlBA,EAAO3B,OAAX,CACA,IAAIkM,GAAoB,EACpBC,GAAsB,EAC1BxK,EAAOS,SAAQ,SAAAgK,GACX,GAAKA,EAAL,CADoB,MAGQA,EAAMjF,MAAM,KAHpB,iBAGbkF,EAHa,KAGDlE,EAHC,WAKpB,GAAKA,EAAM,GAAX,CAEA,IAAImE,EAA4B,IAAjBnE,EAAMnI,OAAemI,EAAM,GAAKA,EAAMoE,KAAK,KAE1D,OAAQF,GACJ,IAAK,KACDH,GAAoB,EACpB,MACJ,IAAK,KACDC,GAAsB,EACtB,MACJ,IAAK,KAED,IAAMK,EAAY/C,YAAgB6C,EAAU,aAC5CtB,IAAY,WAAZ,MAAsCwB,EACtC,MACJ,IAAK,KACgB,gBAAbF,IACAA,EAAQ,WAAOA,IAEnB,MACJ,IAAK,MACDA,EAAWA,EAASnF,MAAM,KAAK7F,KAAI,SAAAmL,GAAC,OAAIrE,WAAWqE,MA3BvC,MA+BGC,IAAQL,GAAvBtG,EA/BY,EA+BZA,MAAOmC,EA/BK,EA+BLA,IAETyE,EAA8B,SAAbL,GAAoC,UAAbA,EAE9CtB,IAAajF,GAAOmC,GAAOyE,EACrBC,QAAqB,SAAbN,GACRA,OAGVtB,IAAY,MAAZ,QAAmCA,IAAY,MAAZ,GAE9BkB,IACDlB,IAAY,MAAZ,WAAsCA,IAAY,MAAZ,IAErCmB,IACDnB,IAAY,MAAZ,aAAwCA,IAAY,MAAZ,MAInC6B,EAAoB,SAAA3B,GAC7B,IAAMlL,EAASkL,EAAMlL,OACjB+I,EAAS,GAyBb,OAxBAmC,EAAM9I,SAAQ,SAACsH,EAAKrH,GAAO,IACfuF,EAAmC8B,EAAnC9B,SAAUD,EAAyB+B,EAAzB/B,QAASG,EAAgB4B,EAAhB5B,YACvBF,IAQAmB,GANIA,EADM,IAAN1G,EACS0G,EAAOa,OAAOhC,GAEdmB,EAAOa,OACZhC,IAAasD,EAAM7I,EAAI,GAAGuF,SAAWA,EAAW,KAGxCgC,OAAO,MAE3Bb,EAASA,EAAOa,OAAOjC,GAGvB,IAAMmF,EAAUC,EAAmBrD,GACnCX,EAASA,EAAOa,OAAOkD,GACvB,IAAME,EAAWC,EAAiBnF,GAClCiB,EAASA,EAAOa,OAAOoD,GAEnB3K,EAAIrC,EAAS,IACb+I,EAASA,EAAOa,OAAO,SAGxBb,GAGLgE,EAAqB,SAAArD,GACvB,IAAIX,EAAS,GAOb,OANAI,OAAOuC,KAAKwB,KAAY9K,SAAQ,SAAA+K,GAAW,IAAD,EACRD,IAAWC,GAAjCjF,EAD8B,EAC9BA,IAAKkF,EADyB,EACzBA,aACT1D,EAAIxB,KAASkF,IACbrE,EAASA,EAAOa,OAAP,WAAkBuD,EAAlB,YAA4BzD,EAAIxB,SAG1Ca,GAGLkE,EAAmB,SAAAnF,GACrB,IAAKA,EAAa,MAAO,GACzB,IAAIiB,EAAS,GAWb,OAVAjB,EAAY1F,SAAQ,SAAAwG,GAAW,IACnBL,EAA2BK,EAA3BL,KAAMS,EAAqBJ,EAArBI,OAAQC,EAAaL,EAAbK,SACjBV,IACDS,IACAD,EAASA,EAAOa,OAAP,aAAoBrB,EAApB,YAA4BS,KAErCC,IACAF,EAASA,EAAOa,OAAP,aAAoBrB,EAApB,YAA4BU,SAGtCF,GAGEsE,EAAgB,SAAAC,GACzB,IAAIC,EAAY,GAUhB,OATApE,OAAOuC,KAAK4B,GAAalL,SAAQ,SAAA8F,GAC7B,IAAIsF,EAAM,GACVrE,OAAOuC,KAAK4B,EAAYpF,IAAM9F,SAAQ,SAAAqL,GAC9BH,EAAYpF,GAAKuF,IACjBD,EAAIvJ,KAAKwJ,MAGjBF,EAAUrF,GAAOsF,KAEdD,GAGEG,EAAkB,SAACC,EAAOC,GACnC,IAAMC,EAAa1E,OAAOuC,KAAKkC,GAE/B,OAAOD,EAAMzE,QAAO,SAAA4E,GAChB,OAAOD,EAAW1L,OAAM,SAAA+F,GACpB,OAAK0F,EAAQ1F,GAAKlI,QACX4N,EAAQ1F,GAAKF,SAAS8F,EAAG5F,WAK/B6F,EAAqB,SAAApK,GAC9B,IAAMqK,EAAWrK,EAAMN,QAAQ,IAAK,MAEpC,MAAM,IAAN,QAAY,UAAY,WAAa2K,GAAUC,SAAS,KAAKC,OAAO,KAG3DC,EAAuB,SAAC1N,EAAQ2N,EAAcC,GACvD,IAAK5N,EAAQ,OAAO,KACpB,IAAM6N,EAAQ,CAAEC,SAAU,WAC1B,OAAOpF,OAAOuC,KAAKjL,GAAQa,KAAI,SAAA4G,GAAG,OAC9B,cAAC,IAAD,CACIsG,QAAQ,YAERC,aAAYhO,EAAOyH,GACnBwG,YAAA,UAAcL,EAAS,UAAMA,EAAN,KAAqB,IAA5C,OAAiDnG,GACjDyG,QAASP,EACTE,MAAOA,EANX,SAQKpG,GANIA,OAYJ0G,EAAiB,SAACC,EAAQC,GAAT,oBACnBC,IAAYF,GADO,YACIE,IAAYF,GADhB,gBAC+BG,IAAYF,KAE5DG,EAAiB,SAAAJ,GAAM,oBACzBE,IAAYF,GADa,YACFE,IAAYF,GADV,oBAC6BE,IAAYF,GADzC,YAGvBK,EAAiB,SAAAL,GAAM,oBAAWE,IAAYF,GAAvB,YAEvBM,EAAc,SAAAN,GAAM,oBAAWE,IAAYF,GAAvB,YAEpBO,EAAe,SAAAP,GAKxB,IAJA,IAAMQ,EAAcC,IAAaT,GAC3BlP,EAAOoP,IAAYF,GACrBU,EAAM,cAAU5P,GAEX0C,EAAI,EAAGA,GAAKgN,EAAahN,IAC9BkN,EAASA,EAAO3F,OAAP,WAAkBjK,EAAlB,iBAA+B0C,EAA/B,MAGb,OADAkN,EAASA,EAAOrB,MAAM,GAAI,IAKjBsB,EAAY,SAAAX,GAKrB,IAJA,IAAMY,EAAcC,IAAUb,GACxBlP,EAAOoP,IAAYF,GACrBU,EAAM,aAAS5P,GAEV0C,EAAI,EAAGA,GAAKoN,EAAapN,IAC9BkN,EAASA,EAAO3F,OAAP,WAAkBjK,EAAlB,iBAA+B0C,EAA/B,MAGb,OADAkN,EAASA,EAAOrB,MAAM,GAAI,IAKjByB,EAAe,SAACd,EAAQC,GACjC,IAAMnP,EAAOoP,IAAYF,GACzB,MAAe,SAAXC,EACM,OAAN,OAAcnP,EAAd,YAAsBA,EAAtB,4BAA8CA,EAA9C,oBAA8DA,EAA9D,oBAA8EA,EAA9E,oBAA8FA,EAA9F,WAEE,OAAN,OAAcA,EAAd,YAAsBA,EAAtB,4BAA8CA,EAA9C,oBAA8DA,EAA9D,oBAA8EA,EAA9E,oBAA8FA,EAA9F,a,yRCgvBWiQ,E,4MAvwBXC,UAAY,WAAO,IAAD,IACd,EAAKC,OAAS,GACd,EAAKC,UAAY,CACbC,KAAM,EAAK3E,MAAM4E,MAAM1Q,GACvB2Q,WAAYxQ,YAAkB,EAAK2L,MAAM4E,MAAMC,YAC/CC,YAAazQ,YAAkB,EAAK2L,MAAM4E,MAAME,cAEpD,EAAKC,UAAY,GAGjB,EAAKvM,SAAW,GAChB,EAAKwM,cAAL,eAA0B,EAAKhF,MAAMvH,SAGrC,EAAKwM,SAAW,EAAKjF,MAAMiF,UAAY,CACnCC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAInB,EAAKC,MAAQ,IAAI5R,QAGjB,EAAK2M,MAAQ,IAAI3M,QACjB,EAAK6R,QAAU,EAAKxF,MAAMwF,QAG1B,EAAKC,MAAQhS,cACb,EAAK6M,MAAM7K,IAAI,EAAKgQ,OAGpB,EAAKC,OAAS,IAAI/R,oBACdgS,IAAWC,MACX,EAAKX,SAASC,MAAQ,EAAKD,SAASI,OACpCM,IAAWE,KACXF,IAAWG,KAEf,EAAKC,eAAiB,EAAK/F,MAAM+F,gBAAkB,CAAC,EAAG,EAAG,KAC1D,IAAKL,OAAOM,UAASC,IAArB,oBAA4B,EAAKF,iBACjC,EAAKL,OAAOQ,yBAGZ,EAAKC,SAAW,IAAIC,IAAc,EAAKV,OAAQ,EAAKW,OACpD,EAAKC,iBAAmB,EAAKtG,MAAMsG,kBAAoB,CAAC,EAAG,EAAG,IAC9D,IAAKH,SAAS1P,QAAOwP,IAArB,oBAA4B,EAAKK,mBACjC,EAAKH,SAAS5G,SA7CA,IAgDNgB,EAAW,EAAKP,MAAhBO,OACR,EAAKgG,UAAUhG,GAGf,EAAKiG,SAAW,IAAItR,IACpB,EAAKuR,eAAiB,IAAIC,IAG1B,EAAKC,WAAa,IAAIhT,gBAAoB,CACtCiT,WAAW,EACXC,OAAO,IAEX,EAAKF,WAAWG,eAAiBnT,eAEjC,EAAKoT,aAAe,IAAIpT,gBAAoB,CACxCiT,WAAW,EACXC,OAAO,IAEX,EAAKE,aAAaD,eAAiBnT,eAEnC,IAAMqT,EAAY,EAAKhH,MAAMiH,aAC7B,EAAKC,IAAMF,EAEX,EAAKG,SAAWH,EAAY,EAAKL,WAAa,EAAKI,aAEnD,EAAKK,cAAgB,EAAKD,SAC1B,EAAKE,OAAS,EAAKD,cAAcE,WACjC,EAAKF,cAAcG,QAAQ,EAAKtC,SAASC,MAAO,EAAKD,SAASI,QAC9D,EAAKgB,MAAMmB,YAAY,EAAKH,QAE5B,EAAKI,W,EAuBTlB,UAAY,SAAAhG,GACR,EAAKA,OAAS,GACdA,EAAOxJ,SAAQ,YAAoD,IAAD,EAAhD4B,EAAgD,EAAhDA,OAAQuG,EAAwC,EAAxCA,KAAM5G,EAAkC,EAAlCA,MAAOoP,EAA2B,EAA3BA,UAAcpR,EAAa,qDAC9D,GAAKqC,EAAL,CAIA,IAHA,IAAMgP,EAAW,UAAMzI,EAAN,SACXsB,EAAQ,IAAI7M,EAAMgU,GAAarP,EAAOoP,GAE5C,MAA2B5J,OAAO8J,QAAQtR,GAA1C,eAAmD,CAAC,IAAD,sBAAvCuG,EAAuC,KAAlCC,EAAkC,KAC/C,OAAQD,GACJ,IAAK,WACD,IAAMoE,EAAWnE,EAAM7G,KAAI,SAAAkF,GAAC,OAAIA,GAAK,MACrC,EAAAqF,EAAMwF,UAASC,IAAf,oBAAsBhF,IACtB,MACJ,QACIT,EAAM3D,GAAOC,GAGzB,EAAKwD,MAAM7K,IAAI+K,GACf,EAAKD,OAAO3H,KAAK4H,Q,EAIzBqH,aAAe,kBAAM,EAAKtH,OAAOxJ,SAAQ,SAAAyJ,GAAK,OAAI,EAAKF,MAAMwH,OAAOtH,O,EAGpEuH,SAAW,WAAO,IAAD,IACPC,EAAU,EAAKtD,UAAUC,KACzB/P,EAAYX,YAAa+T,GACzBC,EAAW9U,YAAUyB,GAErBkQ,EAAW,UAAG,EAAKJ,UAAUI,mBAAlB,aAAG,EAA4BlQ,UAC1CsT,EAAc/U,YAAU2R,GAExBD,EAAU,UAAG,EAAKH,UAAUG,kBAAlB,aAAG,EAA2BjQ,UACxCuT,EAAchV,YAAU0R,GAE9B,OAAOxR,QAAQ+U,IAAI,CAACH,EAAUC,EAAaC,K,EAG/CE,aAAe,SAAC7E,EAAQxK,GACpB,IAAMsP,EAAQ,iBAAatP,EAAK,IAChC,EAAKyL,OAAOE,KAAKhP,UAAS,SAAAC,GAClBA,EAAMc,OAAS4R,GAAsC,IAA1B1S,EAAMwK,SAASzL,QAC1CiB,EAAMH,IAAI+N,O,EAKtB+E,aAAe,SAAAvP,GACX,IAAM6D,EAAG,gBAAY7D,GACf4L,EAAQ,EAAKH,OAAO5H,GACrB+H,GACLA,EAAMrL,OAAOuO,OAAOlD,I,EAGxB4D,sBAAwB,WACpB,EAAKzD,UAAY,GACC,EAAKN,OAAOE,KACpBhP,UAAS,SAAAC,GACf,GAAKA,EAAMC,QAAyB,YAAfD,EAAMc,KAA3B,CADwB,IAGhBX,EAAaH,EAAbG,SAEJa,MAAMC,QAAQd,GACd,EAAKgP,UAAY,EAAKA,UAAUxG,OAAOxI,GAG3C,EAAKgP,UAAUnM,KAAK7C,Q,EAI5B0S,YAAc,WAAO,IACT1M,EADQ,eACRA,KAGJ,EAAKiE,MAAM0I,QAAQ/P,QAAU,EAAKgQ,UAAY5M,EAAO,IAErD,EAAK6M,cAAcC,OACnB,EAAK7I,MAAM8I,iBAEf,IAAMC,GAAU,EAAKJ,QAAU,GAAK5M,EACpC,EAAKiN,OAASD,G,EAGlBE,kB,uCAAoB,WAAO7T,EAAQ8T,EAAgB/M,GAA/B,2BAAAgN,EAAA,yDACXD,EADW,0DAGkBtN,YAAiBsN,GAHnC,mBAGTlN,EAHS,KAGCC,EAHD,KAIhB,EAAKF,KAAOE,EAActH,OAE1B,EAAKqL,MAAMoJ,cAAa,GAExBhU,EAAOiU,MAAQ,IAAI1V,iBAAqByB,GACxC,EAAKiU,MAAQjU,EAAOiU,MAEpB,EAAKV,QAAU,EACfvT,EAAOiU,MAAMlN,UAAYA,EACzB/G,EAAOiU,MAAMC,iBAAiB,WAAY,EAAKb,aAC/C,EAAKc,YAActN,EAAchG,KAAI,SAAAoI,GACjC,IAAMzB,EAAW,CACbT,UAAWkC,EAAIlC,UACfC,YAAaiC,EAAIjC,aAGrB,OADIiC,EAAI5B,cAAaG,EAASH,YAAc4B,EAAI5B,aACzCG,KAEL4M,EAAcxN,EAAS/F,KAAI,SAAAwT,GAC7B,IAAMC,EAAI,UAAMvV,EAAN,gBAAuBsV,EAAvB,QACV,OAAOtW,YAAUuW,MAGfC,EAAa,GA3BH,UA6BQtW,QAAQ+U,IAAIoB,GA7BpB,QA6BVI,EA7BU,OA+BhB3N,EAAclF,SAAQ,SAAA8S,GAAS,IACnBxN,EAAqBwN,EAArBxN,QAASC,EAAYuN,EAAZvN,QACXwD,EAAYxD,EACZsN,EAAUvN,GAASsN,WAAWlP,MAC1B,SAAA4D,GAAG,OAAIA,EAAI3H,OAAS4F,KAExBsN,EAAUvN,GAASsN,WAAW,GACpCA,EAAW/Q,KAAKkH,MAEpB,EAAK6J,WAAaA,EAElB,EAAKX,OAAS,EACd,EAAKhJ,MAAMoJ,cAAa,GA3CR,4C,4DAmEpBU,eAAiB,SAACC,EAAMC,GAAa,IACzB9E,EAAkB8E,EAAlB9E,MAAOG,EAAW2E,EAAX3E,OACX0E,EAAK7E,QAAUA,GAAS6E,EAAK1E,SAAWA,IAE5C,EAAK+B,cAAcG,QAAQrC,EAAOG,GAClC,EAAKK,OAAOuE,OAAS/E,EAAQG,EAC7B,EAAKK,OAAOQ,2B,EAGhBgE,iBAAmB,WACf,EAAKC,OAAS,GACd,EAAKC,YAAc,EAAK/C,OAAOgD,cAAc,IAExC,EAAKzB,gBACN,EAAKA,cAAgB,IAAI0B,cAAc,EAAKF,YAAa,CACrDG,SAAU,EAAKvK,MAAM0I,QAAQ8B,QAEjC,EAAK5B,cAAc6B,gBAAkB,SAAAC,GAAK,OACtC,EAAKP,OAAOvR,KAAK8R,EAAMC,OAC3B,EAAK/B,cAAcgC,OAAS,WACxB,EAAK5K,MAAMoJ,cAAa,GACxB,IAAMyB,EAAc,IAAIC,KAAK,EAAKX,OAAQ,CACtCjL,KAAM,eAEN9L,EAAM2X,IAAIC,gBAAgBH,GAC1B1B,EAAI8B,SAASC,cAAc,KAC/BD,SAASE,KAAK3D,YAAY2B,GAC1BA,EAAElG,MAAQ,gBACVkG,EAAEiC,KAAOhY,EACT+V,EAAEkC,SAAW,iBACblC,EAAEmC,QACFnG,OAAO4F,IAAIQ,gBAAgBnY,KAInC,EAAK4M,MAAMoJ,cAAa,GAExB,EAAKzL,OAAS,EAAKqC,MAAM4E,MAAMjH,OAC/B,EAAKC,SAAW,EAAKoC,MAAM4E,MAAMhH,SAEjC,EAAKoL,OAAS,EACd,EAAKJ,cAAchO,S,EAGvB4Q,iBAAmB,SAACzB,EAAMC,GACtB,IAAMvQ,EAAiBuQ,EAAQyB,WACzB/R,EAAcqQ,EAAK0B,WACjBpV,EAAiB2T,EAAjB3T,aAER,GAAIoD,IAAmBC,EAAvB,CACAgC,YAAgB,CACZjF,OAAQ,EAAKgO,OAAOE,KACpBtO,eACAoF,UAAWhC,IAEf,IAAME,EAASH,YAAuBC,EAAgBC,GACtD4B,YAAe,CACX7E,OAAQ,EAAKgO,OAAOE,KACpBhL,a,EAkBR+R,mBAAqB,SAAC3B,EAAMC,GACxB,IAAMvQ,EAAiBuQ,EAAQ2B,aACzBjS,EAAcqQ,EAAK4B,aACjBtV,EAAiB2T,EAAjB3T,aAER,GAAIoD,IAAmBC,EAAvB,CACAiC,YAAkB,CACdlF,OAAQ,EAAKgO,OAAOE,KACpBtO,eACAoF,UAAWhC,IAEf,IAAME,EAASH,YAAuBC,EAAgBC,GACtD6B,YAAiB,CACb9E,OAAQ,EAAKgO,OAAOE,KACpBhL,a,EAkBRiS,kBAAoB,SAAC7B,EAAMC,GACvB,EAAKwB,iBAAiBzB,EAAMC,GAC5B,EAAK0B,mBAAmB3B,EAAMC,I,EAGlC6B,iBAAmB,SAAA7B,GACf,EAAKrM,OAASqM,EAAQrM,OACtB,EAAKC,SAAWoM,EAAQpM,U,EAG5BkO,WAAa,SAAC/B,EAAMC,GAChB,EAAK4B,kBAAkB7B,EAAMC,GAC7B,EAAK6B,iBAAiB7B,I,EAG1B+B,gB,uCAAkB,WAAOhC,EAAMC,GAAb,iCAAAb,EAAA,yDACRnB,EAAUgC,EAAQ9V,GACpB6V,EAAK7V,KAAO8T,EAFF,wBAGV,EAAKhI,MAAMoJ,cAAa,GAClBxU,EAAYX,YAAa+T,GAJrB,SAMU7U,YAAUyB,GANpB,cAMJgQ,EANI,OAOFvO,EAAiB2T,EAAjB3T,aACRG,YAAe,CAAEC,OAAQmO,EAAOvO,iBAEhC,EAAKmC,SAASmM,KAAOpM,YAAcqM,EAAO,EAAKI,eAG/C,CAAC,QAAS,QAAQjO,SAAQ,SAAAiC,GACtB,IAAM6D,EAAG,gBAAY7D,GACjB+Q,EAAKlN,IACL,EAAK0L,aAAavP,MAK1B,EAAKyM,MAAMqC,OAAO,EAAKrD,OAAOE,MAC9B5P,YAAY,EAAK0P,OAAOE,MAGxB,EAAKF,OAAOE,KAAOC,EAGnBA,EAAMoH,QAAUpH,EAAMoB,SAAStN,QAC/BkM,EAAMqH,QAAUrH,EAAMsH,SAASxT,QAG/B,EAAK+M,MAAMhQ,IAAImP,GAGf,EAAKuH,QAAUC,IACf,EAAKC,UAAYD,IApCP,EAqCmB,EAAKpM,MAAM4E,MAAhCjH,EArCE,EAqCFA,OAAQC,EArCN,EAqCMA,SAChB,EAAKD,OAASA,EACd,EAAKC,SAAWA,EAGhB,CAAC,QAAS,QAAQ7G,SAAQ,SAAAiC,GACtB,IAAM6D,EAAG,gBAAY7D,GACfsT,EAAc,EAAK7H,OAAO5H,GAE3ByP,GACL,EAAKjE,aAAaiE,EAAatT,MA/CzB,EAmD2B,EAAKgH,MAAMF,UAAlCyM,EAnDJ,EAmDFjY,KAAe6H,EAnDb,EAmDaA,UACvB,EAAK8M,kBAAkBrE,EAAO2H,EAASpQ,GAEvC,EAAKqM,wBACL,EAAKgE,sBAEL,EAAKxM,MAAMoJ,cAAa,GAzDd,2BA6Dd,EAAK0C,WAAW/B,EAAMC,GAEtB,EAAKxB,wBACL,EAAKgE,sBAhES,4C,0DAmElBC,c,uCAAgB,WAAO1C,EAAMC,GAAb,SAAAb,EAAA,sDACZ,CAAC,QAAS,QAAQpS,QAAlB,uCAA0B,WAAMiC,GAAN,yBAAAmQ,EAAA,yDAChBtM,EADgB,gBACD7D,GAEjB+Q,EAAKlN,KAASmN,EAAQnN,GAHJ,oDAKtB,EAAK0L,aAAavP,GAClBjE,YAAY,EAAK0P,OAAO5H,IAEnBmN,EAAQnN,GARS,wBASlB,EAAK4H,OAAO5H,GAAO,KACnB,EAAK6H,UAAU7H,GAAO,GAEtB,EAAKrE,SAASqE,GAAO,KAZH,kCAgBtB,EAAKmD,MAAMoJ,cAAa,GAExB,EAAK1E,UAAU7H,GAAOxI,YAAkB,EAAK2L,MAAM4E,MAAM/H,IAlBnC,EAmBa,EAAK6H,UAAU7H,GAA1CjI,EAnBc,EAmBdA,UAAWC,EAnBG,EAmBHA,YAnBG,UAsBF1B,YAAUyB,GAtBR,QAsBhBgQ,EAtBgB,OAuBtB,EAAKH,OAAO5H,GAAO+H,EAGXvO,EAAiB2T,EAAjB3T,aACRG,YAAe,CACXC,OAAQ,EAAKgO,OAAO5H,GACpBxG,eACAxB,gBAGA,EAAK6P,UAAU7H,GAAKtI,UACpB,EAAKkQ,OAAO5H,GAAKqP,SAASrS,EAAIhG,KAAKC,IAGvC,EAAK0E,SAASqE,GAAOtE,YAAcqM,EAAO,EAAKI,eAE/C,EAAKqD,aAAazD,EAAO5L,GAEzB,EAAKwP,wBACL,EAAKgE,sBAEL,EAAKxM,MAAMoJ,cAAa,GA5CF,4CAA1B,uDADY,2C,0DAiDhBsD,Y,uCAAc,WAAO3C,EAAMC,GAAb,SAAAb,EAAA,yDACMrL,OAAOuC,KAAK0J,GAAM4C,MAC9B,SAAA9P,GAAG,OAAIkN,EAAKlN,KAASmN,EAAQnN,MAFvB,iEAMJ,EAAKkP,gBAAgBhC,EAAMC,GANvB,OAOV,EAAKyC,cAAc1C,EAAMC,GAPf,2C,0DAUd4C,gBAAkB,SAAC7C,EAAMC,GAAa,IAC1B1V,EAAoB0V,EAApB1V,KAAM6H,EAAc6N,EAAd7N,UACd,GAAI4N,EAAKzV,OAASA,EAsBdyV,EAAK5N,YAAcA,IACnB,EAAKkN,MAAMlN,UAAYA,OAvB3B,CACI,IAAM0Q,EAAY,EAAKpI,OAAOE,KAC9B,GAAIoF,EAAKzV,KAAM,CACXuY,EAAUxD,MAAMyD,gBADL,IAIHd,EAAqBa,EAArBb,QAASC,EAAYY,EAAZZ,QACjBY,EAAU7G,SAAS+G,KAAKf,GACxBa,EAAUX,SAASa,KAAKd,GAGxB,EAAKtO,OAAS,EAAKqC,MAAM4E,MAAMjH,OAC/B,EAAKC,SAAW,EAAKoC,MAAM4E,MAAMhH,SAEjC,EAAKyL,MAAQ,KACb,EAAKM,WAAa,GAGtB,EAAKV,kBAAkB4D,EAAWvY,EAAM6H,K,EAShD6Q,cAAgB,SAACjD,EAAMC,GACnB,EAAKhF,cAAL,eAA0BgF,GAC1B,IAAMiD,EAAgBnP,OAAOuC,KAAK2J,GAASnM,QACvC,SAAAhB,GAAG,OAAIkN,EAAKlN,KAASmN,EAAQnN,MAEjC,GAA6B,IAAzBoQ,EAActY,OAAlB,CAL+B,IAMvBgE,EAAiCqR,EAAjCrR,OAAQlB,EAAyBuS,EAAzBvS,KAAMH,EAAmB0S,EAAnB1S,QAASgB,EAAU0R,EAAV1R,MACXwF,OAAOuC,KAAK,EAAK7H,UACzBzB,SAAQ,SAAAmW,GAChB,IAAMC,EAAe,EAAK3U,SAAS0U,GAC9BC,GACLA,EAAapW,SAAQ,SAAA0B,GACbwU,EAActQ,SAAS,YACvBlE,EAAQzE,QAAU2E,GAElBsU,EAActQ,SAAS,SACvBzE,YAAkBO,EAAShB,GAE3BwV,EAActQ,SAAS,YACvBtF,YAAcoB,EAASnB,GAEvB2V,EAActQ,SAAS,UACvBtE,YAAmBI,EAASH,W,EAM5CkU,oBAAsB,WAAO,IACjBnW,EAAiB,EAAK2J,MAAM4E,MAA5BvO,aACF2T,EAAU,EAAKhK,MAAMoN,eACnBrI,EAHgB,eAGhBA,UACFsI,EAAU,sBACTC,KADS,YAETC,IAAoBlX,KAG3B0O,EAAUhO,SAAQ,SAAAf,GAuBd,GAtBAwX,IAAmBzW,SAAQ,SAAAgK,GAClBsM,EAAW1Q,SAASoE,KACzB/K,EAAI+K,GAASiJ,EAAQjJ,OAGzB0M,IAAe1W,SAAQ,SAAAgK,GACnB,GAAKsM,EAAW1Q,SAASoE,GAAzB,CACA,IAAM2M,EAAe1D,EAAQjJ,GACvB4M,EAAW,IAAIha,QAAY+Z,GACjC1X,EAAI+K,GAAS4M,MAGZ3D,EAAQ4D,aACL5X,EAAIC,MAAKD,EAAIE,UAAYF,EAAIC,KACjCD,EAAIC,IAAM,MAGV+T,EAAQ6D,cACR7X,EAAI6X,YAAc7D,EAAQ6D,YAC1B7X,EAAI2B,aAAc,GAGD,SAAjBtB,GAAmD,SAAxB2T,EAAQ8D,YAAwB,CAC3D,IAAIC,EACEtP,EAASxB,SAAS+M,EAAQ8D,aAChCC,EAASvP,YAAkBC,GAE3BsG,EAAUhO,SAAQ,SAAAf,GACdA,EAAI8X,YAAcC,EAClB/X,EAAI2B,aAAc,U,EAMlCqW,qBAAuB,SAACjE,EAAMC,GAAa,IAC/B3T,EAAiB,EAAK2J,MAAM4E,MAA5BvO,aACAuX,EAAyC5D,EAAzC4D,WAAYC,EAA6B7D,EAA7B6D,YAAaC,EAAgB9D,EAAhB8D,YACzB/I,EAH8B,eAG9BA,UACFsI,EAAU,sBACTC,KADS,YAETC,IAAoBlX,KAwC3B,GArCAmX,IAAmBzW,SAAQ,SAAAgK,GAClBsM,EAAW1Q,SAASoE,IAAUgJ,EAAKhJ,KAAWiJ,EAAQjJ,IAE3DgE,EAAUhO,SAAQ,SAAAf,GAAG,OAAKA,EAAI+K,GAASiJ,EAAQjJ,SAGnD0M,IAAe1W,SAAQ,SAAAgK,GACnB,GAAKsM,EAAW1Q,SAASoE,IAAUgJ,EAAKhJ,KAAWiJ,EAAQjJ,GAA3D,CAEA,IAAM2M,EAAe1D,EAAQjJ,GACvB4M,EAAW,IAAIha,QAAY+Z,GACjC3I,EAAUhO,SAAQ,SAAAf,GAAG,OAAKA,EAAI+K,GAAS4M,SAGvC5D,EAAK6D,aAAeA,IACfA,EAOD7I,EAAUhO,SAAQ,SAAAf,GACdA,EAAIC,IAAMD,EAAIE,iBACPF,EAAIE,UACXF,EAAI2B,aAAc,KATtBoN,EAAUhO,SAAQ,SAAAf,GACdA,EAAIE,UAAYF,EAAIC,IACpBD,EAAIC,IAAM,KACVD,EAAI2B,aAAc,MAW1BoS,EAAK8D,cAAgBA,GACrB9I,EAAUhO,SAAQ,SAAAf,GACdA,EAAI6X,YAAcA,EAClB7X,EAAI2B,aAAc,KAItBoS,EAAK+D,cAAgBA,EAAa,CAClC,IAAIC,EAAS,KACb,GAAoB,SAAhBD,EAAwB,CACxB,IAAMrP,EAASxB,SAAS6Q,GACxBC,EAASvP,YAAkBC,GAG/BsG,EAAUhO,SAAQ,SAAAf,GACdA,EAAI8X,YAAcC,EAClB/X,EAAI2B,aAAc,O,EAK9BsW,eAAiB,SAAClE,EAAMC,GAEpB,GAAID,EAAKnF,MAAMvO,eAAiB2T,EAAQpF,MAAMvO,aAAc,CAAC,IACjDA,EAAiB2T,EAAQpF,MAAzBvO,aAMR,OAJAG,YAAe,CAAEC,OAAQ,EAAKgO,OAAOE,KAAMtO,iBAC3C,EAAKmS,6BAEL,EAAKgE,sBAIT,EAAKwB,qBAAqBjE,EAAKqD,eAAgBpD,EAAQoD,iB,EAG3Dc,aAAe,SAACnE,EAAMC,GACdD,IAASC,IACT,EAAKnC,eACL,EAAKtB,UAAUyD,K,EAIvBmE,Y,uCAAc,WAAOpE,EAAMC,GAAb,uBAAAb,EAAA,yDACMrL,OAAOuC,KAAK0J,GAAM4C,MAC9B,SAAA9P,GAAG,OAAIkN,EAAKlN,KAASmN,EAAQnN,MAFvB,oDAMSmN,EAAXrR,OANE,wBAQN,EAAKyO,cAAgB,EAAKD,SARpB,iBASEE,EATF,EASEA,OACF+G,EAAY,EAAKjH,SAASG,WAChC,EAAK+G,cAAchH,EAAQ+G,GAC3B,EAAK/G,OAAS+G,EAZR,8BAgBL,EAAK5H,SAASnR,IAAI,SAhBb,kCAiBwB,+BAjBxB,iBAiBEiZ,EAjBF,EAiBEA,YAGR,EAAK9H,SAAS/Q,IAAI,SAClB,EAAKgR,eAAeR,IAAI,QAASqI,GACjC,EAAKC,YAtBC,wBAuBH,EAAKA,YAvBF,QAyBV,EAAKnH,cAAcG,QAAQ,EAAKtC,SAASC,MAAO,EAAKD,SAASI,QAzBpD,4C,0DA4BdkJ,UAAY,WAAO,IAAD,EAC8B,EAAKvO,MAAMwO,MAA/CC,EADM,EACNA,QAASnW,EADH,EACGA,MAAOkN,EADV,EACUA,QAASkJ,EADnB,EACmBA,OAC3BJ,EAAc,EAAK7H,eAAekI,IAAI,SAE5C,EAAKC,OAAS,IAAIN,EAAY,EAAKnH,SAAUsH,EAAS,CAAEC,WACxD,EAAKE,OAAOrH,QAAQ,EAAKtC,SAASC,MAAO,EAAKD,SAASI,QAEvD,IAAM+I,EAAY,EAAKQ,OAAOtH,WACxBuH,EAAgB,EAAKxH,OAC3B+G,EAAUnL,MAAM3K,MAAQA,EACxB8V,EAAUnL,MAAM6L,WAAatJ,EAE7B,EAAK6I,cAAcQ,EAAeT,GAClC,EAAK/G,OAAS+G,EACd,EAAKhH,cAAgB,EAAKwH,Q,EAQ9BP,cAAgB,SAACU,EAAWX,GACxB,EAAK/H,MAAM2I,YAAYD,GACvB,EAAK1I,MAAMmB,YAAY4G,I,EAG3B3G,QAAU,WACN,EAAKwH,QAAUC,sBAAsB,EAAKzH,SAC1C,IAAM0H,EAAK,EAAK5J,MAAM6J,WAEdC,EAAgB,EAAKrP,MAArBqP,YAKR,IAJA,EAAK5J,MAAM6J,QAASD,EAAcF,EAAKtb,KAAKC,GAAM,GAE9C,EAAKuV,OAAO,EAAKA,MAAM9J,OAAO4P,GAE9B,EAAK1S,aAAe,EAAKA,YAAY9H,OAAS,IAC1B,EAAK8P,OAAOE,KAAK0E,MAAMnM,MAEtC,EAAKT,YAAY,GAAGS,KAAO,EAAKqS,oBAAuB,IACrB,CACnC,IAAMC,EAAoB,EAAK/S,YAAYgT,QACnC9R,EAAqB6R,EAArB7R,OAAQC,EAAa4R,EAAb5R,SAChB,EAAKD,OAASA,EACd,EAAKC,SAAWA,EAIxB,EAAKwJ,cAAcsI,OAAO,EAAKpP,MAAO,EAAKoF,S,wNA95B3CP,OAAOwK,IAAMC,KACbA,KAAKpL,YACLoL,KAAK5P,MAAMoJ,cAAa,G,SAGsBwG,KAAK7H,W,sCAA5CpD,E,KAAMG,E,KAAaD,E,KAG1B+K,KAAKnL,OAAS,CACVE,OACAG,cACAD,cAIJ+K,KAAKpX,SAASmM,KAAOpM,YAAcoM,EAAMiL,KAAK5K,eAG9CL,EAAKqH,QAAUrH,EAAKqB,SAAStN,QAC7BiM,EAAKsH,QAAUtH,EAAKuH,SAASxT,QAGrBrC,EAAiBuZ,KAAK5P,MAAM4E,MAA5BvO,aACRG,YAAe,CAAEC,OAAQkO,EAAMtO,iBAGzB2R,EAAU4H,KAAK5P,MAAM4E,MAAM1Q,MAE5B8T,EAAQtH,WAAW,MACpBsH,EAAQxT,SAAS,OACjBqb,IAAmBxa,IAAI2S,I,wBAGnBvH,YAAQuH,KAAW,EACK3T,YAAkB2T,EAAU,KAA5CnT,EADU,EACVA,YACR2B,YAAe,CAAEC,OAAQkO,EAAMtO,eAAcxB,iBAEjD+a,KAAKnK,MAAMhQ,IAAIkP,GACfiL,KAAK5P,MAAMoJ,cAAa,G,2BAK5B,CAAC,QAAS,QAAQrS,SAAQ,SAAAiC,GACtB,IAAM6D,EAAG,gBAAY7D,GAErB,GAAK,EAAKgH,MAAM4E,MAAM/H,GAAtB,CAEA,IAAMiT,EAAa,EAAKpL,UAAU7H,GAC5ByP,EAAc,EAAK7H,OAAO5H,GACxBhI,EAAgBib,EAAhBjb,YACR2B,YAAe,CACXC,OAAQ6V,EACRjW,eACAxB,gBAGJyX,EAAYJ,SAASrS,GAAKiW,EAAWvb,QAAUV,KAAKC,GAAK,EAEzD,EAAK0E,SAASqE,GAAOtE,YAAc+T,EAAa,EAAKtH,eAErD,EAAKqD,aAAa,EAAK5D,OAAL,gBAAqBzL,IAASA,OAIpD4W,KAAKzD,QAAUC,IACfwD,KAAKvD,UAAYD,IACX2D,EAAoB,CACtBpE,aAAc3D,EACdpK,SAAUwO,IACVX,WAAYzD,EACZrK,OAAQyO,KAEZwD,KAAK9D,WAAWiE,EAAmBH,KAAK5P,MAAM4E,OAG9CgL,KAAKpH,wBACLoH,KAAKpD,sBAGLoD,KAAKnK,MAAMhQ,IAAIkP,GAEfiL,KAAK5P,MAAMoJ,cAAa,G,EAGawG,KAAK5P,MAAMF,UAAlCyM,E,EAANjY,KAAe6H,E,EAAAA,UACvByT,KAAK3G,kBAAkBtE,EAAM4H,EAASpQ,G,yLAGjB4N,G,uEACfC,EAAU4F,KAAK5P,MA6BrB4P,KAAK9F,eAAeC,EAAK9E,SAAU+E,EAAQ/E,UAE3C2K,KAAKlD,YAAY3C,EAAKnF,MAAOoF,EAAQpF,OAErCgL,KAAKhD,gBAAgB7C,EAAKjK,UAAWkK,EAAQlK,WAE7C8P,KAAK5C,cAAcjD,EAAKtR,QAASuR,EAAQvR,SAEzCmX,KAAK3B,eAAelE,EAAMC,GAE1B4F,KAAK1B,aAAanE,EAAKxJ,OAAQyJ,EAAQzJ,QAEvCqP,KAAKzB,YAAYpE,EAAKyE,MAAOxE,EAAQwE,OAGjCzE,EAAKvE,UAAYwE,EAAQxE,UACzBoK,KAAKpK,QAAUwE,EAAQxE,SAIvBwE,EAAQtB,QAAQ/P,SAAWoR,EAAKrB,QAAQ/P,QACxCiX,KAAK1F,mBAIT0F,KAAKI,GAAKhG,EAAQ/C,a,qJAIlBgJ,qBAAqBL,KAAKX,SAC1Bla,YAAY6a,KAAKtP,OACjBsP,KAAKvG,MAAQ,KACbuG,KAAKrK,MAAQ,KACbqK,KAAKlK,OAAS,KACdkK,KAAKzJ,SAAW,KAChByJ,KAAKtP,MAAQ,KACbsP,KAAKzI,SAAW,KAChByI,KAAKjJ,WAAWuJ,YAAY1a,UAC5Boa,KAAKjJ,WAAWnR,UAChBoa,KAAKjJ,WAAa,KAClBiJ,KAAK7I,aAAamJ,YAAY1a,UAC9Boa,KAAK7I,aAAavR,UAClBoa,KAAK7I,aAAe,O,+BAgwBd,IAAD,OACL,OACI,qBACIoJ,IAAK,SAAA1N,GACD,EAAK4D,MAAQ5D,O,uBA/qBtB2N,GACH,GAAIA,IAAYR,KAAK1I,IAArB,CACA0I,KAAK1I,IAAMkJ,EAEX,IAAMC,EAAc,IAAI1c,UAMxB,GALAic,KAAKzI,SAASmJ,QAAQD,GAEtBT,KAAKzI,SAAWiJ,EAAUR,KAAKjJ,WAAaiJ,KAAK7I,aACjD6I,KAAKzI,SAASI,QAAQ8I,EAAYzW,EAAGyW,EAAYxW,IAE7C+V,KAAK5P,MAAMwO,MAAM7V,OAArB,CAEAiX,KAAKxI,cAAgBwI,KAAKzI,SAZd,IAcJE,EAAWuI,KAAXvI,OACF+G,EAAYwB,KAAKzI,SAASG,WAChCsI,KAAKvB,cAAchH,EAAQ+G,GAC3BwB,KAAKvI,OAAS+G,M,2BAsIPrF,GACP6G,KAAKjH,QAAUI,EADA,IAEPM,EAAUuG,KAAVvG,MACFQ,EAAO+F,KAAKjG,WAAWZ,GAC7BM,EAAMyD,gBACN,IAAM7N,EAASoK,EAAMkH,WAAW1G,GAC1B2G,EAAqBZ,KAAKrG,YAAYR,GACpC5M,EAAwCqU,EAAxCrU,UAAWC,EAA6BoU,EAA7BpU,YAAaK,EAAgB+T,EAAhB/T,YAChCmT,KAAKnT,YAAcuB,YAAoBvB,EAAaL,GAEpD6C,EAAOwR,QAAQ9c,aAAkByI,GACjC6C,EAAOyR,mBAAoB,EAC3BzR,EAAO9C,UAAYA,EACnB8C,EAAO/B,KAAO,EAEdmM,EAAMsH,QAAQ,GACdf,KAAKL,oBAAsB1F,EAAK+G,SAChC3R,EAAO4R,S,2BAiEA9H,GACP,GAAKA,EAAL,CAEA,IAAM+H,EAASlB,KAAKzD,QACpB,GAAIpD,IAAW+H,EAAf,CAEA,IAAMnX,EAASM,YAAmB8O,EAAQ+H,GAC1CxV,YAAe,CACX7E,OAAQmZ,KAAKnL,OAAOE,KACpBhL,WAEJiW,KAAKzD,QAAUpD,M,6BAqBNA,GACT,GAAKA,EAAL,CAEA,IAAM+H,EAASlB,KAAKvD,UACpB,GAAItD,IAAW+H,EAAf,CAEA,IAAMnX,EAASM,YAAmB8O,EAAQ+H,GAC1CvV,YAAiB,CACb9E,OAAQmZ,KAAKnL,OAAOE,KACpBhL,WAEJiW,KAAKvD,UAAYtD,M,4BAqXTzQ,GACRsX,KAAKtP,MAAMwO,WACG,gBAAVxW,EAA0B,IAAI3E,QAAY2E,GAAS,S,GAn4BrCyY,iBC9BpBC,G,MAAaC,gBAAK,kBAAM,yDAoEfC,MAlEf,SAAiBlR,GAAQ,IACbiF,EAAajF,EAAbiF,SAEFrI,EAAWuU,qBAAW3R,KAEXwI,EAGbpL,EAHAgI,MAAS1Q,GALO,EAQhB0I,EAFA0D,MAAS+O,EANO,EAMPA,YAAyB7J,EANlB,EAMMsJ,WAAqBsC,EAN3B,EAM2BA,mBAAoB7Q,EAN/C,EAM+CA,OAN/C,EAQhB3D,EADA+S,IAAO0B,EAPS,EAOTA,eAAgBpK,EAPP,EAOOA,aAGrB/G,EAAWiR,qBAAWzR,KACtBoJ,EAAgBwI,uBAAY,WAM9BpR,EALe,CACXhB,KAAM,SACNrC,IAAK,UACLC,MAAO,aAGZ,CAACoD,IAEEhB,EAAO8I,EAAQ,GAEfuJ,EAAwBC,IAAgBxJ,GACxCwJ,IAAgBxJ,GAChBwJ,IAAgBtS,GAEhB6G,EAAiBqL,EACjBA,EAAmBnb,KAAI,SAACmL,EAAGpK,GAAJ,OACnBya,MAAMrQ,GAAKmQ,EAAsBva,GAAKoK,KAE1CmQ,EAEAjL,EAAmBoL,IAAkB1J,GACrC0J,IAAkB1J,GAClB0J,IAAkBxS,GAExB,OACI,sBAAKyS,UAAU,UAAf,UACKN,GACG,qBAAKM,UAAU,qBAAf,SACI,cAAC,WAAD,CAAUC,SAAU,KAApB,SACI,cAACZ,EAAD,CAAYlU,MAAOF,EAASkD,UAAU3D,gBAIlD,cAAC,EAAD,CACIiN,aAAcpJ,EAAMoJ,aACpBV,QAAS9L,EAAS8L,QAClBI,cAAeA,EACf7D,SAAUA,EACVc,eAAgBA,EAChBO,iBAAkBA,EAClB1B,MAAOhI,EAASgI,MAChBwI,eAAgBxQ,EAASwQ,eACzB3U,QAASmE,EAASnE,QAClBqH,UAAWlD,EAASkD,UACpBuP,YAAaA,EACb9O,OAAQA,EACRiF,QAASA,EACTyB,aAAcA,EACduH,MAAO5R,EAAS4R,YC1D1BqD,EAAeZ,gBAAK,kBAAM,gEAC1Ba,EAAUb,gBAAK,kBAAM,gEAwFZc,MAtFf,YAAiC,IAAbC,EAAY,EAAZA,SACVC,EAAUC,cADY,EAGUC,mBAAS,SAHnB,mBAGrBC,EAHqB,KAGRC,EAHQ,OAIaC,aAAe,GAJ5B,mBAIrBC,EAJqB,KAIRC,EAJQ,OAKaF,aAAe,GAL5B,mBAKrBG,EALqB,KAKRC,EALQ,OAMMP,oBAAS,GANf,mBAMrBQ,EANqB,KAMVvJ,EANU,OAOY+I,oBAAS,GAPrB,mBAOrBS,EAPqB,KAOPC,EAPO,KAStB9P,EAAe+P,iBAAO,MAEjBC,EACP5B,qBAAW3R,KADXmQ,IAAOoD,aAGLC,EAAYF,mBAdU,EAeIX,mBAAS,CACrCjN,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,cAjBS,mBAerBL,EAfqB,KAeXgO,EAfW,KAoB5BC,qBAAU,WACN,IAAM5c,EAAS0b,EAASmB,SAASrX,MAAM,KAMvC,OALA8E,YAAmBtK,GACnBuc,GAAgB,GAEhB1N,OAAOmE,iBAAiB,SAAU8J,GAE3B,WACHjO,OAAOkO,oBAAoB,SAAUD,MAE1C,CAACpB,EAASmB,WAEb,IAAMC,EAAqB,WACvB,IAAM/N,EAAS2N,EAAUhJ,QAAQsJ,aAC3BpO,EAAQ8N,EAAUhJ,QAAQuJ,YAChCN,EAAY,CAAE/N,QAAOG,YASzB,OACI,qCACKsN,GAAa,qBAAKhB,UAAWM,EAAQuB,WAAxB,wBACd,sBAAK7B,UAAWM,EAAQwB,KAAxB,UACI,eAAC,WAAD,CAAU7B,SAAU,KAApB,UACI,cAAC8B,EAAA,EAAD,IACA,cAAC7B,EAAD,CACI8B,KAAMvB,EACNrP,aAAcA,EAAaiH,QAC3B4J,KAAMnB,EACNC,kBAAmBA,IAEtBE,GAAgBG,GACb,qCACI,wBACIzP,QAASkP,EACTb,UAAWM,EAAQ4B,kBAFvB,SAII,cAAC,IAAD,MAGJ,cAAC/B,EAAD,CACIU,kBAAmBA,EACnBoB,KAAMrB,EACNuB,YA9BR,SAACH,EAAMI,GACvB1B,EAAesB,GACf5Q,EAAaiH,QAAU+J,EACvBrB,aAgCSE,GACG,sBAAMzC,IAAK6C,EAAWrB,UAAWM,EAAQ+B,QAAzC,SACI,cAAC,EAAD,CACI5K,aAAcA,EACdnE,SAAUA,a,MC3E/B,IAAM9Q,EAAY8f,YAEVC,IAZf,WACI,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOxE,OAAQ,SAAAyE,GAAU,OAAI,cAAC,EAAD,eAAcA,a,mDCD5C7B,IARf,WAA0C,IAAlB8B,EAAiB,0DACXjC,mBAASiC,GADE,mBAC9BpV,EAD8B,KACvBqV,EADuB,KAE/BpS,EAAcqP,uBAAY,WAC5B+C,GAAS,SAAArV,GAAK,OAAKA,OACpB,CAACqV,IACJ,MAAO,CAACrV,EAAOiD,K,gCCsBJqS,IA7BI,CACfC,WAAY,CAAE3a,EAAG,KAAOC,GAAI,OAC5B2a,WAAY,CAAE5a,EAAG,KAAOC,GAAI,OAC5B4a,WAAY,CAAE7a,EAAG,KAAOC,GAAI,OAC5B6a,WAAY,CAAE9a,EAAG,KAAOC,GAAI,OAC5B8a,WAAY,CAAE/a,EAAG,IAAMC,GAAI,KAC3B+a,WAAY,CAAEhb,EAAG,IAAMC,GAAI,KAC3Bgb,WAAY,CAAEjb,EAAG,IAAMC,EAAG,KAC1Bib,WAAY,CAAElb,EAAG,IAAMC,EAAG,KAC1Bkb,WAAY,CAAEnb,EAAG,IAAMC,EAAG,KAC1Bmb,WAAY,CAAEpb,EAAG,IAAMC,GAAI,KAC3Bob,WAAY,CAAErb,EAAG,IAAMC,EAAG,KAC1Bqb,WAAY,CAAEtb,EAAG,KAAOC,GAAI,OAC5Bsb,WAAY,CAAEvb,EAAG,IAAMC,EAAG,KAC1Bub,WAAY,CAAExb,EAAG,KAAOC,GAAI,OAC5Bwb,WAAY,CAAEzb,EAAG,IAAMC,EAAG,KAC1Byb,WAAY,CAAE1b,EAAG,IAAMC,EAAG,KAC1B0b,WAAY,CAAE3b,EAAG,IAAMC,GAAI,KAC3B2b,WAAY,CAAE5b,EAAG,KAAOC,EAAG,KAC3B4b,WAAY,CAAE7b,EAAG,IAAMC,EAAG,KAC1B6b,WAAY,CAAE9b,EAAG,IAAMC,GAAI,IAC3B8b,WAAY,CAAE/b,EAAG,IAAMC,GAAI,KAC3B+b,WAAY,CAAEhc,EAAG,KAAOC,GAAI,OAC5Bgc,WAAY,CAAEjc,EAAG,KAAOC,GAAI,OAC5Bic,WAAY,CAAElc,EAAG,KAAOC,GAAI,OAC5Bkc,WAAY,CAAEnc,EAAG,KAAOC,GAAI,OAC5Bmc,WAAY,CAAEpc,EAAG,KAAOC,GAAI,OAC5Boc,WAAY,CAAErc,EAAG,KAAOC,GAAI,S,ogCC3BnBqc,EAAe,QACfC,EAAiB,UAEjB/J,EAAmB,IAEnBgK,EAAU,wCAIVC,EAAmB,CAC5BC,UAAW,CACP5f,KAAM,YACNwI,KAAM,UACNqX,SAAS,GAEb3I,WAAY,CACRlX,KAAM,UACNwI,KAAM,UACNqX,SAAS,GAEbtd,YAAa,CACTvC,KAAM,cACNwI,KAAM,UACNqX,SAAS,GAEb1I,YAAa,CACTnX,KAAM,eACNwI,KAAM,UACNqX,SAAS,GAEbje,MAAO,CACH5B,KAAM,QACNwI,KAAM,QACNqX,QAAS,WAEbC,SAAU,CACN9f,KAAM,WACNwI,KAAM,QACNqX,QAAS,WAEbjf,QAAS,CACLZ,KAAM,UACNwI,KAAM,aACNqX,QAAS,EACTE,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVC,kBAAmB,CACflgB,KAAM,qBACNwI,KAAM,aACNqX,QAAS,EACTE,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVE,SAAU,CACNngB,KAAM,WACNwI,KAAM,QACNqX,QAAS,WAEbO,UAAW,CACPpgB,KAAM,YACNwI,KAAM,aACNqX,QAAS,EACTE,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVI,UAAW,CACPrgB,KAAM,YACNwI,KAAM,aACNqX,QAAS,EACTE,IAAK,EACLC,IAAK,EACLC,KAAM,KAEVK,UAAW,CACPtgB,KAAM,YACNwI,KAAM,SACNqX,QAAS,GACTE,IAAK,EACLC,IAAK,IACLC,KAAM,GAEV7I,YAAa,CACTpX,KAAM,eACNwI,KAAM,SACNqX,QAAS,OACTU,QAAS,CAAC,OAAQ,UAAW,UAAW,UAAW,aAI9CzJ,EAAqB,CAC9B,cACA,UACA,YACA,oBACA,YACA,YACA,aAGSC,EAAiB,CAAC,QAAS,WAAY,YAE9CyJ,EAAmB,GACzBpZ,OAAOuC,KAAKgW,GAAkBtf,SAAQ,SAAA8F,GAClCqa,EAAiBra,GAAOwZ,EAAiBxZ,GAAK0Z,WAGlD,IAkBaY,EAAW,CACpB,aACA,wEAGS7X,EAAkB,CAC3BsF,MAAO,CACHvO,aAAc,QACdnC,GAAI,aACJ+C,QAAS,aACTwU,WAAY,aACZ9N,OAAQ,IACRgO,aAAc,aACd/N,SAAU,IACVkH,YAAa,GACbD,WAAY,IAEhBuI,eAAe,eAAM8J,GACrB5W,MAAO,CACH+O,YAAa,EACbP,WAAY,UACZsC,mBAAoB,KACpB7Q,OAxCc,CAClB,CACI6W,QAAS,IACTlY,KAAM,UACN5G,MAAO,UACPK,QAAQ,EACR+O,UAAW,GAEf,CACI0P,QAAS,IACTlY,KAAM,cACN5G,MAAO,UACPK,QAAQ,EACRqN,SAAU,CAAC,GAAI,EAAG,KAClB0B,UAAW,MA4Bf5H,UAAW,CACPxL,KAlJW,qBAmJX6H,UAAW,GAEfwT,IAAK,CACD0H,YAAa,WACbtE,cAAc,EACd1B,gBAAgB,EAChBpK,cAAc,GAElBxO,QAAS,CACLE,QAAQ,EACRlB,KAAM,EACNa,MAAO,UACPhB,QAAS,GAEboR,QAAS,CACL/P,QAAQ,EACR2e,gBAAiB,GACjB9M,MAAO,IAEXgE,MAAO,CACH7V,QAAQ,EACR8V,QAAS0I,EAAS,GAClBzI,QAAQ,EACRpW,MAAO,UACPkN,QAAS,YAIJnE,EAAU,CACnBnN,GAAI,CAAEwG,MAAO,QAASmC,IAAK,MAC3B0a,GAAI,CAAE7c,MAAO,QAASmC,IAAK,cAC3B2a,GAAI,CAAE9c,MAAO,QAASmC,IAAK,UAC3B4a,GAAI,CAAE/c,MAAO,QAASmC,IAAK,gBAC3B6a,GAAI,CAAEhd,MAAO,QAASmC,IAAK,YAC3B8a,GAAI,CAAEjd,MAAO,QAASmC,IAAK,eAC3B+a,GAAI,CAAEld,MAAO,QAASmC,IAAK,cAC3Bgb,GAAI,CAAEnd,MAAO,QAASmC,IAAK,cAC3Bib,IAAK,CAAEpd,MAAO,QAASmC,IAAK,sBAC5Bkb,GAAI,CAAErd,MAAO,YAAamC,IAAK,aAC/Bmb,OAAQ,CAAEtd,MAAO,MAAOmC,IAAK,kBAC7BkW,aAAc,CAAErY,MAAO,MAAOmC,IAAK,gBACnCob,YAAa,CAAEvd,MAAO,UAAWmC,IAAK,UACtCmT,GAAI,CAAEtV,MAAO,MAAOmC,IAAK,gBACzBqb,IAAK,CAAExd,MAAO,QAASmC,IAAK,eAC5Bsb,GAAI,CAAEzd,MAAO,YAAamC,IAAK,SAGtBub,EAAY,CAAC,QAAS,OAAQ,UAAW,QAAS,YAElD9K,EAAuB,CAChC,cACA,UACA,YACA,aACA,SAGSC,EAAsB,CAC/B8K,MAAO,GACPC,KAAM,CAAC,WAAY,oBAAqB,eACxCC,QAAS,CAAC,WAAY,qBACtBC,MAAO,CACH,WACA,oBACA,WACA,YACA,eAEJC,SAAU,CACN,WACA,oBACA,YACA,YACA,gBAIK/U,EAAc,CACvBgV,MAAO,MACPC,MAAO,MACPC,OAAQ,MACRC,IAAK,MACLC,MAAO,MACPC,IAAK,MACLC,KAAM,MACNC,MAAO,MACPC,WAAY,OAGHC,EAAc,CACvB,QACA,QACA,SACA,MACA,QACA,MACA,OACA,QACA,cAGSxV,EAAc,CACvByV,KAAM,GACNC,OAAQ,IAGCpV,EAAe,CACxB4U,IAAK,EACLE,IAAK,EACLE,MAAO,EACPL,OAAQ,EACRD,MAAO,EACPG,MAAO,EACPE,KAAM,EACNN,MAAO,GAGErU,EAAY,CACrBwU,IAAK,EACLE,IAAK,EACLE,MAAO,EACPL,OAAQ,EACRD,MAAO,EACPG,MAAO,EACPE,KAAM,EACNN,MAAO,GAGEY,EAAU,CACnBC,OAAQ,CAAC,IAAK,IAAK,KACnBC,QAAS,CAAC,QAAS,QAAS,OAAQ,QAAS,UAC7ChW,OAAQ,CACJ,QACA,QACA,SACA,MACA,QACA,MACA,OACA,QACA,eAIKiW,EAAiB,CAC1BF,OAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAClCC,QAAS,CAAC,QAAS,QAAS,OAAQ,QAAS,SAAU,QACvDhW,OAAQ,CACJ,QACA,QACA,SACA,MACA,QACA,MACA,OACA,QACA,eAIKkW,EAAiB,CAC1BhE,WAAY,eAGH7F,EAAqB,IAAI3a,IAAI,CACtC,aACA,aACA,aACA,aACA,aACA,aACA,eAGSykB,EAAW,CACpBC,MAAO,UACPC,MAAO,UACPC,KAAM,UACNC,MAAO,WAGEpU,EAAa,CACtBC,MAAO,GACPE,IAAK,IACLD,KAAM,KAGG2L,EAAkB,CAC3BwI,EAAG,CAAC,EAAG,GAAK,KACZC,EAAG,CAAC,EAAG,GAAK,GACZC,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,GAAK,GACZC,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,GAAK,GACZC,EAAG,CAAC,EAAG,GAAK,GACZC,EAAG,CAAC,EAAG,EAAG,IAEVC,WAAY,CAAC,EAAG,GAAK,MACrBC,WAAY,CAAC,EAAG,EAAG,IACnBC,WAAY,CAAC,EAAG,EAAG,IACnBC,SAAU,CAAC,EAAG,GAAK,GACnBC,YAAa,CAAC,EAAG,EAAG,GACpBC,SAAU,CAAC,EAAG,GAAK,GACnBC,SAAU,CAAC,GAAI,GAAI,KACnBC,SAAU,CAAC,EAAG,EAAG,GAEjBC,MAAO,CAAC,EAAG,EAAG,IAGLtJ,EAAoB,CAC7BsI,EAAG,CAAC,EAAG,GAAK,GACZC,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,GAAK,GACZC,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,EAAG,GACVC,EAAG,CAAC,EAAG,EAAG,GAEVE,WAAY,CAAC,EAAG,EAAG,GACnBC,WAAY,CAAC,EAAG,EAAG,GACnBE,YAAa,CAAC,EAAG,EAAG,GACpBE,SAAU,CAAC,EAAG,GAAI,GAClBC,SAAU,CAAC,EAAG,EAAG,GAEjBC,MAAO,CAAC,EAAG,GAAK,IAGP5gB,EAAa,CACtB6gB,MAAO,CAAErhB,EAAG,EAAGC,EAAG,GAClBqhB,MAAO,CAAEthB,EAAG,EAAGC,EAAG,GAClBshB,MAAO,CAAEvhB,EAAG,EAAGC,EAAG,GAClBuhB,MAAO,CAAExhB,EAAG,EAAGC,EAAG,GAClBwhB,MAAO,CAAEzhB,EAAG,EAAGC,EAAG,GAClByhB,MAAO,CAAE1hB,EAAG,EAAGC,GAAI,GACnB0hB,MAAO,CAAE3hB,EAAG,EAAGC,GAAI,GACnB2hB,MAAO,CAAE5hB,EAAG,EAAGC,GAAI,GACnB4hB,MAAO,CAAE7hB,EAAG,EAAGC,GAAI,IAGVgI,EAAa,CACtBkW,GAAI,CAAElb,IAAK,YAAakF,aAAc,GACtCwY,EAAG,CAAE1d,IAAK,cAAekF,aAAc,IAG9B2Z,EAAc,CACvB,yBACA,wBACA,wBACA,e,gCCnZJ,4BAIMC,EAAczF,IACd0F,EAAWzF,IAEXjE,EAAY2J,aAAW,SAAAC,GAAK,MAAK,CACnCrI,KAAM,CACFsI,QAAS,QACT7W,MAAO,QACPG,OAAQ,SAEZ2W,OAAQ,CACJ9W,MAAOyW,EACPM,UAAW,UAEfC,YAAa,CACTC,WAAY,SACZC,gBAAiBR,EACjBS,gBAAgB,OAAD,OAASxE,IAAT,KAEfyE,eAAgB,QAChBC,mBAAoB,SACpBrX,MAAOyW,EACP,WAAY,CACRa,aAAc,WAGtBxI,QAAS,CACL3O,OAAQ,QACRH,MAAO,QACPuX,QAAS,GAEb5I,kBAAmB,CACf7N,SAAU,WACV0W,IAAK,EACLC,KAAM,EACNC,OAAQ,OACRtlB,QAAS,MACTulB,aAAc,UACdC,WAAY,uBACZV,gBAAiB,UACjBW,OAAQ,UACR,UAAW,CACPzlB,QAAS,MAGjBkc,WAAY,CACRxN,SAAU,WACVgX,OAAQ,OACR9X,MAAO,QACPG,OAAQ,QACR0W,QAAS,OACTkB,eAAgB,SAChBd,WAAY,SACZ7jB,MAAO,QACP4kB,SAAU,UACVd,gBAAiB,uBAIVlK,O,gCC9DA,QAA0B,yC,2JCYrB3Q,QACW,cAA7B4D,OAAO6M,SAASmL,UAEe,UAA7BhY,OAAO6M,SAASmL,UAEhBhY,OAAO6M,SAASmL,SAASC,MACvB,2DCZNC,IAAS3N,OACL,cAAC,IAAD,UACI,cAACwE,EAAA,EAAD,MAEJjJ,SAASqS,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b92df0f7.chunk.js","sourcesContent":["import * as THREE from \"three\";\r\nimport { fbxSource } from \"./App\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport { idxOffsets } from \"./consts\";\r\nimport textureOffsets from \"./data/face_offset\";\r\n\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { callbackOnPotentialArray, isSheath } from \"./helpers\";\r\n\r\nexport const loadModel = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new FBXLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const loadTexture = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new THREE.TextureLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const createInvisibleFloor = () => {\r\n    const floorGeometry = new THREE.PlaneBufferGeometry(0.1, 0.1);\r\n    floorGeometry.rotateX(Math.PI / 2);\r\n    const floorMaterial = new THREE.MeshBasicMaterial();\r\n    floorMaterial.visible = false;\r\n    return new THREE.Mesh(floorGeometry, floorMaterial);\r\n};\r\n\r\nexport const getModelPath = id => `${fbxSource}/fbx/${id}/${id}.fbx`;\r\n\r\nexport const getTexturePath = id => `${fbxSource}/fbx/${id}/${id}.png`;\r\n\r\nexport const analyzeWeaponCode = code => {\r\n    if (!code) return \"\";\r\n    const flipped = code.endsWith(\"b\");\r\n    const weaponCode = code.substring(0, code.length - 1);\r\n    const modelPath = getModelPath(weaponCode);\r\n    const texturePath = getTexturePath(weaponCode);\r\n\r\n    return {\r\n        modelPath,\r\n        texturePath,\r\n        flipped,\r\n        isSheath: isSheath(weaponCode),\r\n    };\r\n};\r\n\r\nexport const disposeItem = item => {\r\n    if (!item) return;\r\n\r\n    const disposedList = new Set();\r\n\r\n    const notDisposed = object => !disposedList.has(object.uuid);\r\n\r\n    const needToDispose = object => object && notDisposed(object);\r\n\r\n    const disposeObject = object => {\r\n        disposedList.add(object.uuid);\r\n        object.dispose();\r\n    };\r\n\r\n    const dispose = object => {\r\n        if (needToDispose(object)) disposeObject(object);\r\n    };\r\n\r\n    item.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        // dispose material\r\n        callbackOnPotentialArray(child.material, mat => {\r\n            if (mat.map) dispose(mat.map);\r\n            if (mat.backupMap) dispose(mat.backupMap);\r\n\r\n            dispose(mat);\r\n        });\r\n        // dispose geometry\r\n        dispose(child.geometry);\r\n    });\r\n};\r\n\r\nconst createNewMaterial = (materialType, params) => {\r\n    const matType = `Mesh${materialType}Material`;\r\n    return new THREE[matType](params);\r\n};\r\n\r\nexport const changeMaterial = ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    texturePath,\r\n}) => {\r\n    if (!target) return;\r\n    target.traverse(child => {\r\n        if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n        const checkParam = `isMesh${materialType}Material`;\r\n        const material = child.material;\r\n\r\n        if (Array.isArray(material)) {\r\n            if (material.every(mat => mat[checkParam]) && !texturePath) return;\r\n\r\n            material.forEach((mat, i) => {\r\n                const texture = texturePath\r\n                    ? new THREE.TextureLoader().load(texturePath)\r\n                    : material[i].map;\r\n\r\n                if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n\r\n                const materialParams = {\r\n                    map: texture,\r\n                    skinning: true,\r\n                };\r\n                const newMaterial = createNewMaterial(\r\n                    materialType,\r\n                    materialParams\r\n                );\r\n                newMaterial.name = mat.name;\r\n                if (mat.backupMap) newMaterial.backupMap = mat.backupMap;\r\n\r\n                if (texturePath && material[i].map) {\r\n                    material[i].map.dispose();\r\n                }\r\n                material[i].dispose();\r\n                child.material[i] = newMaterial;\r\n            });\r\n        } else {\r\n            if (material[checkParam] && !texturePath) return;\r\n            const texture = texturePath\r\n                ? new THREE.TextureLoader().load(texturePath)\r\n                : material.map;\r\n\r\n            if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n            const materialParams = {\r\n                map: texture,\r\n                skinning: true,\r\n            };\r\n            const newMaterial = createNewMaterial(materialType, materialParams);\r\n\r\n            newMaterial.name = material.name;\r\n\r\n            if (material.backupMap) newMaterial.backupMap = material.backupMap;\r\n\r\n            if (texturePath && material.map) {\r\n                material.map.dispose();\r\n            }\r\n            material.dispose();\r\n\r\n            child.material = newMaterial;\r\n        }\r\n    });\r\n};\r\n\r\nconst createOutlineMaterial = ({ size, color, opacity }) => {\r\n    const newMaterial = new THREE.MeshToonMaterial({\r\n        color,\r\n        opacity,\r\n        side: THREE.BackSide,\r\n        transparent: true,\r\n        skinning: true,\r\n    });\r\n    newMaterial.onBeforeCompile = shader => {\r\n        const token = \"#include <begin_vertex>\";\r\n        const customTransform = `\r\n            vec3 transformed = position + objectNormal*${size * 0.0005};\r\n        `;\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            token,\r\n            customTransform\r\n        );\r\n    };\r\n    return newMaterial;\r\n};\r\n\r\n// replace material of an object\r\nconst replaceMaterial = (object, newMaterial) => {\r\n    // dispose old material\r\n    callbackOnPotentialArray(object.material, obj => {\r\n        // obj.map?.dispose?.()\r\n        if (obj.map) obj.map.dispose();\r\n        obj.dispose();\r\n    });\r\n    // apply new material\r\n    const matIsArray = Array.isArray(object.material);\r\n    object.material = matIsArray\r\n        ? new Array(object.material.length).fill(newMaterial)\r\n        : newMaterial;\r\n};\r\n\r\n// change opacity of an object\r\nexport const changeOpacity = ({ material }, opacity) => {\r\n    callbackOnPotentialArray(material, obj => {\r\n        obj.opacity = opacity;\r\n    });\r\n};\r\n\r\n// update outline shader to change size\r\nconst updateOutlineShader = (material, size) => {\r\n    // Hacky way to force shader recompilation, needs fixing !!!!!!!!!!!!!!!!!!\r\n    material.fog = !material.fog;\r\n    material.needsUpdate = true;\r\n\r\n    material.onBeforeCompile = shader => {\r\n        const token = \"#include <begin_vertex>\";\r\n        const customTransform = `\r\n                vec3 transformed = position + objectNormal*${size * 0.0005};\r\n            `;\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            token,\r\n            customTransform\r\n        );\r\n    };\r\n    setTimeout(() => {\r\n        material.fog = !material.fog;\r\n        material.needsUpdate = true;\r\n    }, 100); // Sometimes doesn't work with 0 delay\r\n};\r\n\r\n// change size of outline\r\nexport const changeOutlineSize = ({ material }, size) => {\r\n    const matIsArray = Array.isArray(material);\r\n    if (matIsArray) {\r\n        const updated = new Set();\r\n        material.forEach(m => {\r\n            if (updated.has(m.uuid)) return;\r\n\r\n            updateOutlineShader(m, size);\r\n            updated.add(m.uuid);\r\n        });\r\n        return;\r\n    }\r\n    updateOutlineShader(material, size);\r\n};\r\n\r\n// Change color of outline\r\nexport const changeOutlineColor = ({ material }, color) => {\r\n    const matIsArray = Array.isArray(material);\r\n    if (matIsArray) {\r\n        const updated = new Set();\r\n        material.forEach(m => {\r\n            if (updated.has(m.uuid)) return;\r\n\r\n            m.color = new THREE.Color(color);\r\n            updated.add(m.uuid);\r\n        });\r\n        return;\r\n    }\r\n    material.color = new THREE.Color(color);\r\n};\r\n\r\n// Add outline to object and return reference to outlines\r\nexport const createOutline = (object, params) => {\r\n    if (!object) return;\r\n    const outlines = []; // return value\r\n    object.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const outline = child.clone();\r\n        outline.name = \"outline\";\r\n        outline.visible = params.enable;\r\n\r\n        outlines.push(outline);\r\n        const newMaterial = createOutlineMaterial(params);\r\n        replaceMaterial(outline, newMaterial);\r\n\r\n        if (child.isSkinnedMesh) {\r\n            outline.bind(child.skeleton, child.bindMatrix);\r\n        }\r\n        child.parent.add(outline);\r\n    });\r\n    return outlines;\r\n};\r\n\r\nexport const calculateTextureOffset = (currentTexture, prevTexture) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentTexture !== prevTexture) {\r\n        const prevOffset = textureOffsets[prevTexture] || {\r\n            x: 0,\r\n            y: 0,\r\n        };\r\n        const currentOffset = textureOffsets[currentTexture] || { x: 0, y: 0 };\r\n\r\n        offset.x = currentOffset.x - prevOffset.x;\r\n        offset.y = currentOffset.y - prevOffset.y;\r\n    }\r\n    return offset;\r\n};\r\n\r\nexport const calculateIdxOffset = (currentIdx, prevIdx) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentIdx !== prevIdx) {\r\n        const prevOffset = idxOffsets[`face${prevIdx}`];\r\n        const currentOffset = idxOffsets[`face${currentIdx}`];\r\n\r\n        offset.x = currentOffset.x - prevOffset.x;\r\n        offset.y = currentOffset.y - prevOffset.y;\r\n    }\r\n    return offset;\r\n};\r\n\r\nconst applyOffset = part => ({ target, offset }) => {\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { start, count } = targetGroup;\r\n        const end = start + count;\r\n        const uv = child.geometry.attributes.uv;\r\n        for (let i = start; i < end; i++) {\r\n            const u = uv.getX(i) + 0.25 * offset.x;\r\n            const v = uv.getY(i) + 0.25 * offset.y;\r\n            uv.setXY(i, u, v);\r\n        }\r\n        uv.needsUpdate = true;\r\n    });\r\n};\r\n\r\nexport const applyEyeOffset = applyOffset(\"Eye\");\r\nexport const applyMouthOffset = applyOffset(\"Mouth\");\r\n// export const applyBodyOffset = applyOffset(\"BodyAll\");\r\n\r\nconst applyTexture = part => ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    textureId,\r\n}) => {\r\n    const texturePath = getTexturePath(textureId);\r\n    const texture = new THREE.TextureLoader().load(texturePath);\r\n    texture.encoding = THREE.sRGBEncoding;\r\n\r\n    const materialParams = {\r\n        map: texture,\r\n        skinning: true,\r\n    };\r\n    const newMaterial = createNewMaterial(materialType, materialParams);\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { materialIndex } = targetGroup;\r\n        newMaterial.name = child.material[materialIndex].name;\r\n\r\n        child.material[materialIndex] = newMaterial;\r\n    });\r\n};\r\n\r\nexport const applyEyeTexture = applyTexture(\"Eye\");\r\nexport const applyMouthTexture = applyTexture(\"Mouth\");\r\n// export const applyBodyTexture = applyTexture(\"BodyAll\");\r\n\r\n// Chain Code is invalid if starts with the character \"+\"\r\nexport const analyzeChainCode = code => {\r\n    if (!code) return [\"\", \"\"];\r\n    const aniCodes = code.split(\">\");\r\n    const nAni = aniCodes.length;\r\n    const fileList = [];\r\n    const animationList = [];\r\n    for (let i = 0; i < nAni; i++) {\r\n        let timeScale = 1,\r\n            repetitions = 1,\r\n            fileIdx = null,\r\n            aniName = null,\r\n            fileName = null,\r\n            details,\r\n            currentAni = {},\r\n            faceChanges = [];\r\n        const currentParts = aniCodes[i].split(\"+\");\r\n        const fromModelFile = currentParts.length === 1;\r\n        if (fromModelFile) {\r\n            details = currentParts[0];\r\n        } else {\r\n            [fileName, details] = currentParts;\r\n            fileIdx = fileList.length - 1;\r\n        }\r\n        if (fileName) {\r\n            fileIdx = fileList.length;\r\n            fileList.push(fileName);\r\n        }\r\n        if (details.includes(\"&\")) {\r\n            const [name, ...settings] = details.split(\"&\");\r\n            aniName = name;\r\n            for (let setting of settings) {\r\n                const [key, value] = setting.split(\"=\");\r\n                if (key === \"ts\") {\r\n                    timeScale = parseFloat(value);\r\n                }\r\n                if (key === \"r\") {\r\n                    repetitions = value === \"inf\" ? Infinity : parseInt(value);\r\n                }\r\n                if (key.includes(\"-\")) {\r\n                    const [part, time] = key.split(\"-\");\r\n                    const faceMod = { time: parseFloat(time) };\r\n                    const indexName = `${part === \"e\" ? \"eye\" : \"mouth\"}Idx`;\r\n                    faceMod[indexName] = value;\r\n                    faceChanges.push(faceMod);\r\n                }\r\n            }\r\n        } else {\r\n            aniName = details;\r\n        }\r\n        currentAni = {\r\n            fileIdx,\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            faceChanges: processFaceChanges(faceChanges),\r\n        };\r\n\r\n        animationList.push(currentAni);\r\n    }\r\n    return [fileList, animationList];\r\n};\r\n\r\nexport const processFaceChanges = faceChanges => {\r\n    const sorted = faceChanges.sort(change => change.time);\r\n    const timeStamps = new Set(faceChanges.map(change => change.time));\r\n\r\n    if (faceChanges.length === timeStamps.size) {\r\n        sorted.forEach(change => {\r\n            change.id = uuid();\r\n        });\r\n        return sorted;\r\n    }\r\n\r\n    const simplified = [];\r\n    timeStamps.forEach(time => {\r\n        let output = { time, id: uuid(), eyeIdx: \"\", mouthIdx: \"\" };\r\n        const changes = sorted.filter(change => change.time === time);\r\n        changes.forEach(change => (output = Object.assign(output, change)));\r\n        simplified.push(output);\r\n    });\r\n    return simplified;\r\n};\r\n\r\nexport const getFaceChangesArray = (faceChanges, repetitions) => {\r\n    if (!faceChanges) return \"\";\r\n    if (repetitions === 1) return [...faceChanges];\r\n    // [0, 100, 200,...]\r\n    const timeOffset = new Array(repetitions).fill().map((_, i) => i * 100);\r\n\r\n    const offsetFaceChanges = offset =>\r\n        faceChanges.map(({ time, id, ...others }) => ({\r\n            ...others,\r\n            time: time + offset,\r\n        }));\r\n\r\n    return timeOffset.map(offsetFaceChanges).flat();\r\n};\r\n\r\nexport const chainCodeToList = (code, name) => {\r\n    const [fileList, animationList] = analyzeChainCode(code);\r\n    const length = animationList.length;\r\n    const output = animationList.map((ani, i) => {\r\n        const { fileIdx, aniName, timeScale, repetitions, faceChanges } = ani;\r\n        const partName = name.concat(length > 1 ? `#${i + 1}` : \"\");\r\n        const listItem = {\r\n            name: partName,\r\n            fileName: fileList[fileIdx],\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            id: uuid(),\r\n        };\r\n        if (faceChanges) {\r\n            listItem.faceChanges = faceChanges;\r\n        }\r\n        return listItem;\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const createGradientMap = nTones => {\r\n    const colors = new Uint8Array(nTones).map((_, i) => (i * 256) / nTones);\r\n    const map = new THREE.DataTexture(colors, nTones, 1, THREE.LuminanceFormat);\r\n    map.minFilter = THREE.NearestFilter;\r\n    map.magFilter = THREE.NearestFilter;\r\n    map.generateMipmaps = false;\r\n\r\n    return map;\r\n};\r\n","import { defaultSettings } from \"../consts\";\r\n\r\nexport const settingsReducer = (state, action) => {\r\n    const { type, key, subkey, value } = action;\r\n    switch (type) {\r\n        case \"toggle\":\r\n            let currentValue;\r\n            if (subkey) {\r\n                currentValue = state[key][subkey][value];\r\n                return {\r\n                    ...state,\r\n                    [key]: {\r\n                        ...state[key],\r\n                        [subkey]: {\r\n                            ...state[key][subkey],\r\n                            [value]: !currentValue,\r\n                        },\r\n                    },\r\n                };\r\n            }\r\n            currentValue = state[key][value];\r\n            return {\r\n                ...state,\r\n                [key]: { ...state[key], [value]: !currentValue },\r\n            };\r\n        case \"reset\":\r\n            // reset values\r\n            // value = array of keys in settings[key] or settings[key][subkey] to be reset, null -> reset all\r\n            const defaultSetting = subkey\r\n                ? defaultSettings[key][subkey]\r\n                : defaultSettings[key];\r\n            // no value -> reset all\r\n            if (!value)\r\n                return subkey\r\n                    ? {\r\n                          ...state,\r\n                          [key]: {\r\n                              ...state[key],\r\n                              [subkey]: {\r\n                                  ...state[key][subkey],\r\n                                  ...defaultSetting,\r\n                              },\r\n                          },\r\n                      }\r\n                    : {\r\n                          ...state,\r\n                          [key]: { ...state[key], ...defaultSetting },\r\n                      };\r\n            // if value is defined, reset only the specified keys\r\n            const update = {};\r\n            value.forEach(v => {\r\n                update[v] = defaultSetting[v];\r\n            });\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...update },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...update } };\r\n        case \"load\":\r\n            // load preset values\r\n            return;\r\n        case \"update\":\r\n            // update state[key] or state[key][subkey] with values from value\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...value },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...value } };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createContext, useReducer } from \"react\";\r\nimport { settingsReducer } from \"../reducer/settingsReducer\";\r\nimport { defaultSettings } from \"../consts\";\r\nimport { chainCodeToList } from \"../viewerHelpers\";\r\n\r\nexport const SettingsContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nconst initAniChain = chainCodeToList(defaultSettings.animation.code, \"init\");\r\n\r\nconst initSettings = { chainMaker: { chain: initAniChain } };\r\nObject.keys(defaultSettings).forEach(\r\n    key => (initSettings[key] = { ...defaultSettings[key] })\r\n);\r\ninitSettings.scene.lights = defaultSettings.scene.lights.map(light => ({\r\n    ...light,\r\n}));\r\n\r\nexport { initSettings };\r\n\r\nexport function SettingsProvider(props) {\r\n    const [settings, dispatch] = useReducer(settingsReducer, initSettings);\r\n\r\n    return (\r\n        <SettingsContext.Provider value={settings}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                {props.children}\r\n            </DispatchContext.Provider>\r\n        </SettingsContext.Provider>\r\n    );\r\n}\r\n","import Button from \"@material-ui/core/Button\";\r\n\r\nimport { initSettings } from \"./context/SettingsContext\";\r\nimport {\r\n    initKey,\r\n    WEAPON_CODE,\r\n    GENDER_CODE,\r\n    COMBO_LENGTH,\r\n    FS_LENGTH,\r\n    aniModList,\r\n} from \"./consts\";\r\n\r\nimport { chainCodeToList } from \"./viewerHelpers\";\r\n\r\nexport const isBlade = code => code.startsWith(\"w302\");\r\n\r\nexport const isSheath = code => isBlade(code) && code.endsWith(\"02\");\r\n\r\n// if object is an array, apply callback on each element of object, otherwise, apply call back on the object\r\nexport const callbackOnPotentialArray = (object, callback) => {\r\n    if (Array.isArray(object)) {\r\n        object.forEach(child => callback(child));\r\n        return;\r\n    }\r\n    callback(object);\r\n};\r\n\r\nexport const setInitialSettings = params => {\r\n    if (params.length === 0) return;\r\n    let eyeTextureDefined = false;\r\n    let mouthTextureDefined = false;\r\n    params.forEach(param => {\r\n        if (!param) return;\r\n\r\n        const [keycode, ...value] = param.split(\"=\"); // animation code can have \"=\" inside\r\n        // if no value given, skip\r\n        if (!value[0]) return;\r\n\r\n        let setValue = value.length === 1 ? value[0] : value.join(\"=\");\r\n\r\n        switch (keycode) {\r\n            case \"et\":\r\n                eyeTextureDefined = true;\r\n                break;\r\n            case \"mt\":\r\n                mouthTextureDefined = true;\r\n                break;\r\n            case \"cc\":\r\n                // initialize chain maker chain\r\n                const chainList = chainCodeToList(setValue, \"Animation\");\r\n                initSettings[\"chainMaker\"][\"chain\"] = chainList;\r\n                break;\r\n            case \"bg\":\r\n                if (setValue !== \"transparent\") {\r\n                    setValue = `#${setValue}`;\r\n                }\r\n                break;\r\n            case \"cam\": // parameters in form x, y, z\r\n                setValue = setValue.split(\",\").map(n => parseFloat(n));\r\n                break;\r\n            default:\r\n        }\r\n        const { group, key } = initKey[keycode];\r\n\r\n        const isBooleanValue = setValue === \"true\" || setValue === \"false\";\r\n\r\n        initSettings[group][key] = isBooleanValue\r\n            ? Boolean(setValue === \"true\")\r\n            : setValue;\r\n    });\r\n\r\n    initSettings[\"model\"][\"texture\"] = initSettings[\"model\"][\"id\"];\r\n\r\n    if (!eyeTextureDefined) {\r\n        initSettings[\"model\"][\"eyeTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n    if (!mouthTextureDefined) {\r\n        initSettings[\"model\"][\"mouthTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n};\r\n\r\nexport const generateChainCode = chain => {\r\n    const length = chain.length;\r\n    let output = \"\";\r\n    chain.forEach((ani, i) => {\r\n        const { fileName, aniName, faceChanges } = ani;\r\n        if (fileName) {\r\n            if (i === 0) {\r\n                output = output.concat(fileName);\r\n            } else {\r\n                output = output.concat(\r\n                    fileName !== chain[i - 1].fileName ? fileName : \"\"\r\n                );\r\n            }\r\n            output = output.concat(\"+\");\r\n        }\r\n        output = output.concat(aniName);\r\n\r\n        // Add modifiers\r\n        const modCode = generateAniModCode(ani);\r\n        output = output.concat(modCode);\r\n        const faceCode = generateFaceCode(faceChanges);\r\n        output = output.concat(faceCode);\r\n\r\n        if (i < length - 1) {\r\n            output = output.concat(\">\");\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nconst generateAniModCode = ani => {\r\n    let output = \"\";\r\n    Object.keys(aniModList).forEach(modKey => {\r\n        const { key, defaultValue } = aniModList[modKey];\r\n        if (ani[key] !== defaultValue) {\r\n            output = output.concat(`&${modKey}=${ani[key]}`);\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nconst generateFaceCode = faceChanges => {\r\n    if (!faceChanges) return \"\";\r\n    let output = \"\";\r\n    faceChanges.forEach(change => {\r\n        const { time, eyeIdx, mouthIdx } = change;\r\n        if (!time) return;\r\n        if (eyeIdx) {\r\n            output = output.concat(`&e-${time}=${eyeIdx}`);\r\n        }\r\n        if (mouthIdx) {\r\n            output = output.concat(`&m-${time}=${mouthIdx}`);\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const collectFilter = toggleState => {\r\n    let collected = {};\r\n    Object.keys(toggleState).forEach(key => {\r\n        let tmp = [];\r\n        Object.keys(toggleState[key]).forEach(k => {\r\n            if (toggleState[key][k]) {\r\n                tmp.push(k);\r\n            }\r\n        });\r\n        collected[key] = tmp;\r\n    });\r\n    return collected;\r\n};\r\n\r\nexport const multiCondFilter = (input, filters) => {\r\n    const filterKeys = Object.keys(filters);\r\n\r\n    return input.filter(el => {\r\n        return filterKeys.every(key => {\r\n            if (!filters[key].length) return true;\r\n            return filters[key].includes(el[key]);\r\n        });\r\n    });\r\n};\r\n\r\nexport const complementaryColor = color => {\r\n    const hexColor = color.replace(\"#\", \"0x\");\r\n\r\n    return `#${(\"000000\" + (\"0xffffff\" ^ hexColor).toString(16)).slice(-6)}`;\r\n};\r\n\r\nexport const aniButtonsFromObject = (object, handleSelect, groupName) => {\r\n    if (!object) return null;\r\n    const style = { maxWidth: \"13.5rem\" };\r\n    return Object.keys(object).map(key => (\r\n        <Button\r\n            variant=\"contained\"\r\n            key={key}\r\n            data-value={object[key]}\r\n            data-name={`${groupName ? `${groupName} ` : \"\"}${key}`}\r\n            onClick={handleSelect}\r\n            style={style}\r\n        >\r\n            {key}\r\n        </Button>\r\n    ));\r\n};\r\n\r\n// Animation chain code generator\r\nexport const getStandbyCode = (weapon, gender) =>\r\n    `LOB_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_ONT_${GENDER_CODE[gender]}`;\r\n\r\nexport const getVictoryCode = weapon =>\r\n    `WIN_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_WIN_01>+${WEAPON_CODE[weapon]}_WIN_02`;\r\n\r\nexport const getDashAtkCode = weapon => `DAS+${WEAPON_CODE[weapon]}_DAS_02`;\r\n\r\nexport const getRollCode = weapon => `ROL+${WEAPON_CODE[weapon]}_ROL_01`;\r\n\r\nexport const getComboCode = weapon => {\r\n    const comboLength = COMBO_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `CMB_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= comboLength; i++) {\r\n        result = result.concat(`+${code}_CMB_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Force Strike chain code\r\nexport const getFSCode = weapon => {\r\n    const fsAniLength = FS_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `FS_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= fsAniLength; i++) {\r\n        result = result.concat(`+${code}_CHR_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Join Lobby chain code\r\nexport const getLobbyCode = (weapon, gender) => {\r\n    const code = WEAPON_CODE[weapon];\r\n    if (gender === \"Male\")\r\n        return `LOB_${code}+${code}_ONT_05&ts=-0.5>+${code}_ONT_02>+${code}_ONT_07>+${code}_ONT_08>+${code}_ONT_21`;\r\n    // Female\r\n    return `LOB_${code}+${code}_ONT_06&ts=-0.5>+${code}_ONT_04>+${code}_ONT_09>+${code}_ONT_10>+${code}_ONT_23`;\r\n};\r\n","import { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { fbxSource } from \"./App\";\r\nimport { CAM_PARAMS, DEFAULT_FACE_IDX } from \"./consts\";\r\nimport {\r\n    directSetMatParams,\r\n    matColorParams,\r\n    materialCommonParams,\r\n    materialExtraParams,\r\n    incompatibleModels,\r\n} from \"./consts\";\r\nimport {\r\n    createInvisibleFloor,\r\n    calculateTextureOffset,\r\n    calculateIdxOffset,\r\n    getModelPath,\r\n    analyzeWeaponCode,\r\n    analyzeChainCode,\r\n    loadModel,\r\n    applyEyeTexture,\r\n    applyMouthTexture,\r\n    applyEyeOffset,\r\n    applyMouthOffset,\r\n    disposeItem,\r\n    createOutline,\r\n    changeMaterial,\r\n    changeOpacity,\r\n    changeOutlineSize,\r\n    changeOutlineColor,\r\n    createGradientMap,\r\n    getFaceChangesArray,\r\n} from \"./viewerHelpers\";\r\n\r\nimport { isBlade } from \"./helpers\";\r\n\r\nclass ModelViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        window.app = this;\r\n        this.initScene();\r\n        this.props.setIsLoading(true);\r\n\r\n        // Load the models\r\n        const [main, weaponRight, weaponLeft] = await this.initLoad();\r\n\r\n        // save references to models\r\n        this.models = {\r\n            main,\r\n            weaponRight,\r\n            weaponLeft,\r\n        };\r\n\r\n        // add outline to main model and save reference\r\n        this.outlines.main = createOutline(main, this.outlineParams);\r\n\r\n        // Save initial position and rotation\r\n        main.initPos = main.position.clone();\r\n        main.initRot = main.rotation.clone();\r\n\r\n        // change the material\r\n        const { materialType } = this.props.model;\r\n        changeMaterial({ target: main, materialType });\r\n\r\n        // basic viewer for non-human assets\r\n        const modelId = this.props.model.id;\r\n        const isSimpleViewer =\r\n            !modelId.startsWith(\"c\") ||\r\n            modelId.endsWith(\"_h\") ||\r\n            incompatibleModels.has(modelId);\r\n\r\n        if (isSimpleViewer) {\r\n            if (isBlade(modelId)) {\r\n                const { texturePath } = analyzeWeaponCode(modelId + \"n\");\r\n                changeMaterial({ target: main, materialType, texturePath });\r\n            }\r\n            this.floor.add(main);\r\n            this.props.setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        // process weapons\r\n        [\"Right\", \"Left\"].forEach(side => {\r\n            const key = `weapon${side}`;\r\n            // if weapon not specified, return\r\n            if (!this.props.model[key]) return;\r\n            // add weapon\r\n            const weaponInfo = this.modelInfo[key];\r\n            const weaponModel = this.models[key];\r\n            const { texturePath } = weaponInfo;\r\n            changeMaterial({\r\n                target: weaponModel,\r\n                materialType,\r\n                texturePath,\r\n            });\r\n            // flip weapon if needed\r\n            weaponModel.rotation.y += weaponInfo.flipped ? Math.PI : 0;\r\n            // add outline to weapon and save reference\r\n            this.outlines[key] = createOutline(weaponModel, this.outlineParams);\r\n            // attach weapon to main body\r\n            this.attachWeapon(this.models[`weapon${side}`], side);\r\n        });\r\n\r\n        // Apply face settings\r\n        this._eyeIdx = DEFAULT_FACE_IDX;\r\n        this._mouthIdx = DEFAULT_FACE_IDX;\r\n        const defaultFaceParams = {\r\n            mouthTexture: modelId,\r\n            mouthIdx: DEFAULT_FACE_IDX,\r\n            eyeTexture: modelId,\r\n            eyeIdx: DEFAULT_FACE_IDX,\r\n        };\r\n        this.updateFace(defaultFaceParams, this.props.model);\r\n\r\n        // Apply material settings\r\n        this.saveMaterialReference();\r\n        this.applyMaterialParams();\r\n\r\n        // Add character to scene\r\n        this.floor.add(main);\r\n        // main model loading finished\r\n        this.props.setIsLoading(false);\r\n\r\n        // Add animation\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        this.addAnimationChain(main, aniCode, timeScale);\r\n    }\r\n\r\n    async componentDidUpdate(prev) {\r\n        const current = this.props;\r\n\r\n        // // print updated props to console\r\n        // console.log(\"Updated\");\r\n        // Object.keys(prev).forEach(key => {\r\n        //     const oldValue = prev[key];\r\n        //     const currentValue = this.props[key];\r\n        //     const subkeys = Object.keys(oldValue);\r\n        //     if (subkeys.length === 0 || typeof oldValue === \"string\") {\r\n        //         if (oldValue !== currentValue) {\r\n        //             console.log(\r\n        //                 `${key}: ${JSON.stringify(\r\n        //                     oldValue\r\n        //                 )} to ${JSON.stringify(currentValue)}`\r\n        //             );\r\n        //         }\r\n        //     } else {\r\n        //         subkeys.forEach(subkey => {\r\n        //             if (oldValue[subkey] !== currentValue[subkey]) {\r\n        //                 console.log(\r\n        //                     `${key}.${subkey}: ${JSON.stringify(\r\n        //                         oldValue[subkey]\r\n        //                     )} to ${JSON.stringify(currentValue[subkey])}`\r\n        //                 );\r\n        //             }\r\n        //         });\r\n        //     }\r\n        // });\r\n\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n\r\n        this.updateModel(prev.model, current.model);\r\n\r\n        this.updateAnimation(prev.animation, current.animation);\r\n\r\n        this.updateOutline(prev.outline, current.outline);\r\n\r\n        this.updateMaterial(prev, current);\r\n\r\n        this.updateLights(prev.lights, current.lights);\r\n\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n\r\n        // Update background color\r\n        if (prev.bgColor !== current.bgColor) {\r\n            this.bgColor = current.bgColor;\r\n        }\r\n\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n\r\n        // Update Anti Aliasinng\r\n        this.AA = current.antiAliasing;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixer = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n\r\n    // set up initial scene\r\n    initScene = () => {\r\n        this.models = {};\r\n        this.modelInfo = {\r\n            main: this.props.model.id,\r\n            weaponLeft: analyzeWeaponCode(this.props.model.weaponLeft),\r\n            weaponRight: analyzeWeaponCode(this.props.model.weaponRight),\r\n        };\r\n        this.materials = [];\r\n\r\n        // save reference and specifications for outlines\r\n        this.outlines = {};\r\n        this.outlineParams = { ...this.props.outline };\r\n\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.bgColor = this.props.bgColor;\r\n\r\n        // Floor for auto rotate\r\n        this.floor = createInvisibleFloor();\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addLights(lights);\r\n\r\n        // effects\r\n        this.loadedFX = new Set();\r\n        this.fxConstructors = new Map();\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        const AAEnabled = this.props.antiAliasing;\r\n        this._AA = AAEnabled;\r\n\r\n        this.renderer = AAEnabled ? this.rendererAA : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        this.canvas = this.finalRenderer.domElement;\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n        this.mount.appendChild(this.canvas);\r\n\r\n        this.animate();\r\n    };\r\n\r\n    set AA(enabled) {\r\n        if (enabled === this._AA) return;\r\n        this._AA = enabled;\r\n\r\n        const currentSize = new THREE.Vector2();\r\n        this.renderer.getSize(currentSize);\r\n        // switch renderer\r\n        this.renderer = enabled ? this.rendererAA : this.rendererNoAA;\r\n        this.renderer.setSize(currentSize.x, currentSize.y);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const { canvas } = this;\r\n        const newCanvas = this.renderer.domElement;\r\n        this.replaceCanvas(canvas, newCanvas);\r\n        this.canvas = newCanvas;\r\n    }\r\n\r\n    addLights = lights => {\r\n        this.lights = [];\r\n        lights.forEach(({ enable, type, color, intensity, ...params }) => {\r\n            if (!enable) return;\r\n            const constructor = `${type}Light`;\r\n            const light = new THREE[constructor](color, intensity);\r\n\r\n            for (const [key, value] of Object.entries(params)) {\r\n                switch (key) {\r\n                    case \"position\":\r\n                        const setValue = value.map(v => v || 0);\r\n                        light.position.set(...setValue);\r\n                        break;\r\n                    default:\r\n                        light[key] = value;\r\n                }\r\n            }\r\n            this.scene.add(light);\r\n            this.lights.push(light);\r\n        });\r\n    };\r\n\r\n    removeLights = () => this.lights.forEach(light => this.scene.remove(light));\r\n\r\n    // Promise to load all models at initialize\r\n    initLoad = () => {\r\n        const modelId = this.modelInfo.main;\r\n        const modelPath = getModelPath(modelId);\r\n        const loadMain = loadModel(modelPath);\r\n\r\n        const weaponRight = this.modelInfo.weaponRight?.modelPath;\r\n        const loadWeaponR = loadModel(weaponRight);\r\n\r\n        const weaponLeft = this.modelInfo.weaponLeft?.modelPath;\r\n        const loadWeaponL = loadModel(weaponLeft);\r\n\r\n        return Promise.all([loadMain, loadWeaponR, loadWeaponL]);\r\n    };\r\n\r\n    attachWeapon = (weapon, side) => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name === boneName && child.children.length === 0) {\r\n                child.add(weapon);\r\n            }\r\n        });\r\n    };\r\n\r\n    detachWeapon = side => {\r\n        const key = `weapon${side}`;\r\n        const model = this.models[key];\r\n        if (!model) return;\r\n        model.parent.remove(model);\r\n    };\r\n\r\n    saveMaterialReference = () => {\r\n        this.materials = [];\r\n        const mainModel = this.models.main;\r\n        mainModel.traverse(child => {\r\n            if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n            const { material } = child;\r\n\r\n            if (Array.isArray(material)) {\r\n                this.materials = this.materials.concat(material);\r\n                return;\r\n            }\r\n            this.materials.push(material);\r\n        });\r\n    };\r\n\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    addAnimationChain = async (object, animationChain, timeScale) => {\r\n        if (!animationChain) return;\r\n\r\n        const [fileList, animationList] = analyzeChainCode(animationChain);\r\n        this.nAni = animationList.length;\r\n\r\n        this.props.setIsLoading(true);\r\n\r\n        object.mixer = new THREE.AnimationMixer(object);\r\n        this.mixer = object.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        object.mixer.timeScale = timeScale; // Global timeScale\r\n        object.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = animationList.map(ani => {\r\n            const settings = {\r\n                timeScale: ani.timeScale,\r\n                repetitions: ani.repetitions,\r\n            };\r\n            if (ani.faceChanges) settings.faceChanges = ani.faceChanges;\r\n            return settings;\r\n        });\r\n        const batchLoader = fileList.map(file => {\r\n            const path = `${fbxSource}/fbx/${file}.fbx`;\r\n            return loadModel(path);\r\n        });\r\n\r\n        const animations = [];\r\n        // load all animation files\r\n        const animFiles = await Promise.all(batchLoader);\r\n\r\n        animationList.forEach(anim => {\r\n            const { fileIdx, aniName } = anim;\r\n            const animation = aniName\r\n                ? animFiles[fileIdx].animations.find(\r\n                      ani => ani.name === aniName\r\n                  )\r\n                : animFiles[fileIdx].animations[0];\r\n            animations.push(animation);\r\n        });\r\n        this.animations = animations;\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.props.setIsLoading(false);\r\n    };\r\n\r\n    // this.aniIdx = n => play animation with index n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n        const { mixer } = this;\r\n        const anim = this.animations[newIdx];\r\n        mixer.stopAllAction();\r\n        const action = mixer.clipAction(anim);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n        this.faceChanges = getFaceChangesArray(faceChanges, repetitions);\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        mixer.setTime(0);\r\n        this.currentClipDuration = anim.duration;\r\n        action.play();\r\n    }\r\n\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: this.props.capture.codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.props.setIsLoading(false);\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                var url = URL.createObjectURL(superBuffer);\r\n                var a = document.createElement(\"a\");\r\n                document.body.appendChild(a);\r\n                a.style = \"display: none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n            };\r\n        }\r\n        // disable user input\r\n        this.props.setIsLoading(true);\r\n        // Reset facial expression\r\n        this.eyeIdx = this.props.model.eyeIdx;\r\n        this.mouthIdx = this.props.model.mouthIdx;\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    updateEyeTexture = (prev, current) => {\r\n        const currentTexture = current.eyeTexture;\r\n        const prevTexture = prev.eyeTexture;\r\n        const { materialType } = current;\r\n\r\n        if (currentTexture === prevTexture) return;\r\n        applyEyeTexture({\r\n            target: this.models.main,\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyEyeOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n    };\r\n\r\n    set eyeIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._eyeIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyEyeOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n        this._eyeIdx = newIdx;\r\n    }\r\n\r\n    updateMouthTexture = (prev, current) => {\r\n        const currentTexture = current.mouthTexture;\r\n        const prevTexture = prev.mouthTexture;\r\n        const { materialType } = current;\r\n\r\n        if (currentTexture === prevTexture) return;\r\n        applyMouthTexture({\r\n            target: this.models.main,\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyMouthOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n    };\r\n\r\n    set mouthIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._mouthIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyMouthOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n        this._mouthIdx = newIdx;\r\n    }\r\n\r\n    updateFaceTexture = (prev, current) => {\r\n        this.updateEyeTexture(prev, current);\r\n        this.updateMouthTexture(prev, current);\r\n    };\r\n\r\n    updateFaceOffset = current => {\r\n        this.eyeIdx = current.eyeIdx;\r\n        this.mouthIdx = current.mouthIdx;\r\n    };\r\n\r\n    updateFace = (prev, current) => {\r\n        this.updateFaceTexture(prev, current);\r\n        this.updateFaceOffset(current);\r\n    };\r\n\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        if (prev.id !== modelId) {\r\n            this.props.setIsLoading(true);\r\n            const modelPath = getModelPath(modelId);\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            const { materialType } = current;\r\n            changeMaterial({ target: model, materialType });\r\n            // add outline\r\n            this.outlines.main = createOutline(model, this.outlineParams);\r\n\r\n            // detach weapons from old model if they exist\r\n            [\"Right\", \"Left\"].forEach(side => {\r\n                const key = `weapon${side}`;\r\n                if (prev[key]) {\r\n                    this.detachWeapon(side);\r\n                }\r\n            });\r\n\r\n            // remove and dispose old model\r\n            this.floor.remove(this.models.main);\r\n            disposeItem(this.models.main);\r\n\r\n            // add reference\r\n            this.models.main = model;\r\n\r\n            // Save initial position and rotation\r\n            model.initPos = model.position.clone();\r\n            model.initRot = model.rotation.clone();\r\n\r\n            // Add new model to scene\r\n            this.floor.add(model);\r\n\r\n            // Apply face to new model\r\n            this._eyeIdx = DEFAULT_FACE_IDX;\r\n            this._mouthIdx = DEFAULT_FACE_IDX;\r\n            const { eyeIdx, mouthIdx } = this.props.model;\r\n            this.eyeIdx = eyeIdx;\r\n            this.mouthIdx = mouthIdx;\r\n\r\n            // Attach weapons to new model\r\n            [\"Right\", \"Left\"].forEach(side => {\r\n                const key = `weapon${side}`;\r\n                const weaponModel = this.models[key];\r\n\r\n                if (!weaponModel) return;\r\n                this.attachWeapon(weaponModel, side);\r\n            });\r\n\r\n            // Add animation to new model\r\n            const { code: aniCode, timeScale } = this.props.animation;\r\n            this.addAnimationChain(model, aniCode, timeScale);\r\n\r\n            this.saveMaterialReference();\r\n            this.applyMaterialParams();\r\n\r\n            this.props.setIsLoading(false);\r\n            return;\r\n        }\r\n        // Update face when main model not changed\r\n        this.updateFace(prev, current);\r\n\r\n        this.saveMaterialReference();\r\n        this.applyMaterialParams();\r\n    };\r\n\r\n    updateWeapons = async (prev, current) => {\r\n        [\"Right\", \"Left\"].forEach(async side => {\r\n            const key = `weapon${side}`;\r\n            // if not changed, return\r\n            if (prev[key] === current[key]) return;\r\n            // Update weapon\r\n            this.detachWeapon(side); // remove old weapon\r\n            disposeItem(this.models[key]); // dispose old weapon\r\n            // if current weapon is empty (weapon removed)\r\n            if (!current[key]) {\r\n                this.models[key] = null;\r\n                this.modelInfo[key] = \"\";\r\n                // remove reference to outline\r\n                this.outlines[key] = null;\r\n                return;\r\n            }\r\n            // load new weapon\r\n            this.props.setIsLoading(true);\r\n\r\n            this.modelInfo[key] = analyzeWeaponCode(this.props.model[key]);\r\n            const { modelPath, texturePath } = this.modelInfo[key];\r\n\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            this.models[key] = model;\r\n\r\n            // process new weapon\r\n            const { materialType } = current;\r\n            changeMaterial({\r\n                target: this.models[key],\r\n                materialType,\r\n                texturePath,\r\n            });\r\n\r\n            if (this.modelInfo[key].flipped) {\r\n                this.models[key].rotation.y = Math.PI;\r\n            }\r\n            // add outline to new weapon\r\n            this.outlines[key] = createOutline(model, this.outlineParams);\r\n            // attach new weapon to main model\r\n            this.attachWeapon(model, side);\r\n\r\n            this.saveMaterialReference();\r\n            this.applyMaterialParams();\r\n\r\n            this.props.setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        await this.updateMainModel(prev, current);\r\n        this.updateWeapons(prev, current);\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            const mainModel = this.models.main;\r\n            if (prev.code) {\r\n                mainModel.mixer.stopAllAction();\r\n\r\n                // Reset position and rotation to initial value\r\n                const { initPos, initRot } = mainModel;\r\n                mainModel.position.copy(initPos);\r\n                mainModel.rotation.copy(initRot);\r\n\r\n                // Reset facial expression\r\n                this.eyeIdx = this.props.model.eyeIdx;\r\n                this.mouthIdx = this.props.model.mouthIdx;\r\n\r\n                this.mixer = null;\r\n                this.animations = [];\r\n            }\r\n            // Add new animation\r\n            this.addAnimationChain(mainModel, code, timeScale);\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    updateOutline = (prev, current) => {\r\n        this.outlineParams = { ...current };\r\n        const updatedParams = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedParams.length === 0) return;\r\n        const { enable, size, opacity, color } = current;\r\n        const outlineList = Object.keys(this.outlines);\r\n        outlineList.forEach(outlineName => {\r\n            const outlineGroup = this.outlines[outlineName];\r\n            if (!outlineGroup) return;\r\n            outlineGroup.forEach(outline => {\r\n                if (updatedParams.includes(\"enable\")) {\r\n                    outline.visible = enable;\r\n                }\r\n                if (updatedParams.includes(\"size\")) {\r\n                    changeOutlineSize(outline, size);\r\n                }\r\n                if (updatedParams.includes(\"opacity\")) {\r\n                    changeOpacity(outline, opacity);\r\n                }\r\n                if (updatedParams.includes(\"color\")) {\r\n                    changeOutlineColor(outline, color);\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    applyMaterialParams = () => {\r\n        const { materialType } = this.props.model;\r\n        const current = this.props.materialParams;\r\n        const { materials } = this;\r\n        const paramsList = [\r\n            ...materialCommonParams,\r\n            ...materialExtraParams[materialType],\r\n        ];\r\n\r\n        materials.forEach(mat => {\r\n            directSetMatParams.forEach(param => {\r\n                if (!paramsList.includes(param)) return;\r\n                mat[param] = current[param];\r\n            });\r\n\r\n            matColorParams.forEach(param => {\r\n                if (!paramsList.includes(param)) return;\r\n                const currentColor = current[param];\r\n                const matColor = new THREE.Color(currentColor);\r\n                mat[param] = matColor;\r\n            });\r\n\r\n            if (!current.useTexture) {\r\n                if (mat.map) mat.backupMap = mat.map;\r\n                mat.map = null;\r\n            }\r\n\r\n            if (current.flatShading) {\r\n                mat.flatShading = current.flatShading;\r\n                mat.needsUpdate = true;\r\n            }\r\n\r\n            if (materialType === \"Toon\" && current.gradientMap !== \"none\") {\r\n                let newMap = null;\r\n                const nTones = parseInt(current.gradientMap);\r\n                newMap = createGradientMap(nTones);\r\n\r\n                materials.forEach(mat => {\r\n                    mat.gradientMap = newMap;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    updateMaterialParams = (prev, current) => {\r\n        const { materialType } = this.props.model;\r\n        const { useTexture, flatShading, gradientMap } = current;\r\n        const { materials } = this;\r\n        const paramsList = [\r\n            ...materialCommonParams,\r\n            ...materialExtraParams[materialType],\r\n        ];\r\n\r\n        directSetMatParams.forEach(param => {\r\n            if (!paramsList.includes(param) || prev[param] === current[param])\r\n                return;\r\n            materials.forEach(mat => (mat[param] = current[param]));\r\n        });\r\n\r\n        matColorParams.forEach(param => {\r\n            if (!paramsList.includes(param) || prev[param] === current[param])\r\n                return;\r\n            const currentColor = current[param];\r\n            const matColor = new THREE.Color(currentColor);\r\n            materials.forEach(mat => (mat[param] = matColor));\r\n        });\r\n\r\n        if (prev.useTexture !== useTexture) {\r\n            if (!useTexture) {\r\n                materials.forEach(mat => {\r\n                    mat.backupMap = mat.map;\r\n                    mat.map = null;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            } else {\r\n                materials.forEach(mat => {\r\n                    mat.map = mat.backupMap;\r\n                    delete mat.backupMap;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            }\r\n        }\r\n\r\n        if (prev.flatShading !== flatShading) {\r\n            materials.forEach(mat => {\r\n                mat.flatShading = flatShading;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n\r\n        if (prev.gradientMap !== gradientMap) {\r\n            let newMap = null;\r\n            if (gradientMap !== \"none\") {\r\n                const nTones = parseInt(gradientMap);\r\n                newMap = createGradientMap(nTones);\r\n            }\r\n\r\n            materials.forEach(mat => {\r\n                mat.gradientMap = newMap;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n    };\r\n\r\n    updateMaterial = (prev, current) => {\r\n        // update material type\r\n        if (prev.model.materialType !== current.model.materialType) {\r\n            const { materialType } = current.model;\r\n\r\n            changeMaterial({ target: this.models.main, materialType });\r\n            this.saveMaterialReference();\r\n\r\n            this.applyMaterialParams();\r\n            return;\r\n        }\r\n\r\n        this.updateMaterialParams(prev.materialParams, current.materialParams);\r\n    };\r\n\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeLights();\r\n            this.addLights(current);\r\n        }\r\n    };\r\n\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n            const { canvas } = this;\r\n            const newCanvas = this.renderer.domElement;\r\n            this.replaceCanvas(canvas, newCanvas);\r\n            this.canvas = newCanvas;\r\n            return;\r\n        }\r\n\r\n        if (!this.loadedFX.has(\"ascii\")) {\r\n            const { AsciiEffect } = await import(\r\n                \"three/examples/jsm/effects/AsciiEffect\"\r\n            );\r\n            this.loadedFX.add(\"ascii\");\r\n            this.fxConstructors.set(\"ascii\", AsciiEffect);\r\n            this.showAscii();\r\n        } else this.showAscii();\r\n\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n    };\r\n\r\n    showAscii = () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const AsciiEffect = this.fxConstructors.get(\"ascii\");\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n        this.effect.setSize(this.viewport.width, this.viewport.height);\r\n\r\n        const newCanvas = this.effect.domElement;\r\n        const currentCanvas = this.canvas;\r\n        newCanvas.style.color = color;\r\n        newCanvas.style.background = bgColor;\r\n\r\n        this.replaceCanvas(currentCanvas, newCanvas);\r\n        this.canvas = newCanvas;\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    set bgColor(color) {\r\n        this.scene.background =\r\n            color !== \"transparent\" ? new THREE.Color(color) : null;\r\n    }\r\n\r\n    replaceCanvas = (oldCanvas, newCanvas) => {\r\n        this.mount.removeChild(oldCanvas);\r\n        this.mount.appendChild(newCanvas);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n        const dt = this.clock.getDelta();\r\n        // Rotate the floor\r\n        const { rotateSpeed } = this.props;\r\n        this.floor.rotateY((rotateSpeed * dt * Math.PI) / 2);\r\n\r\n        if (this.mixer) this.mixer.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length > 0) {\r\n            const elapsedTime = this.models.main.mixer.time;\r\n            const nextFaceChangeTime =\r\n                (this.faceChanges[0].time * this.currentClipDuration) / 100;\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                const currentFaceChange = this.faceChanges.shift();\r\n                const { eyeIdx, mouthIdx } = currentFaceChange;\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModelViewer;\r\n","import { lazy, Suspense, useContext, useCallback } from \"react\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"./context/SettingsContext\";\r\nimport ModelViewer from \"./ModelViewer\";\r\nimport \"./styles/Display.css\";\r\n\r\nimport { cameraPositions, controlsPositions } from \"./consts\";\r\n\r\nconst AniControl = lazy(() => import(\"./AniControl\"));\r\n\r\nfunction Display(props) {\r\n    const { viewport } = props;\r\n\r\n    const settings = useContext(SettingsContext);\r\n    const {\r\n        model: { id: modelId },\r\n        scene: { rotateSpeed, background: bgColor, initCameraPosition, lights },\r\n        app: { showAniControl, antiAliasing },\r\n    } = settings;\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n    const toggleCapture = useCallback(() => {\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"capture\",\r\n            value: \"enable\",\r\n        };\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const type = modelId[0];\r\n\r\n    const defaultCameraPosition = cameraPositions[modelId]\r\n        ? cameraPositions[modelId]\r\n        : cameraPositions[type];\r\n\r\n    const cameraPosition = initCameraPosition\r\n        ? initCameraPosition.map((n, i) =>\r\n              isNaN(n) ? defaultCameraPosition[i] : n\r\n          )\r\n        : defaultCameraPosition;\r\n\r\n    const controlsPosition = controlsPositions[modelId]\r\n        ? controlsPositions[modelId]\r\n        : controlsPositions[type];\r\n\r\n    return (\r\n        <div className=\"Display\">\r\n            {showAniControl && (\r\n                <div className=\"Display-AniControl\">\r\n                    <Suspense fallback={null}>\r\n                        <AniControl value={settings.animation.timeScale} />\r\n                    </Suspense>\r\n                </div>\r\n            )}\r\n            <ModelViewer\r\n                setIsLoading={props.setIsLoading}\r\n                capture={settings.capture}\r\n                toggleCapture={toggleCapture}\r\n                viewport={viewport}\r\n                cameraPosition={cameraPosition}\r\n                controlsPosition={controlsPosition}\r\n                model={settings.model}\r\n                materialParams={settings.materialParams}\r\n                outline={settings.outline}\r\n                animation={settings.animation}\r\n                rotateSpeed={rotateSpeed}\r\n                lights={lights}\r\n                bgColor={bgColor}\r\n                antiAliasing={antiAliasing}\r\n                ascii={settings.ascii}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n","import { lazy, Suspense, useState, useRef, useEffect, useContext } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\n\r\nimport Menu from \"@material-ui/icons/Menu\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport useStyles from \"./styles/MainPageStyles\";\r\n\r\nimport Display from \"./Display\";\r\nimport { SettingsContext } from \"./context/SettingsContext\";\r\nimport { setInitialSettings } from \"./helpers\";\r\n\r\nconst ControlPanel = lazy(() => import(\"./ControlPanel\"));\r\nconst SideBar = lazy(() => import(\"./SideBar\"));\r\n\r\nfunction MainPage({ location }) {\r\n    const classes = useStyles();\r\n\r\n    const [currentMode, setCurrentMode] = useState(\"model\");\r\n    const [sidebarOpen, toggleSidebarOpen] = useToggleState(true);\r\n    const [controlOpen, toggleControlOpen] = useToggleState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [initLoadDone, setInitLoadDone] = useState(false);\r\n    // const [handleSelect, setHandleSelect] = useState(null);\r\n    const handleSelect = useRef(null);\r\n    const {\r\n        app: { showSettings },\r\n    } = useContext(SettingsContext);\r\n\r\n    const viewerRef = useRef();\r\n    const [viewport, setViewport] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const params = location.pathname.split(\"/\");\r\n        setInitialSettings(params);\r\n        setInitLoadDone(true);\r\n\r\n        window.addEventListener(\"resize\", updateViewportSize);\r\n\r\n        return function () {\r\n            window.removeEventListener(\"resize\", updateViewportSize);\r\n        };\r\n    }, [location.pathname]);\r\n\r\n    const updateViewportSize = () => {\r\n        const height = viewerRef.current.clientHeight;\r\n        const width = viewerRef.current.clientWidth;\r\n        setViewport({ width, height });\r\n    };\r\n\r\n    const openControl = (mode, handler) => {\r\n        setCurrentMode(mode);\r\n        handleSelect.current = handler;\r\n        toggleControlOpen();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <div className={classes.loadingMsg}>Loading...</div>}\r\n            <div className={classes.root}>\r\n                <Suspense fallback={null}>\r\n                    <CssBaseline />\r\n                    <ControlPanel\r\n                        mode={currentMode}\r\n                        handleSelect={handleSelect.current}\r\n                        open={controlOpen}\r\n                        toggleControlOpen={toggleControlOpen}\r\n                    />\r\n                    {initLoadDone && showSettings && (\r\n                        <>\r\n                            <button\r\n                                onClick={toggleSidebarOpen}\r\n                                className={classes.openSidebarButton}\r\n                            >\r\n                                <Menu />\r\n                            </button>\r\n\r\n                            <SideBar\r\n                                toggleSidebarOpen={toggleSidebarOpen}\r\n                                open={sidebarOpen}\r\n                                openControl={openControl}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </Suspense>\r\n                {initLoadDone && (\r\n                    <main ref={viewerRef} className={classes.content}>\r\n                        <Display\r\n                            setIsLoading={setIsLoading}\r\n                            viewport={viewport}\r\n                        />\r\n                    </main>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import { SettingsProvider } from \"./context/SettingsContext\";\r\n\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\nimport MainPage from \"./MainPage\";\r\n\r\nimport \"./styles/App.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <SettingsProvider>\r\n            <HashRouter>\r\n                <Route render={routeProps => <MainPage {...routeProps} />} />\r\n            </HashRouter>\r\n        </SettingsProvider>\r\n    );\r\n}\r\n\r\nexport const fbxSource = process.env.PUBLIC_URL;\r\n\r\nexport default App;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nfunction useToggleState(initVal = false) {\r\n    const [state, setState] = useState(initVal);\r\n    const toggleState = useCallback(() => {\r\n        setState(state => !state);\r\n    }, [setState]);\r\n    return [state, toggleState];\r\n}\r\n\r\nexport default useToggleState;\r\n","const faceOffset = {\r\n    c110350_02: { x: 0.043, y: -0.0625 }, // Formal Joachim\r\n    c110340_02: { x: 0.043, y: -0.0625 }, // Formal Noelle\r\n    c110018_02: { x: 0.043, y: -0.0625 }, // Opera Karina\r\n    c110370_01: { x: 0.043, y: -0.0625 }, // Lapis\r\n    c100015_04: { x: 0.05, y: -0.08 }, // Chelle\r\n    c110267_01: { x: 0.08, y: -0.03 }, // Hawk\r\n    c110050_02: { x: 0.07, y: 0.13 }, // HBerserker\r\n    c110291_01: { x: 0.07, y: 0.14 }, // Marth\r\n    c110354_01: { x: 0.07, y: 0.01 }, // Mega Man\r\n    c110345_01: { x: 0.08, y: -0.13 }, // Mitsuhide\r\n    c110266_01: { x: 0.01, y: 0.03 }, // Naveed\r\n    c110365_01: { x: 0.043, y: -0.0625 }, // Nevin\r\n    c110346_01: { x: 0.07, y: 0.08 }, // Nobunaga\r\n    c110366_01: { x: 0.043, y: -0.0625 }, // Pinon\r\n    c110299_02: { x: 0.07, y: 0.08 }, // RXZ\r\n    c110360_01: { x: 0.07, y: 0.14 }, // Tiki\r\n    c110307_01: { x: 0.08, y: -0.03 }, // Victor\r\n    c110322_01: { x: 0.043, y: 0.08 }, // Zhu Bajie\r\n    c110356_01: { x: 0.07, y: 0.08 }, // Gauld\r\n    c110300_01: { x: 0.07, y: -0.1 }, // Pipple\r\n    c110344_01: { x: 0.07, y: -0.02 }, // Yuya\r\n    c110053_03: { x: 0.043, y: -0.0625 }, // INefi\r\n    c110368_01: { x: 0.043, y: -0.0625 }, // Meene\r\n    c110367_01: { x: 0.043, y: -0.0625 }, // Ilia\r\n    c110003_02: { x: 0.043, y: -0.0625 }, // Gun Joe\r\n    c110270_02: { x: 0.043, y: -0.0625 }, // HMelsa\r\n    c110341_03: { x: 0.043, y: -0.0625 }, // Hakasha\r\n};\r\nexport default faceOffset;\r\n","export const DRAWER_WIDTH = \"16rem\";\r\nexport const DRAWER_BGCOLOR = \"#330000\";\r\n\r\nexport const DEFAULT_FACE_IDX = \"2\";\r\n\r\nexport const baseUrl = \"https://dgk3593.github.io/dl-model/#/\";\r\n\r\nconst defaultAni = \"MWM_CMN+CMN_MWM_03\";\r\n\r\nexport const matParamsDetails = {\r\n    wireframe: {\r\n        name: \"Wireframe\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    useTexture: {\r\n        name: \"Texture\",\r\n        type: \"boolean\",\r\n        default: true,\r\n    },\r\n    transparent: {\r\n        name: \"Transparent\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    flatShading: {\r\n        name: \"Flat Shading\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    color: {\r\n        name: \"Color\",\r\n        type: \"color\",\r\n        default: \"#ffffff\",\r\n    },\r\n    emissive: {\r\n        name: \"Emissive\",\r\n        type: \"color\",\r\n        default: \"#000000\",\r\n    },\r\n    opacity: {\r\n        name: \"Opacity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    emissiveIntensity: {\r\n        name: \"Emissive Intensity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    specular: {\r\n        name: \"Specular\",\r\n        type: \"color\",\r\n        default: \"#111111\",\r\n    },\r\n    metalness: {\r\n        name: \"Metalness\",\r\n        type: \"percentage\",\r\n        default: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    roughness: {\r\n        name: \"Roughness\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    shininess: {\r\n        name: \"Shininess\",\r\n        type: \"number\",\r\n        default: 30,\r\n        min: 1,\r\n        max: 100,\r\n        step: 1,\r\n    },\r\n    gradientMap: {\r\n        name: \"Gradient Map\",\r\n        type: \"select\",\r\n        default: \"none\",\r\n        options: [\"none\", \"2 Tones\", \"3 Tones\", \"4 Tones\", \"5 Tones\"],\r\n    },\r\n};\r\n\r\nexport const directSetMatParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"emissiveIntensity\",\r\n    \"metalness\",\r\n    \"roughness\",\r\n    \"shininess\",\r\n];\r\n\r\nexport const matColorParams = [\"color\", \"emissive\", \"specular\"];\r\n\r\nconst defaultMatParams = {};\r\nObject.keys(matParamsDetails).forEach(key => {\r\n    defaultMatParams[key] = matParamsDetails[key].default;\r\n});\r\n\r\nconst defaultLights = [\r\n    {\r\n        lightId: \"0\",\r\n        type: \"Ambient\",\r\n        color: \"#444444\",\r\n        enable: true,\r\n        intensity: 1,\r\n    },\r\n    {\r\n        lightId: \"1\",\r\n        type: \"Directional\",\r\n        color: \"#ffffff\",\r\n        enable: true,\r\n        position: [50, 0, 100],\r\n        intensity: 0.8,\r\n    },\r\n];\r\n\r\nexport const asciiSet = [\r\n    \" .:-=+*#%@\",\r\n    \" .'`^\\\",:;Il!i~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$\",\r\n];\r\n\r\nexport const defaultSettings = {\r\n    model: {\r\n        materialType: \"Basic\",\r\n        id: \"c100001_01\",\r\n        texture: \"c100001_01\",\r\n        eyeTexture: \"c100001_01\",\r\n        eyeIdx: \"2\",\r\n        mouthTexture: \"c100001_01\",\r\n        mouthIdx: \"2\",\r\n        weaponRight: \"\",\r\n        weaponLeft: \"\",\r\n    },\r\n    materialParams: { ...defaultMatParams },\r\n    scene: {\r\n        rotateSpeed: 0,\r\n        background: \"#cccccc\",\r\n        initCameraPosition: null,\r\n        lights: defaultLights,\r\n    },\r\n    animation: {\r\n        code: defaultAni,\r\n        timeScale: 1,\r\n    },\r\n    app: {\r\n        sideContent: \"settings\",\r\n        showSettings: true,\r\n        showAniControl: true,\r\n        antiAliasing: false,\r\n    },\r\n    outline: {\r\n        enable: true,\r\n        size: 5, // 1 -> 10\r\n        color: \"#000000\",\r\n        opacity: 1, // 0.1 -> 10%, 1-> 100%\r\n    },\r\n    capture: {\r\n        enable: false,\r\n        supportedCodecs: [],\r\n        codec: \"\",\r\n    },\r\n    ascii: {\r\n        enable: false,\r\n        charSet: asciiSet[1],\r\n        invert: false,\r\n        color: \"#00ff00\",\r\n        bgColor: \"#000000\",\r\n    },\r\n};\r\n\r\nexport const initKey = {\r\n    id: { group: \"model\", key: \"id\" },\r\n    et: { group: \"model\", key: \"eyeTexture\" },\r\n    ei: { group: \"model\", key: \"eyeIdx\" },\r\n    mt: { group: \"model\", key: \"mouthTexture\" },\r\n    mi: { group: \"model\", key: \"mouthIdx\" },\r\n    wr: { group: \"model\", key: \"weaponRight\" },\r\n    wl: { group: \"model\", key: \"weaponLeft\" },\r\n    bg: { group: \"scene\", key: \"background\" },\r\n    cam: { group: \"scene\", key: \"initCameraPosition\" },\r\n    ts: { group: \"animation\", key: \"timeScale\" },\r\n    showAC: { group: \"app\", key: \"showAniControl\" },\r\n    showSettings: { group: \"app\", key: \"showSettings\" },\r\n    showOutline: { group: \"outline\", key: \"enable\" },\r\n    AA: { group: \"app\", key: \"antiAliasing\" },\r\n    rot: { group: \"scene\", key: \"rotateSpeed\" },\r\n    cc: { group: \"animation\", key: \"code\" },\r\n};\r\n\r\nexport const MATERIALS = [\"Basic\", \"Toon\", \"Lambert\", \"Phong\", \"Standard\"];\r\n\r\nexport const materialCommonParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"useTexture\",\r\n    \"color\",\r\n];\r\n\r\nexport const materialExtraParams = {\r\n    Basic: [],\r\n    Toon: [\"emissive\", \"emissiveIntensity\", \"gradientMap\"],\r\n    Lambert: [\"emissive\", \"emissiveIntensity\"],\r\n    Phong: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"specular\",\r\n        \"shininess\",\r\n        \"flatShading\",\r\n    ],\r\n    Standard: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"metalness\",\r\n        \"roughness\",\r\n        \"flatShading\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_CODE = {\r\n    Sword: \"SWD\",\r\n    Blade: \"KAT\",\r\n    Dagger: \"DAG\",\r\n    Axe: \"AXE\",\r\n    Lance: \"LAN\",\r\n    Bow: \"BOW\",\r\n    Wand: \"ROD\",\r\n    Staff: \"CAN\",\r\n    Manacaster: \"GUN\",\r\n};\r\n\r\nexport const WEAPON_LIST = [\r\n    \"Sword\",\r\n    \"Blade\",\r\n    \"Dagger\",\r\n    \"Axe\",\r\n    \"Lance\",\r\n    \"Bow\",\r\n    \"Wand\",\r\n    \"Staff\",\r\n    \"Manacaster\",\r\n];\r\n\r\nexport const GENDER_CODE = {\r\n    Male: 21,\r\n    Female: 23,\r\n};\r\n\r\nexport const COMBO_LENGTH = {\r\n    Axe: 5,\r\n    Bow: 6,\r\n    Staff: 5,\r\n    Dagger: 6,\r\n    Blade: 5,\r\n    Lance: 5,\r\n    Wand: 5,\r\n    Sword: 5,\r\n};\r\n\r\nexport const FS_LENGTH = {\r\n    Axe: 3,\r\n    Bow: 3,\r\n    Staff: 5,\r\n    Dagger: 3,\r\n    Blade: 3,\r\n    Lance: 4,\r\n    Wand: 3,\r\n    Sword: 3,\r\n};\r\n\r\nexport const FILTERS = {\r\n    rarity: [\"3\", \"4\", \"5\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_FILTERS = {\r\n    rarity: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\", \"None\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const spFaceTextures = {\r\n    c110300_01: \"ec110300_01\",\r\n};\r\n\r\nexport const incompatibleModels = new Set([\r\n    \"c100007_01\",\r\n    \"c100007_05\",\r\n    \"c100007_09\",\r\n    \"c100034_01\",\r\n    \"c100036_01\",\r\n    \"c100037_01\",\r\n    \"c100041_01\",\r\n]);\r\n\r\nexport const commonBG = {\r\n    green: \"#00ff00\",\r\n    black: \"#000000\",\r\n    grey: \"#cccccc\",\r\n    white: \"#ffffff\",\r\n};\r\n\r\nexport const CAM_PARAMS = {\r\n    angle: 45,\r\n    far: 300,\r\n    near: 0.01,\r\n};\r\n\r\nexport const cameraPositions = {\r\n    c: [0, 0.5, 1.5],\r\n    d: [3, 0.5, 6],\r\n    w: [2, 0, 0],\r\n    b: [1, 0.5, 6],\r\n    e: [1, 1, 4],\r\n    h: [1, 0.5, 3],\r\n    o: [0, 0.5, 8],\r\n    r: [3, 3, 20],\r\n\r\n    c100034_01: [0, 0.5, 1.75],\r\n    d210078_01: [3, 3, 20],\r\n    d210114_01: [3, 3, 20],\r\n    h0010001: [6, 0.5, 8],\r\n    h0010001_02: [2, 0, 0],\r\n    h0040101: [1, 0.5, 4],\r\n    r0070401: [30, 30, 100],\r\n    r0080401: [1, 2, 5],\r\n\r\n    smith: [1, 1, 2],\r\n};\r\n\r\nexport const controlsPositions = {\r\n    c: [0, 0.5, 0],\r\n    d: [0, 1, 0],\r\n    w: [0, 0, 0],\r\n    b: [0, 1, 0],\r\n    e: [0, 0.5, 0],\r\n    h: [0, 1, 0],\r\n    o: [0, 0, 0],\r\n    r: [0, 3, 0],\r\n\r\n    d210078_01: [0, 3, 0],\r\n    d210114_01: [0, 3, 0],\r\n    h0010001_02: [0, 3, 0],\r\n    r0070401: [0, 20, 0],\r\n    r0080401: [0, 2, 0],\r\n\r\n    smith: [0, 0.5, 0],\r\n};\r\n\r\nexport const idxOffsets = {\r\n    face1: { x: 2, y: 1 },\r\n    face2: { x: 0, y: 0 },\r\n    face3: { x: 1, y: 0 },\r\n    face4: { x: 2, y: 0 },\r\n    face5: { x: 3, y: 0 },\r\n    face6: { x: 0, y: -1 },\r\n    face7: { x: 1, y: -1 },\r\n    face8: { x: 2, y: -1 },\r\n    face9: { x: 3, y: -1 },\r\n};\r\n\r\nexport const aniModList = {\r\n    ts: { key: \"timeScale\", defaultValue: 1 },\r\n    r: { key: \"repetitions\", defaultValue: 1 },\r\n};\r\n\r\nexport const videoCodecs = [\r\n    \"video/webm;codecs=h264\",\r\n    \"video/webm;codecs=vp9\",\r\n    \"video/webm;codecs=vp8\",\r\n    \"video/webm\",\r\n];\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_WIDTH, DRAWER_BGCOLOR } from \"../consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst drawerWidth = DRAWER_WIDTH;\r\nconst drawerBG = DRAWER_BGCOLOR;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"block\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        overflowY: \"scroll\",\r\n    },\r\n    drawerPaper: {\r\n        alignItems: \"center\",\r\n        backgroundColor: drawerBG,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        width: drawerWidth,\r\n        \"& button\": {\r\n            marginBottom: \"0.2rem\",\r\n        },\r\n    },\r\n    content: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        padding: 0,\r\n    },\r\n    openSidebarButton: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        margin: \"2rem\",\r\n        opacity: \"0.5\",\r\n        borderRadius: \"0.25rem\",\r\n        transition: \"0.5s all ease-in-out\",\r\n        backgroundColor: \"#cccccc\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            opacity: \"1\",\r\n        },\r\n    },\r\n    loadingMsg: {\r\n        position: \"absolute\",\r\n        zIndex: \"9999\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"white\",\r\n        fontSize: \"x-large\",\r\n        backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","export default __webpack_public_path__ + \"static/media/Rose-Petals.bc11ecc7.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}