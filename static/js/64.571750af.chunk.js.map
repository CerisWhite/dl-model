{"version":3,"sources":["helpers/downloadBlob.js","helpers/fbx2json/fileList.js","helpers/fbx2json/fbx2json.js"],"names":["downloadBlob","blob","fileName","url","URL","createObjectURL","a","document","createElement","style","display","href","download","body","appendChild","click","window","revokeObjectURL","removeChild","fileList","getModel","filePath","fbxSource","loadModel","model","exportAni","ani","name","content","JSON","stringify","toJSON","Blob","type","pause","msec","Promise","resolve","setTimeout","exportAllAni","animations","counter","handleFile","fileToLoad","concat","endsWith","length","aniName","replace","console","log","fbx2json","fbxList"],"mappings":"6GAKe,SAASA,EAAaC,EAAMC,GACvC,IAAMC,EAAMC,IAAIC,gBAAgBJ,GAE1BK,EAAIC,SAASC,cAAc,KACjCF,EAAEG,MAAMC,QAAU,OAClBJ,EAAEK,KAAOR,EACTG,EAAEM,SAAWV,EACbK,SAASM,KAAKC,YAAYR,GAC1BA,EAAES,QAEFC,OAAOZ,IAAIa,gBAAgBd,GAC3BI,SAASM,KAAKK,YAAYZ,GAhB9B,mC,qHCCea,EADE,G,yBCOXC,EAAQ,uCAAG,WAAMlB,GAAN,iBAAAI,EAAA,6DACPe,EADO,UACOC,IADP,gBACwBpB,GADxB,SAEOqB,YAAUF,GAFjB,cAEPG,EAFO,yBAGNA,GAHM,2CAAH,sDAMRC,EAAS,uCAAG,WAAMC,GAAN,mBAAApB,EAAA,sDACRJ,EADQ,UACMwB,EAAIC,KADV,SAERC,EAAUC,KAAKC,UAAUJ,EAAIK,UAE7B9B,EAAO,IAAI+B,KAAK,CAACJ,GAAU,CAAEK,KAAM,eAEzCjC,YAAaC,EAAMC,GANL,2CAAH,sDASTgC,EAAK,uCAAG,WAAMC,GAAN,SAAA7B,EAAA,+EACH,IAAI8B,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OADxC,2CAAH,sDAILI,EAAY,uCAAG,WAAMC,GAAN,qBAAAlC,EAAA,sDACbmC,EAAU,EADG,cAECD,GAFD,gEAENd,EAFM,iBAGPD,EAAUC,GAHH,UAKbe,IAAYA,EA1BG,GAqBF,kCAMOP,EAAM,KANb,uMAAH,sDAUZQ,EAAU,uCAAG,WAAMxC,GAAN,qBAAAI,EAAA,6DACTqC,EAAazC,EAAS0C,OAAO1C,EAAS2C,SAAS,OAAS,GAAK,QADpD,SAEczB,EAASuB,GAFvB,gBAEPH,EAFO,EAEPA,WAGkB,IAAtBA,EAAWM,QAAuC,eAAvBN,EAAW,GAAGb,OAEnCoB,EAAU7C,EAAS8C,QAAQ,OAAQ,IACzCR,EAAW,GAAGb,KAAOoB,GAGzBR,EAAaC,GACbS,QAAQC,IAAR,mBAAwBhD,IAZT,2CAAH,sDAeT,SAAeiD,IAAtB,+B,4CAAO,gCAAA7C,EAAA,oEACoB8C,GADpB,+DACQlD,EADR,iBAEOwC,EAAWxC,GAFlB,sM","file":"static/js/64.571750af.chunk.js","sourcesContent":["/**\r\n * download a blob as the given file name\r\n * @param {Blob} blob\r\n * @param {string} fileName\r\n */\r\nexport default function downloadBlob(blob, fileName) {\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.style.display = \"none\";\r\n    a.href = url;\r\n    a.download = fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n\r\n    window.URL.revokeObjectURL(url);\r\n    document.body.removeChild(a);\r\n}\r\n","const fileList = [];\r\nexport default fileList;\r\n","import fbxList from \"./fileList\";\r\nimport { loadModel } from \"helpers/viewerHelpers\";\r\nimport { fbxSource } from \"App\";\r\nimport downloadBlob from \"../downloadBlob\";\r\n\r\nconst DOWNLOAD_LIMIT = 10;\r\n\r\nconst getModel = async fileName => {\r\n    const filePath = `${fbxSource}/fbx/${fileName}`;\r\n    const model = await loadModel(filePath);\r\n    return model;\r\n};\r\n\r\nconst exportAni = async ani => {\r\n    const fileName = `${ani.name}.json`;\r\n    const content = JSON.stringify(ani.toJSON());\r\n\r\n    const blob = new Blob([content], { type: \"text/plain\" });\r\n\r\n    downloadBlob(blob, fileName);\r\n};\r\n\r\nconst pause = async msec => {\r\n    return new Promise(resolve => setTimeout(resolve, msec));\r\n};\r\n\r\nconst exportAllAni = async animations => {\r\n    let counter = 0;\r\n    for (const ani of animations) {\r\n        await exportAni(ani);\r\n\r\n        counter = ++counter % DOWNLOAD_LIMIT;\r\n        if (!counter) await pause(1000);\r\n    }\r\n};\r\n\r\nconst handleFile = async fileName => {\r\n    const fileToLoad = fileName.concat(fileName.endsWith(\"fbx\") ? \"\" : \".fbx\");\r\n    const { animations } = await getModel(fileToLoad);\r\n\r\n    const fromMixamo =\r\n        animations.length === 1 && animations[0].name === \"mixamo.com\";\r\n    if (fromMixamo) {\r\n        const aniName = fileName.replace(\".fbx\", \"\");\r\n        animations[0].name = aniName;\r\n    }\r\n\r\n    exportAllAni(animations);\r\n    console.log(`exported ${fileName}`);\r\n};\r\n\r\nexport async function fbx2json() {\r\n    for (const fileName of fbxList) {\r\n        await handleFile(fileName);\r\n    }\r\n}\r\n"],"sourceRoot":""}