{"version":3,"sources":["components/viewers/AniViewer.js","components/viewers/AdvViewer.js"],"names":["AniViewer","afterMainModelLoad","saveMainModelInitState","addAnimation","afterMainModelUpdate","updateModel","prev","current","a","updateMainModel","model","updateAnimation","animation","otherUpdate","capture","enable","captureAnimation","models","main","initPos","position","clone","initRot","rotation","resetFace","props","eyeIdx","mouthIdx","beforeAddAni","aniCode","code","timeScale","disableInput","mainModel","aniList","analyzeChainCode","nAni","length","mixer","THREE","_aniIdx","addEventListener","playNextAni","aniSettings","loadAnimations","animations","aniIdx","enableInput","removeAnimation","stopAllAction","copy","mediaRecorder","stop","toggleCapture","newIdx","chunks","videoStream","canvas","captureStream","codec","MediaRecorder","mimeType","ondataavailable","event","push","data","onstop","superBuffer","Blob","type","url","URL","createObjectURL","document","createElement","style","display","href","download","body","appendChild","click","window","revokeObjectURL","removeChild","beforeCaptureAnimation","start","everyAnimate","dt","clock","getDelta","rotateFloor","update","faceChanges","time","faceChangeTime","shift","this","ani","action","clipAction","currentAniSettings","repetitions","currentClipDuration","duration","setLoop","clampWhenFinished","getFaceChangesArray","map","change","setTime","play","BasicViewer","SIDES","AdvViewer","initFace","addWeapons","beforeMainModelUpdate","detachAllWeapons","attachAllWeapons","prevModel","id","updateFace","updateWeapons","modelId","_eyeIdx","_mouthIdx","DEFAULT_FACE_IDX","defaultFaceParams","mouthTexture","eyeTexture","getWeaponInfo","initWeaponLoad","weaponRight","weaponLeft","Object","assign","initAllWeapons","newInfo","analyzeWeaponCode","modelInfo","modelPath","loadWeaponR","loadModel","loadWeaponL","Promise","all","materialType","matType","forEach","side","key","weapon","weaponInfo","texturePath","flipped","changeMaterial","y","Math","PI","outlineParams","outline","outlines","createOutline","attachWeapon","boneName","traverse","child","name","includes","children","add","detachWeapon","parent","remove","updateEyeTexture","currentTexture","prevTexture","applyEyeTexture","textureId","offset","calculateTextureOffset","applyEyeOffset","updateMouthTexture","applyMouthTexture","applyMouthOffset","updateFaceTexture","eyeUpdated","mouthUpdated","applyNewModelMat","updateFaceOffset","disposeItem","oldIdx","calculateIdxOffset"],"mappings":"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","file":"static/js/53.e030d730.chunk.js","sourcesContent":["/* \r\n################################################\r\n# Extension of Base Viewer that adds:\r\n#    - Animation\r\n#    - Recording Animation\r\n################################################  \r\n*/\r\n\r\nimport BasicViewer from \"./BasicViewer\";\r\n\r\nimport * as THREE from \"three\";\r\nimport {\r\n    analyzeChainCode,\r\n    loadAnimations,\r\n    getFaceChangesArray,\r\n} from \"helpers/viewerHelpers\";\r\n\r\nexport class AniViewer extends BasicViewer {\r\n    afterMainModelLoad = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        await this.updateMainModel(prev.model, current.model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    otherUpdate = (prev, current) => {\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n    };\r\n\r\n    saveMainModelInitState = () => {\r\n        const model = this.models.main;\r\n        model.initPos = model.position.clone();\r\n        model.initRot = model.rotation.clone();\r\n    };\r\n\r\n    /**\r\n     * play animation stored in this.animations[newIdx]\r\n     * @param {number} newIdx\r\n     */\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n\r\n        const { mixer } = this;\r\n        mixer.stopAllAction();\r\n\r\n        const ani = this.animations[newIdx];\r\n        const action = mixer.clipAction(ani);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n        const currentClipDuration = ani.duration;\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        this.faceChanges = getFaceChangesArray(faceChanges, repetitions);\r\n        this.faceChangeTime = this.faceChanges.map(\r\n            change => (currentClipDuration * change.time) / 100\r\n        );\r\n\r\n        mixer.setTime(0);\r\n        action.play();\r\n    }\r\n\r\n    resetFace = () => {\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    set eyeIdx(newIdx) {}\r\n\r\n    set mouthIdx(newIdx) {}\r\n\r\n    beforeAddAni = () => {\r\n        this.resetFace();\r\n    };\r\n\r\n    addAnimation = async () => {\r\n        this.beforeAddAni();\r\n\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        if (!aniCode) return;\r\n\r\n        this.disableInput();\r\n\r\n        const mainModel = this.models.main;\r\n        const aniList = analyzeChainCode(aniCode);\r\n        this.nAni = aniList.length;\r\n\r\n        mainModel.mixer = new THREE.AnimationMixer(mainModel);\r\n        this.mixer = mainModel.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        mainModel.mixer.timeScale = timeScale; // Global timeScale\r\n        mainModel.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = aniList;\r\n\r\n        this.animations = await loadAnimations(aniList);\r\n\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.enableInput();\r\n    };\r\n\r\n    removeAnimation = () => {\r\n        const mainModel = this.models.main;\r\n        mainModel.mixer?.stopAllAction?.();\r\n\r\n        // Reset position and rotation to initial value\r\n        const { initPos, initRot } = mainModel;\r\n        mainModel.position.copy(initPos);\r\n        mainModel.rotation.copy(initRot);\r\n\r\n        this.mixer = null;\r\n        this.animations = [];\r\n        this.aniSettings = [];\r\n    };\r\n\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            this.removeAnimation();\r\n            this.addAnimation();\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            const { codec } = this.props.capture;\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.enableInput();\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                const url = URL.createObjectURL(superBuffer);\r\n                const a = document.createElement(\"a\");\r\n                a.style.display = \"none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n            };\r\n        }\r\n        this.disableInput(\"Recording\");\r\n        this.beforeCaptureAnimation();\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    beforeCaptureAnimation = () => void 0;\r\n\r\n    everyAnimate = () => {\r\n        const dt = this.clock.getDelta();\r\n        this.rotateFloor(dt);\r\n        this.mixer?.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length) {\r\n            const elapsedTime = this.mixer.time;\r\n            const nextFaceChangeTime = this.faceChangeTime[0];\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                this.faceChangeTime.shift();\r\n                const { eyeIdx, mouthIdx } = this.faceChanges.shift();\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default AniViewer;\r\n","/* \r\n################################################\r\n# Extension of Ani Viewer that adds:\r\n#    - Weapons\r\n#    - Face Texture\r\n#    - Face offset\r\n################################################  \r\n*/\r\n\r\nimport AniViewer from \"./AniViewer\";\r\n\r\nimport { DEFAULT_FACE_IDX } from \"helpers/consts\";\r\nimport {\r\n    calculateTextureOffset,\r\n    calculateIdxOffset,\r\n    analyzeWeaponCode,\r\n    loadModel,\r\n    applyEyeTexture,\r\n    applyMouthTexture,\r\n    applyEyeOffset,\r\n    applyMouthOffset,\r\n    disposeItem,\r\n    createOutline,\r\n    changeMaterial,\r\n} from \"helpers/viewerHelpers\";\r\n\r\nconst SIDES = [\"Right\", \"Left\"];\r\n\r\nexport class AdvViewer extends AniViewer {\r\n    constructor() {\r\n        super();\r\n        this._eyeIdx = this._mouthIdx = DEFAULT_FACE_IDX;\r\n    }\r\n\r\n    afterMainModelLoad = () => {\r\n        this.saveMainModelInitState();\r\n        this.initFace();\r\n        this.addWeapons();\r\n        this.addAnimation();\r\n    };\r\n\r\n    beforeMainModelUpdate = () => {\r\n        this.detachAllWeapons();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.saveMainModelInitState();\r\n        this.initFace();\r\n        this.attachAllWeapons();\r\n        this.addAnimation();\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const prevModel = prev.model;\r\n        const { model } = current;\r\n        if (prevModel.id !== model.id) {\r\n            await this.updateMainModel(prevModel, model);\r\n        } else {\r\n            this.updateFace(prevModel, model);\r\n        }\r\n        this.updateWeapons(prevModel, model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    initFace = () => {\r\n        const modelId = this.props.model.id;\r\n        this._eyeIdx = this._mouthIdx = DEFAULT_FACE_IDX;\r\n        const defaultFaceParams = {\r\n            mouthTexture: modelId,\r\n            mouthIdx: DEFAULT_FACE_IDX,\r\n            eyeTexture: modelId,\r\n            eyeIdx: DEFAULT_FACE_IDX,\r\n        };\r\n        this.updateFace(defaultFaceParams, this.props.model);\r\n    };\r\n\r\n    addWeapons = async () => {\r\n        this.getWeaponInfo();\r\n\r\n        const [weaponRight, weaponLeft] = await this.initWeaponLoad();\r\n        this.models = Object.assign(this.models, { weaponRight, weaponLeft });\r\n\r\n        await this.initAllWeapons();\r\n        this.attachAllWeapons();\r\n    };\r\n\r\n    getWeaponInfo = () => {\r\n        const { weaponRight, weaponLeft } = this.props.model;\r\n        const newInfo = {\r\n            weaponRight: analyzeWeaponCode(weaponRight),\r\n            weaponLeft: analyzeWeaponCode(weaponLeft),\r\n        };\r\n        this.modelInfo = Object.assign(this.modelInfo, newInfo);\r\n    };\r\n\r\n    initWeaponLoad = () => {\r\n        const weaponRight = this.modelInfo.weaponRight?.modelPath;\r\n        const loadWeaponR = loadModel(weaponRight);\r\n\r\n        const weaponLeft = this.modelInfo.weaponLeft?.modelPath;\r\n        const loadWeaponL = loadModel(weaponLeft);\r\n\r\n        return Promise.all([loadWeaponR, loadWeaponL]);\r\n    };\r\n\r\n    initAllWeapons = async () => {\r\n        const materialType = this.matType;\r\n        SIDES.forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weapon = this.models[key];\r\n            if (!weapon) return;\r\n\r\n            const weaponInfo = this.modelInfo[key];\r\n            const { texturePath, flipped } = weaponInfo;\r\n            changeMaterial(weapon, { materialType, texturePath });\r\n            if (flipped) weapon.rotation.y += Math.PI;\r\n\r\n            const outlineParams = this.props.outline;\r\n            this.outlines[key] = createOutline(weapon, outlineParams);\r\n        });\r\n    };\r\n\r\n    attachWeapon = (weapon, side) => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name.includes(boneName) && child.children.length === 0) {\r\n                child.add(weapon);\r\n            }\r\n        });\r\n    };\r\n\r\n    attachAllWeapons = () => {\r\n        SIDES.forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weapon = this.models[key];\r\n            if (!weapon) return;\r\n\r\n            this.attachWeapon(weapon, side);\r\n        });\r\n    };\r\n\r\n    detachWeapon = side => {\r\n        const key = `weapon${side}`;\r\n        const model = this.models[key];\r\n        if (!model) return;\r\n\r\n        model.parent.remove(model);\r\n    };\r\n\r\n    detachAllWeapons = () => SIDES.forEach(side => this.detachWeapon(side));\r\n\r\n    updateEyeTexture = (prev, current) => {\r\n        const currentTexture = current.eyeTexture;\r\n        const prevTexture = prev.eyeTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const materialType = this.matType;\r\n        applyEyeTexture(this.models.main, {\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyEyeOffset(this.models.main, offset);\r\n\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * @param {string} newIdx\r\n     */\r\n    set eyeIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._eyeIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyEyeOffset(this.models.main, offset);\r\n\r\n        this._eyeIdx = newIdx;\r\n    }\r\n\r\n    updateMouthTexture = (prev, current) => {\r\n        const currentTexture = current.mouthTexture;\r\n        const prevTexture = prev.mouthTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const materialType = this.matType;\r\n        applyMouthTexture(this.models.main, {\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyMouthOffset(this.models.main, offset);\r\n\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * @param {string} newIdx\r\n     */\r\n    set mouthIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._mouthIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyMouthOffset(this.models.main, offset);\r\n\r\n        this._mouthIdx = newIdx;\r\n    }\r\n\r\n    updateFaceTexture = (prev, current) => {\r\n        const eyeUpdated = this.updateEyeTexture(prev, current);\r\n        const mouthUpdated = this.updateMouthTexture(prev, current);\r\n        if (eyeUpdated || mouthUpdated) {\r\n            const mainModel = this.models.main;\r\n            this.applyNewModelMat(mainModel);\r\n        }\r\n    };\r\n\r\n    updateFaceOffset = ({ eyeIdx, mouthIdx }) => {\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    updateFace = (prev, current) => {\r\n        this.updateFaceTexture(prev, current);\r\n        this.updateFaceOffset(current);\r\n    };\r\n\r\n    updateWeapons = async (prev, current) => {\r\n        this.disableInput();\r\n        SIDES.forEach(async side => {\r\n            const key = `weapon${side}`;\r\n            if (prev[key] === current[key]) return;\r\n\r\n            // remove old weapon\r\n            this.detachWeapon(side);\r\n            disposeItem(this.models[key]); // dispose old weapon\r\n\r\n            // if current weapon is empty (weapon removed)\r\n            if (!current[key]) {\r\n                this.models[key] = null;\r\n                this.modelInfo[key] = \"\";\r\n                // remove reference to outline\r\n                this.outlines[key] = null;\r\n                return;\r\n            }\r\n\r\n            // load new weapon\r\n            this.modelInfo[key] = analyzeWeaponCode(current[key]);\r\n            const { modelPath, texturePath, flipped } = this.modelInfo[key];\r\n\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            this.models[key] = model;\r\n\r\n            // process new weapon\r\n            const materialType = this.matType;\r\n            changeMaterial(model, { materialType, texturePath });\r\n            this.applyNewModelMat(model);\r\n\r\n            if (flipped) {\r\n                model.rotation.y += Math.PI;\r\n            }\r\n\r\n            const outlineParams = this.props.outline;\r\n            this.outlines[key] = createOutline(model, outlineParams);\r\n\r\n            this.attachWeapon(model, side);\r\n        });\r\n        this.enableInput();\r\n    };\r\n}\r\n\r\nexport default AdvViewer;\r\n"],"sourceRoot":""}