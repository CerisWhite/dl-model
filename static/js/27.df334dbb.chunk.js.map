{"version":3,"sources":["ColorSettings.js"],"names":["ChromePicker","lazy","then","module","default","ColorSettings","initColor","title","commonColor","toggleControlOpen","mode","dispatch","useContext","DispatchContext","settings","SettingsContext","scene","background","commonBG","outline","color","useState","setColor","setNewColor","event","value","currentTarget","commonBGBtn","Object","keys","map","onClick","style","backgroundColor","complementaryColor","key","onClose","dividers","className","colorToSet","action","type","textShadow","fallback","onChangeComplete","hex"],"mappings":"8MAWMA,G,OAAeC,gBAAK,kBACtB,kCAAsBC,MAAK,SAAAC,GAAM,MAAK,CAAEC,QAASD,EAAOH,qBA+F7CK,UA5Ff,YAAqD,IAG7CC,EAAWC,EAAOC,EAHDC,EAA2B,EAA3BA,kBAAmBC,EAAQ,EAARA,KAClCC,EAAWC,qBAAWC,KACtBC,EAAWF,qBAAWG,KAE5B,OAAQL,GACJ,IAAK,aACDJ,EAAYQ,EAASE,MAAMC,WAC3BT,EAAcU,IACdX,EAAQ,sBACR,MACJ,IAAK,eACDD,EAAYQ,EAASK,QAAQC,MAC7BZ,EAAc,GACdD,EAAQ,gBAbgC,MAiBtBc,mBAASf,GAjBa,mBAiBzCc,EAjByC,KAiBlCE,EAjBkC,KA0C1CC,EAAc,SAAAC,GAChB,IAAMC,EAAQD,EAAME,cAAcD,MAClCH,EAASG,IAGPE,EAAcC,OAAOC,KAAKrB,GAAasB,KAAI,SAAAV,GAAK,OAClD,kBAAC,IAAD,CACIW,QAASR,EACTS,MAAO,CACHC,gBAAiBf,IAASE,GAC1BA,MAAOc,YAAmBhB,IAASE,KAEvCK,MAAOP,IAASE,GAChBe,IAAKf,GAEJA,MAIT,OACI,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAagB,QAAS3B,GAAoBF,IAE9C,kBAAC,IAAD,CAAe8B,UAAQ,EAACC,UAAU,iBAC9B,yBAAKA,UAAU,qBACX,kBAAC,IAAD,CACIP,QA9CD,SAAAP,GACf,IAAMC,EAAQD,EAAME,cAAcD,MAC5Bc,EAAuB,WAAVd,EAAqBL,EAAQK,EAC5Ce,EAAS,CAAEC,KAAM,UACrB,OAAQ/B,GACJ,IAAK,aACD8B,EAAOL,IAAM,QACbK,EAAOf,MAAQ,CAAER,WAAYsB,GAC7B,MACJ,IAAK,eACDC,EAAOL,IAAM,UACbK,EAAOf,MAAQ,CAAEL,MAAOmB,GAIhC5B,EAAS6B,GACT/B,KA+BgBuB,MAAO,CACHC,gBAAiBb,EACjBA,MAAOc,YAAmBd,GAC1BsB,WAAW,qBAEfjB,MAAM,UAPV,SAWA,yBAAKa,UAAU,wBAAwBX,IAE3C,kBAAC,WAAD,CAAUgB,SAAU,MAChB,kBAAC3C,EAAD,CACIoB,MAAOA,EACPwB,iBAjES,SAAAxB,GACzBE,EAASF,EAAMyB","file":"static/js/27.df334dbb.chunk.js","sourcesContent":["import React, { lazy, Suspense, useState, useContext } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n// import { ChromePicker } from \"react-color\";\r\n\r\nimport { DialogContent, DialogTitle, DialogTop } from \"./CustomDialog\";\r\nimport { complementaryColor } from \"./helpers\";\r\nimport { commonBG } from \"./consts\";\r\nimport { DispatchContext, SettingsContext } from \"./context/SettingsContext\";\r\n\r\nimport \"./styles/ColorSettings.css\";\r\n\r\nconst ChromePicker = lazy(() =>\r\n    import(\"react-color\").then(module => ({ default: module.ChromePicker }))\r\n);\r\n\r\nfunction ColorSettings({ toggleControlOpen, mode }) {\r\n    const dispatch = useContext(DispatchContext);\r\n    const settings = useContext(SettingsContext);\r\n    let initColor, title, commonColor;\r\n    switch (mode) {\r\n        case \"background\":\r\n            initColor = settings.scene.background;\r\n            commonColor = commonBG;\r\n            title = \"Background Settings\";\r\n            break;\r\n        case \"outlineColor\":\r\n            initColor = settings.outline.color;\r\n            commonColor = {};\r\n            title = \"Outline Color\";\r\n            break;\r\n        default:\r\n    }\r\n    const [color, setColor] = useState(initColor);\r\n\r\n    const handleChangeComplete = color => {\r\n        setColor(color.hex);\r\n    };\r\n\r\n    const applyColor = event => {\r\n        const value = event.currentTarget.value;\r\n        const colorToSet = value === \"picker\" ? color : value;\r\n        let action = { type: \"update\" };\r\n        switch (mode) {\r\n            case \"background\":\r\n                action.key = \"scene\";\r\n                action.value = { background: colorToSet };\r\n                break;\r\n            case \"outlineColor\":\r\n                action.key = \"outline\";\r\n                action.value = { color: colorToSet };\r\n                break;\r\n            default:\r\n        }\r\n        dispatch(action);\r\n        toggleControlOpen();\r\n    };\r\n\r\n    const setNewColor = event => {\r\n        const value = event.currentTarget.value;\r\n        setColor(value);\r\n    };\r\n\r\n    const commonBGBtn = Object.keys(commonColor).map(color => (\r\n        <Button\r\n            onClick={setNewColor}\r\n            style={{\r\n                backgroundColor: commonBG[color],\r\n                color: complementaryColor(commonBG[color]),\r\n            }}\r\n            value={commonBG[color]}\r\n            key={color}\r\n        >\r\n            {color}\r\n        </Button>\r\n    ));\r\n\r\n    return (\r\n        <>\r\n            <DialogTop>\r\n                <DialogTitle onClose={toggleControlOpen}>{title}</DialogTitle>\r\n            </DialogTop>\r\n            <DialogContent dividers className=\"ColorSettings\">\r\n                <div className=\"ColorSettings-btn\">\r\n                    <Button\r\n                        onClick={applyColor}\r\n                        style={{\r\n                            backgroundColor: color,\r\n                            color: complementaryColor(color),\r\n                            textShadow: `0px 0px 3px white`,\r\n                        }}\r\n                        value=\"picker\"\r\n                    >\r\n                        Apply\r\n                    </Button>\r\n                    <div className=\"ColorSettings-common\">{commonBGBtn}</div>\r\n                </div>\r\n                <Suspense fallback={null}>\r\n                    <ChromePicker\r\n                        color={color}\r\n                        onChangeComplete={handleChangeComplete}\r\n                    />\r\n                </Suspense>\r\n            </DialogContent>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ColorSettings;\r\n"],"sourceRoot":""}