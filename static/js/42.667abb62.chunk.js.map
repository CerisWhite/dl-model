{"version":3,"sources":["MainPage/Display/viewers/BaseViewer.js","MainPage/Display/viewers/AniViewer.js","MainPage/Display/viewers/DragonViewer.js"],"names":["BaseViewer","disableInput","msg","props","setLoadingMsg","enableInput","initialize","a","initScene","materials","outlines","models","modelInfo","loadMainModel","afterMainModelLoad","viewport","width","window","innerWidth","height","innerHeight","clock","THREE","scene","bgColor","floor","createInvisibleFloor","add","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","target","update","lights","addAllLights","loadedFX","Map","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","AAEnabled","antiAliasing","_AA","renderer","finalRenderer","setSize","canvas","domElement","animate","modelId","model","id","main","modelPath","getModelPath","loadModel","basicMainProcessing","addLight","light","enable","params","newLight","createLight","push","forEach","removeLight","remove","removeAllLights","addToScene","removeEffects","materialType","matType","isBlade","texturePath","analyzeWeaponCode","changeMaterial","forced","applyNewModelMat","outlineParams","outline","createOutline","updateViewer","prev","current","updateEnvironment","updateModel","otherUpdate","updateViewport","updateOutline","updateMaterial","material","updateLights","updateAscii","ascii","AA","updateMainModel","aspect","disposeMainModel","mainModel","disposeItem","replaceMainModel","beforeMainModelUpdate","afterMainModelUpdate","updateOutlineParams","Object","values","flat","applyOutlineSettings","updatedKeys","keys","filter","key","length","map","saveMaterialReference","getMaterial","matParams","updateMatParams","prevParams","useTexture","matTypeChanged","type","some","newCanvas","has","AsciiEffect","showAscii","charSet","color","invert","get","effect","style","background","rotateFloor","dt","rotateSpeed","Math","PI","rotateY","everyAnimate","getDelta","frameId","requestAnimationFrame","render","this","finishedInit","console","log","getUpdated","value","oldValue","subkeys","JSON","stringify","subkey","cancelAnimationFrame","mixer","renderLists","dispose","ref","el","enabled","allParams","paramList","getParamsList","filterObject","oldCanvas","_canvas","removeChild","appendChild","PureComponent","AniViewer","saveMainModelInitState","addAnimation","updateAnimation","animation","capture","captureAnimation","initPos","clone","initRot","rotation","resetFace","eyeIdx","mouthIdx","beforeAddAni","aniCode","code","timeScale","aniList","analyzeChainCode","nAni","_aniIdx","addEventListener","playNextAni","aniSettings","loadAnimations","animations","aniIdx","removeAnimation","stopAllAction","copy","mediaRecorder","stop","toggleCapture","newIdx","chunks","videoStream","captureStream","codec","MediaRecorder","mimeType","ondataavailable","event","data","onstop","superBuffer","Blob","url","URL","createObjectURL","document","createElement","href","download","body","click","revokeObjectURL","beforeCaptureAnimation","start","faceChanges","time","faceChangeTime","shift","anim","action","clipAction","currentAniSettings","repetitions","setLoop","clampWhenFinished","getFaceChangesArray","change","currentClipDuration","setTime","duration","play","DragonViewer","initNewModel","initFace","eyes","getDragonEye","eye","frustumCulled","mouths","getDragonMouth","mouth","_eyeIdx","_mouthIdx","idx","parseInt","oldIdx","regex","mesh","name","exec","visible"],"mappings":"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","file":"static/js/42.667abb62.chunk.js","sourcesContent":["/* \r\n################################################\r\n# Base Viewer that supports adding / updating:\r\n#    - 1 main model\r\n#    - auto rotate\r\n#    - viewport\r\n#    - material\r\n#    - background color\r\n#    - lighting\r\n#    - anti aliasing\r\n#    - ASCII mode\r\n################################################\r\n*/\r\n\r\nimport { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { CAM_PARAMS } from \"helpers/consts\";\r\nimport { isBlade, filterObject, getUpdated } from \"helpers/helpers\";\r\nimport {\r\n    createInvisibleFloor,\r\n    createLight,\r\n    analyzeWeaponCode,\r\n    getModelPath,\r\n    loadModel,\r\n    getMaterial,\r\n    disposeItem,\r\n    createOutline,\r\n    applyOutlineSettings,\r\n    getParamsList,\r\n    changeMaterial,\r\n    updateMatParams,\r\n    removeEffects,\r\n} from \"helpers/viewerHelpers\";\r\n\r\nclass BaseViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        // window.app = this;\r\n\r\n        // const { fbx2json } = await import(\"fbx2json/fbx2json.js\");\r\n        // await fbx2json();\r\n\r\n        await this.initialize();\r\n        this.finishedInit = true;\r\n    }\r\n\r\n    componentDidUpdate(prev) {\r\n        if (!this.finishedInit) return;\r\n        const current = this.props;\r\n\r\n        // print updated props to console\r\n        console.log(\"Updated\");\r\n        const updated = getUpdated(prev, current);\r\n        updated.forEach(([key, value]) => {\r\n            const oldValue = prev[key];\r\n            const subkeys = Object.keys(value);\r\n            if (subkeys.length === 0 || typeof value === \"string\") {\r\n                console.log(\r\n                    `${key}: ${JSON.stringify(oldValue)} to ${JSON.stringify(\r\n                        value\r\n                    )}`\r\n                );\r\n            } else {\r\n                subkeys.forEach(subkey => {\r\n                    if (oldValue[subkey] !== value[subkey]) {\r\n                        console.log(\r\n                            `${key}.${subkey}: ${JSON.stringify(\r\n                                oldValue[subkey]\r\n                            )} to ${JSON.stringify(value[subkey])}`\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        this.updateViewer(prev, current);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixer = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n\r\n    disableInput = msg => this.props.setLoadingMsg(msg || \"Loading\");\r\n\r\n    enableInput = () => this.props.setLoadingMsg(\"\");\r\n\r\n    initialize = async () => {\r\n        this.disableInput();\r\n\r\n        this.initScene();\r\n\r\n        this.materials = [];\r\n        this.outlines = {};\r\n        this.models = {};\r\n        this.modelInfo = {};\r\n        await this.loadMainModel();\r\n        await this.afterMainModelLoad?.();\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    initScene = () => {\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.bgColor = this.props.bgColor;\r\n\r\n        // Floor for auto rotate\r\n        this.floor = createInvisibleFloor();\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addAllLights(lights);\r\n\r\n        // effects\r\n        this.loadedFX = new Map();\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        const AAEnabled = this.props.antiAliasing;\r\n        this._AA = AAEnabled;\r\n\r\n        this.renderer = AAEnabled ? this.rendererAA : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        const { width, height } = this.props.viewport;\r\n        this.finalRenderer.setSize(width, height);\r\n\r\n        const canvas = this.finalRenderer.domElement;\r\n        this.canvas = canvas;\r\n\r\n        this.animate();\r\n    };\r\n\r\n    loadMainModel = async () => {\r\n        const modelId = this.props.model.id;\r\n        this.modelInfo.main = modelId;\r\n\r\n        const modelPath = getModelPath(modelId);\r\n        const model = await loadModel(modelPath);\r\n        this.models.main = model;\r\n\r\n        this.basicMainProcessing(model);\r\n        return;\r\n    };\r\n\r\n    set AA(enabled) {\r\n        if (enabled === this._AA) return;\r\n\r\n        this._AA = enabled;\r\n        this.renderer = enabled ? this.rendererAA : this.rendererNoAA;\r\n        const { width, height } = this.viewport;\r\n        this.renderer.setSize(width, height);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const newCanvas = this.renderer.domElement;\r\n        this.canvas = newCanvas;\r\n    }\r\n\r\n    addLight = light => {\r\n        const { id, enable, ...params } = light;\r\n        if (!enable) return;\r\n\r\n        const newLight = createLight(params);\r\n\r\n        this.scene.add(newLight);\r\n        this.lights.push(newLight);\r\n    };\r\n\r\n    addAllLights = lights => {\r\n        this.lights = [];\r\n        lights.forEach(this.addLight);\r\n    };\r\n\r\n    removeLight = light => this.scene.remove(light);\r\n\r\n    removeAllLights = () => this.lights.forEach(this.removeLight);\r\n\r\n    addToScene = model => this.floor.add(model);\r\n\r\n    basicMainProcessing = () => {\r\n        const model = this.models.main;\r\n\r\n        removeEffects(model);\r\n        const materialType = this.matType;\r\n        const modelId = this.props.model.id;\r\n        if (isBlade(modelId)) {\r\n            const { texturePath } = analyzeWeaponCode(`${modelId}n`);\r\n            changeMaterial(model, { materialType, texturePath });\r\n        } else {\r\n            changeMaterial(model, { materialType, forced: true });\r\n        }\r\n\r\n        this.applyNewModelMat(model);\r\n\r\n        const outlineParams = this.props.outline;\r\n        this.outlines.main = createOutline(model, outlineParams);\r\n\r\n        this.addToScene(model);\r\n    };\r\n\r\n    updateViewer = (prev, current) => {\r\n        this.updateEnvironment(prev, current);\r\n        this.updateModel(prev, current);\r\n        this.otherUpdate?.(prev, current);\r\n    };\r\n\r\n    updateEnvironment = (prev, current) => {\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n        this.updateOutline(prev.outline, current.outline);\r\n        this.updateMaterial(prev.material, current.material);\r\n        this.updateLights(prev.lights, current.lights);\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n\r\n        // Update background color\r\n        if (prev.bgColor !== current.bgColor) {\r\n            this.bgColor = current.bgColor;\r\n        }\r\n\r\n        this.AA = current.antiAliasing;\r\n    };\r\n\r\n    updateModel = (prev, current) => {\r\n        this.updateMainModel(prev.model, current.model);\r\n    };\r\n\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.viewport.width = width;\r\n        this.viewport.height = height;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    disposeMainModel = () => {\r\n        const mainModel = this.models.main;\r\n        this.floor.remove(mainModel);\r\n        disposeItem(mainModel);\r\n    };\r\n\r\n    replaceMainModel = async () => {\r\n        this.disableInput();\r\n\r\n        this.disposeMainModel();\r\n        await this.loadMainModel();\r\n        this.applyNewModelMat(this.models.main);\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        const mainUpdated = prev.id !== modelId;\r\n        if (!mainUpdated) return;\r\n\r\n        this.beforeMainModelUpdate?.();\r\n        await this.replaceMainModel();\r\n        this.afterMainModelUpdate?.();\r\n    };\r\n\r\n    updateOutlineParams = update => {\r\n        const outlines = Object.values(this.outlines).flat();\r\n        outlines.forEach(outline => {\r\n            applyOutlineSettings(outline, update);\r\n        });\r\n    };\r\n\r\n    updateOutline = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const updatedKeys = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedKeys.length === 0) return;\r\n\r\n        const update = new Map(updatedKeys.map(key => [key, current[key]]));\r\n        this.updateOutlineParams(update);\r\n    };\r\n\r\n    saveMaterialReference = () => {\r\n        const mainModel = this.models.main;\r\n        this.materials = getMaterial(mainModel);\r\n    };\r\n\r\n    get matParams() {\r\n        const { type: materialType, ...allParams } = this.props.material;\r\n        const paramList = getParamsList(materialType);\r\n        return filterObject(allParams, paramList);\r\n    }\r\n\r\n    get matType() {\r\n        return this.props.material.type;\r\n    }\r\n\r\n    applyNewModelMat = model => {\r\n        const params = this.matParams;\r\n        const defaultParams = { useTexture: true };\r\n        updateMatParams(model, { prevParams: defaultParams, params });\r\n    };\r\n\r\n    updateMaterial = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const materialType = this.matType;\r\n        const mainModel = this.models.main;\r\n\r\n        const matTypeChanged = prev.type !== materialType;\r\n        if (matTypeChanged) {\r\n            changeMaterial(this.models.main, { materialType });\r\n        }\r\n\r\n        const prevParams = matTypeChanged\r\n            ? { useTexture: prev.useTexture }\r\n            : prev;\r\n        const params = this.matParams;\r\n        updateMatParams(mainModel, { prevParams, params });\r\n    };\r\n\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeAllLights();\r\n            this.addAllLights(current);\r\n        }\r\n    };\r\n\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n            const newCanvas = this.renderer.domElement;\r\n            this.canvas = newCanvas;\r\n            return;\r\n        }\r\n\r\n        if (!this.loadedFX.has(\"ascii\")) {\r\n            const { AsciiEffect } = await import(\r\n                \"three/examples/jsm/effects/AsciiEffect\"\r\n            );\r\n            this.loadedFX.set(\"ascii\", AsciiEffect);\r\n            this.showAscii();\r\n        } else this.showAscii();\r\n\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n    };\r\n\r\n    showAscii = () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const AsciiEffect = this.loadedFX.get(\"ascii\");\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n\r\n        const { width, height } = this.viewport;\r\n        this.effect.setSize(width, height);\r\n\r\n        const newCanvas = this.effect.domElement;\r\n        newCanvas.style.color = color;\r\n        newCanvas.style.background = bgColor;\r\n        this.canvas = newCanvas;\r\n\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    set bgColor(color) {\r\n        this.scene.background =\r\n            color !== \"transparent\" ? new THREE.Color(color) : null;\r\n    }\r\n\r\n    set canvas(canvas) {\r\n        const oldCanvas = this._canvas;\r\n        oldCanvas && this.mount.removeChild(oldCanvas);\r\n        this.mount.appendChild(canvas);\r\n        this._canvas = canvas;\r\n    }\r\n\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    rotateFloor = dt => {\r\n        const { rotateSpeed } = this.props;\r\n        if (!rotateSpeed) return;\r\n\r\n        const angle = (rotateSpeed * dt * Math.PI) / 2;\r\n        this.floor.rotateY(angle);\r\n    };\r\n\r\n    everyAnimate = () => {\r\n        const dt = this.clock.getDelta();\r\n        this.rotateFloor(dt);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n\r\n        this.everyAnimate();\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default BaseViewer;\r\n","/* \r\n################################################\r\n# Extension of Base Viewer that adds:\r\n#    - Animation\r\n#    - Recording Animation\r\n################################################  \r\n*/\r\n\r\nimport BaseViewer from \"./BaseViewer\";\r\n\r\nimport * as THREE from \"three\";\r\nimport {\r\n    analyzeChainCode,\r\n    loadAnimations,\r\n    getFaceChangesArray,\r\n} from \"helpers/viewerHelpers\";\r\n\r\nexport class AniViewer extends BaseViewer {\r\n    afterMainModelLoad = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        await this.updateMainModel(prev.model, current.model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    otherUpdate = (prev, current) => {\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n    };\r\n\r\n    saveMainModelInitState = () => {\r\n        const model = this.models.main;\r\n        model.initPos = model.position.clone();\r\n        model.initRot = model.rotation.clone();\r\n    };\r\n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n\r\n        const { mixer } = this;\r\n        mixer.stopAllAction();\r\n\r\n        const anim = this.animations[newIdx];\r\n        const action = mixer.clipAction(anim);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        this.faceChanges = getFaceChangesArray(faceChanges, repetitions);\r\n        this.faceChangeTime = this.faceChanges.map(\r\n            change => (this.currentClipDuration * change.time) / 100\r\n        );\r\n\r\n        mixer.setTime(0);\r\n        this.currentClipDuration = anim.duration;\r\n        action.play();\r\n    }\r\n\r\n    resetFace = () => {\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    beforeAddAni = () => {\r\n        this.resetFace();\r\n    };\r\n\r\n    addAnimation = async () => {\r\n        this.beforeAddAni?.();\r\n\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        if (!aniCode) return;\r\n\r\n        this.disableInput();\r\n\r\n        const mainModel = this.models.main;\r\n        const aniList = analyzeChainCode(aniCode);\r\n        this.nAni = aniList.length;\r\n\r\n        mainModel.mixer = new THREE.AnimationMixer(mainModel);\r\n        this.mixer = mainModel.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        mainModel.mixer.timeScale = timeScale; // Global timeScale\r\n        mainModel.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = aniList;\r\n\r\n        this.animations = await loadAnimations(aniList);\r\n\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.enableInput();\r\n    };\r\n\r\n    removeAnimation = () => {\r\n        const mainModel = this.models.main;\r\n        mainModel.mixer?.stopAllAction?.();\r\n\r\n        // Reset position and rotation to initial value\r\n        const { initPos, initRot } = mainModel;\r\n        mainModel.position.copy(initPos);\r\n        mainModel.rotation.copy(initRot);\r\n\r\n        this.mixer = null;\r\n        this.animations = [];\r\n        this.aniSettings = [];\r\n    };\r\n\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            this.removeAnimation();\r\n            this.addAnimation();\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            const { codec } = this.props.capture;\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.enableInput();\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                const url = URL.createObjectURL(superBuffer);\r\n                const a = document.createElement(\"a\");\r\n                a.style = \"display: none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n            };\r\n        }\r\n        this.disableInput(\"Recording\");\r\n        this.beforeCaptureAnimation?.();\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    everyAnimate = () => {\r\n        const dt = this.clock.getDelta();\r\n        this.rotateFloor(dt);\r\n        this.mixer?.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length) {\r\n            const elapsedTime = this.mixer.time;\r\n            const nextFaceChangeTime = this.faceChangeTime[0];\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                this.faceChangeTime.shift();\r\n                const { eyeIdx, mouthIdx } = this.faceChanges.shift();\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default AniViewer;\r\n","/* \r\n################################################\r\n# Extension of Ani Viewer for dragons that adds:\r\n#    - Eyes and Mouth\r\n################################################  \r\n*/\r\n\r\nimport AniViewer from \"./AniViewer\";\r\n\r\nimport { getDragonEye, getDragonMouth } from \"helpers/viewerHelpers\";\r\n\r\nexport class DragonViewer extends AniViewer {\r\n    constructor() {\r\n        super();\r\n        this._eyeIdx = this._mouthIdx = 0;\r\n    }\r\n\r\n    initNewModel = () => {\r\n        this.saveMainModelInitState();\r\n        this.initFace();\r\n        this.addAnimation();\r\n    };\r\n\r\n    afterMainModelLoad = () => {\r\n        this.initNewModel();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.initNewModel();\r\n    };\r\n\r\n    initFace = () => {\r\n        const mainModel = this.models.main;\r\n        this.eyes = getDragonEye(mainModel);\r\n        this.eyes.forEach(eye => (eye.frustumCulled = false));\r\n\r\n        this.mouths = getDragonMouth(mainModel);\r\n        this.mouths.forEach(mouth => (mouth.frustumCulled = false));\r\n\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    set eyeIdx(newIdx) {\r\n        const idx = parseInt(newIdx);\r\n        const oldIdx = this._eyeIdx;\r\n        if (idx === oldIdx) return;\r\n\r\n        this._eyeIdx = idx;\r\n        const regex = /[0-9]{2}/;\r\n        this.eyes.forEach(mesh => {\r\n            const { name } = mesh;\r\n            const id = regex.exec(name)[0];\r\n            mesh.visible = parseInt(id) === idx;\r\n        });\r\n    }\r\n\r\n    set mouthIdx(newIdx) {\r\n        const idx = parseInt(newIdx);\r\n        const oldIdx = this._mouthIdx;\r\n        if (idx === oldIdx) return;\r\n\r\n        this._mouthIdx = idx;\r\n        const regex = /[0-9]{2}/;\r\n        this.mouths.forEach(mesh => {\r\n            const { name } = mesh;\r\n            const id = regex.exec(name)[0];\r\n            mesh.visible = parseInt(id) === idx;\r\n        });\r\n    }\r\n}\r\n\r\nexport default DragonViewer;\r\n"],"sourceRoot":""}