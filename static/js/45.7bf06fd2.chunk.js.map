{"version":3,"sources":["MainPage/Sidebar/Modal/ModalBody.js","MainPage/Sidebar/Modal/Modal.js","MainPage/Sidebar/styles/Rose-Petals.svg","MainPage/Sidebar/styles/SidebarHeaderStyles.js","MainPage/Sidebar/SidebarHeader.js","MainPage/Sidebar/SidebarBody/SidebarBody.js","MainPage/Sidebar/styles/SidebarStyles.js","MainPage/Sidebar/Sidebar.js"],"names":["AdvSelect","lazy","DragonSelect","FaceSelect","DragonFaceSelect","WeaponSelect","AnimationSelect","NonHumanAni","ColorSelect","Share","Export","ModalBody","mode","closeModal","handleSelect","docked","setDock","Body","includes","moveToDock","fallback","close","Modal","createPortal","Dialog","maxWidth","onClose","open","scroll","PaperProps","classes","root","document","getElementById","drawerBG","DRAWER_BGCOLOR","useStyles","makeStyles","download","left","closeDrawer","right","button","color","display","alignItems","justifyContent","width","height","borderRadius","position","top","margin","cursor","backgroundColor","minHeight","fontSize","zIndex","backgroundImage","bg","backgroundSize","backgroundPosition","marginBottom","DrawerHeader","toggleSidebar","dispatch","useContext","DispatchContext","SettingsContext","currentCodec","capture","codec","asciiOn","ascii","enable","useEffect","MediaRecorder","supportedCodecs","videoCodecs","filter","isTypeSupported","format","action","type","key","value","className","onClick","Tooltip","title","placement","contentMap","settings","chainMaker","advanced","SidebarBody","openModal","sidebarContent","app","drawer","DRAWER_WIDTH","overflowY","drawerPaper","Sidebar","useState","modalMode","setModalMode","handler","useRef","Drawer","variant","anchor","paper","SidebarHeader","current"],"mappings":"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","file":"static/js/45.7bf06fd2.chunk.js","sourcesContent":["import { lazy, Suspense } from \"react\";\r\n\r\nconst AdvSelect = lazy(() => import(\"./AdvSelect\"));\r\nconst DragonSelect = lazy(() => import(\"./DragonSelect\"));\r\nconst FaceSelect = lazy(() => import(\"./FaceSelect\"));\r\nconst DragonFaceSelect = lazy(() => import(\"./DragonFaceSelect\"));\r\nconst WeaponSelect = lazy(() => import(\"./WeaponSelect\"));\r\nconst AnimationSelect = lazy(() => import(\"./AnimationSelect\"));\r\nconst NonHumanAni = lazy(() => import(\"./NonHumanAni\"));\r\nconst ColorSelect = lazy(() => import(\"./ColorSelect\"));\r\nconst Share = lazy(() => import(\"./Share\"));\r\nconst Export = lazy(() => import(\"./Export\"));\r\n\r\nfunction ModalBody({\r\n    mode,\r\n    closeModal,\r\n    handleSelect,\r\n    docked = false,\r\n    setDock = null,\r\n}) {\r\n    let Body = null;\r\n    switch (mode) {\r\n        case \"adv\":\r\n        case \"texture\":\r\n            Body = AdvSelect;\r\n            break;\r\n        case \"dragon\":\r\n            Body = DragonSelect;\r\n            break;\r\n        case \"face\":\r\n        case \"eye\":\r\n        case \"mouth\":\r\n            Body = FaceSelect;\r\n            break;\r\n        case \"dragonFace\":\r\n        case \"dragonEye\":\r\n        case \"dragonMouth\":\r\n            Body = DragonFaceSelect;\r\n            break;\r\n        case \"weapon\":\r\n            Body = WeaponSelect;\r\n            break;\r\n        case \"animation\":\r\n            Body = AnimationSelect;\r\n            break;\r\n        case \"nonHumanAni\":\r\n            Body = NonHumanAni;\r\n            break;\r\n        case \"background\":\r\n            Body = ColorSelect;\r\n            break;\r\n        case \"share\":\r\n            Body = Share;\r\n            break;\r\n        case \"export\":\r\n            Body = Export;\r\n            break;\r\n        default:\r\n            Body = mode.includes(\"-\") ? ColorSelect : null;\r\n    }\r\n\r\n    const moveToDock =\r\n        setDock &&\r\n        function () {\r\n            setDock(mode, handleSelect);\r\n            closeModal();\r\n        };\r\n\r\n    return (\r\n        <Suspense fallback={<div>Loading</div>}>\r\n            <Body\r\n                mode={mode}\r\n                docked={docked}\r\n                close={closeModal}\r\n                handleSelect={handleSelect}\r\n                moveToDock={moveToDock}\r\n            />\r\n        </Suspense>\r\n    );\r\n}\r\n\r\nexport default ModalBody;\r\n","import { createPortal } from \"react-dom\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nimport ModalBody from \"./ModalBody\";\r\n\r\nfunction Modal({ mode, closeModal, handleSelect, setDock = null }) {\r\n    return (\r\n        mode &&\r\n        createPortal(\r\n            <Dialog\r\n                maxWidth=\"lg\"\r\n                onClose={closeModal}\r\n                open={!!mode}\r\n                scroll=\"paper\"\r\n                PaperProps={{ classes: { root: \"Modal\" } }}\r\n            >\r\n                <ModalBody\r\n                    mode={mode}\r\n                    closeModal={closeModal}\r\n                    handleSelect={handleSelect}\r\n                    setDock={setDock}\r\n                />\r\n            </Dialog>,\r\n            document.getElementById(\"modal-root\")\r\n        )\r\n    );\r\n}\r\n\r\nexport default Modal;\r\n","export default __webpack_public_path__ + \"static/media/Rose-Petals.bc11ecc7.svg\";","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_BGCOLOR } from \"helpers/consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst drawerBG = DRAWER_BGCOLOR;\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    download: {\r\n        left: \"0\",\r\n    },\r\n    closeDrawer: {\r\n        right: \"0\",\r\n    },\r\n    button: {\r\n        color: \"black\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        width: \"2rem\",\r\n        height: \"2rem\",\r\n        borderRadius: \"50%\",\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        margin: \"1rem\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"rgba(255,255,255,0.5)\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgba(255,255,255,0.8)\",\r\n        },\r\n    },\r\n    root: {\r\n        height: \"4rem\",\r\n        minHeight: \"4rem\",\r\n        width: \"100%\",\r\n        fontSize: \"1.5rem\",\r\n        display: \"flex\",\r\n        position: \"sticky\",\r\n        top: 0,\r\n        zIndex: 5,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: drawerBG,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"auto 100vh\",\r\n        backgroundPosition: \"center\",\r\n        color: \"white\",\r\n        marginBottom: \"0.5rem\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { useContext, useEffect } from \"react\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"context/SettingsContext\";\r\n\r\nimport ArrowLeft from \"@material-ui/icons/ArrowLeft\";\r\nimport SaveIcon from \"@material-ui/icons/GetApp\";\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport useStyles from \"./styles/SidebarHeaderStyles\";\r\n\r\nimport { videoCodecs } from \"helpers/consts\";\r\n\r\nfunction DrawerHeader({ toggleSidebar }) {\r\n    const classes = useStyles();\r\n    const dispatch = useContext(DispatchContext);\r\n    const {\r\n        capture: { codec: currentCodec },\r\n        ascii: { enable: asciiOn },\r\n    } = useContext(SettingsContext);\r\n\r\n    useEffect(() => {\r\n        if (!MediaRecorder) return;\r\n\r\n        const supportedCodecs = videoCodecs.filter(\r\n            MediaRecorder.isTypeSupported\r\n        );\r\n        const codec = supportedCodecs[0];\r\n        if (!codec) return;\r\n\r\n        const format = codec.includes(\"mp4\") ? \"mp4\" : \"webm\";\r\n\r\n        const action = {\r\n            type: \"update\",\r\n            key: \"capture\",\r\n            value: {\r\n                supportedCodecs: [...supportedCodecs],\r\n                codec,\r\n                format,\r\n            },\r\n        };\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const toggleCapture = () => {\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"capture\",\r\n            value: \"enable\",\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <span>Settings</span>\r\n            <div\r\n                className={`${classes.closeDrawer} ${classes.button}`}\r\n                onClick={toggleSidebar}\r\n            >\r\n                <ArrowLeft />\r\n            </div>\r\n            {currentCodec && !asciiOn && (\r\n                <Tooltip title=\"Save animation as video\" placement=\"bottom-end\">\r\n                    <div\r\n                        className={`${classes.download} ${classes.button}`}\r\n                        onClick={toggleCapture}\r\n                    >\r\n                        <SaveIcon />\r\n                    </div>\r\n                </Tooltip>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DrawerHeader;\r\n","import { lazy, Suspense, useContext } from \"react\";\r\n\r\nimport { SettingsContext } from \"context/SettingsContext\";\r\n\r\nconst SettingBtns = lazy(() => import(\"./SettingBtns\"));\r\nconst ChainMaker = lazy(() => import(\"./ChainMaker\"));\r\nconst AdvancedSettings = lazy(() => import(\"./AdvancedSettings\"));\r\n\r\nconst contentMap = {\r\n    settings: SettingBtns,\r\n    chainMaker: ChainMaker,\r\n    advanced: AdvancedSettings,\r\n};\r\n\r\nfunction SidebarBody({ openModal }) {\r\n    const {\r\n        app: { sidebarContent },\r\n    } = useContext(SettingsContext);\r\n\r\n    const Body = contentMap[sidebarContent];\r\n\r\n    return (\r\n        <Suspense fallback={<div>Loading</div>}>\r\n            <Body openModal={openModal} />\r\n        </Suspense>\r\n    );\r\n}\r\n\r\nexport default SidebarBody;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_WIDTH, DRAWER_BGCOLOR } from \"helpers/consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    drawer: {\r\n        width: DRAWER_WIDTH,\r\n        overflowY: \"scroll\",\r\n    },\r\n    drawerPaper: {\r\n        alignItems: \"center\",\r\n        backgroundColor: DRAWER_BGCOLOR,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        width: DRAWER_WIDTH,\r\n        \"& button\": {\r\n            marginBottom: \"0.2rem\",\r\n        },\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { useState, useRef } from \"react\";\r\n\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\n\r\nimport SidebarHeader from \"./SidebarHeader\";\r\nimport SidebarBody from \"./SidebarBody\";\r\nimport Modal from \"./Modal\";\r\n\r\nimport useStyles from \"./styles/SidebarStyles\";\r\n\r\nfunction Sidebar({ open, toggleSidebar, setDock }) {\r\n    const classes = useStyles();\r\n\r\n    const [modalMode, setModalMode] = useState(\"\");\r\n    const handler = useRef(null);\r\n\r\n    const openModal = (mode, handleSelect = null) => {\r\n        handler.current = handleSelect;\r\n        setModalMode(mode);\r\n    };\r\n\r\n    const closeModal = () => setModalMode(\"\");\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={open}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <SidebarHeader toggleSidebar={toggleSidebar} />\r\n            <SidebarBody openModal={openModal} />\r\n            <Modal\r\n                mode={modalMode}\r\n                closeModal={closeModal}\r\n                handleSelect={handler.current}\r\n                setDock={setDock}\r\n            />\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default Sidebar;\r\n"],"sourceRoot":""}