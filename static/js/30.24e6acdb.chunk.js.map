{"version":3,"sources":["MaterialParamsSetting.js","MaterialSettings.js"],"names":["MaterialParamsSetting","matType","materialType","openControl","settings","useContext","SettingsContext","dispatch","DispatchContext","currentSettings","materialParams","paramsList","commonParams","extraParams","toggleSetting","event","paramName","currentTarget","value","type","key","handleSliderChange","_","newValue","name","action","updateMatParam","handleColorBtnClick","e","dataset","generateControl","paramsDetails","currentValue","Button","fullWidth","variant","onClick","createToggleButton","matParamsDetails","min","max","step","className","Slider","onChange","createSlider","color","style","backgroundColor","complementaryColor","textShadow","data-value","createColorButton","generateParamText","param","settingsList","map","MaterialSettings","useToggleState","expand","toggleExpand","model","options","MATERIALS","mat","MenuItem","IconButton","size","stopPropagation","Collapse","in","timeout","unmountOnExit","Select","target"],"mappings":"wQA+IeA,MAhIf,YAAwE,IAAzBC,EAAwB,EAAtCC,aAAuBC,EAAe,EAAfA,YAC9CC,EAAWC,qBAAWC,KACtBC,EAAWF,qBAAWG,KAEtBC,EAAkBL,EAASM,eAE3BC,EAAU,sBAAOC,KAAP,YAAwBC,IAAYZ,KAW9Ca,EAAgB,SAAAC,GAClB,IAAMC,EAAYD,EAAME,cAAcC,MAMtCX,EALe,CACXY,KAAM,SACNC,IAAK,iBACLF,MAAOF,KAKTK,EAAqB,SAAAD,GAAG,OAAI,SAACE,EAAGC,IAnBf,SAACC,EAAMN,GAC1B,IAAMO,EAAS,CACXN,KAAM,SACNC,IAAK,iBACLF,MAAM,eAAIM,EAAON,IAErBX,EAASkB,GAcTC,CAAeN,EAAKG,KAGlBI,EAAsB,SAAAC,GACxBzB,EAAYyB,EAAEX,cAAcY,QAAQX,QAqDlCY,EAAkB,SAAAd,GAEpB,OADae,IAAcf,GAAWG,MAElC,IAAK,UACD,OAtDe,SAAAK,GACvB,IAAMQ,EAAevB,EAAgBe,GACrC,OACI,8BACI,cAACS,EAAA,EAAD,CACIf,MAAOM,EACPU,WAAS,EACTC,QAAQ,YACRC,QAAStB,EAJb,SAMKkB,EAAe,KAAO,UA4CpBK,CAAmBrB,GAC9B,IAAK,SACL,IAAK,aACD,OAvBS,SAAAQ,GACjB,IAAMQ,EAAevB,EAAgBe,GADZ,EAEEc,IAAiBd,GAApCe,EAFiB,EAEjBA,IAAKC,EAFY,EAEZA,IAAKC,EAFO,EAEPA,KAClB,OACI,qBAAKC,UAAU,+BAAf,SACI,cAACC,EAAA,EAAD,CACIzB,MAAOc,EACPO,IAAKA,EACLC,IAAKA,EACLC,KAAMA,EACNG,SAAUvB,EAAmBG,OAa1BqB,CAAa7B,GACxB,IAAK,QACD,OA3Cc,SAAAQ,GACtB,IAAMsB,EAAQrC,EAAgBe,GAC9B,OACI,cAACS,EAAA,EAAD,CACIC,WAAS,EACTa,MAAO,CACHC,gBAAiBF,EACjBA,MAAOG,YAAmBH,GAC1BI,WAAW,qBAEfC,aAAA,yBAA8B3B,GAC9BY,QAAST,EARb,SAUKmB,IA8BMM,CAAkBpC,GAC7B,QACI,OAAOP,EAAgBO,KAI7BqC,EAAoB,SAAAC,GAEtB,OADavB,IAAcuB,GAAOnC,MAE9B,IAAK,SACD,MAAM,GAAN,OAAUY,IAAcuB,GAAO9B,KAA/B,aAAwCf,EAAgB6C,IAC5D,IAAK,aACD,MAAM,GAAN,OAAUvB,IAAcuB,GAAO9B,KAA/B,aAC6B,IAAzBf,EAAgB6C,GADpB,KAGJ,QACI,OAAOvB,IAAcuB,GAAO9B,OAIlC+B,EAAe5C,EAAW6C,KAAI,SAAAF,GAChC,OACI,eAAC,WAAD,WACI,qBAAKZ,UAAU,mCAAf,SACKW,EAAkBC,KAEvB,mCAAGxB,EAAgBwB,OAJRA,MASvB,OAAO,mCAAGC,K,2CC3CCE,UAhFf,YAA4C,IAAhBtD,EAAe,EAAfA,YAAe,EACRuD,aAAe,GADP,mBAChCC,EADgC,KACxBC,EADwB,KAI1B1D,EACTG,qBAAWC,KADXuD,MAAS3D,aAGPK,EAAWF,qBAAWG,KAyBtBsD,EAAUC,IAAUP,KAAI,SAAAQ,GAAG,OAC7B,cAACC,EAAA,EAAD,CAAU/C,MAAO8C,EAAjB,SACKA,GADsBA,MAK/B,OACI,sBAAKtB,UAAU,wBAAf,UACI,sBACIA,UAAU,+BACVN,QAASwB,EAFb,UAII,cAACM,EAAA,EAAD,CAAYC,KAAK,QAAjB,SACKR,EACG,cAAC,IAAD,IAEA,cAAC,IAAD,MAGR,qBAAKjB,UAAU,8BAAf,sBACA,qBAAKA,UAAU,+BAAf,SACI,cAACT,EAAA,EAAD,CAAQE,QAAQ,YAAYC,QA5CtB,SAAArB,GAClBA,EAAMqD,kBACN,IAAM3C,EAAS,CACXN,KAAM,QACNC,IAAK,QACLF,MAAO,CAAC,iBAEZX,EAASkB,GACTA,EAAOL,IAAM,iBACbK,EAAOP,MAAQ,GACfX,EAASkB,IAkCG,wBAKR,cAAC4C,EAAA,EAAD,CAAUC,GAAIX,EAAQY,QAAQ,OAAOC,eAAa,EAAlD,SACI,sBAAK9B,UAAU,gCAAf,UACI,qBAAKA,UAAU,mCAAf,kBACA,8BACI,cAAC+B,EAAA,EAAD,CACIvC,WAAS,EACTU,SA1CH,SAAA7B,GAAU,IACZb,EAAiBa,EAAM2D,OAA9BxD,MAMRX,EALe,CACXY,KAAM,SACNC,IAAK,QACLF,MAAO,CAAEhB,mBAsCOgB,MAAOhB,EAHX,SAKK4D,MAGT,cAAC,EAAD,CACI5D,aAAcA,EACdC,YAAaA","file":"static/js/30.24e6acdb.chunk.js","sourcesContent":["import { Fragment, useContext } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\nimport {\r\n    materialCommonParams as commonParams,\r\n    materialExtraParams as extraParams,\r\n    matParamsDetails,\r\n    matParamsDetails as paramsDetails,\r\n} from \"./consts\";\r\nimport { complementaryColor } from \"./helpers\";\r\n\r\nimport { DispatchContext, SettingsContext } from \"./context/SettingsContext\";\r\n\r\nfunction MaterialParamsSetting({ materialType: matType, openControl }) {\r\n    const settings = useContext(SettingsContext);\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    const currentSettings = settings.materialParams;\r\n\r\n    const paramsList = [...commonParams, ...extraParams[matType]];\r\n\r\n    const updateMatParam = (name, value) => {\r\n        const action = {\r\n            type: \"update\",\r\n            key: \"materialParams\",\r\n            value: { [name]: value },\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const toggleSetting = event => {\r\n        const paramName = event.currentTarget.value;\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"materialParams\",\r\n            value: paramName,\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const handleSliderChange = key => (_, newValue) => {\r\n        updateMatParam(key, newValue);\r\n    };\r\n\r\n    const handleColorBtnClick = e => {\r\n        openControl(e.currentTarget.dataset.value);\r\n    };\r\n\r\n    const createToggleButton = name => {\r\n        const currentValue = currentSettings[name];\r\n        return (\r\n            <div>\r\n                <Button\r\n                    value={name}\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    onClick={toggleSetting}\r\n                >\r\n                    {currentValue ? \"ON\" : \"OFF\"}\r\n                </Button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const createColorButton = name => {\r\n        const color = currentSettings[name];\r\n        return (\r\n            <Button\r\n                fullWidth\r\n                style={{\r\n                    backgroundColor: color,\r\n                    color: complementaryColor(color),\r\n                    textShadow: `0px 0px 3px white`,\r\n                }}\r\n                data-value={`materialParams-${name}`}\r\n                onClick={handleColorBtnClick}\r\n            >\r\n                {color}\r\n            </Button>\r\n        );\r\n    };\r\n\r\n    const createSlider = name => {\r\n        const currentValue = currentSettings[name];\r\n        const { min, max, step } = matParamsDetails[name];\r\n        return (\r\n            <div className=\"AdvancedSettingsGroup-slider\">\r\n                <Slider\r\n                    value={currentValue}\r\n                    min={min}\r\n                    max={max}\r\n                    step={step}\r\n                    onChange={handleSliderChange(name)}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const generateControl = paramName => {\r\n        const type = paramsDetails[paramName].type;\r\n        switch (type) {\r\n            case \"boolean\":\r\n                return createToggleButton(paramName);\r\n            case \"number\":\r\n            case \"percentage\":\r\n                return createSlider(paramName);\r\n            case \"color\":\r\n                return createColorButton(paramName);\r\n            default:\r\n                return currentSettings[paramName];\r\n        }\r\n    };\r\n\r\n    const generateParamText = param => {\r\n        const type = paramsDetails[param].type;\r\n        switch (type) {\r\n            case \"number\":\r\n                return `${paramsDetails[param].name}: ${currentSettings[param]}`;\r\n            case \"percentage\":\r\n                return `${paramsDetails[param].name}: ${\r\n                    currentSettings[param] * 100\r\n                }%`;\r\n            default:\r\n                return paramsDetails[param].name;\r\n        }\r\n    };\r\n\r\n    const settingsList = paramsList.map(param => {\r\n        return (\r\n            <Fragment key={param}>\r\n                <div className=\"AdvancedSettingsGroup-optionName\">\r\n                    {generateParamText(param)}\r\n                </div>\r\n                <>{generateControl(param)}</>\r\n            </Fragment>\r\n        );\r\n    });\r\n\r\n    return <>{settingsList}</>;\r\n}\r\n\r\nexport default MaterialParamsSetting;\r\n","import { useContext } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MaterialParamsSetting from \"./MaterialParamsSetting\";\r\n\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\n\r\nimport { DispatchContext, SettingsContext } from \"./context/SettingsContext\";\r\nimport \"./styles/AdvancedSettingsGroup.css\";\r\nimport { MATERIALS } from \"./consts\";\r\n\r\nfunction MaterialSettings({ openControl }) {\r\n    const [expand, toggleExpand] = useToggleState(true);\r\n\r\n    const {\r\n        model: { materialType },\r\n    } = useContext(SettingsContext);\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    const resetSettings = event => {\r\n        event.stopPropagation();\r\n        const action = {\r\n            type: \"reset\",\r\n            key: \"model\",\r\n            value: [\"materialType\"],\r\n        };\r\n        dispatch(action);\r\n        action.key = \"materialParams\";\r\n        action.value = \"\";\r\n        dispatch(action);\r\n    };\r\n\r\n    const handleChange = event => {\r\n        const { value: materialType } = event.target;\r\n        const action = {\r\n            type: \"update\",\r\n            key: \"model\",\r\n            value: { materialType },\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const options = MATERIALS.map(mat => (\r\n        <MenuItem value={mat} key={mat}>\r\n            {mat}\r\n        </MenuItem>\r\n    ));\r\n\r\n    return (\r\n        <div className=\"AdvancedSettingsGroup\">\r\n            <div\r\n                className=\"AdvancedSettingsGroup-header\"\r\n                onClick={toggleExpand}\r\n            >\r\n                <IconButton size=\"small\">\r\n                    {expand ? (\r\n                        <KeyboardArrowUpIcon />\r\n                    ) : (\r\n                        <KeyboardArrowDownIcon />\r\n                    )}\r\n                </IconButton>\r\n                <div className=\"AdvancedSettingsGroup-title\">Material</div>\r\n                <div className=\"AdvancedSettingsGroup-toggle\">\r\n                    <Button variant=\"contained\" onClick={resetSettings}>\r\n                        Reset\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <Collapse in={expand} timeout=\"auto\" unmountOnExit>\r\n                <div className=\"AdvancedSettingsGroup-options\">\r\n                    <div className=\"AdvancedSettingsGroup-optionName\">Type</div>\r\n                    <div>\r\n                        <Select\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={materialType}\r\n                        >\r\n                            {options}\r\n                        </Select>\r\n                    </div>\r\n                    <MaterialParamsSetting\r\n                        materialType={materialType}\r\n                        openControl={openControl}\r\n                    />\r\n                </div>\r\n            </Collapse>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MaterialSettings;\r\n"],"sourceRoot":""}