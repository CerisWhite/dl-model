{"version":3,"sources":["MainPage/Sidebar/Modal/Modal.js","MainPage/Sidebar/styles/Rose-Petals.svg","MainPage/Sidebar/styles/SidebarHeaderStyles.js","MainPage/Sidebar/SidebarHeader.js","MainPage/Sidebar/SidebarBody/SidebarBody.js","MainPage/Sidebar/styles/SidebarStyles.js","MainPage/Sidebar/Sidebar.js"],"names":["ModalBody","lazy","Modal","mode","closeModal","handleSelect","setDock","createPortal","Dialog","maxWidth","onClose","open","scroll","PaperProps","classes","root","fallback","document","getElementById","drawerBG","DRAWER_BGCOLOR","useStyles","makeStyles","download","left","closeDrawer","right","button","color","display","alignItems","justifyContent","width","height","borderRadius","position","top","margin","cursor","backgroundColor","minHeight","fontSize","zIndex","backgroundImage","bg","backgroundSize","backgroundPosition","marginBottom","DrawerHeader","toggleSidebar","dispatch","useDispatch","useSettings","currentCodec","capture","codec","asciiOn","ascii","enable","useEffect","MediaRecorder","supportedCodecs","videoCodecs","filter","isTypeSupported","format","includes","action","type","key","value","className","onClick","Tooltip","title","placement","contentMap","settings","chainMaker","advanced","SidebarBody","openModal","sidebarContent","app","Body","drawer","DRAWER_WIDTH","overflowY","drawerPaper","scrollbarWidth","scrollbarColor","Sidebar","useState","modalMode","setModalMode","handler","useRef","Drawer","variant","anchor","paper","SidebarHeader","current"],"mappings":"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","file":"static/js/Sidebar.2012cdec.chunk.js","sourcesContent":["import { lazy, Suspense } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nconst ModalBody = lazy(() =>\r\n    import(\r\n        /* webpackChunkName: \"ModalBody\" */ \"MainPage/Sidebar/Modal/ModalBody\"\r\n    )\r\n);\r\n\r\nfunction Modal({ mode, closeModal, handleSelect, setDock = null }) {\r\n    return (\r\n        mode &&\r\n        createPortal(\r\n            <Dialog\r\n                maxWidth=\"lg\"\r\n                onClose={closeModal}\r\n                open={!!mode}\r\n                scroll=\"paper\"\r\n                PaperProps={{ classes: { root: \"Modal\" } }}\r\n            >\r\n                <Suspense fallback={<div>Loading</div>}>\r\n                    <ModalBody\r\n                        mode={mode}\r\n                        closeModal={closeModal}\r\n                        handleSelect={handleSelect}\r\n                        setDock={setDock}\r\n                    />\r\n                </Suspense>\r\n            </Dialog>,\r\n            document.getElementById(\"modal-root\")\r\n        )\r\n    );\r\n}\r\n\r\nexport default Modal;\r\n","export default __webpack_public_path__ + \"static/media/Rose-Petals.bc11ecc7.svg\";","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_BGCOLOR } from \"helpers/consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst drawerBG = DRAWER_BGCOLOR;\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    download: {\r\n        left: \"0\",\r\n    },\r\n    closeDrawer: {\r\n        right: \"0\",\r\n    },\r\n    button: {\r\n        color: \"black\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        width: \"2rem\",\r\n        height: \"2rem\",\r\n        borderRadius: \"50%\",\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        margin: \"1rem\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"rgba(255,255,255,0.5)\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgba(255,255,255,0.8)\",\r\n        },\r\n    },\r\n    root: {\r\n        height: \"4rem\",\r\n        minHeight: \"4rem\",\r\n        width: \"100%\",\r\n        fontSize: \"1.5rem\",\r\n        display: \"flex\",\r\n        position: \"sticky\",\r\n        top: 0,\r\n        zIndex: 5,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: drawerBG,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"auto 100vh\",\r\n        backgroundPosition: \"center\",\r\n        color: \"white\",\r\n        marginBottom: \"0.5rem\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { useEffect } from \"react\";\r\n\r\nimport { useSettings, useDispatch } from \"context/SettingsContext\";\r\n\r\nimport ArrowLeft from \"@material-ui/icons/ArrowLeft\";\r\nimport SaveIcon from \"@material-ui/icons/GetApp\";\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport useStyles from \"./styles/SidebarHeaderStyles\";\r\n\r\nimport { videoCodecs } from \"helpers/consts\";\r\n\r\nfunction DrawerHeader({ toggleSidebar }) {\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const {\r\n        capture: { codec: currentCodec },\r\n        ascii: { enable: asciiOn },\r\n    } = useSettings();\r\n\r\n    useEffect(() => {\r\n        if (!MediaRecorder) return;\r\n\r\n        const supportedCodecs = videoCodecs.filter(\r\n            MediaRecorder.isTypeSupported\r\n        );\r\n        const codec = supportedCodecs[0];\r\n        if (!codec) return;\r\n\r\n        const format = codec.includes(\"mp4\") ? \"mp4\" : \"webm\";\r\n\r\n        const action = {\r\n            type: \"update\",\r\n            key: \"capture\",\r\n            value: {\r\n                supportedCodecs: [...supportedCodecs],\r\n                codec,\r\n                format,\r\n            },\r\n        };\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const toggleCapture = () => {\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"capture\",\r\n            value: \"enable\",\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <span>Settings</span>\r\n            <div\r\n                className={`${classes.closeDrawer} ${classes.button}`}\r\n                onClick={toggleSidebar}\r\n            >\r\n                <ArrowLeft />\r\n            </div>\r\n            {currentCodec && !asciiOn && (\r\n                <Tooltip title=\"Save animation as video\" placement=\"bottom-end\">\r\n                    <div\r\n                        className={`${classes.download} ${classes.button}`}\r\n                        onClick={toggleCapture}\r\n                    >\r\n                        <SaveIcon />\r\n                    </div>\r\n                </Tooltip>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DrawerHeader;\r\n","import { lazy, Suspense } from \"react\";\r\n\r\nimport { useSettings } from \"context/SettingsContext\";\r\n\r\nconst SettingBtns = lazy(() => import(\"./SettingBtns\"));\r\nconst ChainMaker = lazy(() => import(\"./ChainMaker\"));\r\nconst AdvancedSettings = lazy(() => import(\"./AdvancedSettings\"));\r\n\r\nconst contentMap = {\r\n    settings: SettingBtns,\r\n    chainMaker: ChainMaker,\r\n    advanced: AdvancedSettings,\r\n};\r\n\r\nfunction SidebarBody({ openModal }) {\r\n    const {\r\n        app: { sidebarContent },\r\n    } = useSettings();\r\n\r\n    const Body = contentMap[sidebarContent];\r\n\r\n    return (\r\n        <Suspense fallback={<div>Loading</div>}>\r\n            <Body openModal={openModal} />\r\n        </Suspense>\r\n    );\r\n}\r\n\r\nexport default SidebarBody;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_WIDTH, DRAWER_BGCOLOR } from \"helpers/consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    drawer: {\r\n        width: DRAWER_WIDTH,\r\n        overflowY: \"scroll\",\r\n    },\r\n    drawerPaper: {\r\n        scrollbarWidth: \"thin\",\r\n        scrollbarColor: \"rgba(255, 255, 255, 0.8) rgba(0, 0, 0, 0.3)\",\r\n        alignItems: \"center\",\r\n        backgroundColor: DRAWER_BGCOLOR,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        width: DRAWER_WIDTH,\r\n        \"& button\": {\r\n            marginBottom: \"0.2rem\",\r\n        },\r\n        \"&::-webkit-scrollbar\": {\r\n            width: \"8px\",\r\n            backgroundColor: \"rgba(0, 0, 0, 0.3)\",\r\n        },\r\n        \"&::-webkit-scrollbar-thumb\": {\r\n            width: \"8px\",\r\n            backgroundColor: \"rgba(255, 255, 255, 0.8)\",\r\n        },\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { useState, useRef } from \"react\";\r\n\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\n\r\nimport SidebarHeader from \"./SidebarHeader\";\r\nimport SidebarBody from \"./SidebarBody\";\r\nimport Modal from \"./Modal\";\r\n\r\nimport useStyles from \"./styles/SidebarStyles\";\r\n\r\nfunction Sidebar({ open, toggleSidebar, setDock }) {\r\n    const classes = useStyles();\r\n\r\n    const [modalMode, setModalMode] = useState(\"\");\r\n    const handler = useRef(null);\r\n\r\n    const openModal = (mode, handleSelect = null) => {\r\n        handler.current = handleSelect;\r\n        setModalMode(mode);\r\n    };\r\n\r\n    const closeModal = () => setModalMode(\"\");\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={open}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <SidebarHeader toggleSidebar={toggleSidebar} />\r\n            <SidebarBody openModal={openModal} />\r\n            <Modal\r\n                mode={modalMode}\r\n                closeModal={closeModal}\r\n                handleSelect={handler.current}\r\n                setDock={setDock}\r\n            />\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default Sidebar;\r\n"],"sourceRoot":""}