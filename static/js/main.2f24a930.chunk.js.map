{"version":3,"sources":["viewerHelpers.js","reducer/settingsReducer.js","context/SettingsContext.js","helpers.js","ModelViewer.js","Display.js","MainPage.js","App.js","data/face_offset.js","hooks/useToggleState.js","consts.js","styles/MainPageStyles.js","styles/Rose-Petals.svg","serviceWorker.js","index.js"],"names":["loadModel","url","Promise","resolve","FBXLoader","load","getModelPath","id","fbxSource","getTexturePath","analyzeWeaponCode","code","flipped","endsWith","weaponCode","substring","length","modelPath","texturePath","isSheath","disposeItem","item","disposedList","Set","needToDispose","object","has","uuid","notDisposed","dispose","add","disposeObject","traverse","child","isMesh","callbackOnPotentialArray","material","mat","map","backupMap","geometry","createNewMaterial","materialType","params","matType","THREE","changeMaterial","target","name","checkParam","Array","isArray","every","forEach","i","texture","encoding","newMaterial","skinning","changeOpacity","opacity","obj","updateOutlineShader","size","fog","needsUpdate","onBeforeCompile","shader","customTransform","vertexShader","replace","setTimeout","changeOutlineSize","updated","m","changeOutlineColor","color","createOutline","outlines","outline","clone","visible","enable","push","fill","replaceMaterial","side","transparent","createOutlineMaterial","isSkinnedMesh","bind","skeleton","bindMatrix","parent","applyOffset","part","offset","groups","targetGroup","find","group","materialIndex","start","end","count","uv","attributes","u","getX","x","v","getY","y","setXY","applyEyeOffset","applyMouthOffset","applyFaceOffset","input","applyTexture","textureId","applyEyeTexture","applyMouthTexture","applyFaceTexture","analyzeChainCode","aniCodes","split","nAni","fileList","animationList","currentAni","timeScale","repetitions","fileIdx","aniName","fileName","details","currentParts","includes","settings","key","value","parseFloat","Infinity","parseInt","chainCodeToList","ani","concat","createGradientMap","nTones","colors","Uint8Array","_","minFilter","magFilter","generateMipmaps","settingsReducer","state","action","type","subkey","currentValue","defaultSetting","defaultSettings","update","SettingsContext","createContext","DispatchContext","initSettings","chainMaker","chain","animation","SettingsProvider","props","useReducer","dispatch","Provider","children","Object","keys","scene","lights","light","isBlade","startsWith","callback","setInitialSettings","faceTextureDefined","param","keycode","setValue","join","chainList","n","initKey","isBooleanValue","Boolean","generateChainCode","defaultMod","modList","ts","r","output","modKey","collectFilter","toggleState","collected","tmp","k","multiCondFilter","filters","filterKeys","filter","el","complementaryColor","hexColor","toString","slice","aniButtonsFromObject","handleSelect","groupName","style","maxWidth","variant","data-value","data-name","onClick","getStandbyCode","weapon","gender","WEAPON_CODE","GENDER_CODE","getVictoryCode","getDashAtkCode","getRollCode","getComboCode","comboLength","COMBO_LENGTH","result","getFSCode","fsAniLength","FS_LENGTH","getLobbyCode","ModelViewer","initScene","models","modelInfo","main","model","weaponLeft","weaponRight","materials","outlineParams","viewport","width","window","innerWidth","height","innerHeight","mixers","clock","background","bgColor","floorGeometry","rotateX","Math","PI","floorMaterial","floor","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","addLights","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","renderer","antiAliasing","finalRenderer","canvas","domElement","setSize","appendChild","animate","constructor","entries","removeLights","remove","initLoad","modelId","loadMain","loadWeaponR","loadWeaponL","all","attachWeapon","boneName","detachWeapon","saveMaterialReference","playNextAni","capture","_aniIdx","mediaRecorder","stop","toggleCapture","newIdx","aniIdx","addAnimationChain","animationChain","a","setIsLoading","mixer","addEventListener","aniSettings","batchLoader","file","path","animations","animFiles","anim","updateViewport","prev","current","aspect","captureAnimation","chunks","videoStream","captureStream","MediaRecorder","mimeType","codec","ondataavailable","event","data","onstop","superBuffer","Blob","URL","createObjectURL","document","createElement","body","href","download","click","revokeObjectURL","updateAA","currentSize","getSize","ascii","removeChild","updateMainModel","faceTexture","faceOverride","faceNumber","face","faceOffset","faceOffsets","initPos","initRot","rotation","weaponModel","aniCode","applyMaterialParams","faceTextureChanged","oldFaceNumber","oldOffset","currentOffset","dx","dy","faceOffsetFix","oldFaceOffsetFix","faceOffsetFixList","currentFaceOffsetFix","updateWeapons","updateModel","some","updateAnimation","mainModel","stopAllAction","copy","updateOutline","updatedParams","outlineName","outlineGroup","materialParams","paramsList","materialCommonParams","materialExtraParams","directSetMatParams","matColorParams","currentColor","matColor","useTexture","flatShading","gradientMap","newMap","updateMaterialParams","updateMaterial","updateLights","updateAscii","newCanvas","replaceCanvas","loadedFX","AsciiEffect","fxConstructors","showAscii","charSet","invert","get","effect","currentCanvas","setBackground","oldCanvas","frameId","requestAnimationFrame","dt","getDelta","rotateY","rotateSpeed","render","this","Map","incompatibleModels","weaponInfo","faceOffsetX","faceOffsetY","offsetFix","offsetFixBase","offsetFixOverride","cancelAnimationFrame","renderLists","ref","clipAction","setLoop","clampWhenFinished","time","play","PureComponent","AniControl","lazy","Display","useContext","initCameraPosition","app","showAniControl","useCallback","defaultCameraPosition","cameraPositions","isNaN","controlsPositions","className","fallback","ControlPanel","SideBar","MainPage","location","classes","useStyles","useState","currentMode","setCurrentMode","useToggleState","sidebarOpen","toggleSidebarOpen","controlOpen","toggleControlOpen","isLoading","initLoadDone","setInitLoadDone","showSettings","viewerRef","useRef","setViewport","useEffect","pathname","updateViewportSize","removeEventListener","clientHeight","clientWidth","loadingMsg","root","CssBaseline","mode","open","openSidebarButton","openControl","content","process","App","routeProps","c110018_02","c110370_01","c100015_04","c110267_01","c110050_02","c110291_01","c110354_01","c110345_01","c110266_01","c110365_01","c110346_01","c110366_01","c110299_02","c110360_01","c110307_01","c110322_01","c110356_01","c110300_01","c110344_01","c110053_03","c110368_01","c110367_01","c110003_02","c110270_02","c110341_03","initVal","setState","DRAWER_WIDTH","DRAWER_BGCOLOR","baseUrl","matParamsDetails","wireframe","default","emissive","min","max","step","emissiveIntensity","specular","metalness","roughness","shininess","options","defaultMatParams","asciiSet","lightId","intensity","sideContent","supportedCodecs","ft","f","wr","wl","bg","cam","showAC","showOutline","AA","rot","cc","MATERIALS","Basic","Toon","Lambert","Phong","Standard","Sword","Blade","Dagger","Axe","Lance","Bow","Wand","Staff","Manacaster","WEAPON_LIST","Male","Female","FILTERS","rarity","element","WEAPON_FILTERS","spFaceTextures","commonBG","green","black","grey","white","c","d","w","b","e","h","o","c100034_01","d210078_01","d210114_01","h0010001","h0010001_02","h0040101","r0070401","r0080401","smith","face1","face2","face3","face4","face5","face6","face7","face8","face9","videoCodecs","drawerWidth","drawerBG","makeStyles","theme","display","drawer","overflowY","drawerPaper","alignItems","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","marginBottom","padding","top","left","margin","borderRadius","transition","cursor","zIndex","justifyContent","fontSize","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f24a930.chunk.js","sourcesContent":["import * as THREE from \"three\";\r\nimport { fbxSource } from \"./App\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { callbackOnPotentialArray, isSheath } from \"./helpers\";\r\n\r\nexport const loadModel = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new FBXLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const loadTexture = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new THREE.TextureLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const getModelPath = id => `${fbxSource}/fbx/${id}/${id}.fbx`;\r\n\r\nexport const getTexturePath = id => `${fbxSource}/fbx/${id}/${id}.png`;\r\n\r\nexport const analyzeWeaponCode = code => {\r\n    if (!code) return \"\";\r\n    const flipped = code.endsWith(\"b\");\r\n    const weaponCode = code.substring(0, code.length - 1);\r\n    const modelPath = getModelPath(weaponCode);\r\n    const texturePath = getTexturePath(weaponCode);\r\n\r\n    return {\r\n        modelPath,\r\n        texturePath,\r\n        flipped,\r\n        isSheath: isSheath(weaponCode),\r\n    };\r\n};\r\n\r\nexport const disposeItem = item => {\r\n    if (!item) return;\r\n\r\n    const disposedList = new Set();\r\n\r\n    const notDisposed = object => !disposedList.has(object.uuid);\r\n\r\n    const needToDispose = object => object && notDisposed(object);\r\n\r\n    const disposeObject = object => {\r\n        disposedList.add(object.uuid);\r\n        object.dispose();\r\n    };\r\n\r\n    const dispose = object => {\r\n        if (needToDispose(object)) disposeObject(object);\r\n    };\r\n\r\n    item.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        // dispose material\r\n        callbackOnPotentialArray(child.material, mat => {\r\n            if (mat.map) dispose(mat.map);\r\n            if (mat.backupMap) dispose(mat.backupMap);\r\n\r\n            dispose(mat);\r\n        });\r\n        // dispose geometry\r\n        dispose(child.geometry);\r\n    });\r\n};\r\n\r\nconst createNewMaterial = (materialType, params) => {\r\n    const matType = `Mesh${materialType}Material`;\r\n    return new THREE[matType](params);\r\n};\r\n\r\nexport const changeMaterial = ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    texturePath,\r\n}) => {\r\n    if (!target) return;\r\n    target.traverse(child => {\r\n        if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n        const checkParam = `isMesh${materialType}Material`;\r\n        const material = child.material;\r\n\r\n        if (Array.isArray(material)) {\r\n            if (material.every(mat => mat[checkParam]) && !texturePath) return;\r\n\r\n            material.forEach((mat, i) => {\r\n                const texture = texturePath\r\n                    ? new THREE.TextureLoader().load(texturePath)\r\n                    : material[i].map;\r\n\r\n                if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n\r\n                const materialParams = {\r\n                    map: texture,\r\n                    skinning: true,\r\n                };\r\n                const newMaterial = createNewMaterial(\r\n                    materialType,\r\n                    materialParams\r\n                );\r\n                newMaterial.name = mat.name;\r\n                if (mat.backupMap) newMaterial.backupMap = mat.backupMap;\r\n\r\n                if (texturePath && material[i].map) {\r\n                    material[i].map.dispose();\r\n                }\r\n                material[i].dispose();\r\n                child.material[i] = newMaterial;\r\n            });\r\n        } else {\r\n            if (material[checkParam] && !texturePath) return;\r\n            const texture = texturePath\r\n                ? new THREE.TextureLoader().load(texturePath)\r\n                : material.map;\r\n\r\n            if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n            const materialParams = {\r\n                map: texture,\r\n                skinning: true,\r\n            };\r\n            const newMaterial = createNewMaterial(materialType, materialParams);\r\n\r\n            newMaterial.name = material.name;\r\n\r\n            if (material.backupMap) newMaterial.backupMap = material.backupMap;\r\n\r\n            if (texturePath && material.map) {\r\n                material.map.dispose();\r\n            }\r\n            material.dispose();\r\n\r\n            child.material = newMaterial;\r\n        }\r\n    });\r\n};\r\n\r\nconst createOutlineMaterial = ({ size, color, opacity }) => {\r\n    const newMaterial = new THREE.MeshToonMaterial({\r\n        color,\r\n        opacity,\r\n        side: THREE.BackSide,\r\n        transparent: true,\r\n        skinning: true,\r\n    });\r\n    newMaterial.onBeforeCompile = shader => {\r\n        const token = \"#include <begin_vertex>\";\r\n        const customTransform = `\r\n            vec3 transformed = position + objectNormal*${size * 0.0005};\r\n        `;\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            token,\r\n            customTransform\r\n        );\r\n    };\r\n    return newMaterial;\r\n};\r\n\r\n// replace material of an object\r\nconst replaceMaterial = (object, newMaterial) => {\r\n    // dispose old material\r\n    callbackOnPotentialArray(object.material, obj => {\r\n        // obj.map?.dispose?.()\r\n        if (obj.map) obj.map.dispose();\r\n        obj.dispose();\r\n    });\r\n    // apply new material\r\n    if (Array.isArray(object.material)) {\r\n        object.material = new Array(object.material.length).fill(newMaterial);\r\n    } else {\r\n        object.material = newMaterial;\r\n    }\r\n};\r\n\r\n// change opacity of an object\r\nexport const changeOpacity = ({ material }, opacity) => {\r\n    callbackOnPotentialArray(material, obj => {\r\n        obj.opacity = opacity;\r\n    });\r\n};\r\n\r\n// update outline shader to change size\r\nconst updateOutlineShader = (material, size) => {\r\n    // Hacky way to force shader recompilation, needs fixing !!!!!!!!!!!!!!!!!!\r\n    material.fog = !material.fog;\r\n    material.needsUpdate = true;\r\n\r\n    material.onBeforeCompile = shader => {\r\n        const token = \"#include <begin_vertex>\";\r\n        const customTransform = `\r\n                vec3 transformed = position + objectNormal*${size * 0.0005};\r\n            `;\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            token,\r\n            customTransform\r\n        );\r\n    };\r\n    setTimeout(() => {\r\n        material.fog = !material.fog;\r\n        material.needsUpdate = true;\r\n    }, 100); // Sometimes doesn't work with 0 delay\r\n};\r\n\r\n// change size of outline\r\nexport const changeOutlineSize = ({ material }, size) => {\r\n    if (Array.isArray(material)) {\r\n        const updated = new Set();\r\n        material.forEach(m => {\r\n            if (updated.has(m.uuid)) return;\r\n\r\n            updateOutlineShader(m, size);\r\n            updated.add(m.uuid);\r\n        });\r\n    } else {\r\n        updateOutlineShader(material, size);\r\n    }\r\n};\r\n\r\n// Change color of outline\r\nexport const changeOutlineColor = ({ material }, color) => {\r\n    if (Array.isArray(material)) {\r\n        const updated = new Set();\r\n        material.forEach(m => {\r\n            if (updated.has(m.uuid)) return;\r\n\r\n            m.color = new THREE.Color(color);\r\n            updated.add(m.uuid);\r\n        });\r\n    } else {\r\n        material.color = new THREE.Color(color);\r\n    }\r\n};\r\n\r\n// Add outline to object and return reference to outlines\r\nexport const createOutline = (object, params) => {\r\n    if (!object) return;\r\n    const outlines = []; // return value\r\n    object.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const outline = child.clone();\r\n        outline.name = \"outline\";\r\n        outline.visible = params.enable;\r\n\r\n        outlines.push(outline);\r\n        const newMaterial = createOutlineMaterial(params);\r\n        replaceMaterial(outline, newMaterial);\r\n\r\n        if (child.isSkinnedMesh) {\r\n            outline.bind(child.skeleton, child.bindMatrix);\r\n        }\r\n        child.parent.add(outline);\r\n    });\r\n    return outlines;\r\n};\r\n\r\nconst applyOffset = part => ({ target, offset }) => {\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { start, count } = targetGroup;\r\n        const end = start + count;\r\n        const uv = child.geometry.attributes.uv;\r\n        for (let i = start; i < end; i++) {\r\n            const u = uv.getX(i) + 0.25 * offset.x;\r\n            const v = uv.getY(i) + 0.25 * offset.y;\r\n            uv.setXY(i, u, v);\r\n        }\r\n        uv.needsUpdate = true;\r\n    });\r\n};\r\n\r\nexport const applyEyeOffset = applyOffset(\"Eye\");\r\nexport const applyMouthOffset = applyOffset(\"Mouth\");\r\nexport const applyBodyOffset = applyOffset(\"BodyAll\");\r\n\r\nexport const applyFaceOffset = input => {\r\n    if (input.offset.x === 0 && input.offset.y === 0) return;\r\n    applyEyeOffset(input);\r\n    applyMouthOffset(input);\r\n};\r\n\r\nconst applyTexture = part => ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    textureId,\r\n}) => {\r\n    const texturePath = getTexturePath(textureId);\r\n    const texture = new THREE.TextureLoader().load(texturePath);\r\n    texture.encoding = THREE.sRGBEncoding;\r\n\r\n    const materialParams = {\r\n        map: texture,\r\n        skinning: true,\r\n    };\r\n    const newMaterial = createNewMaterial(materialType, materialParams);\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { materialIndex } = targetGroup;\r\n        newMaterial.name = child.material[materialIndex].name;\r\n\r\n        child.material[materialIndex] = newMaterial;\r\n    });\r\n};\r\n\r\nexport const applyEyeTexture = applyTexture(\"Eye\");\r\nexport const applyMouthTexture = applyTexture(\"Mouth\");\r\nexport const applyBodyTexture = applyTexture(\"BodyAll\");\r\n\r\nexport const applyFaceTexture = input => {\r\n    applyEyeTexture(input);\r\n    applyMouthTexture(input);\r\n};\r\n\r\n// Chain Code is invalid if starts with the character \"+\"\r\nexport const analyzeChainCode = code => {\r\n    if (!code) return [\"\", \"\"];\r\n    const aniCodes = code.split(\">\");\r\n    const nAni = aniCodes.length;\r\n    const fileList = [];\r\n    const animationList = [];\r\n    for (let i = 0; i < nAni; i++) {\r\n        let timeScale = 1,\r\n            repetitions = 1,\r\n            fileIdx = null,\r\n            aniName = null,\r\n            fileName = null,\r\n            details,\r\n            currentAni = {};\r\n        const currentParts = aniCodes[i].split(\"+\");\r\n        const fromModelFile = currentParts.length === 1;\r\n        if (fromModelFile) {\r\n            details = currentParts[0];\r\n        } else {\r\n            [fileName, details] = currentParts;\r\n            fileIdx = fileList.length - 1;\r\n        }\r\n        if (fileName) {\r\n            fileIdx = fileList.length;\r\n            fileList.push(fileName);\r\n        }\r\n        if (details.includes(\"&\")) {\r\n            const [name, ...settings] = details.split(\"&\");\r\n            aniName = name;\r\n            for (let setting of settings) {\r\n                const [key, value] = setting.split(\"=\");\r\n                if (key === \"ts\") {\r\n                    timeScale = parseFloat(value);\r\n                }\r\n                if (key === \"r\") {\r\n                    repetitions = value === \"inf\" ? Infinity : parseInt(value);\r\n                }\r\n            }\r\n        } else {\r\n            aniName = details;\r\n        }\r\n        currentAni = {\r\n            fileIdx,\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n        };\r\n        animationList.push(currentAni);\r\n    }\r\n    return [fileList, animationList];\r\n};\r\n\r\nexport const chainCodeToList = (code, name) => {\r\n    const [fileList, animationList] = analyzeChainCode(code);\r\n    const length = animationList.length;\r\n    const output = animationList.map((ani, i) => {\r\n        const { fileIdx, aniName, timeScale, repetitions } = ani;\r\n        const partName = name.concat(length > 1 ? `#${i + 1}` : \"\");\r\n        return {\r\n            name: partName,\r\n            fileName: fileList[fileIdx],\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            id: uuid(),\r\n        };\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const createGradientMap = nTones => {\r\n    const colors = new Uint8Array(nTones).map((_, i) => (i * 256) / nTones);\r\n    const map = new THREE.DataTexture(colors, nTones, 1, THREE.LuminanceFormat);\r\n    map.minFilter = THREE.NearestFilter;\r\n    map.magFilter = THREE.NearestFilter;\r\n    map.generateMipmaps = false;\r\n\r\n    return map;\r\n};\r\n","import { defaultSettings } from \"../consts\";\r\n\r\nexport const settingsReducer = (state, action) => {\r\n    const { type, key, subkey, value } = action;\r\n    switch (type) {\r\n        case \"toggle\":\r\n            let currentValue;\r\n            if (subkey) {\r\n                currentValue = state[key][subkey][value];\r\n                return {\r\n                    ...state,\r\n                    [key]: {\r\n                        ...state[key],\r\n                        [subkey]: {\r\n                            ...state[key][subkey],\r\n                            [value]: !currentValue,\r\n                        },\r\n                    },\r\n                };\r\n            }\r\n            currentValue = state[key][value];\r\n            return {\r\n                ...state,\r\n                [key]: { ...state[key], [value]: !currentValue },\r\n            };\r\n        case \"reset\":\r\n            // reset values\r\n            // value = array of keys in settings[key] or settings[key][subkey] to be reset, null -> reset all\r\n            const defaultSetting = subkey\r\n                ? defaultSettings[key][subkey]\r\n                : defaultSettings[key];\r\n            // no value -> reset all\r\n            if (!value)\r\n                return subkey\r\n                    ? {\r\n                          ...state,\r\n                          [key]: {\r\n                              ...state[key],\r\n                              [subkey]: {\r\n                                  ...state[key][subkey],\r\n                                  ...defaultSetting,\r\n                              },\r\n                          },\r\n                      }\r\n                    : {\r\n                          ...state,\r\n                          [key]: { ...state[key], ...defaultSetting },\r\n                      };\r\n            // if value is defined, reset only the specified keys\r\n            const update = {};\r\n            value.forEach(v => {\r\n                update[v] = defaultSetting[v];\r\n            });\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...update },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...update } };\r\n        case \"load\":\r\n            // load preset values\r\n            return;\r\n        case \"update\":\r\n            // update state[key] or state[key][subkey] with values from value\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...value },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...value } };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createContext, useReducer } from \"react\";\r\nimport { settingsReducer } from \"../reducer/settingsReducer\";\r\nimport { defaultSettings } from \"../consts\";\r\nimport { chainCodeToList } from \"../viewerHelpers\";\r\n\r\nexport const SettingsContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nconst initAniChain = chainCodeToList(defaultSettings.animation.code, \"init\");\r\n\r\nconst initSettings = { chainMaker: { chain: initAniChain } };\r\nObject.keys(defaultSettings).forEach(\r\n    key => (initSettings[key] = { ...defaultSettings[key] })\r\n);\r\ninitSettings.scene.lights = defaultSettings.scene.lights.map(light => ({\r\n    ...light,\r\n}));\r\n\r\nexport { initSettings };\r\n\r\nexport function SettingsProvider(props) {\r\n    const [settings, dispatch] = useReducer(settingsReducer, initSettings);\r\n\r\n    return (\r\n        <SettingsContext.Provider value={settings}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                {props.children}\r\n            </DispatchContext.Provider>\r\n        </SettingsContext.Provider>\r\n    );\r\n}\r\n","import Button from \"@material-ui/core/Button\";\r\n\r\nimport { initSettings } from \"./context/SettingsContext\";\r\nimport {\r\n    initKey,\r\n    WEAPON_CODE,\r\n    GENDER_CODE,\r\n    COMBO_LENGTH,\r\n    FS_LENGTH,\r\n} from \"./consts\";\r\n\r\nimport { chainCodeToList } from \"./viewerHelpers\";\r\n\r\nexport const isBlade = code => code.startsWith(\"w302\");\r\n\r\nexport const isSheath = code => isBlade(code) && code.endsWith(\"02\");\r\n\r\n// if object is an array, apply callback on each element of object, otherwise, apply call back on the object\r\nexport const callbackOnPotentialArray = (object, callback) => {\r\n    if (Array.isArray(object)) {\r\n        object.forEach(child => callback(child));\r\n        return;\r\n    }\r\n    callback(object);\r\n};\r\n\r\nexport const setInitialSettings = params => {\r\n    if (params.length === 0) return;\r\n    let faceTextureDefined = false;\r\n    params.forEach(param => {\r\n        if (!param) return;\r\n\r\n        const [keycode, ...value] = param.split(\"=\"); // animation code can have \"=\" inside\r\n        // if no value given, skip\r\n        if (!value[0]) return;\r\n\r\n        let setValue = value.length === 1 ? value[0] : value.join(\"=\");\r\n\r\n        switch (keycode) {\r\n            case \"ft\":\r\n                faceTextureDefined = true;\r\n                break;\r\n            case \"cc\":\r\n                // initialize chain maker chain\r\n                const chainList = chainCodeToList(setValue, \"Animation\");\r\n                initSettings[\"chainMaker\"][\"chain\"] = chainList;\r\n                break;\r\n            case \"bg\":\r\n                if (setValue !== \"transparent\") {\r\n                    setValue = `#${setValue}`;\r\n                }\r\n                break;\r\n            case \"cam\": // parameters in form x, y, z\r\n                setValue = setValue.split(\",\").map(n => parseFloat(n));\r\n                break;\r\n            default:\r\n        }\r\n        const { group, key } = initKey[keycode];\r\n\r\n        const isBooleanValue = setValue === \"true\" || setValue === \"false\";\r\n\r\n        initSettings[group][key] = isBooleanValue\r\n            ? Boolean(setValue === \"true\")\r\n            : setValue;\r\n    });\r\n\r\n    initSettings[\"model\"][\"texture\"] = initSettings[\"model\"][\"id\"];\r\n\r\n    if (!faceTextureDefined) {\r\n        initSettings[\"model\"][\"faceTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n};\r\n\r\nexport const generateChainCode = chain => {\r\n    const defaultMod = {\r\n        timeScale: 1,\r\n        repetitions: 1,\r\n    };\r\n    const modList = {\r\n        ts: \"timeScale\",\r\n        r: \"repetitions\",\r\n    };\r\n    const length = chain.length;\r\n    let output = \"\";\r\n    chain.forEach((ani, i) => {\r\n        const { fileName, aniName } = ani;\r\n        if (fileName) {\r\n            if (i === 0) {\r\n                output = output.concat(fileName);\r\n            } else {\r\n                output = output.concat(\r\n                    fileName !== chain[i - 1].fileName ? fileName : \"\"\r\n                );\r\n            }\r\n            output = output.concat(\"+\");\r\n        }\r\n        output = output.concat(aniName);\r\n        // Add modifiers\r\n        Object.keys(modList).forEach(modKey => {\r\n            const key = modList[modKey];\r\n            if (ani[key] !== defaultMod[key]) {\r\n                output = output.concat(`&${modKey}=${ani[key]}`);\r\n            }\r\n        });\r\n        if (i < length - 1) {\r\n            output = output.concat(\">\");\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const collectFilter = toggleState => {\r\n    let collected = {};\r\n    Object.keys(toggleState).forEach(key => {\r\n        let tmp = [];\r\n        Object.keys(toggleState[key]).forEach(k => {\r\n            if (toggleState[key][k]) {\r\n                tmp.push(k);\r\n            }\r\n        });\r\n        collected[key] = tmp;\r\n    });\r\n    return collected;\r\n};\r\n\r\nexport const multiCondFilter = (input, filters) => {\r\n    const filterKeys = Object.keys(filters);\r\n\r\n    return input.filter(el => {\r\n        return filterKeys.every(key => {\r\n            if (!filters[key].length) return true;\r\n            return filters[key].includes(el[key]);\r\n        });\r\n    });\r\n};\r\n\r\nexport const complementaryColor = color => {\r\n    const hexColor = color.replace(\"#\", \"0x\");\r\n\r\n    return `#${(\"000000\" + (\"0xffffff\" ^ hexColor).toString(16)).slice(-6)}`;\r\n};\r\n\r\nexport const aniButtonsFromObject = (object, handleSelect, groupName) => {\r\n    if (!object) return null;\r\n    const style = { maxWidth: \"13.5rem\" };\r\n    return Object.keys(object).map(key => (\r\n        <Button\r\n            variant=\"contained\"\r\n            key={key}\r\n            data-value={object[key]}\r\n            data-name={`${groupName ? `${groupName} ` : \"\"}${key}`}\r\n            onClick={handleSelect}\r\n            style={style}\r\n        >\r\n            {key}\r\n        </Button>\r\n    ));\r\n};\r\n\r\n// Animation chain code generator\r\nexport const getStandbyCode = (weapon, gender) =>\r\n    `LOB_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_ONT_${GENDER_CODE[gender]}`;\r\n\r\nexport const getVictoryCode = weapon =>\r\n    `WIN_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_WIN_01>+${WEAPON_CODE[weapon]}_WIN_02`;\r\n\r\nexport const getDashAtkCode = weapon => `DAS+${WEAPON_CODE[weapon]}_DAS_02`;\r\n\r\nexport const getRollCode = weapon => `ROL+${WEAPON_CODE[weapon]}_ROL_01`;\r\n\r\nexport const getComboCode = weapon => {\r\n    const comboLength = COMBO_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `CMB_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= comboLength; i++) {\r\n        result = result.concat(`+${code}_CMB_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Force Strike chain code\r\nexport const getFSCode = weapon => {\r\n    const fsAniLength = FS_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `FS_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= fsAniLength; i++) {\r\n        result = result.concat(`+${code}_CHR_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Join Lobby chain code\r\nexport const getLobbyCode = (weapon, gender) => {\r\n    const code = WEAPON_CODE[weapon];\r\n    if (gender === \"Male\")\r\n        return `LOB_${code}+${code}_ONT_05&ts=-0.5>+${code}_ONT_02>+${code}_ONT_07>+${code}_ONT_08>+${code}_ONT_21`;\r\n    // Female\r\n    return `LOB_${code}+${code}_ONT_06&ts=-0.5>+${code}_ONT_04>+${code}_ONT_09>+${code}_ONT_10>+${code}_ONT_23`;\r\n};\r\n","import { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { fbxSource } from \"./App\";\r\nimport { CAM_PARAMS, faceOffsets } from \"./consts\";\r\nimport faceOffsetFixList from \"./data/face_offset\";\r\nimport {\r\n    directSetMatParams,\r\n    matColorParams,\r\n    materialCommonParams,\r\n    materialExtraParams,\r\n    incompatibleModels,\r\n} from \"./consts\";\r\nimport {\r\n    getModelPath,\r\n    analyzeWeaponCode,\r\n    analyzeChainCode,\r\n    loadModel,\r\n    applyFaceTexture,\r\n    applyFaceOffset,\r\n    disposeItem,\r\n    createOutline,\r\n    changeMaterial,\r\n    changeOpacity,\r\n    changeOutlineSize,\r\n    changeOutlineColor,\r\n    createGradientMap,\r\n} from \"./viewerHelpers\";\r\n\r\nimport { isBlade } from \"./helpers\";\r\n\r\nclass ModelViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        this.initScene();\r\n        this.props.setIsLoading(true);\r\n\r\n        // Load the models\r\n        const [main, weaponRight, weaponLeft] = await this.initLoad();\r\n\r\n        // save references to models\r\n        this.models = {\r\n            main,\r\n            weaponRight,\r\n            weaponLeft,\r\n        };\r\n\r\n        // effects\r\n        this.loadedFX = new Set();\r\n        this.fxConstructors = new Map();\r\n\r\n        // add outline to main model and save reference\r\n        this.outlines.main = createOutline(main, this.outlineParams);\r\n\r\n        // Save initial position and rotation\r\n        main.initPos = main.position.clone();\r\n        main.initRot = main.rotation.clone();\r\n\r\n        // change the material\r\n\r\n        const { materialType } = this.props.model;\r\n        changeMaterial({ target: main, materialType });\r\n\r\n        // basic viewer for non-human assets\r\n        const modelId = this.props.model.id;\r\n        if (\r\n            !modelId.startsWith(\"c\") ||\r\n            modelId.endsWith(\"_h\") ||\r\n            incompatibleModels.has(modelId)\r\n        ) {\r\n            if (isBlade(modelId)) {\r\n                const { texturePath } = analyzeWeaponCode(modelId + \"n\");\r\n                changeMaterial({ target: main, materialType, texturePath });\r\n            }\r\n            this.floor.add(main);\r\n            this.props.setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        // process weapons\r\n        [\"Right\", \"Left\"].forEach(side => {\r\n            const key = `weapon${side}`;\r\n            // if weapon not specified, return\r\n            if (!this.props.model[key]) return;\r\n            // add weapon\r\n            const weaponInfo = this.modelInfo[key];\r\n            const weaponModel = this.models[key];\r\n            const { texturePath } = weaponInfo;\r\n            changeMaterial({\r\n                target: weaponModel,\r\n                materialType,\r\n                texturePath,\r\n            });\r\n            // flip weapon if needed\r\n            weaponModel.rotation.y += weaponInfo.flipped ? Math.PI : 0;\r\n            // add outline to weapon and save reference\r\n            this.outlines[key] = createOutline(weaponModel, this.outlineParams);\r\n            // attach weapon to main body\r\n            this.attachWeapon(this.models[`weapon${side}`], side);\r\n        });\r\n\r\n        // Apply face settings\r\n        const { texture, faceTexture } = this.props.model;\r\n        const faceOverride = texture !== faceTexture;\r\n        const faceNumber = `face${this.props.model.face}`;\r\n        const { x: faceOffsetX, y: faceOffsetY } = faceOffsets[faceNumber];\r\n        if (faceOffsetX !== 0 || faceOffsetY !== 0 || faceOverride) {\r\n            let offsetFix = { x: 0, y: 0 };\r\n            if (faceOverride) {\r\n                applyFaceTexture({\r\n                    target: main,\r\n                    materialType,\r\n                    textureId: faceTexture,\r\n                });\r\n\r\n                const offsetFixBase = faceOffsetFixList[texture] || {\r\n                    x: 0,\r\n                    y: 0,\r\n                };\r\n                const offsetFixOverride = faceOffsetFixList[faceTexture] || {\r\n                    x: 0,\r\n                    y: 0,\r\n                };\r\n                offsetFix = {\r\n                    x: offsetFixOverride.x - offsetFixBase.x,\r\n                    y: offsetFixOverride.y - offsetFixBase.y,\r\n                };\r\n            }\r\n            const offset = {\r\n                x: faceOffsetX + offsetFix.x,\r\n                y: faceOffsetY + offsetFix.y,\r\n            };\r\n            applyFaceOffset({ target: main, offset });\r\n        }\r\n\r\n        this.saveMaterialReference();\r\n        this.applyMaterialParams();\r\n\r\n        // Add character to scene\r\n        this.floor.add(main);\r\n        // main model loading finished\r\n        this.props.setIsLoading(false);\r\n\r\n        // Add animation\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        this.addAnimationChain(main, aniCode, timeScale);\r\n    }\r\n\r\n    async componentDidUpdate(prev) {\r\n        const current = this.props;\r\n\r\n        // // print updated props to console\r\n        // console.log(\"Updated\");\r\n        // Object.keys(prev).forEach(key => {\r\n        //     const oldValue = prev[key];\r\n        //     const currentValue = this.props[key];\r\n        //     const subkeys = Object.keys(oldValue);\r\n        //     if (subkeys.length === 0 || typeof oldValue === \"string\") {\r\n        //         if (oldValue !== currentValue) {\r\n        //             console.log(\r\n        //                 `${key}: ${JSON.stringify(\r\n        //                     oldValue\r\n        //                 )} to ${JSON.stringify(currentValue)}`\r\n        //             );\r\n        //         }\r\n        //     } else {\r\n        //         subkeys.forEach(subkey => {\r\n        //             if (oldValue[subkey] !== currentValue[subkey]) {\r\n        //                 console.log(\r\n        //                     `${key}.${subkey}: ${JSON.stringify(\r\n        //                         oldValue[subkey]\r\n        //                     )} to ${JSON.stringify(currentValue[subkey])}`\r\n        //                 );\r\n        //             }\r\n        //         });\r\n        //     }\r\n        // });\r\n\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n\r\n        this.updateModel(prev.model, current.model);\r\n\r\n        this.updateAnimation(prev.animation, current.animation);\r\n\r\n        this.updateOutline(prev.outline, current.outline);\r\n\r\n        this.updateMaterial(prev, current);\r\n\r\n        this.updateLights(prev.lights, current.lights);\r\n\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n\r\n        // Update background color\r\n        if (prev.bgColor !== current.bgColor) {\r\n            this.setBackground(current.bgColor);\r\n        }\r\n\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n\r\n        // Update Anti Aliasinng\r\n        if (prev.antiAliasing !== current.antiAliasing) {\r\n            this.updateAA();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixers = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n\r\n    // set up initial scene\r\n    initScene = () => {\r\n        this.models = {};\r\n        this.modelInfo = {\r\n            main: this.props.model.id,\r\n            weaponLeft: analyzeWeaponCode(this.props.model.weaponLeft),\r\n            weaponRight: analyzeWeaponCode(this.props.model.weaponRight),\r\n        };\r\n        this.materials = [];\r\n\r\n        // save reference and specifications for outlines\r\n        this.outlines = {};\r\n        this.outlineParams = { ...this.props.outline };\r\n\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // mixers\r\n        this.mixers = [];\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.scene.background =\r\n            this.props.bgColor !== \"transparent\"\r\n                ? new THREE.Color(this.props.bgColor)\r\n                : null;\r\n\r\n        // Create an invisible floor to add the models on (for auto rotate)\r\n        const floorGeometry = new THREE.PlaneBufferGeometry(0.1, 0.1);\r\n        floorGeometry.rotateX(Math.PI / 2);\r\n        const floorMaterial = new THREE.MeshBasicMaterial();\r\n        floorMaterial.visible = false;\r\n        this.floor = new THREE.Mesh(floorGeometry, floorMaterial);\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addLights(lights);\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.renderer = this.props.antiAliasing\r\n            ? this.rendererAA\r\n            : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        this.canvas = this.finalRenderer.domElement;\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n        this.mount.appendChild(this.canvas);\r\n\r\n        this.animate();\r\n    };\r\n\r\n    addLights = lights => {\r\n        this.lights = [];\r\n        lights.forEach(({ type, color, enable, ...params }) => {\r\n            if (!enable) return;\r\n            const constructor = `${type}Light`;\r\n            const light = new THREE[constructor](color);\r\n\r\n            for (const [key, value] of Object.entries(params)) {\r\n                switch (key) {\r\n                    case \"position\":\r\n                        const setValue = value.map(v => v || 0);\r\n                        light.position.set(...setValue);\r\n                        break;\r\n                    default:\r\n                        light[key] = value;\r\n                }\r\n            }\r\n            this.scene.add(light);\r\n            this.lights.push(light);\r\n        });\r\n    };\r\n\r\n    removeLights = () => this.lights.forEach(light => this.scene.remove(light));\r\n\r\n    // Promise to load all models at initialize\r\n    initLoad = () => {\r\n        const modelId = this.modelInfo.main;\r\n        const modelPath = getModelPath(modelId);\r\n        const loadMain = loadModel(modelPath);\r\n\r\n        const weaponRight = this.modelInfo.weaponRight?.modelPath;\r\n        const loadWeaponR = loadModel(weaponRight);\r\n\r\n        const weaponLeft = this.modelInfo.weaponLeft?.modelPath;\r\n        const loadWeaponL = loadModel(weaponLeft);\r\n\r\n        return Promise.all([loadMain, loadWeaponR, loadWeaponL]);\r\n    };\r\n\r\n    attachWeapon = (weapon, side) => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name === boneName && child.children.length === 0) {\r\n                child.add(weapon);\r\n            }\r\n        });\r\n    };\r\n\r\n    detachWeapon = side => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name !== boneName || child.children.name !== 1) return;\r\n            if (child.children[0].type === \"Group\") {\r\n                child.remove(this.models[`weapon${side}`]);\r\n            }\r\n        });\r\n    };\r\n\r\n    saveMaterialReference = () => {\r\n        this.materials = [];\r\n        const mainModel = this.models.main;\r\n        mainModel.traverse(child => {\r\n            if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n            const { material } = child;\r\n\r\n            if (Array.isArray(material)) {\r\n                this.materials = this.materials.concat(material);\r\n            } else {\r\n                this.materials.push(material);\r\n            }\r\n        });\r\n    };\r\n\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        if (this.props.capture.enable && this._aniIdx === nAni - 1) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    addAnimationChain = async (object, animationChain, timeScale) => {\r\n        if (!animationChain) return;\r\n\r\n        const [fileList, animationList] = analyzeChainCode(animationChain);\r\n        this.nAni = animationList.length;\r\n\r\n        this.props.setIsLoading(true);\r\n\r\n        object.mixer = new THREE.AnimationMixer(object);\r\n        this.mixers.push(object.mixer);\r\n\r\n        this._aniIdx = 0;\r\n        object.mixer.timeScale = timeScale; // Global timeScale\r\n        object.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = animationList.map(ani => ({\r\n            timeScale: ani.timeScale,\r\n            repetitions: ani.repetitions,\r\n        }));\r\n        const batchLoader = fileList.map(file => {\r\n            const path = `${fbxSource}/fbx/${file}.fbx`;\r\n            return loadModel(path);\r\n        });\r\n\r\n        const animations = [];\r\n        // load all animation files\r\n        const animFiles = await Promise.all(batchLoader);\r\n\r\n        animationList.forEach(anim => {\r\n            const { fileIdx, aniName } = anim;\r\n            const animation = aniName\r\n                ? animFiles[fileIdx].animations.find(\r\n                      ani => ani.name === aniName\r\n                  )\r\n                : animFiles[fileIdx].animations[0];\r\n            animations.push(animation);\r\n        });\r\n        this.animations = animations;\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.props.setIsLoading(false);\r\n    };\r\n\r\n    // this.aniIdx = n => play animation with index n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n        const anim = this.animations[newIdx];\r\n        const mixer = this.models.main.mixer;\r\n        mixer.stopAllAction();\r\n        const action = mixer.clipAction(anim);\r\n        const { timeScale, repetitions } = this.aniSettings[newIdx];\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n        action.play();\r\n    }\r\n\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: this.props.capture.codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.props.setIsLoading(false);\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                var url = URL.createObjectURL(superBuffer);\r\n                var a = document.createElement(\"a\");\r\n                document.body.appendChild(a);\r\n                a.style = \"display: none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n            };\r\n        }\r\n        // disable user input\r\n        this.props.setIsLoading(true);\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    updateAA = () => {\r\n        // get current viewport size\r\n        const currentSize = new THREE.Vector2();\r\n        this.renderer.getSize(currentSize);\r\n        // switch renderer\r\n        this.renderer = this.props.antiAliasing\r\n            ? this.rendererAA\r\n            : this.rendererNoAA;\r\n        this.renderer.setSize(currentSize.x, currentSize.y);\r\n\r\n        if (this.props.ascii.enable) return;\r\n        // remove old canvas\r\n        this.mount.removeChild(this.canvas);\r\n        // Add new canvas\r\n        this.canvas = this.renderer.domElement;\r\n        this.mount.appendChild(this.canvas);\r\n    };\r\n\r\n    updateMainModel = async (prev, current) => {\r\n        const { texture, faceTexture } = current;\r\n        const faceOverride = texture !== faceTexture;\r\n        const faceNumber = `face${current.face}`;\r\n        const faceOffset = faceOffsets[faceNumber];\r\n        if (prev.id !== current.id) {\r\n            this.props.setIsLoading(true);\r\n            const modelPath = getModelPath(current.id);\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            const { materialType } = current;\r\n            changeMaterial({ target: model, materialType });\r\n            // add outline\r\n            this.outlines.main = createOutline(model, this.outlineParams);\r\n\r\n            // detach weapons from old model if they exist\r\n            [\"Right\", \"Left\"].forEach(side => {\r\n                const key = `weapon${side}`;\r\n                if (prev[key]) {\r\n                    this.detachWeapon(side);\r\n                }\r\n            });\r\n            // remove and dispose old model\r\n            this.floor.remove(this.models.main);\r\n            disposeItem(this.models.main);\r\n            // add reference\r\n            this.models.main = model;\r\n\r\n            // Save initial position and rotation\r\n            model.initPos = model.position.clone();\r\n            model.initRot = model.rotation.clone();\r\n\r\n            // Add new model to scene\r\n            this.floor.add(model);\r\n\r\n            // Apply face to new model\r\n            if (faceOverride) {\r\n                applyFaceTexture({\r\n                    target: model,\r\n                    materialType,\r\n                    textureId: faceTexture,\r\n                });\r\n            }\r\n\r\n            if (faceOffset.x !== 0 || faceOffset.y !== 0) {\r\n                applyFaceOffset({ target: model, offset: faceOffset });\r\n            }\r\n\r\n            // Attach weapons to new model\r\n            [\"Right\", \"Left\"].forEach(side => {\r\n                const key = `weapon${side}`;\r\n                const weaponModel = this.models[key];\r\n\r\n                if (!weaponModel) return;\r\n                this.attachWeapon(weaponModel, side);\r\n                // add outline if not exist\r\n                if (!this.outlines[key]) {\r\n                    this.outlines[key] = createOutline(\r\n                        weaponModel,\r\n                        this.outlineParams\r\n                    );\r\n                }\r\n            });\r\n\r\n            // Add animation to new model\r\n            const { code: aniCode, timeScale } = this.props.animation;\r\n            this.addAnimationChain(model, aniCode, timeScale);\r\n\r\n            this.saveMaterialReference();\r\n            this.applyMaterialParams();\r\n\r\n            this.props.setIsLoading(false);\r\n        } else {\r\n            // Update face when main model not changed\r\n            const faceTextureChanged = prev.faceTexture !== faceTexture;\r\n            const faceChanged = prev.face !== current.face;\r\n            if (faceChanged || faceTextureChanged) {\r\n                const oldFaceNumber = `face${prev.face}`;\r\n                const faceNumber = `face${current.face}`;\r\n\r\n                const oldOffset = faceOffsets[oldFaceNumber];\r\n                const currentOffset = faceOffsets[faceNumber];\r\n\r\n                const dx = currentOffset.x - oldOffset.x;\r\n                const dy = currentOffset.y - oldOffset.y;\r\n\r\n                let faceOffsetFix = { x: 0, y: 0 };\r\n                if (faceTextureChanged) {\r\n                    const { materialType } = current;\r\n                    applyFaceTexture({\r\n                        target: this.models.main,\r\n                        materialType,\r\n                        textureId: faceTexture,\r\n                    });\r\n                    const oldFaceOffsetFix = faceOffsetFixList[\r\n                        prev.faceTexture\r\n                    ] || { x: 0, y: 0 };\r\n\r\n                    const currentFaceOffsetFix = faceOffsetFixList[\r\n                        faceTexture\r\n                    ] || { x: 0, y: 0 };\r\n\r\n                    faceOffsetFix = {\r\n                        x: currentFaceOffsetFix.x - oldFaceOffsetFix.x,\r\n                        y: currentFaceOffsetFix.y - oldFaceOffsetFix.y,\r\n                    };\r\n\r\n                    this.saveMaterialReference();\r\n                    this.applyMaterialParams();\r\n                }\r\n                const offset = {\r\n                    x: dx + faceOffsetFix.x,\r\n                    y: dy + faceOffsetFix.y,\r\n                };\r\n\r\n                applyFaceOffset({ target: this.models.main, offset });\r\n            }\r\n        }\r\n    };\r\n\r\n    updateWeapons = async (prev, current) => {\r\n        [\"Right\", \"Left\"].forEach(async side => {\r\n            const key = `weapon${side}`;\r\n            // if not changed, return\r\n            if (prev[key] === current[key]) return;\r\n            // Update weapon\r\n            this.detachWeapon(side); // remove old weapon\r\n            disposeItem(this.models[key]); // dispose old weapon\r\n            // if current weapon is empty (weapon removed)\r\n            if (!current[key]) {\r\n                this.models[key] = null;\r\n                this.modelInfo[key] = \"\";\r\n                // remove reference to outline\r\n                this.outlines[key] = null;\r\n                return;\r\n            }\r\n            // load new weapon\r\n            this.props.setIsLoading(true);\r\n\r\n            this.modelInfo[key] = analyzeWeaponCode(this.props.model[key]);\r\n            const { modelPath, texturePath } = this.modelInfo[key];\r\n\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            this.models[key] = model;\r\n\r\n            // process new weapon\r\n            const { materialType } = current;\r\n            changeMaterial({\r\n                target: this.models[key],\r\n                materialType,\r\n                texturePath,\r\n            });\r\n\r\n            if (this.modelInfo[key].flipped) {\r\n                this.models[key].rotation.y = Math.PI;\r\n            }\r\n            // add outline to new weapon\r\n            this.outlines[key] = createOutline(model, this.outlineParams);\r\n            // attach new weapon to main model\r\n            this.attachWeapon(model, side);\r\n\r\n            this.saveMaterialReference();\r\n            this.applyMaterialParams();\r\n\r\n            this.props.setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        await this.updateMainModel(prev, current);\r\n        this.updateWeapons(prev, current);\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            const mainModel = this.models.main;\r\n            if (prev.code) {\r\n                mainModel.mixer.stopAllAction();\r\n\r\n                // Reset position and rotation to initial value\r\n                const { initPos, initRot } = mainModel;\r\n                mainModel.position.copy(initPos);\r\n                mainModel.rotation.copy(initRot);\r\n\r\n                this.mixers = [];\r\n                this.animations = [];\r\n            }\r\n            // Add new animation\r\n            this.addAnimationChain(mainModel, code, timeScale);\r\n        }\r\n        //Update timeScale\r\n        else if (prev.timeScale !== timeScale) {\r\n            this.mixers.forEach(mixer => (mixer.timeScale = timeScale));\r\n        }\r\n    };\r\n\r\n    updateOutline = (prev, current) => {\r\n        this.outlineParams = { ...current };\r\n        const updatedParams = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedParams.length === 0) return;\r\n        const { enable, size, opacity, color } = current;\r\n        const outlineList = Object.keys(this.outlines);\r\n        outlineList.forEach(outlineName => {\r\n            const outlineGroup = this.outlines[outlineName];\r\n            if (!outlineGroup) return;\r\n            outlineGroup.forEach(outline => {\r\n                if (updatedParams.includes(\"enable\")) {\r\n                    outline.visible = enable;\r\n                }\r\n                if (updatedParams.includes(\"size\")) {\r\n                    changeOutlineSize(outline, size);\r\n                }\r\n                if (updatedParams.includes(\"opacity\")) {\r\n                    changeOpacity(outline, opacity);\r\n                }\r\n                if (updatedParams.includes(\"color\")) {\r\n                    changeOutlineColor(outline, color);\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    applyMaterialParams = () => {\r\n        const { materialType } = this.props.model;\r\n        const current = this.props.materialParams;\r\n        const { materials } = this;\r\n        const paramsList = [\r\n            ...materialCommonParams,\r\n            ...materialExtraParams[materialType],\r\n        ];\r\n\r\n        materials.forEach(mat => {\r\n            directSetMatParams.forEach(param => {\r\n                if (!paramsList.includes(param)) return;\r\n                mat[param] = current[param];\r\n            });\r\n\r\n            matColorParams.forEach(param => {\r\n                if (!paramsList.includes(param)) return;\r\n                const currentColor = current[param];\r\n                const matColor = new THREE.Color(currentColor);\r\n                mat[param] = matColor;\r\n            });\r\n\r\n            if (!current.useTexture) {\r\n                if (mat.map) mat.backupMap = mat.map;\r\n                mat.map = null;\r\n            }\r\n\r\n            if (current.flatShading) {\r\n                mat.flatShading = current.flatShading;\r\n                mat.needsUpdate = true;\r\n            }\r\n\r\n            if (materialType === \"Toon\" && current.gradientMap !== \"none\") {\r\n                let newMap = null;\r\n                const nTones = parseInt(current.gradientMap);\r\n                newMap = createGradientMap(nTones);\r\n\r\n                materials.forEach(mat => {\r\n                    mat.gradientMap = newMap;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    updateMaterialParams = (prev, current) => {\r\n        const { materialType } = this.props.model;\r\n        const { useTexture, flatShading, gradientMap } = current;\r\n        const { materials } = this;\r\n        const paramsList = [\r\n            ...materialCommonParams,\r\n            ...materialExtraParams[materialType],\r\n        ];\r\n\r\n        directSetMatParams.forEach(param => {\r\n            if (!paramsList.includes(param) || prev[param] === current[param])\r\n                return;\r\n            materials.forEach(mat => (mat[param] = current[param]));\r\n        });\r\n\r\n        matColorParams.forEach(param => {\r\n            if (!paramsList.includes(param) || prev[param] === current[param])\r\n                return;\r\n            const currentColor = current[param];\r\n            const matColor = new THREE.Color(currentColor);\r\n            materials.forEach(mat => (mat[param] = matColor));\r\n        });\r\n\r\n        if (prev.useTexture !== useTexture) {\r\n            if (!useTexture) {\r\n                materials.forEach(mat => {\r\n                    mat.backupMap = mat.map;\r\n                    mat.map = null;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            } else {\r\n                materials.forEach(mat => {\r\n                    mat.map = mat.backupMap;\r\n                    delete mat.backupMap;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            }\r\n        }\r\n\r\n        if (prev.flatShading !== flatShading) {\r\n            materials.forEach(mat => {\r\n                mat.flatShading = flatShading;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n\r\n        if (prev.gradientMap !== gradientMap) {\r\n            let newMap = null;\r\n            if (gradientMap !== \"none\") {\r\n                const nTones = parseInt(gradientMap);\r\n                newMap = createGradientMap(nTones);\r\n            }\r\n\r\n            materials.forEach(mat => {\r\n                mat.gradientMap = newMap;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n    };\r\n\r\n    updateMaterial = (prev, current) => {\r\n        // update material type\r\n        if (prev.model.materialType !== current.model.materialType) {\r\n            const { materialType } = current.model;\r\n\r\n            changeMaterial({ target: this.models.main, materialType });\r\n            this.saveMaterialReference();\r\n\r\n            this.applyMaterialParams();\r\n            return;\r\n        }\r\n\r\n        this.updateMaterialParams(prev.materialParams, current.materialParams);\r\n    };\r\n\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeLights();\r\n            this.addLights(current);\r\n        }\r\n    };\r\n\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n            const { canvas } = this;\r\n            const newCanvas = this.renderer.domElement;\r\n            this.replaceCanvas(canvas, newCanvas);\r\n            this.canvas = newCanvas;\r\n            return;\r\n        }\r\n\r\n        if (!this.loadedFX.has(\"ascii\")) {\r\n            const { AsciiEffect } = await import(\r\n                \"three/examples/jsm/effects/AsciiEffect\"\r\n            );\r\n            this.loadedFX.add(\"ascii\");\r\n            this.fxConstructors.set(\"ascii\", AsciiEffect);\r\n            this.showAscii();\r\n        } else this.showAscii();\r\n\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n    };\r\n\r\n    showAscii = () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const AsciiEffect = this.fxConstructors.get(\"ascii\");\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n        this.effect.setSize(this.viewport.width, this.viewport.height);\r\n\r\n        const newCanvas = this.effect.domElement;\r\n        const currentCanvas = this.canvas;\r\n        newCanvas.style.color = color;\r\n        newCanvas.style.background = bgColor;\r\n\r\n        this.replaceCanvas(currentCanvas, newCanvas);\r\n        this.canvas = newCanvas;\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    setBackground = bgColor => {\r\n        this.scene.background =\r\n            bgColor !== \"transparent\" ? new THREE.Color(bgColor) : null;\r\n    };\r\n\r\n    replaceCanvas = (oldCanvas, newCanvas) => {\r\n        this.mount.removeChild(oldCanvas);\r\n        this.mount.appendChild(newCanvas);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n        const dt = this.clock.getDelta();\r\n        // Rotate the floor\r\n        this.floor.rotateY((this.props.rotateSpeed * dt * Math.PI) / 2);\r\n\r\n        this.mixers.forEach(mixer => mixer.update(dt));\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModelViewer;\r\n","import { lazy, Suspense, useContext, useCallback } from \"react\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"./context/SettingsContext\";\r\nimport ModelViewer from \"./ModelViewer\";\r\nimport \"./styles/Display.css\";\r\n\r\nimport { cameraPositions, controlsPositions } from \"./consts\";\r\n\r\nconst AniControl = lazy(() => import(\"./AniControl\"));\r\n\r\nfunction Display(props) {\r\n    const { viewport } = props;\r\n\r\n    const settings = useContext(SettingsContext);\r\n    const {\r\n        model: { id: modelId },\r\n        scene: { rotateSpeed, background: bgColor, initCameraPosition, lights },\r\n        app: { showAniControl, antiAliasing },\r\n    } = settings;\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n    const toggleCapture = useCallback(() => {\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"capture\",\r\n            value: \"enable\",\r\n        };\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const type = modelId[0];\r\n\r\n    const defaultCameraPosition = cameraPositions[modelId]\r\n        ? cameraPositions[modelId]\r\n        : cameraPositions[type];\r\n\r\n    const cameraPosition = initCameraPosition\r\n        ? initCameraPosition.map((n, i) =>\r\n              isNaN(n) ? defaultCameraPosition[i] : n\r\n          )\r\n        : defaultCameraPosition;\r\n\r\n    const controlsPosition = controlsPositions[modelId]\r\n        ? controlsPositions[modelId]\r\n        : controlsPositions[type];\r\n\r\n    return (\r\n        <div className=\"Display\">\r\n            {showAniControl && (\r\n                <div className=\"Display-AniControl\">\r\n                    <Suspense fallback={null}>\r\n                        <AniControl value={settings.animation.timeScale} />\r\n                    </Suspense>\r\n                </div>\r\n            )}\r\n            <ModelViewer\r\n                setIsLoading={props.setIsLoading}\r\n                capture={settings.capture}\r\n                toggleCapture={toggleCapture}\r\n                viewport={viewport}\r\n                cameraPosition={cameraPosition}\r\n                controlsPosition={controlsPosition}\r\n                model={settings.model}\r\n                materialParams={settings.materialParams}\r\n                outline={settings.outline}\r\n                animation={settings.animation}\r\n                rotateSpeed={rotateSpeed}\r\n                lights={lights}\r\n                bgColor={bgColor}\r\n                antiAliasing={antiAliasing}\r\n                ascii={settings.ascii}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n","import { lazy, Suspense, useState, useRef, useEffect, useContext } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\n\r\nimport Menu from \"@material-ui/icons/Menu\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport useStyles from \"./styles/MainPageStyles\";\r\n\r\nimport Display from \"./Display\";\r\nimport { SettingsContext } from \"./context/SettingsContext\";\r\nimport { setInitialSettings } from \"./helpers\";\r\n\r\nconst ControlPanel = lazy(() => import(\"./ControlPanel\"));\r\nconst SideBar = lazy(() => import(\"./SideBar\"));\r\n\r\nfunction MainPage({ location }) {\r\n    const classes = useStyles();\r\n\r\n    const [currentMode, setCurrentMode] = useState(\"model\");\r\n    const [sidebarOpen, toggleSidebarOpen] = useToggleState(true);\r\n    const [controlOpen, toggleControlOpen] = useToggleState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [initLoadDone, setInitLoadDone] = useState(false);\r\n    const {\r\n        app: { showSettings },\r\n    } = useContext(SettingsContext);\r\n\r\n    const viewerRef = useRef();\r\n    const [viewport, setViewport] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const params = location.pathname.split(\"/\");\r\n        setInitialSettings(params);\r\n        setInitLoadDone(true);\r\n\r\n        window.addEventListener(\"resize\", updateViewportSize);\r\n\r\n        return function () {\r\n            window.removeEventListener(\"resize\", updateViewportSize);\r\n        };\r\n    }, [location.pathname]);\r\n\r\n    const updateViewportSize = () => {\r\n        const height = viewerRef.current.clientHeight;\r\n        const width = viewerRef.current.clientWidth;\r\n        setViewport({ width, height });\r\n    };\r\n\r\n    const openControl = mode => {\r\n        toggleControlOpen();\r\n        setCurrentMode(mode);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <div className={classes.loadingMsg}>Loading...</div>}\r\n            <div className={classes.root}>\r\n                <Suspense fallback={null}>\r\n                    <CssBaseline />\r\n                    <ControlPanel\r\n                        mode={currentMode}\r\n                        open={controlOpen}\r\n                        toggleControlOpen={toggleControlOpen}\r\n                    />\r\n                    {initLoadDone && showSettings && (\r\n                        <>\r\n                            <button\r\n                                onClick={toggleSidebarOpen}\r\n                                className={classes.openSidebarButton}\r\n                            >\r\n                                <Menu />\r\n                            </button>\r\n\r\n                            <SideBar\r\n                                toggleSidebarOpen={toggleSidebarOpen}\r\n                                open={sidebarOpen}\r\n                                openControl={openControl}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </Suspense>\r\n                {initLoadDone && (\r\n                    <main ref={viewerRef} className={classes.content}>\r\n                        <Display\r\n                            setIsLoading={setIsLoading}\r\n                            viewport={viewport}\r\n                        />\r\n                    </main>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import { SettingsProvider } from \"./context/SettingsContext\";\r\n\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\nimport MainPage from \"./MainPage\";\r\n\r\nimport \"./styles/App.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <SettingsProvider>\r\n            <HashRouter>\r\n                <Route render={routeProps => <MainPage {...routeProps} />} />\r\n            </HashRouter>\r\n        </SettingsProvider>\r\n    );\r\n}\r\n\r\nexport const fbxSource = process.env.PUBLIC_URL;\r\n\r\nexport default App;\r\n","const faceOffset = {\r\n    c110018_02: { x: 0.043, y: -0.0625 }, // Opera Karina\r\n    c110370_01: { x: 0.043, y: -0.0625 }, // Lapis\r\n    c100015_04: { x: 0.05, y: -0.08 }, // Chelle\r\n    c110267_01: { x: 0.08, y: -0.03 }, // Hawk\r\n    c110050_02: { x: 0.07, y: 0.13 }, // HBerserker\r\n    c110291_01: { x: 0.07, y: 0.14 }, // Marth\r\n    c110354_01: { x: 0.07, y: 0.01 }, // Mega Man\r\n    c110345_01: { x: 0.08, y: -0.13 }, // Mitsuhide\r\n    c110266_01: { x: 0.01, y: 0.03 }, // Naveed\r\n    c110365_01: { x: 0.043, y: -0.0625 }, // Nevin\r\n    c110346_01: { x: 0.07, y: 0.08 }, // Nobunaga\r\n    c110366_01: { x: 0.043, y: -0.0625 }, // Pinon\r\n    c110299_02: { x: 0.07, y: 0.08 }, // RXZ\r\n    c110360_01: { x: 0.07, y: 0.14 }, // Tiki\r\n    c110307_01: { x: 0.08, y: -0.03 }, // Victor\r\n    c110322_01: { x: 0.043, y: 0.08 }, // Zhu Bajie\r\n    c110356_01: { x: 0.07, y: 0.08 }, // Gauld\r\n    c110300_01: { x: 0.07, y: -0.1 }, // Pipple\r\n    c110344_01: { x: 0.07, y: -0.02 }, // Yuya\r\n    c110053_03: { x: 0.043, y: -0.0625 }, // INefi\r\n    c110368_01: { x: 0.043, y: -0.0625 }, // Meene\r\n    c110367_01: { x: 0.043, y: -0.0625 }, // Ilia\r\n    c110003_02: { x: 0.043, y: -0.0625 }, // Gun Joe\r\n    c110270_02: { x: 0.043, y: -0.0625 }, // HMelsa\r\n    c110341_03: { x: 0.043, y: -0.0625 }, // Hakasha\r\n};\r\nexport default faceOffset;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nfunction useToggleState(initVal = false) {\r\n    const [state, setState] = useState(initVal);\r\n    const toggleState = useCallback(() => {\r\n        setState(state => !state);\r\n    }, [setState]);\r\n    return [state, toggleState];\r\n}\r\n\r\nexport default useToggleState;\r\n","export const DRAWER_WIDTH = \"16rem\";\r\nexport const DRAWER_BGCOLOR = \"#330000\";\r\n\r\nexport const baseUrl = \"https://dgk3593.github.io/dl-model/#/\";\r\n\r\nconst defaultAni = \"MWM_CMN+CMN_MWM_03\";\r\n\r\nexport const matParamsDetails = {\r\n    wireframe: {\r\n        name: \"Wireframe\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    useTexture: {\r\n        name: \"Texture\",\r\n        type: \"boolean\",\r\n        default: true,\r\n    },\r\n    transparent: {\r\n        name: \"Transparent\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    flatShading: {\r\n        name: \"Flat Shading\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    color: {\r\n        name: \"Color\",\r\n        type: \"color\",\r\n        default: \"#ffffff\",\r\n    },\r\n    emissive: {\r\n        name: \"Emissive\",\r\n        type: \"color\",\r\n        default: \"#000000\",\r\n    },\r\n    opacity: {\r\n        name: \"Opacity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    emissiveIntensity: {\r\n        name: \"Emissive Intensity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    specular: {\r\n        name: \"Specular\",\r\n        type: \"color\",\r\n        default: \"#111111\",\r\n    },\r\n    metalness: {\r\n        name: \"Metalness\",\r\n        type: \"percentage\",\r\n        default: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    roughness: {\r\n        name: \"Roughness\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    shininess: {\r\n        name: \"Shininess\",\r\n        type: \"number\",\r\n        default: 30,\r\n        min: 1,\r\n        max: 100,\r\n        step: 1,\r\n    },\r\n    gradientMap: {\r\n        name: \"Gradient Map\",\r\n        type: \"select\",\r\n        default: \"none\",\r\n        options: [\"none\", \"2 Tones\", \"3 Tones\", \"4 Tones\", \"5 Tones\"],\r\n    },\r\n};\r\n\r\nexport const directSetMatParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"emissiveIntensity\",\r\n    \"metalness\",\r\n    \"roughness\",\r\n    \"shininess\",\r\n];\r\n\r\nexport const matColorParams = [\"color\", \"emissive\", \"specular\"];\r\n\r\nconst defaultMatParams = {};\r\nObject.keys(matParamsDetails).forEach(key => {\r\n    defaultMatParams[key] = matParamsDetails[key].default;\r\n});\r\n\r\nconst defaultLights = [\r\n    {\r\n        lightId: \"0\",\r\n        type: \"Ambient\",\r\n        color: \"#444444\",\r\n        enable: true,\r\n        intensity: 1,\r\n    },\r\n    {\r\n        lightId: \"1\",\r\n        type: \"Directional\",\r\n        color: \"#ffffff\",\r\n        enable: true,\r\n        position: [50, 0, 100],\r\n        intensity: 0.8,\r\n    },\r\n];\r\n\r\nexport const asciiSet = [\r\n    \" .:-=+*#%@\",\r\n    \" .'`^\\\",:;Il!i~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$\",\r\n];\r\n\r\nexport const defaultSettings = {\r\n    model: {\r\n        materialType: \"Basic\",\r\n        id: \"c100001_01\",\r\n        texture: \"c100001_01\",\r\n        faceTexture: \"c100001_01\",\r\n        face: 2,\r\n        weaponRight: \"\",\r\n        weaponLeft: \"\",\r\n    },\r\n    materialParams: { ...defaultMatParams },\r\n    scene: {\r\n        rotateSpeed: 0,\r\n        background: \"#cccccc\",\r\n        initCameraPosition: null,\r\n        lights: defaultLights,\r\n    },\r\n    animation: {\r\n        code: defaultAni,\r\n        timeScale: 1,\r\n    },\r\n    app: {\r\n        sideContent: \"settings\",\r\n        showSettings: true,\r\n        showAniControl: true,\r\n        antiAliasing: false,\r\n    },\r\n    outline: {\r\n        enable: true,\r\n        size: 5, // 1 -> 10\r\n        color: \"#000000\",\r\n        opacity: 1, // 0.1 -> 10%, 1-> 100%\r\n    },\r\n    capture: {\r\n        enable: false,\r\n        supportedCodecs: [],\r\n        codec: \"\",\r\n    },\r\n    ascii: {\r\n        enable: false,\r\n        charSet: asciiSet[1],\r\n        invert: false,\r\n        color: \"#00ff00\",\r\n        bgColor: \"#000000\",\r\n    },\r\n};\r\n\r\nexport const initKey = {\r\n    id: { group: \"model\", key: \"id\" },\r\n    ft: { group: \"model\", key: \"faceTexture\" },\r\n    f: { group: \"model\", key: \"face\" },\r\n    wr: { group: \"model\", key: \"weaponRight\" },\r\n    wl: { group: \"model\", key: \"weaponLeft\" },\r\n    bg: { group: \"scene\", key: \"background\" },\r\n    cam: { group: \"scene\", key: \"initCameraPosition\" },\r\n    ts: { group: \"animation\", key: \"timeScale\" },\r\n    showAC: { group: \"app\", key: \"showAniControl\" },\r\n    showSettings: { group: \"app\", key: \"showSettings\" },\r\n    showOutline: { group: \"outline\", key: \"enable\" },\r\n    AA: { group: \"app\", key: \"antiAliasing\" },\r\n    rot: { group: \"scene\", key: \"rotateSpeed\" },\r\n    cc: { group: \"animation\", key: \"code\" },\r\n};\r\n\r\nexport const MATERIALS = [\"Basic\", \"Toon\", \"Lambert\", \"Phong\", \"Standard\"];\r\n\r\nexport const materialCommonParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"useTexture\",\r\n    \"color\",\r\n];\r\n\r\nexport const materialExtraParams = {\r\n    Basic: [],\r\n    Toon: [\"emissive\", \"emissiveIntensity\", \"gradientMap\"],\r\n    Lambert: [\"emissive\", \"emissiveIntensity\"],\r\n    Phong: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"specular\",\r\n        \"shininess\",\r\n        \"flatShading\",\r\n    ],\r\n    Standard: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"metalness\",\r\n        \"roughness\",\r\n        \"flatShading\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_CODE = {\r\n    Sword: \"SWD\",\r\n    Blade: \"KAT\",\r\n    Dagger: \"DAG\",\r\n    Axe: \"AXE\",\r\n    Lance: \"LAN\",\r\n    Bow: \"BOW\",\r\n    Wand: \"ROD\",\r\n    Staff: \"CAN\",\r\n    Manacaster: \"GUN\",\r\n};\r\n\r\nexport const WEAPON_LIST = [\r\n    \"Sword\",\r\n    \"Blade\",\r\n    \"Dagger\",\r\n    \"Axe\",\r\n    \"Lance\",\r\n    \"Bow\",\r\n    \"Wand\",\r\n    \"Staff\",\r\n    \"Manacaster\",\r\n];\r\n\r\nexport const GENDER_CODE = {\r\n    Male: 21,\r\n    Female: 23,\r\n};\r\n\r\nexport const COMBO_LENGTH = {\r\n    Axe: 5,\r\n    Bow: 6,\r\n    Staff: 5,\r\n    Dagger: 6,\r\n    Blade: 5,\r\n    Lance: 5,\r\n    Wand: 5,\r\n    Sword: 5,\r\n};\r\n\r\nexport const FS_LENGTH = {\r\n    Axe: 3,\r\n    Bow: 3,\r\n    Staff: 5,\r\n    Dagger: 3,\r\n    Blade: 3,\r\n    Lance: 4,\r\n    Wand: 3,\r\n    Sword: 3,\r\n};\r\n\r\nexport const FILTERS = {\r\n    rarity: [\"3\", \"4\", \"5\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_FILTERS = {\r\n    rarity: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\", \"None\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const spFaceTextures = {\r\n    c110300_01: \"ec110300_01\",\r\n};\r\n\r\nexport const incompatibleModels = new Set([\r\n    \"c100007_01\",\r\n    \"c100007_05\",\r\n    \"c100007_09\",\r\n    \"c100034_01\",\r\n    \"c100036_01\",\r\n    \"c100037_01\",\r\n    \"c100041_01\",\r\n]);\r\n\r\nexport const commonBG = {\r\n    green: \"#00ff00\",\r\n    black: \"#000000\",\r\n    grey: \"#cccccc\",\r\n    white: \"#ffffff\",\r\n};\r\n\r\nexport const CAM_PARAMS = {\r\n    angle: 45,\r\n    far: 300,\r\n    near: 0.01,\r\n};\r\n\r\nexport const cameraPositions = {\r\n    c: [0, 0.5, 1.5],\r\n    d: [3, 0.5, 6],\r\n    w: [2, 0, 0],\r\n    b: [1, 0.5, 6],\r\n    e: [1, 1, 4],\r\n    h: [1, 0.5, 3],\r\n    o: [0, 0.5, 8],\r\n    r: [3, 3, 20],\r\n\r\n    c100034_01: [0, 0.5, 1.75],\r\n    d210078_01: [3, 3, 20],\r\n    d210114_01: [3, 3, 20],\r\n    h0010001: [6, 0.5, 8],\r\n    h0010001_02: [2, 0, 0],\r\n    h0040101: [1, 0.5, 4],\r\n    r0070401: [30, 30, 100],\r\n    r0080401: [1, 2, 5],\r\n\r\n    smith: [1, 1, 2],\r\n};\r\n\r\nexport const controlsPositions = {\r\n    c: [0, 0.5, 0],\r\n    d: [0, 1, 0],\r\n    w: [0, 0, 0],\r\n    b: [0, 1, 0],\r\n    e: [0, 0.5, 0],\r\n    h: [0, 1, 0],\r\n    o: [0, 0, 0],\r\n    r: [0, 3, 0],\r\n\r\n    d210078_01: [0, 3, 0],\r\n    d210114_01: [0, 3, 0],\r\n    h0010001_02: [0, 3, 0],\r\n    r0070401: [0, 20, 0],\r\n    r0080401: [0, 2, 0],\r\n\r\n    smith: [0, 0.5, 0],\r\n};\r\n\r\nexport const faceOffsets = {\r\n    face1: { x: 2, y: 1 },\r\n    face2: { x: 0, y: 0 },\r\n    face3: { x: 1, y: 0 },\r\n    face4: { x: 2, y: 0 },\r\n    face5: { x: 3, y: 0 },\r\n    face6: { x: 0, y: -1 },\r\n    face7: { x: 1, y: -1 },\r\n    face8: { x: 2, y: -1 },\r\n    face9: { x: 3, y: -1 },\r\n};\r\n\r\nexport const videoCodecs = [\r\n    \"video/webm;codecs=h264\",\r\n    \"video/webm;codecs=vp9\",\r\n    \"video/webm;codecs=vp8\",\r\n    \"video/webm\",\r\n];\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_WIDTH, DRAWER_BGCOLOR } from \"../consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst drawerWidth = DRAWER_WIDTH;\r\nconst drawerBG = DRAWER_BGCOLOR;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"block\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        overflowY: \"scroll\",\r\n    },\r\n    drawerPaper: {\r\n        alignItems: \"center\",\r\n        backgroundColor: drawerBG,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        width: drawerWidth,\r\n        \"& button\": {\r\n            marginBottom: \"0.2rem\",\r\n        },\r\n    },\r\n    content: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        padding: 0,\r\n    },\r\n    openSidebarButton: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        margin: \"2rem\",\r\n        opacity: \"0.5\",\r\n        borderRadius: \"0.25rem\",\r\n        transition: \"0.5s all ease-in-out\",\r\n        backgroundColor: \"#cccccc\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            opacity: \"1\",\r\n        },\r\n    },\r\n    loadingMsg: {\r\n        position: \"absolute\",\r\n        zIndex: \"9999\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"white\",\r\n        fontSize: \"x-large\",\r\n        backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","export default __webpack_public_path__ + \"static/media/Rose-Petals.bc11ecc7.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}