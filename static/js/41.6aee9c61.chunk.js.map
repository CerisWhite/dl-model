{"version":3,"sources":["BaseViewer.js"],"names":["BaseViewer","disableInput","props","setIsLoading","enableInput","initialize","a","initScene","materials","outlines","models","modelInfo","loadMainModel","afterMainModelLoad","viewport","width","window","innerWidth","height","innerHeight","clock","THREE","scene","bgColor","floor","createInvisibleFloor","add","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","target","update","lights","addLights","loadedFX","Map","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","AAEnabled","antiAliasing","_AA","renderer","finalRenderer","setSize","canvas","domElement","animate","modelId","model","id","main","modelPath","getModelPath","loadModel","basicMainProcessing","forEach","enable","type","color","intensity","params","constructor","light","Object","entries","key","value","setValue","map","v","push","removeLights","remove","addToScene","removeEffects","materialType","isBlade","texturePath","analyzeWeaponCode","changeMaterial","forced","applyNewModelMat","outlineParams","outline","createOutline","updateViewer","prev","current","updateEnvironment","updateModel","otherUpdate","updateViewport","updateOutline","updateMaterial","updateLights","updateAscii","ascii","AA","updateMainModel","aspect","disposeMainModel","mainModel","disposeItem","replaceMainModel","beforeMainModelUpdate","afterMainModelUpdate","updateOutlineParams","values","flat","applyOutlineSettings","updatedKeys","keys","filter","length","saveMaterialReference","getMaterial","matParams","updateMatParams","prevParams","useTexture","materialParams","some","newCanvas","has","AsciiEffect","showAscii","charSet","invert","get","effect","style","background","rotateFloor","dt","rotateSpeed","Math","PI","rotateY","everyAnimate","getDelta","frameId","requestAnimationFrame","render","app","this","finishedInit","console","log","getUpdated","oldValue","subkeys","JSON","stringify","subkey","cancelAnimationFrame","mixer","renderLists","dispose","ref","el","enabled","allParams","paramList","getParamsList","filterObject","oldCanvas","_canvas","removeChild","appendChild","PureComponent"],"mappings":"6PAsCMA,E,4MA4DFC,aAAe,kBAAM,EAAKC,MAAMC,cAAa,I,EAE7CC,YAAc,kBAAM,EAAKF,MAAMC,cAAa,I,EAE5CE,W,sBAAa,8BAAAC,EAAA,6DACT,EAAKL,eAEL,EAAKM,YAEL,EAAKC,UAAY,GACjB,EAAKC,SAAW,GAChB,EAAKC,OAAS,GACd,EAAKC,UAAY,GARR,SASH,EAAKC,gBATF,mCAUH,KAAKC,0BAVF,aAUH,UAVG,QAYT,EAAKT,cAZI,4C,EAebG,UAAY,WAAO,IAAD,IAEd,EAAKO,SAAW,EAAKZ,MAAMY,UAAY,CACnCC,MAAOC,OAAOC,WACdC,OAAQF,OAAOG,aAInB,EAAKC,MAAQ,IAAIC,QAGjB,EAAKC,MAAQ,IAAID,QACjB,EAAKE,QAAU,EAAKrB,MAAMqB,QAG1B,EAAKC,MAAQC,cACb,EAAKH,MAAMI,IAAI,EAAKF,OAGpB,EAAKG,OAAS,IAAIN,oBACdO,IAAWC,MACX,EAAKf,SAASC,MAAQ,EAAKD,SAASI,OACpCU,IAAWE,KACXF,IAAWG,KAEf,EAAKC,eAAiB,EAAK9B,MAAM8B,gBAAkB,CAAC,EAAG,EAAG,KAC1D,IAAKL,OAAOM,UAASC,IAArB,oBAA4B,EAAKF,iBACjC,EAAKL,OAAOQ,yBAGZ,EAAKC,SAAW,IAAIC,IAAc,EAAKV,OAAQ,EAAKW,OACpD,EAAKC,iBAAmB,EAAKrC,MAAMqC,kBAAoB,CAAC,EAAG,EAAG,IAC9D,IAAKH,SAASI,QAAON,IAArB,oBAA4B,EAAKK,mBACjC,EAAKH,SAASK,SAjCA,IAoCNC,EAAW,EAAKxC,MAAhBwC,OACR,EAAKC,UAAUD,GAGf,EAAKE,SAAW,IAAIC,IAGpB,EAAKC,WAAa,IAAIzB,gBAAoB,CACtC0B,WAAW,EACXC,OAAO,IAEX,EAAKF,WAAWG,eAAiB5B,eAEjC,EAAK6B,aAAe,IAAI7B,gBAAoB,CACxC0B,WAAW,EACXC,OAAO,IAEX,EAAKE,aAAaD,eAAiB5B,eAEnC,IAAM8B,EAAY,EAAKjD,MAAMkD,aAC7B,EAAKC,IAAMF,EAEX,EAAKG,SAAWH,EAAY,EAAKL,WAAa,EAAKI,aAEnD,EAAKK,cAAgB,EAAKD,SA5DZ,MA6DY,EAAKpD,MAAMY,SAA7BC,EA7DM,EA6DNA,MAAOG,EA7DD,EA6DCA,OACf,EAAKqC,cAAcC,QAAQzC,EAAOG,GAElC,IAAMuC,EAAS,EAAKF,cAAcG,WAClC,EAAKD,OAASA,EAEd,EAAKE,W,EAGT/C,c,sBAAgB,gCAAAN,EAAA,6DACNsD,EAAU,EAAK1D,MAAM2D,MAAMC,GACjC,EAAKnD,UAAUoD,KAAOH,EAEhBI,EAAYC,YAAaL,GAJnB,SAKQM,YAAUF,GALlB,cAKNH,EALM,OAMZ,EAAKnD,OAAOqD,KAAOF,EAEnB,EAAKM,oBAAoBN,GARb,8D,EA4BhBlB,UAAY,SAAAD,GACR,EAAKA,OAAS,GACdA,EAAO0B,SAAQ,YAAoD,IAAD,EAAhDC,EAAgD,EAAhDA,OAAQC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,UAAcC,EAAa,qDAC9D,GAAKJ,EAAL,CAIA,IAHA,IAAMK,EAAW,UAAMJ,EAAN,SACXK,EAAQ,IAAItD,EAAMqD,GAAaH,EAAOC,GAE5C,MAA2BI,OAAOC,QAAQJ,GAA1C,eAAmD,CAAC,IAAD,sBAAvCK,EAAuC,KAAlCC,EAAkC,KAC/C,OAAQD,GACJ,IAAK,WACD,IAAME,EAAWD,EAAME,KAAI,SAAAC,GAAC,OAAIA,GAAK,MACrC,EAAAP,EAAM1C,UAASC,IAAf,oBAAsB8C,IACtB,MACJ,QACIL,EAAMG,GAAOC,GAGzB,EAAKzD,MAAMI,IAAIiD,GACf,EAAKjC,OAAOyC,KAAKR,Q,EAIzBS,aAAe,kBAAM,EAAK1C,OAAO0B,SAAQ,SAAAO,GAAK,OAAI,EAAKrD,MAAM+D,OAAOV,O,EAEpEW,WAAa,SAAAzB,GAAK,OAAI,EAAKrC,MAAME,IAAImC,I,EAErCM,oBAAsB,WAClB,IAAMN,EAAQ,EAAKnD,OAAOqD,KAE1BwB,YAAc1B,GAHU,IAIhB2B,EAAiB,EAAKtF,MAAM2D,MAA5B2B,aACF5B,EAAU,EAAK1D,MAAM2D,MAAMC,GACjC,GAAI2B,YAAQ7B,GAAU,CAAC,IACX8B,EAAgBC,YAAkB,GAAD,OAAI/B,EAAJ,MAAjC8B,YACRE,YAAe/B,EAAO,CAAE2B,eAAcE,qBAEtCE,YAAe/B,EAAO,CAAE2B,eAAcK,QAAQ,IAGlD,EAAKC,iBAAiBjC,GAEtB,IAAMkC,EAAgB,EAAK7F,MAAM8F,QACjC,EAAKvF,SAASsD,KAAOkC,YAAcpC,EAAOkC,GAE1C,EAAKT,WAAWzB,I,EAGpBqC,aAAe,SAACC,EAAMC,GAAa,IAAD,IAC9B,EAAKC,kBAAkBF,EAAMC,GAC7B,EAAKE,YAAYH,EAAMC,GACvB,gBAAKG,mBAAL,gBAAmBJ,EAAMC,I,EAG7BC,kBAAoB,SAACF,EAAMC,GACvB,EAAKI,eAAeL,EAAKrF,SAAUsF,EAAQtF,UAC3C,EAAK2F,cAAcN,EAAKH,QAASI,EAAQJ,SACzC,EAAKU,eAAeP,EAAMC,GAC1B,EAAKO,aAAaR,EAAKzD,OAAQ0D,EAAQ1D,QACvC,EAAKkE,YAAYT,EAAKU,MAAOT,EAAQS,OAGjCV,EAAK5E,UAAY6E,EAAQ7E,UACzB,EAAKA,QAAU6E,EAAQ7E,SAG3B,EAAKuF,GAAKV,EAAQhD,c,EAGtBkD,YAAc,SAACH,EAAMC,GACjB,EAAKW,gBAAgBZ,EAAKtC,MAAOuC,EAAQvC,Q,EAG7C2C,eAAiB,SAACL,EAAMC,GAAa,IACzBrF,EAAkBqF,EAAlBrF,MAAOG,EAAWkF,EAAXlF,OACXiF,EAAKpF,QAAUA,GAASoF,EAAKjF,SAAWA,IAE5C,EAAKJ,SAASC,MAAQA,EACtB,EAAKD,SAASI,OAASA,EAEvB,EAAKqC,cAAcC,QAAQzC,EAAOG,GAClC,EAAKS,OAAOqF,OAASjG,EAAQG,EAC7B,EAAKS,OAAOQ,2B,EAGhB8E,iBAAmB,WACf,IAAMC,EAAY,EAAKxG,OAAOqD,KAC9B,EAAKvC,MAAM6D,OAAO6B,GAClBC,YAAYD,I,EAGhBE,iB,sBAAmB,sBAAA9G,EAAA,6DACf,EAAKL,eAEL,EAAKgH,mBAHU,SAIT,EAAKrG,gBAJI,OAKf,EAAKkF,iBAAiB,EAAKpF,OAAOqD,MAElC,EAAK3D,cAPU,2C,EAUnB2G,gB,uCAAkB,WAAOZ,EAAMC,GAAb,uBAAA9F,EAAA,yDACRsD,EAAUwC,EAAQtC,GACJqC,EAAKrC,KAAOF,EAFlB,wDAKd,gBAAKyD,6BAAL,iBALc,SAMR,EAAKD,mBANG,OAOd,gBAAKE,4BAAL,iBAPc,2C,0DAUlBC,oBAAsB,SAAA9E,GACDmC,OAAO4C,OAAO,EAAK/G,UAAUgH,OACrCrD,SAAQ,SAAA4B,GACb0B,YAAqB1B,EAASvD,O,EAItCgE,cAAgB,SAACN,EAAMC,GACnB,GAAID,IAASC,EAAb,CAEA,IAAMuB,EAAc/C,OAAOgD,KAAKxB,GAASyB,QACrC,SAAA/C,GAAG,OAAIqB,EAAKrB,KAASsB,EAAQtB,MAEjC,GAA2B,IAAvB6C,EAAYG,OAAhB,CAEA,IAAMrF,EAAS,IAAII,IAAI8E,EAAY1C,KAAI,SAAAH,GAAG,MAAI,CAACA,EAAKsB,EAAQtB,QAC5D,EAAKyC,oBAAoB9E,M,EAG7BsF,sBAAwB,WACpB,IAAMb,EAAY,EAAKxG,OAAOqD,KAC9B,EAAKvD,UAAYwH,YAAYd,I,EAUjCpB,iBAAmB,SAAAjC,GACf,IAAMY,EAAS,EAAKwD,UAEpBC,YAAgBrE,EAAO,CAAEsE,WADH,CAAEC,YAAY,GACgB3D,Y,EAGxDiC,eAAiB,SAACP,EAAMC,GACpB,GAAID,IAASC,EAAb,CADgC,IAGxBZ,EAAiBY,EAAQvC,MAAzB2B,aACF0B,EAAY,EAAKxG,OAAOqD,KACxBoE,EAAahC,EAAKkC,eACpBlC,EAAKtC,MAAM2B,eAAiBA,GAC5BI,YAAe,EAAKlF,OAAOqD,KAAM,CAAEyB,iBAEvC,IAAMf,EAAS,EAAKwD,UACpBC,YAAgBhB,EAAW,CAAEiB,aAAY1D,a,EAG7CkC,aAAe,SAACR,EAAMC,GACdD,IAASC,IACT,EAAKhB,eACL,EAAKzC,UAAUyD,K,EAIvBQ,Y,uCAAc,WAAOT,EAAMC,GAAb,mBAAA9F,EAAA,yDACMsE,OAAOgD,KAAKzB,GAAMmC,MAC9B,SAAAxD,GAAG,OAAIqB,EAAKrB,KAASsB,EAAQtB,MAFvB,oDAMSsB,EAAX/B,OANE,uBAQN,EAAKd,cAAgB,EAAKD,SACpBiF,EAAY,EAAKjF,SAASI,WAChC,EAAKD,OAAS8E,EAVR,6BAcL,EAAK3F,SAAS4F,IAAI,SAdb,kCAewB,+BAfxB,iBAeEC,EAfF,EAeEA,YAGR,EAAK7F,SAASV,IAAI,QAASuG,GAC3B,EAAKC,YAnBC,wBAoBH,EAAKA,YApBF,QAsBV,EAAKnF,cAAcC,QAAQ,EAAK1C,SAASC,MAAO,EAAKD,SAASI,QAtBpD,4C,0DAyBdwH,UAAY,WAAO,IAAD,EAC8B,EAAKxI,MAAM2G,MAA/C8B,EADM,EACNA,QAASpE,EADH,EACGA,MAAOhD,EADV,EACUA,QAASqH,EADnB,EACmBA,OAC3BH,EAAc,EAAK7F,SAASiG,IAAI,SAEtC,EAAKC,OAAS,IAAIL,EAAY,EAAKnF,SAAUqF,EAAS,CAAEC,WAJ1C,MAMY,EAAK9H,SAAvBC,EANM,EAMNA,MAAOG,EAND,EAMCA,OACf,EAAK4H,OAAOtF,QAAQzC,EAAOG,GAE3B,IAAMqH,EAAY,EAAKO,OAAOpF,WAC9B6E,EAAUQ,MAAMxE,MAAQA,EACxBgE,EAAUQ,MAAMC,WAAazH,EAC7B,EAAKkC,OAAS8E,EAEd,EAAKhF,cAAgB,EAAKuF,Q,EAmB9BG,YAAc,SAAAC,GAAO,IACTC,EAAgB,EAAKjJ,MAArBiJ,YACR,GAAKA,EAAL,CAEA,IAAMtH,EAASsH,EAAcD,EAAKE,KAAKC,GAAM,EAC7C,EAAK7H,MAAM8H,QAAQzH,K,EAGvB0H,aAAe,WACX,IAAML,EAAK,EAAK9H,MAAMoI,WACtB,EAAKP,YAAYC,I,EAGrBvF,QAAU,WACN,EAAK8F,QAAUC,sBAAsB,EAAK/F,SAE1C,EAAK4F,eAEL,EAAKhG,cAAcoG,OAAO,EAAKrI,MAAO,EAAKK,S,mLAla3CX,OAAO4I,IAAMC,K,SAKPA,KAAKxJ,a,OACXwJ,KAAKC,cAAe,E,+IAGL3D,GACf,GAAK0D,KAAKC,aAAV,CACA,IAAM1D,EAAUyD,KAAK3J,MAGrB6J,QAAQC,IAAI,WACIC,YAAW9D,EAAMC,GACzBhC,SAAQ,YAAmB,IAAD,mBAAhBU,EAAgB,KAAXC,EAAW,KACxBmF,EAAW/D,EAAKrB,GAChBqF,EAAUvF,OAAOgD,KAAK7C,GACL,IAAnBoF,EAAQrC,QAAiC,kBAAV/C,EAC/BgF,QAAQC,IAAR,UACOlF,EADP,aACesF,KAAKC,UAAUH,GAD9B,eAC8CE,KAAKC,UAC3CtF,KAIRoF,EAAQ/F,SAAQ,SAAAkG,GACRJ,EAASI,KAAYvF,EAAMuF,IAC3BP,QAAQC,IAAR,UACOlF,EADP,YACcwF,EADd,aACyBF,KAAKC,UACtBH,EAASI,IAFjB,eAGYF,KAAKC,UAAUtF,EAAMuF,YAOjDT,KAAK3D,aAAaC,EAAMC,M,6CAIxBmE,qBAAqBV,KAAKJ,SAC1BtC,YAAY0C,KAAKvI,OACjBuI,KAAKW,MAAQ,KACbX,KAAKzI,MAAQ,KACbyI,KAAKlI,OAAS,KACdkI,KAAKzH,SAAW,KAChByH,KAAKvI,MAAQ,KACbuI,KAAKvG,SAAW,KAChBuG,KAAK/G,WAAW2H,YAAYC,UAC5Bb,KAAK/G,WAAW4H,UAChBb,KAAK/G,WAAa,KAClB+G,KAAK3G,aAAauH,YAAYC,UAC9Bb,KAAK3G,aAAawH,UAClBb,KAAK3G,aAAe,O,+BA8Wd,IAAD,OACL,OACI,qBACIyH,IAAK,SAAAC,GACD,EAAKtI,MAAQsI,O,uBA1QtBC,GACH,GAAIA,IAAYhB,KAAKxG,IAArB,CAEAwG,KAAKxG,IAAMwH,EACXhB,KAAKvG,SAAWuH,EAAUhB,KAAK/G,WAAa+G,KAAK3G,aAJrC,MAKc2G,KAAK/I,SAAvBC,EALI,EAKJA,MAAOG,EALH,EAKGA,OAGf,GAFA2I,KAAKvG,SAASE,QAAQzC,EAAOG,IAEzB2I,KAAK3J,MAAM2G,MAAMxC,OAArB,CAEAwF,KAAKtG,cAAgBsG,KAAKvG,SAE1B,IAAMiF,EAAYsB,KAAKvG,SAASI,WAChCmG,KAAKpG,OAAS8E,M,gCA0Id,IAAMuC,EAAYjB,KAAK3J,MAAMmI,eACrB7C,EAAiBqE,KAAK3J,MAAM2D,MAA5B2B,aACFuF,EAAYC,YAAcxF,GAChC,OAAOyF,YAAaH,EAAWC,K,4BAuEvBxG,GACRsF,KAAKvI,MAAM0H,WACG,gBAAVzE,EAA0B,IAAIlD,QAAYkD,GAAS,O,2BAGhDd,GACP,IAAMyH,EAAYrB,KAAKsB,QACvBD,GAAarB,KAAKvH,MAAM8I,YAAYF,GACpCrB,KAAKvH,MAAM+I,YAAY5H,GACvBoG,KAAKsB,QAAU1H,G,eAIf,OAAOoG,KAAKsB,Y,GA/YKG,iBAkbVtL","file":"static/js/41.6aee9c61.chunk.js","sourcesContent":["/* \r\n################################################\r\n# Base Viewer that supports adding / updating:\r\n#    - 1 main model\r\n#    - auto rotate\r\n#    - viewport\r\n#    - material\r\n#    - background color\r\n#    - lighting\r\n#    - anti aliasing\r\n#    - ASCII mode\r\n################################################\r\n*/\r\n\r\nimport { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { CAM_PARAMS } from \"./consts\";\r\nimport { isBlade } from \"./helpers\";\r\nimport {\r\n    createInvisibleFloor,\r\n    analyzeWeaponCode,\r\n    getUpdated,\r\n    filterObject,\r\n    getModelPath,\r\n    loadModel,\r\n    getMaterial,\r\n    disposeItem,\r\n    createOutline,\r\n    applyOutlineSettings,\r\n    getParamsList,\r\n    changeMaterial,\r\n    updateMatParams,\r\n    removeEffects,\r\n} from \"./viewerHelpers\";\r\n\r\nclass BaseViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        window.app = this;\r\n\r\n        // const { fbx2json } = await import(\"./fbx2json/fbx2json.js\");\r\n        // await fbx2json();\r\n\r\n        await this.initialize();\r\n        this.finishedInit = true;\r\n    }\r\n\r\n    componentDidUpdate(prev) {\r\n        if (!this.finishedInit) return;\r\n        const current = this.props;\r\n\r\n        // print updated props to console\r\n        console.log(\"Updated\");\r\n        const updated = getUpdated(prev, current);\r\n        updated.forEach(([key, value]) => {\r\n            const oldValue = prev[key];\r\n            const subkeys = Object.keys(value);\r\n            if (subkeys.length === 0 || typeof value === \"string\") {\r\n                console.log(\r\n                    `${key}: ${JSON.stringify(oldValue)} to ${JSON.stringify(\r\n                        value\r\n                    )}`\r\n                );\r\n            } else {\r\n                subkeys.forEach(subkey => {\r\n                    if (oldValue[subkey] !== value[subkey]) {\r\n                        console.log(\r\n                            `${key}.${subkey}: ${JSON.stringify(\r\n                                oldValue[subkey]\r\n                            )} to ${JSON.stringify(value[subkey])}`\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        this.updateViewer(prev, current);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixer = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n\r\n    disableInput = () => this.props.setIsLoading(true);\r\n\r\n    enableInput = () => this.props.setIsLoading(false);\r\n\r\n    initialize = async () => {\r\n        this.disableInput();\r\n\r\n        this.initScene();\r\n\r\n        this.materials = [];\r\n        this.outlines = {};\r\n        this.models = {};\r\n        this.modelInfo = {};\r\n        await this.loadMainModel();\r\n        await this.afterMainModelLoad?.();\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    initScene = () => {\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.bgColor = this.props.bgColor;\r\n\r\n        // Floor for auto rotate\r\n        this.floor = createInvisibleFloor();\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addLights(lights);\r\n\r\n        // effects\r\n        this.loadedFX = new Map();\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        const AAEnabled = this.props.antiAliasing;\r\n        this._AA = AAEnabled;\r\n\r\n        this.renderer = AAEnabled ? this.rendererAA : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        const { width, height } = this.props.viewport;\r\n        this.finalRenderer.setSize(width, height);\r\n\r\n        const canvas = this.finalRenderer.domElement;\r\n        this.canvas = canvas;\r\n\r\n        this.animate();\r\n    };\r\n\r\n    loadMainModel = async () => {\r\n        const modelId = this.props.model.id;\r\n        this.modelInfo.main = modelId;\r\n\r\n        const modelPath = getModelPath(modelId);\r\n        const model = await loadModel(modelPath);\r\n        this.models.main = model;\r\n\r\n        this.basicMainProcessing(model);\r\n        return;\r\n    };\r\n\r\n    set AA(enabled) {\r\n        if (enabled === this._AA) return;\r\n\r\n        this._AA = enabled;\r\n        this.renderer = enabled ? this.rendererAA : this.rendererNoAA;\r\n        const { width, height } = this.viewport;\r\n        this.renderer.setSize(width, height);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const newCanvas = this.renderer.domElement;\r\n        this.canvas = newCanvas;\r\n    }\r\n\r\n    addLights = lights => {\r\n        this.lights = [];\r\n        lights.forEach(({ enable, type, color, intensity, ...params }) => {\r\n            if (!enable) return;\r\n            const constructor = `${type}Light`;\r\n            const light = new THREE[constructor](color, intensity);\r\n\r\n            for (const [key, value] of Object.entries(params)) {\r\n                switch (key) {\r\n                    case \"position\":\r\n                        const setValue = value.map(v => v || 0);\r\n                        light.position.set(...setValue);\r\n                        break;\r\n                    default:\r\n                        light[key] = value;\r\n                }\r\n            }\r\n            this.scene.add(light);\r\n            this.lights.push(light);\r\n        });\r\n    };\r\n\r\n    removeLights = () => this.lights.forEach(light => this.scene.remove(light));\r\n\r\n    addToScene = model => this.floor.add(model);\r\n\r\n    basicMainProcessing = () => {\r\n        const model = this.models.main;\r\n\r\n        removeEffects(model);\r\n        const { materialType } = this.props.model;\r\n        const modelId = this.props.model.id;\r\n        if (isBlade(modelId)) {\r\n            const { texturePath } = analyzeWeaponCode(`${modelId}n`);\r\n            changeMaterial(model, { materialType, texturePath });\r\n        } else {\r\n            changeMaterial(model, { materialType, forced: true });\r\n        }\r\n\r\n        this.applyNewModelMat(model);\r\n\r\n        const outlineParams = this.props.outline;\r\n        this.outlines.main = createOutline(model, outlineParams);\r\n\r\n        this.addToScene(model);\r\n    };\r\n\r\n    updateViewer = (prev, current) => {\r\n        this.updateEnvironment(prev, current);\r\n        this.updateModel(prev, current);\r\n        this.otherUpdate?.(prev, current);\r\n    };\r\n\r\n    updateEnvironment = (prev, current) => {\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n        this.updateOutline(prev.outline, current.outline);\r\n        this.updateMaterial(prev, current);\r\n        this.updateLights(prev.lights, current.lights);\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n\r\n        // Update background color\r\n        if (prev.bgColor !== current.bgColor) {\r\n            this.bgColor = current.bgColor;\r\n        }\r\n\r\n        this.AA = current.antiAliasing;\r\n    };\r\n\r\n    updateModel = (prev, current) => {\r\n        this.updateMainModel(prev.model, current.model);\r\n    };\r\n\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.viewport.width = width;\r\n        this.viewport.height = height;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    disposeMainModel = () => {\r\n        const mainModel = this.models.main;\r\n        this.floor.remove(mainModel);\r\n        disposeItem(mainModel);\r\n    };\r\n\r\n    replaceMainModel = async () => {\r\n        this.disableInput();\r\n\r\n        this.disposeMainModel();\r\n        await this.loadMainModel();\r\n        this.applyNewModelMat(this.models.main);\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        const mainUpdated = prev.id !== modelId;\r\n        if (!mainUpdated) return;\r\n\r\n        this.beforeMainModelUpdate?.();\r\n        await this.replaceMainModel();\r\n        this.afterMainModelUpdate?.();\r\n    };\r\n\r\n    updateOutlineParams = update => {\r\n        const outlines = Object.values(this.outlines).flat();\r\n        outlines.forEach(outline => {\r\n            applyOutlineSettings(outline, update);\r\n        });\r\n    };\r\n\r\n    updateOutline = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const updatedKeys = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedKeys.length === 0) return;\r\n\r\n        const update = new Map(updatedKeys.map(key => [key, current[key]]));\r\n        this.updateOutlineParams(update);\r\n    };\r\n\r\n    saveMaterialReference = () => {\r\n        const mainModel = this.models.main;\r\n        this.materials = getMaterial(mainModel);\r\n    };\r\n\r\n    get matParams() {\r\n        const allParams = this.props.materialParams;\r\n        const { materialType } = this.props.model;\r\n        const paramList = getParamsList(materialType);\r\n        return filterObject(allParams, paramList);\r\n    }\r\n\r\n    applyNewModelMat = model => {\r\n        const params = this.matParams;\r\n        const defaultParams = { useTexture: true };\r\n        updateMatParams(model, { prevParams: defaultParams, params });\r\n    };\r\n\r\n    updateMaterial = (prev, current) => {\r\n        if (prev === current) return;\r\n        // update material type\r\n        const { materialType } = current.model;\r\n        const mainModel = this.models.main;\r\n        const prevParams = prev.materialParams;\r\n        if (prev.model.materialType !== materialType) {\r\n            changeMaterial(this.models.main, { materialType });\r\n        }\r\n        const params = this.matParams;\r\n        updateMatParams(mainModel, { prevParams, params });\r\n    };\r\n\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeLights();\r\n            this.addLights(current);\r\n        }\r\n    };\r\n\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n            const newCanvas = this.renderer.domElement;\r\n            this.canvas = newCanvas;\r\n            return;\r\n        }\r\n\r\n        if (!this.loadedFX.has(\"ascii\")) {\r\n            const { AsciiEffect } = await import(\r\n                \"three/examples/jsm/effects/AsciiEffect\"\r\n            );\r\n            this.loadedFX.set(\"ascii\", AsciiEffect);\r\n            this.showAscii();\r\n        } else this.showAscii();\r\n\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n    };\r\n\r\n    showAscii = () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const AsciiEffect = this.loadedFX.get(\"ascii\");\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n\r\n        const { width, height } = this.viewport;\r\n        this.effect.setSize(width, height);\r\n\r\n        const newCanvas = this.effect.domElement;\r\n        newCanvas.style.color = color;\r\n        newCanvas.style.background = bgColor;\r\n        this.canvas = newCanvas;\r\n\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    set bgColor(color) {\r\n        this.scene.background =\r\n            color !== \"transparent\" ? new THREE.Color(color) : null;\r\n    }\r\n\r\n    set canvas(canvas) {\r\n        const oldCanvas = this._canvas;\r\n        oldCanvas && this.mount.removeChild(oldCanvas);\r\n        this.mount.appendChild(canvas);\r\n        this._canvas = canvas;\r\n    }\r\n\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    rotateFloor = dt => {\r\n        const { rotateSpeed } = this.props;\r\n        if (!rotateSpeed) return;\r\n\r\n        const angle = (rotateSpeed * dt * Math.PI) / 2;\r\n        this.floor.rotateY(angle);\r\n    };\r\n\r\n    everyAnimate = () => {\r\n        const dt = this.clock.getDelta();\r\n        this.rotateFloor(dt);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n\r\n        this.everyAnimate();\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default BaseViewer;\r\n"],"sourceRoot":""}