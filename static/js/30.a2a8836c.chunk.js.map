{"version":3,"sources":["MaterialParamsSetting.js","MaterialSettings.js"],"names":["MaterialParamsSetting","matType","materialType","openControl","settings","useContext","SettingsContext","dispatch","DispatchContext","currentSettings","materialParams","paramsList","commonParams","extraParams","updateMatParam","name","value","action","type","key","toggleSetting","event","paramName","currentTarget","handleColorBtnClick","e","dataset","generateControl","paramsDetails","currentValue","Button","fullWidth","variant","onClick","createToggleButton","matParamsDetails","min","max","step","className","Slider","onChange","_","newValue","createSlider","color","style","backgroundColor","complementaryColor","textShadow","data-value","createColorButton","selectOptions","options","map","option","MenuItem","Select","target","createSelectBox","generateParamText","param","settingsList","MaterialSettings","useToggleState","expand","toggleExpand","model","MATERIALS","mat","IconButton","size","stopPropagation","Collapse","in","timeout","unmountOnExit"],"mappings":"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","file":"static/js/30.a2a8836c.chunk.js","sourcesContent":["import { Fragment, useContext } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport {\r\n    materialCommonParams as commonParams,\r\n    materialExtraParams as extraParams,\r\n    matParamsDetails,\r\n    matParamsDetails as paramsDetails,\r\n} from \"./consts\";\r\nimport { complementaryColor } from \"./helpers\";\r\n\r\nimport { DispatchContext, SettingsContext } from \"./context/SettingsContext\";\r\n\r\nfunction MaterialParamsSetting({ materialType: matType, openControl }) {\r\n    const settings = useContext(SettingsContext);\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    const currentSettings = settings.materialParams;\r\n\r\n    const paramsList = [...commonParams, ...extraParams[matType]];\r\n\r\n    const updateMatParam = (name, value) => {\r\n        const action = {\r\n            type: \"update\",\r\n            key: \"materialParams\",\r\n            value: { [name]: value },\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const toggleSetting = event => {\r\n        const paramName = event.currentTarget.value;\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"materialParams\",\r\n            value: paramName,\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const handleSliderChange = key => (_, newValue) => {\r\n        updateMatParam(key, newValue);\r\n    };\r\n\r\n    const handleColorBtnClick = e => {\r\n        openControl(e.currentTarget.dataset.value);\r\n    };\r\n\r\n    const handleSelectChange = key => e => {\r\n        updateMatParam(key, e.target.value);\r\n    };\r\n\r\n    const createToggleButton = name => {\r\n        const currentValue = currentSettings[name];\r\n        return (\r\n            <div>\r\n                <Button\r\n                    value={name}\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    onClick={toggleSetting}\r\n                >\r\n                    {currentValue ? \"ON\" : \"OFF\"}\r\n                </Button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const createColorButton = name => {\r\n        const color = currentSettings[name];\r\n        return (\r\n            <Button\r\n                fullWidth\r\n                style={{\r\n                    backgroundColor: color,\r\n                    color: complementaryColor(color),\r\n                    textShadow: `0px 0px 3px white`,\r\n                }}\r\n                data-value={`materialParams-${name}`}\r\n                onClick={handleColorBtnClick}\r\n            >\r\n                {color}\r\n            </Button>\r\n        );\r\n    };\r\n\r\n    const createSlider = name => {\r\n        const currentValue = currentSettings[name];\r\n        const { min, max, step } = matParamsDetails[name];\r\n        return (\r\n            <div className=\"AdvancedSettingsGroup-slider\">\r\n                <Slider\r\n                    value={currentValue}\r\n                    min={min}\r\n                    max={max}\r\n                    step={step}\r\n                    onChange={handleSliderChange(name)}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const createSelectBox = name => {\r\n        const currentValue = currentSettings[name];\r\n        const { options } = matParamsDetails[name];\r\n        const selectOptions = options.map(option => (\r\n            <MenuItem value={option} key={option}>\r\n                {option}\r\n            </MenuItem>\r\n        ));\r\n        return (\r\n            <div>\r\n                <Select\r\n                    fullWidth\r\n                    value={currentValue}\r\n                    onChange={handleSelectChange(name)}\r\n                >\r\n                    {selectOptions}\r\n                </Select>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const generateControl = paramName => {\r\n        const type = paramsDetails[paramName].type;\r\n        switch (type) {\r\n            case \"boolean\":\r\n                return createToggleButton(paramName);\r\n            case \"number\":\r\n            case \"percentage\":\r\n                return createSlider(paramName);\r\n            case \"color\":\r\n                return createColorButton(paramName);\r\n            case \"select\":\r\n                return createSelectBox(paramName);\r\n            default:\r\n                return currentSettings[paramName];\r\n        }\r\n    };\r\n\r\n    const generateParamText = param => {\r\n        const type = paramsDetails[param].type;\r\n        switch (type) {\r\n            case \"number\":\r\n                return `${paramsDetails[param].name}: ${currentSettings[param]}`;\r\n            case \"percentage\":\r\n                return `${paramsDetails[param].name}: ${~~(\r\n                    currentSettings[param] * 100\r\n                )}%`;\r\n            default:\r\n                return paramsDetails[param].name;\r\n        }\r\n    };\r\n\r\n    const settingsList = paramsList.map(param => {\r\n        return (\r\n            <Fragment key={param}>\r\n                <div className=\"AdvancedSettingsGroup-optionName\">\r\n                    {generateParamText(param)}\r\n                </div>\r\n                <>{generateControl(param)}</>\r\n            </Fragment>\r\n        );\r\n    });\r\n\r\n    return <>{settingsList}</>;\r\n}\r\n\r\nexport default MaterialParamsSetting;\r\n","import { useContext } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MaterialParamsSetting from \"./MaterialParamsSetting\";\r\n\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@material-ui/icons/KeyboardArrowUp\";\r\n\r\nimport { DispatchContext, SettingsContext } from \"./context/SettingsContext\";\r\nimport \"./styles/AdvancedSettingsGroup.css\";\r\nimport { MATERIALS } from \"./consts\";\r\n\r\nfunction MaterialSettings({ openControl }) {\r\n    const [expand, toggleExpand] = useToggleState(true);\r\n\r\n    const {\r\n        model: { materialType },\r\n    } = useContext(SettingsContext);\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    const resetSettings = event => {\r\n        event.stopPropagation();\r\n        const action = {\r\n            type: \"reset\",\r\n            key: \"model\",\r\n            value: [\"materialType\"],\r\n        };\r\n        dispatch(action);\r\n        action.key = \"materialParams\";\r\n        action.value = \"\";\r\n        dispatch(action);\r\n    };\r\n\r\n    const handleChange = event => {\r\n        const { value: materialType } = event.target;\r\n        const action = {\r\n            type: \"update\",\r\n            key: \"model\",\r\n            value: { materialType },\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const options = MATERIALS.map(mat => (\r\n        <MenuItem value={mat} key={mat}>\r\n            {mat}\r\n        </MenuItem>\r\n    ));\r\n\r\n    return (\r\n        <div className=\"AdvancedSettingsGroup\">\r\n            <div\r\n                className=\"AdvancedSettingsGroup-header\"\r\n                onClick={toggleExpand}\r\n            >\r\n                <IconButton size=\"small\">\r\n                    {expand ? (\r\n                        <KeyboardArrowUpIcon />\r\n                    ) : (\r\n                        <KeyboardArrowDownIcon />\r\n                    )}\r\n                </IconButton>\r\n                <div className=\"AdvancedSettingsGroup-title\">Material</div>\r\n                <div className=\"AdvancedSettingsGroup-toggle\">\r\n                    <Button variant=\"contained\" onClick={resetSettings}>\r\n                        Reset\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <Collapse in={expand} timeout=\"auto\" unmountOnExit>\r\n                <div className=\"AdvancedSettingsGroup-options\">\r\n                    <div className=\"AdvancedSettingsGroup-optionName\">Type</div>\r\n                    <div>\r\n                        <Select\r\n                            fullWidth\r\n                            onChange={handleChange}\r\n                            value={materialType}\r\n                        >\r\n                            {options}\r\n                        </Select>\r\n                    </div>\r\n                    <MaterialParamsSetting\r\n                        materialType={materialType}\r\n                        openControl={openControl}\r\n                    />\r\n                </div>\r\n            </Collapse>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MaterialSettings;\r\n"],"sourceRoot":""}