{"version":3,"sources":["../node_modules/three/examples/jsm/exporters/GLTFExporter.js"],"names":["GLTFExporter","this","pluginCallbacks","register","writer","GLTFLightExtension","GLTFMaterialsUnlitExtension","GLTFMaterialsPBRSpecularGlossiness","callback","indexOf","push","splice","input","onDone","options","GLTFWriter","plugins","i","il","length","setPlugins","write","WEBGL_CONSTANTS","THREE_TO_WEBGL","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","PATH_PROPERTIES","scale","position","quaternion","morphTargetInfluences","equalArray","array1","array2","every","element","index","getPaddedBufferSize","bufferSize","Math","ceil","getPaddedArrayBuffer","arrayBuffer","paddingByte","paddedLength","byteLength","array","Uint8Array","set","buffer","cachedCanvas","pending","buffers","byteOffset","nodeMap","Map","skins","extensionsUsed","uids","uid","json","asset","version","generator","cache","meshes","attributes","attributesNormalized","materials","textures","images","Object","assign","binary","trs","onlyVisible","truncateDrawRange","embedImages","maxTextureSize","Infinity","animations","includeCustomExtensions","processInput","Promise","all","then","blob","Blob","type","extensionsUsedList","keys","size","reader","window","FileReader","readAsArrayBuffer","onloadend","binaryChunk","result","binaryChunkPrefix","DataView","ArrayBuffer","setUint32","jsonChunk","text","undefined","TextEncoder","encode","value","charCodeAt","stringToArrayBuffer","JSON","stringify","jsonChunkPrefix","header","headerView","totalByteLength","glbBlob","glbReader","readAsDataURL","base64data","uri","object","objectDef","userData","parse","gltfExtensions","extensionName","extensions","extras","error","console","warn","name","message","has","get","normal","v","Vector3","count","abs","fromBufferAttribute","attribute","clone","x","y","z","setX","normalize","setXYZ","mapDef","texture","didTransform","transformDef","offset","toArray","rotation","repeat","componentType","start","target","componentSize","bufferViews","itemSize","dataView","a","getX","getY","getZ","getW","setFloat32","setUint16","setUint8","bufferViewDef","processBuffer","byteStride","id","resolve","geometry","constructor","Float32Array","Uint32Array","Uint16Array","Error","end","end2","drawRange","max","min","bufferViewTarget","minMax","output","Array","fill","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","getMinMax","bufferView","processBufferView","accessorDef","1","2","3","4","16","normalized","accessors","image","format","flipY","cachedImages","mimeType","RGBAFormat","key","toString","imageDef","canvas","document","createElement","width","height","ctx","getContext","translate","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","drawImage","RGBFormat","data","Uint8ClampedArray","j","putImageData","ImageData","toBlob","processBufferViewImage","bufferViewIndex","toDataURL","src","map","samplers","samplerDef","magFilter","minFilter","wrapS","wrapT","textureDef","sampler","processSampler","source","processImage","_invokeAll","ext","writeTexture","material","isShaderMaterial","materialDef","pbrMetallicRoughness","isMeshStandardMaterial","isMeshBasicMaterial","color","concat","opacity","baseColorFactor","metallicFactor","metalness","roughnessFactor","roughness","metalnessMap","roughnessMap","metalRoughMapDef","processTexture","applyTextureTransform","metallicRoughnessTexture","baseColorMapDef","baseColorTexture","emissive","multiplyScalar","emissiveIntensity","emissiveFactor","emissiveMap","emissiveMapDef","emissiveTexture","normalMap","normalMapDef","normalScale","normalTexture","aoMap","occlusionMapDef","texCoord","aoMapIntensity","strength","occlusionTexture","transparent","alphaMode","alphaTest","alphaCutoff","side","DoubleSide","doubleSided","serializeUserData","writeMaterial","mesh","meshCacheKeyParts","uuid","isArray","l","meshCacheKey","join","mode","isLineSegments","isLineLoop","isLine","isPoints","wireframe","isBufferGeometry","meshDef","primitives","targets","nameConversion","uv","uv2","skinWeight","skinIndex","originalNormal","getAttribute","isNormalizedNormalAttribute","setAttribute","createNormalizedNormalAttribute","modifiedAttribute","attributeName","substr","toUpperCase","test","getUID","BufferAttribute","accessor","processAccessor","weights","targetNames","reverseDictionary","morphTargetDictionary","warned","morphAttributes","gltfAttributeName","baseAttribute","relativeAttribute","morphTargetsRelative","jl","isMultiMaterial","groups","materialIndex","primitive","cacheKey","indices","processMaterial","writeMesh","camera","cameras","isOrtho","isOrthographicCamera","cameraDef","orthographic","xmag","right","ymag","top","zfar","far","znear","near","perspective","aspectRatio","aspect","yfov","MathUtils","degToRad","fov","clip","root","tracks","Utils","mergeMorphTargetTracks","channels","track","trackBinding","PropertyBinding","parseTrackName","trackNode","findNode","nodeName","trackProperty","propertyName","objectName","isSkinnedMesh","skeleton","getBoneByName","objectIndex","outputItemSize","values","times","interpolation","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","getInterpolation","InterpolateDiscrete","node","path","nodes","rootJoint","bones","joints","inverseBindMatrices","temporaryBoneInverse","Matrix4","copy","boneInverses","multiply","bindMatrix","skin","nodeDef","translation","matrixAutoUpdate","updateMatrix","matrix","elements","String","isMesh","meshIndex","processMesh","isCamera","processCamera","children","child","visible","nodeIndex","processNode","writeNode","scene","scenes","sceneDef","objects","Scene","processScene","beforeParse","objectsWithoutScene","processObjects","processSkin","processAnimation","afterParse","func","light","isLight","isDirectionalLight","isPointLight","isSpotLight","lightDef","intensity","distance","range","spot","innerConeAngle","penumbra","angle","outerConeAngle","decay","parent","lights","isGLTFSpecularGlossinessMaterial","extensionDef","diffuseFactor","specularFactor","specular","glossinessFactor","glossiness","diffuseTexture","specularMap","specularMapDef","specularGlossinessTexture","insertKeyframe","time","tolerance","valueSize","getValueSize","TimeBufferType","ValueBufferType","interpolant","evaluate","slice","mergedTracks","sourceTracks","sourceTrack","sourceTrackBinding","sourceTrackNode","propertyIndex","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","setInterpolation","InterpolateLinear","targetCount","targetIndex","mergedTrack","sourceInterpolant","keyframeIndex"],"mappings":"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","file":"static/js/76.046e7767.chunk.js","sourcesContent":["import {\n\tBufferAttribute,\n\tClampToEdgeWrapping,\n\tDoubleSide,\n\tInterpolateDiscrete,\n\tInterpolateLinear,\n\tLinearFilter,\n\tLinearMipmapLinearFilter,\n\tLinearMipmapNearestFilter,\n\tMathUtils,\n\tMatrix4,\n\tMirroredRepeatWrapping,\n\tNearestFilter,\n\tNearestMipmapLinearFilter,\n\tNearestMipmapNearestFilter,\n\tPropertyBinding,\n\tRGBAFormat,\n\tRGBFormat,\n\tRepeatWrapping,\n\tScene,\n\tVector3\n} from 'three';\n\n\nclass GLTFExporter {\n\n\tconstructor() {\n\n\t\tthis.pluginCallbacks = [];\n\n\t\tthis.register( function ( writer ) {\n\n\t\t\treturn new GLTFLightExtension( writer );\n\n\t\t} );\n\n\t\tthis.register( function ( writer ) {\n\n\t\t\treturn new GLTFMaterialsUnlitExtension( writer );\n\n\t\t} );\n\n\t\tthis.register( function ( writer ) {\n\n\t\t\treturn new GLTFMaterialsPBRSpecularGlossiness( writer );\n\n\t\t} );\n\n\t}\n\n\tregister( callback ) {\n\n\t\tif ( this.pluginCallbacks.indexOf( callback ) === - 1 ) {\n\n\t\t\tthis.pluginCallbacks.push( callback );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunregister( callback ) {\n\n\t\tif ( this.pluginCallbacks.indexOf( callback ) !== - 1 ) {\n\n\t\t\tthis.pluginCallbacks.splice( this.pluginCallbacks.indexOf( callback ), 1 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Parse scenes and generate GLTF output\n\t * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n\t * @param  {Function} onDone  Callback on completed\n\t * @param  {Object} options options\n\t */\n\tparse( input, onDone, options ) {\n\n\t\tconst writer = new GLTFWriter();\n\t\tconst plugins = [];\n\n\t\tfor ( let i = 0, il = this.pluginCallbacks.length; i < il; i ++ ) {\n\n\t\t\tplugins.push( this.pluginCallbacks[ i ]( writer ) );\n\n\t\t}\n\n\t\twriter.setPlugins( plugins );\n\t\twriter.write( input, onDone, options );\n\n\t}\n\n}\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst WEBGL_CONSTANTS = {\n\tPOINTS: 0x0000,\n\tLINES: 0x0001,\n\tLINE_LOOP: 0x0002,\n\tLINE_STRIP: 0x0003,\n\tTRIANGLES: 0x0004,\n\tTRIANGLE_STRIP: 0x0005,\n\tTRIANGLE_FAN: 0x0006,\n\n\tUNSIGNED_BYTE: 0x1401,\n\tUNSIGNED_SHORT: 0x1403,\n\tFLOAT: 0x1406,\n\tUNSIGNED_INT: 0x1405,\n\tARRAY_BUFFER: 0x8892,\n\tELEMENT_ARRAY_BUFFER: 0x8893,\n\n\tNEAREST: 0x2600,\n\tLINEAR: 0x2601,\n\tNEAREST_MIPMAP_NEAREST: 0x2700,\n\tLINEAR_MIPMAP_NEAREST: 0x2701,\n\tNEAREST_MIPMAP_LINEAR: 0x2702,\n\tLINEAR_MIPMAP_LINEAR: 0x2703,\n\n\tCLAMP_TO_EDGE: 33071,\n\tMIRRORED_REPEAT: 33648,\n\tREPEAT: 10497\n};\n\nconst THREE_TO_WEBGL = {};\n\nTHREE_TO_WEBGL[ NearestFilter ] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[ NearestMipmapNearestFilter ] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[ NearestMipmapLinearFilter ] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[ LinearFilter ] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[ LinearMipmapNearestFilter ] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[ LinearMipmapLinearFilter ] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\n\nTHREE_TO_WEBGL[ ClampToEdgeWrapping ] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[ RepeatWrapping ] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[ MirroredRepeatWrapping ] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\n\nconst PATH_PROPERTIES = {\n\tscale: 'scale',\n\tposition: 'translation',\n\tquaternion: 'rotation',\n\tmorphTargetInfluences: 'weights'\n};\n\n// GLB constants\n// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n\nconst GLB_HEADER_BYTES = 12;\nconst GLB_HEADER_MAGIC = 0x46546C67;\nconst GLB_VERSION = 2;\n\nconst GLB_CHUNK_PREFIX_BYTES = 8;\nconst GLB_CHUNK_TYPE_JSON = 0x4E4F534A;\nconst GLB_CHUNK_TYPE_BIN = 0x004E4942;\n\n//------------------------------------------------------------------------------\n// Utility functions\n//------------------------------------------------------------------------------\n\n/**\n * Compare two arrays\n * @param  {Array} array1 Array 1 to compare\n * @param  {Array} array2 Array 2 to compare\n * @return {Boolean}        Returns true if both arrays are equal\n */\nfunction equalArray( array1, array2 ) {\n\n\treturn ( array1.length === array2.length ) && array1.every( function ( element, index ) {\n\n\t\treturn element === array2[ index ];\n\n\t} );\n\n}\n\n/**\n * Converts a string to an ArrayBuffer.\n * @param  {string} text\n * @return {ArrayBuffer}\n */\nfunction stringToArrayBuffer( text ) {\n\n\tif ( window.TextEncoder !== undefined ) {\n\n\t\treturn new TextEncoder().encode( text ).buffer;\n\n\t}\n\n\tconst array = new Uint8Array( new ArrayBuffer( text.length ) );\n\n\tfor ( let i = 0, il = text.length; i < il; i ++ ) {\n\n\t\tconst value = text.charCodeAt( i );\n\n\t\t// Replacing multi-byte character with space(0x20).\n\t\tarray[ i ] = value > 0xFF ? 0x20 : value;\n\n\t}\n\n\treturn array.buffer;\n\n}\n\n/**\n * Is identity matrix\n *\n * @param {Matrix4} matrix\n * @returns {Boolean} Returns true, if parameter is identity matrix\n */\nfunction isIdentityMatrix( matrix ) {\n\n\treturn equalArray( matrix.elements, [ 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 ] );\n\n}\n\n/**\n * Get the min and max vectors from the given attribute\n * @param  {BufferAttribute} attribute Attribute to find the min/max in range from start to start + count\n * @param  {Integer} start\n * @param  {Integer} count\n * @return {Object} Object containing the `min` and `max` values (As an array of attribute.itemSize components)\n */\nfunction getMinMax( attribute, start, count ) {\n\n\tconst output = {\n\n\t\tmin: new Array( attribute.itemSize ).fill( Number.POSITIVE_INFINITY ),\n\t\tmax: new Array( attribute.itemSize ).fill( Number.NEGATIVE_INFINITY )\n\n\t};\n\n\tfor ( let i = start; i < start + count; i ++ ) {\n\n\t\tfor ( let a = 0; a < attribute.itemSize; a ++ ) {\n\n\t\t\tlet value;\n\n\t\t\tif ( attribute.itemSize > 4 ) {\n\n\t\t\t\t // no support for interleaved data for itemSize > 4\n\n\t\t\t\tvalue = attribute.array[ i * attribute.itemSize + a ];\n\n\t\t\t} else {\n\n\t\t\t\tif ( a === 0 ) value = attribute.getX( i );\n\t\t\t\telse if ( a === 1 ) value = attribute.getY( i );\n\t\t\t\telse if ( a === 2 ) value = attribute.getZ( i );\n\t\t\t\telse if ( a === 3 ) value = attribute.getW( i );\n\n\t\t\t}\n\n\t\t\toutput.min[ a ] = Math.min( output.min[ a ], value );\n\t\t\toutput.max[ a ] = Math.max( output.max[ a ], value );\n\n\t\t}\n\n\t}\n\n\treturn output;\n\n}\n\n/**\n * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\n * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\n *\n * @param {Integer} bufferSize The size the original buffer.\n * @returns {Integer} new buffer size with required padding.\n *\n */\nfunction getPaddedBufferSize( bufferSize ) {\n\n\treturn Math.ceil( bufferSize / 4 ) * 4;\n\n}\n\n/**\n * Returns a buffer aligned to 4-byte boundary.\n *\n * @param {ArrayBuffer} arrayBuffer Buffer to pad\n * @param {Integer} paddingByte (Optional)\n * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\n */\nfunction getPaddedArrayBuffer( arrayBuffer, paddingByte = 0 ) {\n\n\tconst paddedLength = getPaddedBufferSize( arrayBuffer.byteLength );\n\n\tif ( paddedLength !== arrayBuffer.byteLength ) {\n\n\t\tconst array = new Uint8Array( paddedLength );\n\t\tarray.set( new Uint8Array( arrayBuffer ) );\n\n\t\tif ( paddingByte !== 0 ) {\n\n\t\t\tfor ( let i = arrayBuffer.byteLength; i < paddedLength; i ++ ) {\n\n\t\t\t\tarray[ i ] = paddingByte;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn array.buffer;\n\n\t}\n\n\treturn arrayBuffer;\n\n}\n\nlet cachedCanvas = null;\n\n/**\n * Writer\n */\nclass GLTFWriter {\n\n\tconstructor() {\n\n\t\tthis.plugins = [];\n\n\t\tthis.options = {};\n\t\tthis.pending = [];\n\t\tthis.buffers = [];\n\n\t\tthis.byteOffset = 0;\n\t\tthis.buffers = [];\n\t\tthis.nodeMap = new Map();\n\t\tthis.skins = [];\n\t\tthis.extensionsUsed = {};\n\n\t\tthis.uids = new Map();\n\t\tthis.uid = 0;\n\n\t\tthis.json = {\n\t\t\tasset: {\n\t\t\t\tversion: '2.0',\n\t\t\t\tgenerator: 'THREE.GLTFExporter'\n\t\t\t}\n\t\t};\n\n\t\tthis.cache = {\n\t\t\tmeshes: new Map(),\n\t\t\tattributes: new Map(),\n\t\t\tattributesNormalized: new Map(),\n\t\t\tmaterials: new Map(),\n\t\t\ttextures: new Map(),\n\t\t\timages: new Map()\n\t\t};\n\n\t}\n\n\tsetPlugins( plugins ) {\n\n\t\tthis.plugins = plugins;\n\n\t}\n\n\t/**\n\t * Parse scenes and generate GLTF output\n\t * @param  {Scene or [THREE.Scenes]} input   Scene or Array of THREE.Scenes\n\t * @param  {Function} onDone  Callback on completed\n\t * @param  {Object} options options\n\t */\n\twrite( input, onDone, options ) {\n\n\t\tthis.options = Object.assign( {}, {\n\t\t\t// default options\n\t\t\tbinary: false,\n\t\t\ttrs: false,\n\t\t\tonlyVisible: true,\n\t\t\ttruncateDrawRange: true,\n\t\t\tembedImages: true,\n\t\t\tmaxTextureSize: Infinity,\n\t\t\tanimations: [],\n\t\t\tincludeCustomExtensions: false\n\t\t}, options );\n\n\t\tif ( this.options.animations.length > 0 ) {\n\n\t\t\t// Only TRS properties, and not matrices, may be targeted by animation.\n\t\t\tthis.options.trs = true;\n\n\t\t}\n\n\t\tthis.processInput( input );\n\n\t\tconst writer = this;\n\n\t\tPromise.all( this.pending ).then( function () {\n\n\t\t\tconst buffers = writer.buffers;\n\t\t\tconst json = writer.json;\n\t\t\tconst options = writer.options;\n\t\t\tconst extensionsUsed = writer.extensionsUsed;\n\n\t\t\t// Merge buffers.\n\t\t\tconst blob = new Blob( buffers, { type: 'application/octet-stream' } );\n\n\t\t\t// Declare extensions.\n\t\t\tconst extensionsUsedList = Object.keys( extensionsUsed );\n\n\t\t\tif ( extensionsUsedList.length > 0 ) json.extensionsUsed = extensionsUsedList;\n\n\t\t\t// Update bytelength of the single buffer.\n\t\t\tif ( json.buffers && json.buffers.length > 0 ) json.buffers[ 0 ].byteLength = blob.size;\n\n\t\t\tif ( options.binary === true ) {\n\n\t\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n\n\t\t\t\tconst reader = new window.FileReader();\n\t\t\t\treader.readAsArrayBuffer( blob );\n\t\t\t\treader.onloadend = function () {\n\n\t\t\t\t\t// Binary chunk.\n\t\t\t\t\tconst binaryChunk = getPaddedArrayBuffer( reader.result );\n\t\t\t\t\tconst binaryChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );\n\t\t\t\t\tbinaryChunkPrefix.setUint32( 0, binaryChunk.byteLength, true );\n\t\t\t\t\tbinaryChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_BIN, true );\n\n\t\t\t\t\t// JSON chunk.\n\t\t\t\t\tconst jsonChunk = getPaddedArrayBuffer( stringToArrayBuffer( JSON.stringify( json ) ), 0x20 );\n\t\t\t\t\tconst jsonChunkPrefix = new DataView( new ArrayBuffer( GLB_CHUNK_PREFIX_BYTES ) );\n\t\t\t\t\tjsonChunkPrefix.setUint32( 0, jsonChunk.byteLength, true );\n\t\t\t\t\tjsonChunkPrefix.setUint32( 4, GLB_CHUNK_TYPE_JSON, true );\n\n\t\t\t\t\t// GLB header.\n\t\t\t\t\tconst header = new ArrayBuffer( GLB_HEADER_BYTES );\n\t\t\t\t\tconst headerView = new DataView( header );\n\t\t\t\t\theaderView.setUint32( 0, GLB_HEADER_MAGIC, true );\n\t\t\t\t\theaderView.setUint32( 4, GLB_VERSION, true );\n\t\t\t\t\tconst totalByteLength = GLB_HEADER_BYTES\n\t\t\t\t\t\t+ jsonChunkPrefix.byteLength + jsonChunk.byteLength\n\t\t\t\t\t\t+ binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n\t\t\t\t\theaderView.setUint32( 8, totalByteLength, true );\n\n\t\t\t\t\tconst glbBlob = new Blob( [\n\t\t\t\t\t\theader,\n\t\t\t\t\t\tjsonChunkPrefix,\n\t\t\t\t\t\tjsonChunk,\n\t\t\t\t\t\tbinaryChunkPrefix,\n\t\t\t\t\t\tbinaryChunk\n\t\t\t\t\t], { type: 'application/octet-stream' } );\n\n\t\t\t\t\tconst glbReader = new window.FileReader();\n\t\t\t\t\tglbReader.readAsArrayBuffer( glbBlob );\n\t\t\t\t\tglbReader.onloadend = function () {\n\n\t\t\t\t\t\tonDone( glbReader.result );\n\n\t\t\t\t\t};\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tif ( json.buffers && json.buffers.length > 0 ) {\n\n\t\t\t\t\tconst reader = new window.FileReader();\n\t\t\t\t\treader.readAsDataURL( blob );\n\t\t\t\t\treader.onloadend = function () {\n\n\t\t\t\t\t\tconst base64data = reader.result;\n\t\t\t\t\t\tjson.buffers[ 0 ].uri = base64data;\n\t\t\t\t\t\tonDone( json );\n\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\tonDone( json );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Serializes a userData.\n\t *\n\t * @param {THREE.Object3D|THREE.Material} object\n\t * @param {Object} objectDef\n\t */\n\tserializeUserData( object, objectDef ) {\n\n\t\tif ( Object.keys( object.userData ).length === 0 ) return;\n\n\t\tconst options = this.options;\n\t\tconst extensionsUsed = this.extensionsUsed;\n\n\t\ttry {\n\n\t\t\tconst json = JSON.parse( JSON.stringify( object.userData ) );\n\n\t\t\tif ( options.includeCustomExtensions && json.gltfExtensions ) {\n\n\t\t\t\tif ( objectDef.extensions === undefined ) objectDef.extensions = {};\n\n\t\t\t\tfor ( const extensionName in json.gltfExtensions ) {\n\n\t\t\t\t\tobjectDef.extensions[ extensionName ] = json.gltfExtensions[ extensionName ];\n\t\t\t\t\textensionsUsed[ extensionName ] = true;\n\n\t\t\t\t}\n\n\t\t\t\tdelete json.gltfExtensions;\n\n\t\t\t}\n\n\t\t\tif ( Object.keys( json ).length > 0 ) objectDef.extras = json;\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFExporter: userData of \\'' + object.name + '\\' ' +\n\t\t\t\t'won\\'t be serialized because of JSON.stringify error - ' + error.message );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Assign and return a temporal unique id for an object\n\t * especially which doesn't have .uuid\n\t * @param  {Object} object\n\t * @return {Integer}\n\t */\n\tgetUID( object ) {\n\n\t\tif ( ! this.uids.has( object ) ) this.uids.set( object, this.uid ++ );\n\n\t\treturn this.uids.get( object );\n\n\t}\n\n\t/**\n\t * Checks if normal attribute values are normalized.\n\t *\n\t * @param {BufferAttribute} normal\n\t * @returns {Boolean}\n\t */\n\tisNormalizedNormalAttribute( normal ) {\n\n\t\tconst cache = this.cache;\n\n\t\tif ( cache.attributesNormalized.has( normal ) ) return false;\n\n\t\tconst v = new Vector3();\n\n\t\tfor ( let i = 0, il = normal.count; i < il; i ++ ) {\n\n\t\t\t// 0.0005 is from glTF-validator\n\t\t\tif ( Math.abs( v.fromBufferAttribute( normal, i ).length() - 1.0 ) > 0.0005 ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\t/**\n\t * Creates normalized normal buffer attribute.\n\t *\n\t * @param {BufferAttribute} normal\n\t * @returns {BufferAttribute}\n\t *\n\t */\n\tcreateNormalizedNormalAttribute( normal ) {\n\n\t\tconst cache = this.cache;\n\n\t\tif ( cache.attributesNormalized.has( normal ) )\treturn cache.attributesNormalized.get( normal );\n\n\t\tconst attribute = normal.clone();\n\t\tconst v = new Vector3();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\tv.fromBufferAttribute( attribute, i );\n\n\t\t\tif ( v.x === 0 && v.y === 0 && v.z === 0 ) {\n\n\t\t\t\t// if values can't be normalized set (1, 0, 0)\n\t\t\t\tv.setX( 1.0 );\n\n\t\t\t} else {\n\n\t\t\t\tv.normalize();\n\n\t\t\t}\n\n\t\t\tattribute.setXYZ( i, v.x, v.y, v.z );\n\n\t\t}\n\n\t\tcache.attributesNormalized.set( normal, attribute );\n\n\t\treturn attribute;\n\n\t}\n\n\t/**\n\t * Applies a texture transform, if present, to the map definition. Requires\n\t * the KHR_texture_transform extension.\n\t *\n\t * @param {Object} mapDef\n\t * @param {THREE.Texture} texture\n\t */\n\tapplyTextureTransform( mapDef, texture ) {\n\n\t\tlet didTransform = false;\n\t\tconst transformDef = {};\n\n\t\tif ( texture.offset.x !== 0 || texture.offset.y !== 0 ) {\n\n\t\t\ttransformDef.offset = texture.offset.toArray();\n\t\t\tdidTransform = true;\n\n\t\t}\n\n\t\tif ( texture.rotation !== 0 ) {\n\n\t\t\ttransformDef.rotation = texture.rotation;\n\t\t\tdidTransform = true;\n\n\t\t}\n\n\t\tif ( texture.repeat.x !== 1 || texture.repeat.y !== 1 ) {\n\n\t\t\ttransformDef.scale = texture.repeat.toArray();\n\t\t\tdidTransform = true;\n\n\t\t}\n\n\t\tif ( didTransform ) {\n\n\t\t\tmapDef.extensions = mapDef.extensions || {};\n\t\t\tmapDef.extensions[ 'KHR_texture_transform' ] = transformDef;\n\t\t\tthis.extensionsUsed[ 'KHR_texture_transform' ] = true;\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Process a buffer to append to the default one.\n\t * @param  {ArrayBuffer} buffer\n\t * @return {Integer}\n\t */\n\tprocessBuffer( buffer ) {\n\n\t\tconst json = this.json;\n\t\tconst buffers = this.buffers;\n\n\t\tif ( ! json.buffers ) json.buffers = [ { byteLength: 0 } ];\n\n\t\t// All buffers are merged before export.\n\t\tbuffers.push( buffer );\n\n\t\treturn 0;\n\n\t}\n\n\t/**\n\t * Process and generate a BufferView\n\t * @param  {BufferAttribute} attribute\n\t * @param  {number} componentType\n\t * @param  {number} start\n\t * @param  {number} count\n\t * @param  {number} target (Optional) Target usage of the BufferView\n\t * @return {Object}\n\t */\n\tprocessBufferView( attribute, componentType, start, count, target ) {\n\n\t\tconst json = this.json;\n\n\t\tif ( ! json.bufferViews ) json.bufferViews = [];\n\n\t\t// Create a new dataview and dump the attribute's array into it\n\n\t\tlet componentSize;\n\n\t\tif ( componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE ) {\n\n\t\t\tcomponentSize = 1;\n\n\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT ) {\n\n\t\t\tcomponentSize = 2;\n\n\t\t} else {\n\n\t\t\tcomponentSize = 4;\n\n\t\t}\n\n\t\tconst byteLength = getPaddedBufferSize( count * attribute.itemSize * componentSize );\n\t\tconst dataView = new DataView( new ArrayBuffer( byteLength ) );\n\t\tlet offset = 0;\n\n\t\tfor ( let i = start; i < start + count; i ++ ) {\n\n\t\t\tfor ( let a = 0; a < attribute.itemSize; a ++ ) {\n\n\t\t\t\tlet value;\n\n\t\t\t\tif ( attribute.itemSize > 4 ) {\n\n\t\t\t\t\t // no support for interleaved data for itemSize > 4\n\n\t\t\t\t\tvalue = attribute.array[ i * attribute.itemSize + a ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( a === 0 ) value = attribute.getX( i );\n\t\t\t\t\telse if ( a === 1 ) value = attribute.getY( i );\n\t\t\t\t\telse if ( a === 2 ) value = attribute.getZ( i );\n\t\t\t\t\telse if ( a === 3 ) value = attribute.getW( i );\n\n\t\t\t\t}\n\n\t\t\t\tif ( componentType === WEBGL_CONSTANTS.FLOAT ) {\n\n\t\t\t\t\tdataView.setFloat32( offset, value, true );\n\n\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_INT ) {\n\n\t\t\t\t\tdataView.setUint32( offset, value, true );\n\n\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT ) {\n\n\t\t\t\t\tdataView.setUint16( offset, value, true );\n\n\t\t\t\t} else if ( componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE ) {\n\n\t\t\t\t\tdataView.setUint8( offset, value );\n\n\t\t\t\t}\n\n\t\t\t\toffset += componentSize;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bufferViewDef = {\n\n\t\t\tbuffer: this.processBuffer( dataView.buffer ),\n\t\t\tbyteOffset: this.byteOffset,\n\t\t\tbyteLength: byteLength\n\n\t\t};\n\n\t\tif ( target !== undefined ) bufferViewDef.target = target;\n\n\t\tif ( target === WEBGL_CONSTANTS.ARRAY_BUFFER ) {\n\n\t\t\t// Only define byteStride for vertex attributes.\n\t\t\tbufferViewDef.byteStride = attribute.itemSize * componentSize;\n\n\t\t}\n\n\t\tthis.byteOffset += byteLength;\n\n\t\tjson.bufferViews.push( bufferViewDef );\n\n\t\t// @TODO Merge bufferViews where possible.\n\t\tconst output = {\n\n\t\t\tid: json.bufferViews.length - 1,\n\t\t\tbyteLength: 0\n\n\t\t};\n\n\t\treturn output;\n\n\t}\n\n\t/**\n\t * Process and generate a BufferView from an image Blob.\n\t * @param {Blob} blob\n\t * @return {Promise<Integer>}\n\t */\n\tprocessBufferViewImage( blob ) {\n\n\t\tconst writer = this;\n\t\tconst json = writer.json;\n\n\t\tif ( ! json.bufferViews ) json.bufferViews = [];\n\n\t\treturn new Promise( function ( resolve ) {\n\n\t\t\tconst reader = new window.FileReader();\n\t\t\treader.readAsArrayBuffer( blob );\n\t\t\treader.onloadend = function () {\n\n\t\t\t\tconst buffer = getPaddedArrayBuffer( reader.result );\n\n\t\t\t\tconst bufferViewDef = {\n\t\t\t\t\tbuffer: writer.processBuffer( buffer ),\n\t\t\t\t\tbyteOffset: writer.byteOffset,\n\t\t\t\t\tbyteLength: buffer.byteLength\n\t\t\t\t};\n\n\t\t\t\twriter.byteOffset += buffer.byteLength;\n\t\t\t\tresolve( json.bufferViews.push( bufferViewDef ) - 1 );\n\n\t\t\t};\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Process attribute to generate an accessor\n\t * @param  {BufferAttribute} attribute Attribute to process\n\t * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n\t * @param  {Integer} start (Optional)\n\t * @param  {Integer} count (Optional)\n\t * @return {Integer|null} Index of the processed accessor on the \"accessors\" array\n\t */\n\tprocessAccessor( attribute, geometry, start, count ) {\n\n\t\tconst options = this.options;\n\t\tconst json = this.json;\n\n\t\tconst types = {\n\n\t\t\t1: 'SCALAR',\n\t\t\t2: 'VEC2',\n\t\t\t3: 'VEC3',\n\t\t\t4: 'VEC4',\n\t\t\t16: 'MAT4'\n\n\t\t};\n\n\t\tlet componentType;\n\n\t\t// Detect the component type of the attribute array (float, uint or ushort)\n\t\tif ( attribute.array.constructor === Float32Array ) {\n\n\t\t\tcomponentType = WEBGL_CONSTANTS.FLOAT;\n\n\t\t} else if ( attribute.array.constructor === Uint32Array ) {\n\n\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n\n\t\t} else if ( attribute.array.constructor === Uint16Array ) {\n\n\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n\n\t\t} else if ( attribute.array.constructor === Uint8Array ) {\n\n\t\t\tcomponentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.GLTFExporter: Unsupported bufferAttribute component type.' );\n\n\t\t}\n\n\t\tif ( start === undefined ) start = 0;\n\t\tif ( count === undefined ) count = attribute.count;\n\n\t\t// @TODO Indexed buffer geometry with drawRange not supported yet\n\t\tif ( options.truncateDrawRange && geometry !== undefined && geometry.index === null ) {\n\n\t\t\tconst end = start + count;\n\t\t\tconst end2 = geometry.drawRange.count === Infinity\n\t\t\t\t? attribute.count\n\t\t\t\t: geometry.drawRange.start + geometry.drawRange.count;\n\n\t\t\tstart = Math.max( start, geometry.drawRange.start );\n\t\t\tcount = Math.min( end, end2 ) - start;\n\n\t\t\tif ( count < 0 ) count = 0;\n\n\t\t}\n\n\t\t// Skip creating an accessor if the attribute doesn't have data to export\n\t\tif ( count === 0 ) return null;\n\n\t\tconst minMax = getMinMax( attribute, start, count );\n\t\tlet bufferViewTarget;\n\n\t\t// If geometry isn't provided, don't infer the target usage of the bufferView. For\n\t\t// animation samplers, target must not be set.\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tbufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n\n\t\t}\n\n\t\tconst bufferView = this.processBufferView( attribute, componentType, start, count, bufferViewTarget );\n\n\t\tconst accessorDef = {\n\n\t\t\tbufferView: bufferView.id,\n\t\t\tbyteOffset: bufferView.byteOffset,\n\t\t\tcomponentType: componentType,\n\t\t\tcount: count,\n\t\t\tmax: minMax.max,\n\t\t\tmin: minMax.min,\n\t\t\ttype: types[ attribute.itemSize ]\n\n\t\t};\n\n\t\tif ( attribute.normalized === true ) accessorDef.normalized = true;\n\t\tif ( ! json.accessors ) json.accessors = [];\n\n\t\treturn json.accessors.push( accessorDef ) - 1;\n\n\t}\n\n\t/**\n\t * Process image\n\t * @param  {Image} image to process\n\t * @param  {Integer} format of the image (e.g. RGBFormat, RGBAFormat etc)\n\t * @param  {Boolean} flipY before writing out the image\n\t * @return {Integer}     Index of the processed texture in the \"images\" array\n\t */\n\tprocessImage( image, format, flipY ) {\n\n\t\tconst writer = this;\n\t\tconst cache = writer.cache;\n\t\tconst json = writer.json;\n\t\tconst options = writer.options;\n\t\tconst pending = writer.pending;\n\n\t\tif ( ! cache.images.has( image ) ) cache.images.set( image, {} );\n\n\t\tconst cachedImages = cache.images.get( image );\n\t\tconst mimeType = format === RGBAFormat ? 'image/png' : 'image/jpeg';\n\t\tconst key = mimeType + ':flipY/' + flipY.toString();\n\n\t\tif ( cachedImages[ key ] !== undefined ) return cachedImages[ key ];\n\n\t\tif ( ! json.images ) json.images = [];\n\n\t\tconst imageDef = { mimeType: mimeType };\n\n\t\tif ( options.embedImages ) {\n\n\t\t\tconst canvas = cachedCanvas = cachedCanvas || document.createElement( 'canvas' );\n\n\t\t\tcanvas.width = Math.min( image.width, options.maxTextureSize );\n\t\t\tcanvas.height = Math.min( image.height, options.maxTextureSize );\n\n\t\t\tconst ctx = canvas.getContext( '2d' );\n\n\t\t\tif ( flipY === true ) {\n\n\t\t\t\tctx.translate( 0, canvas.height );\n\t\t\t\tctx.scale( 1, - 1 );\n\n\t\t\t}\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tctx.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\t\t} else {\n\n\t\t\t\tif ( format !== RGBAFormat && format !== RGBFormat ) {\n\n\t\t\t\t\tconsole.error( 'GLTFExporter: Only RGB and RGBA formats are supported.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( image.width > options.maxTextureSize || image.height > options.maxTextureSize ) {\n\n\t\t\t\t\tconsole.warn( 'GLTFExporter: Image size is bigger than maxTextureSize', image );\n\n\t\t\t\t}\n\n\t\t\t\tlet data = image.data;\n\n\t\t\t\tif ( format === RGBFormat ) {\n\n\t\t\t\t\tdata = new Uint8ClampedArray( image.height * image.width * 4 );\n\n\t\t\t\t\tfor ( let i = 0, j = 0; i < data.length; i += 4, j += 3 ) {\n\n\t\t\t\t\t\tdata[ i + 0 ] = image.data[ j + 0 ];\n\t\t\t\t\t\tdata[ i + 1 ] = image.data[ j + 1 ];\n\t\t\t\t\t\tdata[ i + 2 ] = image.data[ j + 2 ];\n\t\t\t\t\t\tdata[ i + 3 ] = 255;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tctx.putImageData( new ImageData( data, image.width, image.height ), 0, 0 );\n\n\t\t\t}\n\n\t\t\tif ( options.binary === true ) {\n\n\t\t\t\tpending.push( new Promise( function ( resolve ) {\n\n\t\t\t\t\tcanvas.toBlob( function ( blob ) {\n\n\t\t\t\t\t\twriter.processBufferViewImage( blob ).then( function ( bufferViewIndex ) {\n\n\t\t\t\t\t\t\timageDef.bufferView = bufferViewIndex;\n\t\t\t\t\t\t\tresolve();\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}, mimeType );\n\n\t\t\t\t} ) );\n\n\t\t\t} else {\n\n\t\t\t\timageDef.uri = canvas.toDataURL( mimeType );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\timageDef.uri = image.src;\n\n\t\t}\n\n\t\tconst index = json.images.push( imageDef ) - 1;\n\t\tcachedImages[ key ] = index;\n\t\treturn index;\n\n\t}\n\n\t/**\n\t * Process sampler\n\t * @param  {Texture} map Texture to process\n\t * @return {Integer}     Index of the processed texture in the \"samplers\" array\n\t */\n\tprocessSampler( map ) {\n\n\t\tconst json = this.json;\n\n\t\tif ( ! json.samplers ) json.samplers = [];\n\n\t\tconst samplerDef = {\n\t\t\tmagFilter: THREE_TO_WEBGL[ map.magFilter ],\n\t\t\tminFilter: THREE_TO_WEBGL[ map.minFilter ],\n\t\t\twrapS: THREE_TO_WEBGL[ map.wrapS ],\n\t\t\twrapT: THREE_TO_WEBGL[ map.wrapT ]\n\t\t};\n\n\t\treturn json.samplers.push( samplerDef ) - 1;\n\n\t}\n\n\t/**\n\t * Process texture\n\t * @param  {Texture} map Map to process\n\t * @return {Integer} Index of the processed texture in the \"textures\" array\n\t */\n\tprocessTexture( map ) {\n\n\t\tconst cache = this.cache;\n\t\tconst json = this.json;\n\n\t\tif ( cache.textures.has( map ) ) return cache.textures.get( map );\n\n\t\tif ( ! json.textures ) json.textures = [];\n\n\t\tconst textureDef = {\n\t\t\tsampler: this.processSampler( map ),\n\t\t\tsource: this.processImage( map.image, map.format, map.flipY )\n\t\t};\n\n\t\tif ( map.name ) textureDef.name = map.name;\n\n\t\tthis._invokeAll( function ( ext ) {\n\n\t\t\text.writeTexture && ext.writeTexture( map, textureDef );\n\n\t\t} );\n\n\t\tconst index = json.textures.push( textureDef ) - 1;\n\t\tcache.textures.set( map, index );\n\t\treturn index;\n\n\t}\n\n\t/**\n\t * Process material\n\t * @param  {THREE.Material} material Material to process\n\t * @return {Integer|null} Index of the processed material in the \"materials\" array\n\t */\n\tprocessMaterial( material ) {\n\n\t\tconst cache = this.cache;\n\t\tconst json = this.json;\n\n\t\tif ( cache.materials.has( material ) ) return cache.materials.get( material );\n\n\t\tif ( material.isShaderMaterial ) {\n\n\t\t\tconsole.warn( 'GLTFExporter: THREE.ShaderMaterial not supported.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( ! json.materials ) json.materials = [];\n\n\t\t// @QUESTION Should we avoid including any attribute that has the default value?\n\t\tconst materialDef = {\tpbrMetallicRoughness: {} };\n\n\t\tif ( material.isMeshStandardMaterial !== true && material.isMeshBasicMaterial !== true ) {\n\n\t\t\tconsole.warn( 'GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.' );\n\n\t\t}\n\n\t\t// pbrMetallicRoughness.baseColorFactor\n\t\tconst color = material.color.toArray().concat( [ material.opacity ] );\n\n\t\tif ( ! equalArray( color, [ 1, 1, 1, 1 ] ) ) {\n\n\t\t\tmaterialDef.pbrMetallicRoughness.baseColorFactor = color;\n\n\t\t}\n\n\t\tif ( material.isMeshStandardMaterial ) {\n\n\t\t\tmaterialDef.pbrMetallicRoughness.metallicFactor = material.metalness;\n\t\t\tmaterialDef.pbrMetallicRoughness.roughnessFactor = material.roughness;\n\n\t\t} else {\n\n\t\t\tmaterialDef.pbrMetallicRoughness.metallicFactor = 0.5;\n\t\t\tmaterialDef.pbrMetallicRoughness.roughnessFactor = 0.5;\n\n\t\t}\n\n\t\t// pbrMetallicRoughness.metallicRoughnessTexture\n\t\tif ( material.metalnessMap || material.roughnessMap ) {\n\n\t\t\tif ( material.metalnessMap === material.roughnessMap ) {\n\n\t\t\t\tconst metalRoughMapDef = { index: this.processTexture( material.metalnessMap ) };\n\t\t\t\tthis.applyTextureTransform( metalRoughMapDef, material.metalnessMap );\n\t\t\t\tmaterialDef.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\n\t\tif ( material.map ) {\n\n\t\t\tconst baseColorMapDef = { index: this.processTexture( material.map ) };\n\t\t\tthis.applyTextureTransform( baseColorMapDef, material.map );\n\t\t\tmaterialDef.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\t// emissiveFactor\n\t\t\tconst emissive = material.emissive.clone().multiplyScalar( material.emissiveIntensity ).toArray();\n\n\t\t\tif ( ! equalArray( emissive, [ 0, 0, 0 ] ) ) {\n\n\t\t\t\tmaterialDef.emissiveFactor = emissive;\n\n\t\t\t}\n\n\t\t\t// emissiveTexture\n\t\t\tif ( material.emissiveMap ) {\n\n\t\t\t\tconst emissiveMapDef = { index: this.processTexture( material.emissiveMap ) };\n\t\t\t\tthis.applyTextureTransform( emissiveMapDef, material.emissiveMap );\n\t\t\t\tmaterialDef.emissiveTexture = emissiveMapDef;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// normalTexture\n\t\tif ( material.normalMap ) {\n\n\t\t\tconst normalMapDef = { index: this.processTexture( material.normalMap ) };\n\n\t\t\tif ( material.normalScale && material.normalScale.x !== - 1 ) {\n\n\t\t\t\tif ( material.normalScale.x !== material.normalScale.y ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.' );\n\n\t\t\t\t}\n\n\t\t\t\tnormalMapDef.scale = material.normalScale.x;\n\n\t\t\t}\n\n\t\t\tthis.applyTextureTransform( normalMapDef, material.normalMap );\n\t\t\tmaterialDef.normalTexture = normalMapDef;\n\n\t\t}\n\n\t\t// occlusionTexture\n\t\tif ( material.aoMap ) {\n\n\t\t\tconst occlusionMapDef = {\n\t\t\t\tindex: this.processTexture( material.aoMap ),\n\t\t\t\ttexCoord: 1\n\t\t\t};\n\n\t\t\tif ( material.aoMapIntensity !== 1.0 ) {\n\n\t\t\t\tocclusionMapDef.strength = material.aoMapIntensity;\n\n\t\t\t}\n\n\t\t\tthis.applyTextureTransform( occlusionMapDef, material.aoMap );\n\t\t\tmaterialDef.occlusionTexture = occlusionMapDef;\n\n\t\t}\n\n\t\t// alphaMode\n\t\tif ( material.transparent ) {\n\n\t\t\tmaterialDef.alphaMode = 'BLEND';\n\n\t\t} else {\n\n\t\t\tif ( material.alphaTest > 0.0 ) {\n\n\t\t\t\tmaterialDef.alphaMode = 'MASK';\n\t\t\t\tmaterialDef.alphaCutoff = material.alphaTest;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// doubleSided\n\t\tif ( material.side === DoubleSide ) materialDef.doubleSided = true;\n\t\tif ( material.name !== '' ) materialDef.name = material.name;\n\n\t\tthis.serializeUserData( material, materialDef );\n\n\t\tthis._invokeAll( function ( ext ) {\n\n\t\t\text.writeMaterial && ext.writeMaterial( material, materialDef );\n\n\t\t} );\n\n\t\tconst index = json.materials.push( materialDef ) - 1;\n\t\tcache.materials.set( material, index );\n\t\treturn index;\n\n\t}\n\n\t/**\n\t * Process mesh\n\t * @param  {THREE.Mesh} mesh Mesh to process\n\t * @return {Integer|null} Index of the processed mesh in the \"meshes\" array\n\t */\n\tprocessMesh( mesh ) {\n\n\t\tconst cache = this.cache;\n\t\tconst json = this.json;\n\n\t\tconst meshCacheKeyParts = [ mesh.geometry.uuid ];\n\n\t\tif ( Array.isArray( mesh.material ) ) {\n\n\t\t\tfor ( let i = 0, l = mesh.material.length; i < l; i ++ ) {\n\n\t\t\t\tmeshCacheKeyParts.push( mesh.material[ i ].uuid\t);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tmeshCacheKeyParts.push( mesh.material.uuid );\n\n\t\t}\n\n\t\tconst meshCacheKey = meshCacheKeyParts.join( ':' );\n\n\t\tif ( cache.meshes.has( meshCacheKey ) ) return cache.meshes.get( meshCacheKey );\n\n\t\tconst geometry = mesh.geometry;\n\t\tlet mode;\n\n\t\t// Use the correct mode\n\t\tif ( mesh.isLineSegments ) {\n\n\t\t\tmode = WEBGL_CONSTANTS.LINES;\n\n\t\t} else if ( mesh.isLineLoop ) {\n\n\t\t\tmode = WEBGL_CONSTANTS.LINE_LOOP;\n\n\t\t} else if ( mesh.isLine ) {\n\n\t\t\tmode = WEBGL_CONSTANTS.LINE_STRIP;\n\n\t\t} else if ( mesh.isPoints ) {\n\n\t\t\tmode = WEBGL_CONSTANTS.POINTS;\n\n\t\t} else {\n\n\t\t\tmode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n\n\t\t}\n\n\t\tif ( geometry.isBufferGeometry !== true ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFExporter: Geometry is not of type THREE.BufferGeometry.' );\n\n\t\t}\n\n\t\tconst meshDef = {};\n\t\tconst attributes = {};\n\t\tconst primitives = [];\n\t\tconst targets = [];\n\n\t\t// Conversion between attributes names in threejs and gltf spec\n\t\tconst nameConversion = {\n\t\t\tuv: 'TEXCOORD_0',\n\t\t\tuv2: 'TEXCOORD_1',\n\t\t\tcolor: 'COLOR_0',\n\t\t\tskinWeight: 'WEIGHTS_0',\n\t\t\tskinIndex: 'JOINTS_0'\n\t\t};\n\n\t\tconst originalNormal = geometry.getAttribute( 'normal' );\n\n\t\tif ( originalNormal !== undefined && ! this.isNormalizedNormalAttribute( originalNormal ) ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.' );\n\n\t\t\tgeometry.setAttribute( 'normal', this.createNormalizedNormalAttribute( originalNormal ) );\n\n\t\t}\n\n\t\t// @QUESTION Detect if .vertexColors = true?\n\t\t// For every attribute create an accessor\n\t\tlet modifiedAttribute = null;\n\n\t\tfor ( let attributeName in geometry.attributes ) {\n\n\t\t\t// Ignore morph target attributes, which are exported later.\n\t\t\tif ( attributeName.substr( 0, 5 ) === 'morph' ) continue;\n\n\t\t\tconst attribute = geometry.attributes[ attributeName ];\n\t\t\tattributeName = nameConversion[ attributeName ] || attributeName.toUpperCase();\n\n\t\t\t// Prefix all geometry attributes except the ones specifically\n\t\t\t// listed in the spec; non-spec attributes are considered custom.\n\t\t\tconst validVertexAttributes =\n\t\t\t\t\t/^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n\n\t\t\tif ( ! validVertexAttributes.test( attributeName ) ) attributeName = '_' + attributeName;\n\n\t\t\tif ( cache.attributes.has( this.getUID( attribute ) ) ) {\n\n\t\t\t\tattributes[ attributeName ] = cache.attributes.get( this.getUID( attribute ) );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\n\t\t\tmodifiedAttribute = null;\n\t\t\tconst array = attribute.array;\n\n\t\t\tif ( attributeName === 'JOINTS_0' &&\n\t\t\t\t! ( array instanceof Uint16Array ) &&\n\t\t\t\t! ( array instanceof Uint8Array ) ) {\n\n\t\t\t\tconsole.warn( 'GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.' );\n\t\t\t\tmodifiedAttribute = new BufferAttribute( new Uint16Array( array ), attribute.itemSize, attribute.normalized );\n\n\t\t\t}\n\n\t\t\tconst accessor = this.processAccessor( modifiedAttribute || attribute, geometry );\n\n\t\t\tif ( accessor !== null ) {\n\n\t\t\t\tattributes[ attributeName ] = accessor;\n\t\t\t\tcache.attributes.set( this.getUID( attribute ), accessor );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( originalNormal !== undefined ) geometry.setAttribute( 'normal', originalNormal );\n\n\t\t// Skip if no exportable attributes found\n\t\tif ( Object.keys( attributes ).length === 0 ) return null;\n\n\t\t// Morph targets\n\t\tif ( mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0 ) {\n\n\t\t\tconst weights = [];\n\t\t\tconst targetNames = [];\n\t\t\tconst reverseDictionary = {};\n\n\t\t\tif ( mesh.morphTargetDictionary !== undefined ) {\n\n\t\t\t\tfor ( const key in mesh.morphTargetDictionary ) {\n\n\t\t\t\t\treverseDictionary[ mesh.morphTargetDictionary[ key ] ] = key;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < mesh.morphTargetInfluences.length; ++ i ) {\n\n\t\t\t\tconst target = {};\n\t\t\t\tlet warned = false;\n\n\t\t\t\tfor ( const attributeName in geometry.morphAttributes ) {\n\n\t\t\t\t\t// glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\n\t\t\t\t\t// Three.js doesn't support TANGENT yet.\n\n\t\t\t\t\tif ( attributeName !== 'position' && attributeName !== 'normal' ) {\n\n\t\t\t\t\t\tif ( ! warned ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'GLTFExporter: Only POSITION and NORMAL morph are supported.' );\n\t\t\t\t\t\t\twarned = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst attribute = geometry.morphAttributes[ attributeName ][ i ];\n\t\t\t\t\tconst gltfAttributeName = attributeName.toUpperCase();\n\n\t\t\t\t\t// Three.js morph attribute has absolute values while the one of glTF has relative values.\n\t\t\t\t\t//\n\t\t\t\t\t// glTF 2.0 Specification:\n\t\t\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\n\n\t\t\t\t\tconst baseAttribute = geometry.attributes[ attributeName ];\n\n\t\t\t\t\tif ( cache.attributes.has( this.getUID( attribute ) ) ) {\n\n\t\t\t\t\t\ttarget[ gltfAttributeName ] = cache.attributes.get( this.getUID( attribute ) );\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Clones attribute not to override\n\t\t\t\t\tconst relativeAttribute = attribute.clone();\n\n\t\t\t\t\tif ( ! geometry.morphTargetsRelative ) {\n\n\t\t\t\t\t\tfor ( let j = 0, jl = attribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\trelativeAttribute.setXYZ(\n\t\t\t\t\t\t\t\tj,\n\t\t\t\t\t\t\t\tattribute.getX( j ) - baseAttribute.getX( j ),\n\t\t\t\t\t\t\t\tattribute.getY( j ) - baseAttribute.getY( j ),\n\t\t\t\t\t\t\t\tattribute.getZ( j ) - baseAttribute.getZ( j )\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttarget[ gltfAttributeName ] = this.processAccessor( relativeAttribute, geometry );\n\t\t\t\t\tcache.attributes.set( this.getUID( baseAttribute ), target[ gltfAttributeName ] );\n\n\t\t\t\t}\n\n\t\t\t\ttargets.push( target );\n\n\t\t\t\tweights.push( mesh.morphTargetInfluences[ i ] );\n\n\t\t\t\tif ( mesh.morphTargetDictionary !== undefined ) targetNames.push( reverseDictionary[ i ] );\n\n\t\t\t}\n\n\t\t\tmeshDef.weights = weights;\n\n\t\t\tif ( targetNames.length > 0 ) {\n\n\t\t\t\tmeshDef.extras = {};\n\t\t\t\tmeshDef.extras.targetNames = targetNames;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst isMultiMaterial = Array.isArray( mesh.material );\n\n\t\tif ( isMultiMaterial && geometry.groups.length === 0 ) return null;\n\n\t\tconst materials = isMultiMaterial ? mesh.material : [ mesh.material ];\n\t\tconst groups = isMultiMaterial ? geometry.groups : [ { materialIndex: 0, start: undefined, count: undefined } ];\n\n\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\tconst primitive = {\n\t\t\t\tmode: mode,\n\t\t\t\tattributes: attributes,\n\t\t\t};\n\n\t\t\tthis.serializeUserData( geometry, primitive );\n\n\t\t\tif ( targets.length > 0 ) primitive.targets = targets;\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\tlet cacheKey = this.getUID( geometry.index );\n\n\t\t\t\tif ( groups[ i ].start !== undefined || groups[ i ].count !== undefined ) {\n\n\t\t\t\t\tcacheKey += ':' + groups[ i ].start + ':' + groups[ i ].count;\n\n\t\t\t\t}\n\n\t\t\t\tif ( cache.attributes.has( cacheKey ) ) {\n\n\t\t\t\t\tprimitive.indices = cache.attributes.get( cacheKey );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tprimitive.indices = this.processAccessor( geometry.index, geometry, groups[ i ].start, groups[ i ].count );\n\t\t\t\t\tcache.attributes.set( cacheKey, primitive.indices );\n\n\t\t\t\t}\n\n\t\t\t\tif ( primitive.indices === null ) delete primitive.indices;\n\n\t\t\t}\n\n\t\t\tconst material = this.processMaterial( materials[ groups[ i ].materialIndex ] );\n\n\t\t\tif ( material !== null ) primitive.material = material;\n\n\t\t\tprimitives.push( primitive );\n\n\t\t}\n\n\t\tmeshDef.primitives = primitives;\n\n\t\tif ( ! json.meshes ) json.meshes = [];\n\n\t\tthis._invokeAll( function ( ext ) {\n\n\t\t\text.writeMesh && ext.writeMesh( mesh, meshDef );\n\n\t\t} );\n\n\t\tconst index = json.meshes.push( meshDef ) - 1;\n\t\tcache.meshes.set( meshCacheKey, index );\n\t\treturn index;\n\n\t}\n\n\t/**\n\t * Process camera\n\t * @param  {THREE.Camera} camera Camera to process\n\t * @return {Integer}      Index of the processed mesh in the \"camera\" array\n\t */\n\tprocessCamera( camera ) {\n\n\t\tconst json = this.json;\n\n\t\tif ( ! json.cameras ) json.cameras = [];\n\n\t\tconst isOrtho = camera.isOrthographicCamera;\n\n\t\tconst cameraDef = {\n\t\t\ttype: isOrtho ? 'orthographic' : 'perspective'\n\t\t};\n\n\t\tif ( isOrtho ) {\n\n\t\t\tcameraDef.orthographic = {\n\t\t\t\txmag: camera.right * 2,\n\t\t\t\tymag: camera.top * 2,\n\t\t\t\tzfar: camera.far <= 0 ? 0.001 : camera.far,\n\t\t\t\tznear: camera.near < 0 ? 0 : camera.near\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tcameraDef.perspective = {\n\t\t\t\taspectRatio: camera.aspect,\n\t\t\t\tyfov: MathUtils.degToRad( camera.fov ),\n\t\t\t\tzfar: camera.far <= 0 ? 0.001 : camera.far,\n\t\t\t\tznear: camera.near < 0 ? 0 : camera.near\n\t\t\t};\n\n\t\t}\n\n\t\t// Question: Is saving \"type\" as name intentional?\n\t\tif ( camera.name !== '' ) cameraDef.name = camera.type;\n\n\t\treturn json.cameras.push( cameraDef ) - 1;\n\n\t}\n\n\t/**\n\t * Creates glTF animation entry from AnimationClip object.\n\t *\n\t * Status:\n\t * - Only properties listed in PATH_PROPERTIES may be animated.\n\t *\n\t * @param {THREE.AnimationClip} clip\n\t * @param {THREE.Object3D} root\n\t * @return {number|null}\n\t */\n\tprocessAnimation( clip, root ) {\n\n\t\tconst json = this.json;\n\t\tconst nodeMap = this.nodeMap;\n\n\t\tif ( ! json.animations ) json.animations = [];\n\n\t\tclip = GLTFExporter.Utils.mergeMorphTargetTracks( clip.clone(), root );\n\n\t\tconst tracks = clip.tracks;\n\t\tconst channels = [];\n\t\tconst samplers = [];\n\n\t\tfor ( let i = 0; i < tracks.length; ++ i ) {\n\n\t\t\tconst track = tracks[ i ];\n\t\t\tconst trackBinding = PropertyBinding.parseTrackName( track.name );\n\t\t\tlet trackNode = PropertyBinding.findNode( root, trackBinding.nodeName );\n\t\t\tconst trackProperty = PATH_PROPERTIES[ trackBinding.propertyName ];\n\n\t\t\tif ( trackBinding.objectName === 'bones' ) {\n\n\t\t\t\tif ( trackNode.isSkinnedMesh === true ) {\n\n\t\t\t\t\ttrackNode = trackNode.skeleton.getBoneByName( trackBinding.objectIndex );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttrackNode = undefined;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ! trackNode || ! trackProperty ) {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Could not export animation track \"%s\".', track.name );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tconst inputItemSize = 1;\n\t\t\tlet outputItemSize = track.values.length / track.times.length;\n\n\t\t\tif ( trackProperty === PATH_PROPERTIES.morphTargetInfluences ) {\n\n\t\t\t\toutputItemSize /= trackNode.morphTargetInfluences.length;\n\n\t\t\t}\n\n\t\t\tlet interpolation;\n\n\t\t\t// @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\n\n\t\t\t// Detecting glTF cubic spline interpolant by checking factory method's special property\n\t\t\t// GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\n\t\t\t// valid value from .getInterpolation().\n\t\t\tif ( track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true ) {\n\n\t\t\t\tinterpolation = 'CUBICSPLINE';\n\n\t\t\t\t// itemSize of CUBICSPLINE keyframe is 9\n\t\t\t\t// (VEC3 * 3: inTangent, splineVertex, and outTangent)\n\t\t\t\t// but needs to be stored as VEC3 so dividing by 3 here.\n\t\t\t\toutputItemSize /= 3;\n\n\t\t\t} else if ( track.getInterpolation() === InterpolateDiscrete ) {\n\n\t\t\t\tinterpolation = 'STEP';\n\n\t\t\t} else {\n\n\t\t\t\tinterpolation = 'LINEAR';\n\n\t\t\t}\n\n\t\t\tsamplers.push( {\n\t\t\t\tinput: this.processAccessor( new BufferAttribute( track.times, inputItemSize ) ),\n\t\t\t\toutput: this.processAccessor( new BufferAttribute( track.values, outputItemSize ) ),\n\t\t\t\tinterpolation: interpolation\n\t\t\t} );\n\n\t\t\tchannels.push( {\n\t\t\t\tsampler: samplers.length - 1,\n\t\t\t\ttarget: {\n\t\t\t\t\tnode: nodeMap.get( trackNode ),\n\t\t\t\t\tpath: trackProperty\n\t\t\t\t}\n\t\t\t} );\n\n\t\t}\n\n\t\tjson.animations.push( {\n\t\t\tname: clip.name || 'clip_' + json.animations.length,\n\t\t\tsamplers: samplers,\n\t\t\tchannels: channels\n\t\t} );\n\n\t\treturn json.animations.length - 1;\n\n\t}\n\n\t/**\n\t * @param {THREE.Object3D} object\n\t * @return {number|null}\n\t */\n\t processSkin( object ) {\n\n\t\tconst json = this.json;\n\t\tconst nodeMap = this.nodeMap;\n\n\t\tconst node = json.nodes[ nodeMap.get( object ) ];\n\n\t\tconst skeleton = object.skeleton;\n\n\t\tif ( skeleton === undefined ) return null;\n\n\t\tconst rootJoint = object.skeleton.bones[ 0 ];\n\n\t\tif ( rootJoint === undefined ) return null;\n\n\t\tconst joints = [];\n\t\tconst inverseBindMatrices = new Float32Array( skeleton.bones.length * 16 );\n\t\tconst temporaryBoneInverse = new Matrix4();\n\n\t\tfor ( let i = 0; i < skeleton.bones.length; ++ i ) {\n\n\t\t\tjoints.push( nodeMap.get( skeleton.bones[ i ] ) );\n\t\t\ttemporaryBoneInverse.copy( skeleton.boneInverses[ i ] );\n\t\t\ttemporaryBoneInverse.multiply( object.bindMatrix ).toArray( inverseBindMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( json.skins === undefined ) json.skins = [];\n\n\t\tjson.skins.push( {\n\t\t\tinverseBindMatrices: this.processAccessor( new BufferAttribute( inverseBindMatrices, 16 ) ),\n\t\t\tjoints: joints,\n\t\t\tskeleton: nodeMap.get( rootJoint )\n\t\t} );\n\n\t\tconst skinIndex = node.skin = json.skins.length - 1;\n\n\t\treturn skinIndex;\n\n\t}\n\n\t/**\n\t * Process Object3D node\n\t * @param  {THREE.Object3D} node Object3D to processNode\n\t * @return {Integer} Index of the node in the nodes list\n\t */\n\tprocessNode( object ) {\n\n\t\tconst json = this.json;\n\t\tconst options = this.options;\n\t\tconst nodeMap = this.nodeMap;\n\n\t\tif ( ! json.nodes ) json.nodes = [];\n\n\t\tconst nodeDef = {};\n\n\t\tif ( options.trs ) {\n\n\t\t\tconst rotation = object.quaternion.toArray();\n\t\t\tconst position = object.position.toArray();\n\t\t\tconst scale = object.scale.toArray();\n\n\t\t\tif ( ! equalArray( rotation, [ 0, 0, 0, 1 ] ) ) {\n\n\t\t\t\tnodeDef.rotation = rotation;\n\n\t\t\t}\n\n\t\t\tif ( ! equalArray( position, [ 0, 0, 0 ] ) ) {\n\n\t\t\t\tnodeDef.translation = position;\n\n\t\t\t}\n\n\t\t\tif ( ! equalArray( scale, [ 1, 1, 1 ] ) ) {\n\n\t\t\t\tnodeDef.scale = scale;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( object.matrixAutoUpdate ) {\n\n\t\t\t\tobject.updateMatrix();\n\n\t\t\t}\n\n\t\t\tif ( isIdentityMatrix( object.matrix ) === false ) {\n\n\t\t\t\tnodeDef.matrix = object.matrix.elements;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// We don't export empty strings name because it represents no-name in Three.js.\n\t\tif ( object.name !== '' ) nodeDef.name = String( object.name );\n\n\t\tthis.serializeUserData( object, nodeDef );\n\n\t\tif ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\tconst meshIndex = this.processMesh( object );\n\n\t\t\tif ( meshIndex !== null ) nodeDef.mesh = meshIndex;\n\n\t\t} else if ( object.isCamera ) {\n\n\t\t\tnodeDef.camera = this.processCamera( object );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) this.skins.push( object );\n\n\t\tif ( object.children.length > 0 ) {\n\n\t\t\tconst children = [];\n\n\t\t\tfor ( let i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = object.children[ i ];\n\n\t\t\t\tif ( child.visible || options.onlyVisible === false ) {\n\n\t\t\t\t\tconst nodeIndex = this.processNode( child );\n\n\t\t\t\t\tif ( nodeIndex !== null ) children.push( nodeIndex );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( children.length > 0 ) nodeDef.children = children;\n\n\t\t}\n\n\t\tthis._invokeAll( function ( ext ) {\n\n\t\t\text.writeNode && ext.writeNode( object, nodeDef );\n\n\t\t} );\n\n\t\tconst nodeIndex = json.nodes.push( nodeDef ) - 1;\n\t\tnodeMap.set( object, nodeIndex );\n\t\treturn nodeIndex;\n\n\t}\n\n\t/**\n\t * Process Scene\n\t * @param  {Scene} node Scene to process\n\t */\n\tprocessScene( scene ) {\n\n\t\tconst json = this.json;\n\t\tconst options = this.options;\n\n\t\tif ( ! json.scenes ) {\n\n\t\t\tjson.scenes = [];\n\t\t\tjson.scene = 0;\n\n\t\t}\n\n\t\tconst sceneDef = {};\n\n\t\tif ( scene.name !== '' ) sceneDef.name = scene.name;\n\n\t\tjson.scenes.push( sceneDef );\n\n\t\tconst nodes = [];\n\n\t\tfor ( let i = 0, l = scene.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = scene.children[ i ];\n\n\t\t\tif ( child.visible || options.onlyVisible === false ) {\n\n\t\t\t\tconst nodeIndex = this.processNode( child );\n\n\t\t\t\tif ( nodeIndex !== null ) nodes.push( nodeIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( nodes.length > 0 ) sceneDef.nodes = nodes;\n\n\t\tthis.serializeUserData( scene, sceneDef );\n\n\t}\n\n\t/**\n\t * Creates a Scene to hold a list of objects and parse it\n\t * @param  {Array} objects List of objects to process\n\t */\n\tprocessObjects( objects ) {\n\n\t\tconst scene = new Scene();\n\t\tscene.name = 'AuxScene';\n\n\t\tfor ( let i = 0; i < objects.length; i ++ ) {\n\n\t\t\t// We push directly to children instead of calling `add` to prevent\n\t\t\t// modify the .parent and break its original scene and hierarchy\n\t\t\tscene.children.push( objects[ i ] );\n\n\t\t}\n\n\t\tthis.processScene( scene );\n\n\t}\n\n\t/**\n\t * @param {THREE.Object3D|Array<THREE.Object3D>} input\n\t */\n\tprocessInput( input ) {\n\n\t\tconst options = this.options;\n\n\t\tinput = input instanceof Array ? input : [ input ];\n\n\t\tthis._invokeAll( function ( ext ) {\n\n\t\t\text.beforeParse && ext.beforeParse( input );\n\n\t\t} );\n\n\t\tconst objectsWithoutScene = [];\n\n\t\tfor ( let i = 0; i < input.length; i ++ ) {\n\n\t\t\tif ( input[ i ] instanceof Scene ) {\n\n\t\t\t\tthis.processScene( input[ i ] );\n\n\t\t\t} else {\n\n\t\t\t\tobjectsWithoutScene.push( input[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( objectsWithoutScene.length > 0 ) this.processObjects( objectsWithoutScene );\n\n\t\tfor ( let i = 0; i < this.skins.length; ++ i ) {\n\n\t\t\tthis.processSkin( this.skins[ i ] );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < options.animations.length; ++ i ) {\n\n\t\t\tthis.processAnimation( options.animations[ i ], input[ 0 ] );\n\n\t\t}\n\n\t\tthis._invokeAll( function ( ext ) {\n\n\t\t\text.afterParse && ext.afterParse( input );\n\n\t\t} );\n\n\t}\n\n\t_invokeAll( func ) {\n\n\t\tfor ( let i = 0, il = this.plugins.length; i < il; i ++ ) {\n\n\t\t\tfunc( this.plugins[ i ] );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Punctual Lights Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n */\nclass GLTFLightExtension {\n\n\tconstructor( writer ) {\n\n\t\tthis.writer = writer;\n\t\tthis.name = 'KHR_lights_punctual';\n\n\t}\n\n\twriteNode( light, nodeDef ) {\n\n\t\tif ( ! light.isLight ) return;\n\n\t\tif ( ! light.isDirectionalLight && ! light.isPointLight && ! light.isSpotLight ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFExporter: Only directional, point, and spot lights are supported.', light );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst writer = this.writer;\n\t\tconst json = writer.json;\n\t\tconst extensionsUsed = writer.extensionsUsed;\n\n\t\tconst lightDef = {};\n\n\t\tif ( light.name ) lightDef.name = light.name;\n\n\t\tlightDef.color = light.color.toArray();\n\n\t\tlightDef.intensity = light.intensity;\n\n\t\tif ( light.isDirectionalLight ) {\n\n\t\t\tlightDef.type = 'directional';\n\n\t\t} else if ( light.isPointLight ) {\n\n\t\t\tlightDef.type = 'point';\n\n\t\t\tif ( light.distance > 0 ) lightDef.range = light.distance;\n\n\t\t} else if ( light.isSpotLight ) {\n\n\t\t\tlightDef.type = 'spot';\n\n\t\t\tif ( light.distance > 0 ) lightDef.range = light.distance;\n\n\t\t\tlightDef.spot = {};\n\t\t\tlightDef.spot.innerConeAngle = ( light.penumbra - 1.0 ) * light.angle * - 1.0;\n\t\t\tlightDef.spot.outerConeAngle = light.angle;\n\n\t\t}\n\n\t\tif ( light.decay !== undefined && light.decay !== 2 ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, '\n\t\t\t\t+ 'and expects light.decay=2.' );\n\n\t\t}\n\n\t\tif ( light.target\n\t\t\t\t&& ( light.target.parent !== light\n\t\t\t\t|| light.target.position.x !== 0\n\t\t\t\t|| light.target.position.y !== 0\n\t\t\t\t|| light.target.position.z !== - 1 ) ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFExporter: Light direction may be lost. For best results, '\n\t\t\t\t+ 'make light.target a child of the light with position 0,0,-1.' );\n\n\t\t}\n\n\t\tif ( ! extensionsUsed[ this.name ] ) {\n\n\t\t\tjson.extensions = json.extensions || {};\n\t\t\tjson.extensions[ this.name ] = { lights: [] };\n\t\t\textensionsUsed[ this.name ] = true;\n\n\t\t}\n\n\t\tconst lights = json.extensions[ this.name ].lights;\n\t\tlights.push( lightDef );\n\n\t\tnodeDef.extensions = nodeDef.extensions || {};\n\t\tnodeDef.extensions[ this.name ] = { light: lights.length - 1 };\n\n\t}\n\n}\n\n/**\n * Unlit Materials Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n */\nclass GLTFMaterialsUnlitExtension {\n\n\tconstructor( writer ) {\n\n\t\tthis.writer = writer;\n\t\tthis.name = 'KHR_materials_unlit';\n\n\t}\n\n\twriteMaterial( material, materialDef ) {\n\n\t\tif ( ! material.isMeshBasicMaterial ) return;\n\n\t\tconst writer = this.writer;\n\t\tconst extensionsUsed = writer.extensionsUsed;\n\n\t\tmaterialDef.extensions = materialDef.extensions || {};\n\t\tmaterialDef.extensions[ this.name ] = {};\n\n\t\textensionsUsed[ this.name ] = true;\n\n\t\tmaterialDef.pbrMetallicRoughness.metallicFactor = 0.0;\n\t\tmaterialDef.pbrMetallicRoughness.roughnessFactor = 0.9;\n\n\t}\n\n}\n\n/**\n * Specular-Glossiness Extension\n *\n * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n */\nclass GLTFMaterialsPBRSpecularGlossiness {\n\n\tconstructor( writer ) {\n\n\t\tthis.writer = writer;\n\t\tthis.name = 'KHR_materials_pbrSpecularGlossiness';\n\n\t}\n\n\twriteMaterial( material, materialDef ) {\n\n\t\tif ( ! material.isGLTFSpecularGlossinessMaterial ) return;\n\n\t\tconst writer = this.writer;\n\t\tconst extensionsUsed = writer.extensionsUsed;\n\n\t\tconst extensionDef = {};\n\n\t\tif ( materialDef.pbrMetallicRoughness.baseColorFactor ) {\n\n\t\t\textensionDef.diffuseFactor = materialDef.pbrMetallicRoughness.baseColorFactor;\n\n\t\t}\n\n\t\tconst specularFactor = [ 1, 1, 1 ];\n\t\tmaterial.specular.toArray( specularFactor, 0 );\n\t\textensionDef.specularFactor = specularFactor;\n\t\textensionDef.glossinessFactor = material.glossiness;\n\n\t\tif ( materialDef.pbrMetallicRoughness.baseColorTexture ) {\n\n\t\t\textensionDef.diffuseTexture = materialDef.pbrMetallicRoughness.baseColorTexture;\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tconst specularMapDef = { index: writer.processTexture( material.specularMap ) };\n\t\t\twriter.applyTextureTransform( specularMapDef, material.specularMap );\n\t\t\textensionDef.specularGlossinessTexture = specularMapDef;\n\n\t\t}\n\n\t\tmaterialDef.extensions = materialDef.extensions || {};\n\t\tmaterialDef.extensions[ this.name ] = extensionDef;\n\t\textensionsUsed[ this.name ] = true;\n\n\t}\n\n}\n\n/**\n * Static utility functions\n */\nGLTFExporter.Utils = {\n\n\tinsertKeyframe: function ( track, time ) {\n\n\t\tconst tolerance = 0.001; // 1ms\n\t\tconst valueSize = track.getValueSize();\n\n\t\tconst times = new track.TimeBufferType( track.times.length + 1 );\n\t\tconst values = new track.ValueBufferType( track.values.length + valueSize );\n\t\tconst interpolant = track.createInterpolant( new track.ValueBufferType( valueSize ) );\n\n\t\tlet index;\n\n\t\tif ( track.times.length === 0 ) {\n\n\t\t\ttimes[ 0 ] = time;\n\n\t\t\tfor ( let i = 0; i < valueSize; i ++ ) {\n\n\t\t\t\tvalues[ i ] = 0;\n\n\t\t\t}\n\n\t\t\tindex = 0;\n\n\t\t} else if ( time < track.times[ 0 ] ) {\n\n\t\t\tif ( Math.abs( track.times[ 0 ] - time ) < tolerance ) return 0;\n\n\t\t\ttimes[ 0 ] = time;\n\t\t\ttimes.set( track.times, 1 );\n\n\t\t\tvalues.set( interpolant.evaluate( time ), 0 );\n\t\t\tvalues.set( track.values, valueSize );\n\n\t\t\tindex = 0;\n\n\t\t} else if ( time > track.times[ track.times.length - 1 ] ) {\n\n\t\t\tif ( Math.abs( track.times[ track.times.length - 1 ] - time ) < tolerance ) {\n\n\t\t\t\treturn track.times.length - 1;\n\n\t\t\t}\n\n\t\t\ttimes[ times.length - 1 ] = time;\n\t\t\ttimes.set( track.times, 0 );\n\n\t\t\tvalues.set( track.values, 0 );\n\t\t\tvalues.set( interpolant.evaluate( time ), track.values.length );\n\n\t\t\tindex = times.length - 1;\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < track.times.length; i ++ ) {\n\n\t\t\t\tif ( Math.abs( track.times[ i ] - time ) < tolerance ) return i;\n\n\t\t\t\tif ( track.times[ i ] < time && track.times[ i + 1 ] > time ) {\n\n\t\t\t\t\ttimes.set( track.times.slice( 0, i + 1 ), 0 );\n\t\t\t\t\ttimes[ i + 1 ] = time;\n\t\t\t\t\ttimes.set( track.times.slice( i + 1 ), i + 2 );\n\n\t\t\t\t\tvalues.set( track.values.slice( 0, ( i + 1 ) * valueSize ), 0 );\n\t\t\t\t\tvalues.set( interpolant.evaluate( time ), ( i + 1 ) * valueSize );\n\t\t\t\t\tvalues.set( track.values.slice( ( i + 1 ) * valueSize ), ( i + 2 ) * valueSize );\n\n\t\t\t\t\tindex = i + 1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\ttrack.times = times;\n\t\ttrack.values = values;\n\n\t\treturn index;\n\n\t},\n\n\tmergeMorphTargetTracks: function ( clip, root ) {\n\n\t\tconst tracks = [];\n\t\tconst mergedTracks = {};\n\t\tconst sourceTracks = clip.tracks;\n\n\t\tfor ( let i = 0; i < sourceTracks.length; ++ i ) {\n\n\t\t\tlet sourceTrack = sourceTracks[ i ];\n\t\t\tconst sourceTrackBinding = PropertyBinding.parseTrackName( sourceTrack.name );\n\t\t\tconst sourceTrackNode = PropertyBinding.findNode( root, sourceTrackBinding.nodeName );\n\n\t\t\tif ( sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined ) {\n\n\t\t\t\t// Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\n\t\t\t\ttracks.push( sourceTrack );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete\n\t\t\t\t&& sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear ) {\n\n\t\t\t\tif ( sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\t\t// This should never happen, because glTF morph target animations\n\t\t\t\t\t// affect all targets already.\n\t\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.' );\n\n\t\t\t\t}\n\n\t\t\t\tconsole.warn( 'THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.' );\n\n\t\t\t\tsourceTrack = sourceTrack.clone();\n\t\t\t\tsourceTrack.setInterpolation( InterpolateLinear );\n\n\t\t\t}\n\n\t\t\tconst targetCount = sourceTrackNode.morphTargetInfluences.length;\n\t\t\tconst targetIndex = sourceTrackNode.morphTargetDictionary[ sourceTrackBinding.propertyIndex ];\n\n\t\t\tif ( targetIndex === undefined ) {\n\n\t\t\t\tthrow new Error( 'THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex );\n\n\t\t\t}\n\n\t\t\tlet mergedTrack;\n\n\t\t\t// If this is the first time we've seen this object, create a new\n\t\t\t// track to store merged keyframe data for each morph target.\n\t\t\tif ( mergedTracks[ sourceTrackNode.uuid ] === undefined ) {\n\n\t\t\t\tmergedTrack = sourceTrack.clone();\n\n\t\t\t\tconst values = new mergedTrack.ValueBufferType( targetCount * mergedTrack.times.length );\n\n\t\t\t\tfor ( let j = 0; j < mergedTrack.times.length; j ++ ) {\n\n\t\t\t\t\tvalues[ j * targetCount + targetIndex ] = mergedTrack.values[ j ];\n\n\t\t\t\t}\n\n\t\t\t\t// We need to take into consideration the intended target node\n\t\t\t\t// of our original un-merged morphTarget animation.\n\t\t\t\tmergedTrack.name = ( sourceTrackBinding.nodeName || '' ) + '.morphTargetInfluences';\n\t\t\t\tmergedTrack.values = values;\n\n\t\t\t\tmergedTracks[ sourceTrackNode.uuid ] = mergedTrack;\n\t\t\t\ttracks.push( mergedTrack );\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst sourceInterpolant = sourceTrack.createInterpolant( new sourceTrack.ValueBufferType( 1 ) );\n\n\t\t\tmergedTrack = mergedTracks[ sourceTrackNode.uuid ];\n\n\t\t\t// For every existing keyframe of the merged track, write a (possibly\n\t\t\t// interpolated) value from the source track.\n\t\t\tfor ( let j = 0; j < mergedTrack.times.length; j ++ ) {\n\n\t\t\t\tmergedTrack.values[ j * targetCount + targetIndex ] = sourceInterpolant.evaluate( mergedTrack.times[ j ] );\n\n\t\t\t}\n\n\t\t\t// For every existing keyframe of the source track, write a (possibly\n\t\t\t// new) keyframe to the merged track. Values from the previous loop may\n\t\t\t// be written again, but keyframes are de-duplicated.\n\t\t\tfor ( let j = 0; j < sourceTrack.times.length; j ++ ) {\n\n\t\t\t\tconst keyframeIndex = this.insertKeyframe( mergedTrack, sourceTrack.times[ j ] );\n\t\t\t\tmergedTrack.values[ keyframeIndex * targetCount + targetIndex ] = sourceTrack.values[ j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tclip.tracks = tracks;\n\n\t\treturn clip;\n\n\t}\n\n};\n\nexport { GLTFExporter };\n"],"sourceRoot":""}