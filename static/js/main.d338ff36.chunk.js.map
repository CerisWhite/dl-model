{"version":3,"sources":["reducer/settingsReducer.js","context/SettingsContext.js","helpers.js","ModelViewer.js","Display.js","MainPage.js","App.js","hooks/useToggleState.js","data/face_offset.js","consts.js","styles/MainPageStyles.js","styles/Rose-Petals.svg","viewerHelpers.js","shader/outlineFragShader.js","shader/outlineVertShader.js","serviceWorker.js","index.js"],"names":["settingsReducer","state","action","type","key","subkey","value","currentValue","defaultSetting","defaultSettings","update","forEach","v","SettingsContext","createContext","DispatchContext","initSettings","chainMaker","chain","chainCodeToList","animation","code","SettingsProvider","props","useReducer","settings","dispatch","Provider","children","Object","keys","scene","lights","map","light","isBlade","startsWith","callbackOnEach","list","callback","Array","isArray","child","setInitialSettings","params","length","eyeTextureDefined","mouthTextureDefined","param","split","keycode","setValue","join","chainList","n","parseFloat","initKey","group","isBooleanValue","Boolean","generateChainCode","output","ani","i","fileName","aniName","faceChanges","concat","modCode","generateAniModCode","faceCode","generateFaceCode","aniModList","modKey","defaultValue","change","time","eyeIdx","mouthIdx","collectFilter","toggleState","collected","tmp","k","push","multiCondFilter","input","filters","filterKeys","filter","el","every","includes","getTextColor","color","rgb","hex","result","exec","r","parseInt","g","b","hexToRgb","aniButtonsFromObject","object","handleSelect","groupName","style","maxWidth","variant","data-value","data-name","onClick","getStandbyCode","weapon","gender","WEAPON_CODE","GENDER_CODE","getVictoryCode","getDashAtkCode","getRollCode","getComboCode","comboLength","COMBO_LENGTH","slice","getFSCode","fsAniLength","FS_LENGTH","getLobbyCode","SIDES","ModelViewer","initialize","a","setIsLoading","initScene","loadModels","initAnimation","viewport","width","window","innerWidth","height","innerHeight","clock","THREE","bgColor","floor","createInvisibleFloor","add","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","target","addLights","loadedFX","Map","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","AAEnabled","antiAliasing","_AA","renderer","finalRenderer","canvas","domElement","setSize","appendChild","animate","models","modelInfo","main","model","id","weaponLeft","analyzeWeaponCode","weaponRight","materials","outlines","initModelsLoad","modelId","isSimpleViewer","materialType","texturePath","changeMaterial","basicMainProcessing","isDragon","initDragonFace","initAllModels","addAnimation","enable","intensity","constructor","entries","removeLights","remove","modelPath","getModelPath","loadMain","loadModel","loadWeaponR","loadWeaponL","Promise","all","addToScene","outlineParams","outline","createOutline","forced","initFace","_eyeIdx","_mouthIdx","DEFAULT_FACE_IDX","defaultFaceParams","mouthTexture","eyeTexture","updateFace","initMainModel","initPos","clone","initRot","rotation","initAllWeapons","attachAllWeapons","applyMaterialSettings","side","weaponInfo","flipped","y","Math","PI","attachWeapon","boneName","traverse","name","detachWeapon","parent","detachAllWeapons","playNextAni","nAni","capture","_aniIdx","mediaRecorder","stop","toggleCapture","newIdx","aniIdx","aniCode","timeScale","analyzeChainCode","fileList","animationList","mixer","addEventListener","aniSettings","repetitions","batchLoader","file","path","fbxSource","animFiles","animations","anim","fileIdx","find","removeAnimation","mainModel","stopAllAction","copy","resetFace","updateViewport","prev","current","aspect","captureAnimation","chunks","videoStream","captureStream","MediaRecorder","mimeType","codec","ondataavailable","event","data","onstop","superBuffer","Blob","url","URL","createObjectURL","document","createElement","href","download","body","click","revokeObjectURL","removeChild","start","updateEyeTexture","currentTexture","prevTexture","applyEyeTexture","textureId","offset","calculateTextureOffset","applyEyeOffset","updateMouthTexture","applyMouthTexture","applyMouthOffset","updateFaceTexture","eyeUpdated","mouthUpdated","updateFaceOffset","disposeMainModel","disposeItem","updateMainModel","updateWeapons","updateModel","some","updateAnimation","updateOutlineParams","values","flat","applyOutlineSettings","updateOutline","updatedKeys","saveMaterialReference","getMaterial","forEachMaterial","mat","applyMaterialParams","materialParams","useTexture","flatShading","gradientMap","paramsList","getParamsList","paramFilter","directSetParams","matDirectSetParams","colorParams","matColorParams","nTones","newMap","createGradientMap","needsUpdate","currentColor","backupMap","updateMaterialParams","updatedParams","updateMaterial","updateLights","updateAscii","newCanvas","setCanvas","has","AsciiEffect","showAscii","ascii","charSet","invert","get","effect","background","rotateFloor","dt","rotateSpeed","rotateY","frameId","requestAnimationFrame","getDelta","faceChangeTime","shift","render","app","this","AA","cancelAnimationFrame","renderLists","dispose","ref","enabled","currentSize","getSize","x","clipAction","currentAniSettings","setLoop","clampWhenFinished","getFaceChangesArray","currentClipDuration","setTime","duration","play","oldIdx","calculateIdxOffset","PureComponent","AniControl","lazy","Display","useContext","initCameraPosition","showAniControl","useCallback","defaultCameraPosition","cameraPositions","isNaN","controlsPositions","className","fallback","ControlPanel","SideBar","MainPage","location","classes","useStyles","useState","currentMode","setCurrentMode","useToggleState","sidebarOpen","toggleSidebarOpen","controlOpen","toggleControlOpen","isLoading","initLoadDone","setInitLoadDone","useRef","showSettings","viewerRef","setViewport","useEffect","pathname","updateViewportSize","removeEventListener","clientHeight","clientWidth","loadingMsg","root","CssBaseline","mode","open","openSidebarButton","openControl","handler","content","process","App","routeProps","initVal","setState","faceOffset","c110296_02","c100004_17","c110371_01","c110350_02","c110340_02","c110018_02","c110370_01","c100015_04","c110342_01","c110267_01","c110050_02","c110291_01","c110354_01","c110345_01","c110266_01","c110365_01","c110346_01","c110366_01","c110299_02","c110360_01","c110307_01","c110322_01","c110356_01","c110300_01","c110344_01","c110053_03","c110368_01","c110367_01","c110003_02","c110270_02","c110341_03","DRAWER_WIDTH","DRAWER_BGCOLOR","baseUrl","matParamsDetails","wireframe","default","transparent","emissive","opacity","min","max","step","emissiveIntensity","specular","metalness","roughness","shininess","options","defaultMatParams","needsUpdateParams","asciiSet","texture","lightId","sideContent","size","supportedCodecs","et","ei","mt","mi","wr","wl","bg","cam","ts","showAC","showOutline","rot","cc","MATERIALS","matCommonParams","matExtraParams","Basic","Toon","Lambert","Phong","Standard","Sword","Blade","Dagger","Axe","Lance","Bow","Wand","Staff","Manacaster","WEAPON_LIST","Male","Female","FILTERS","rarity","element","WEAPON_FILTERS","spFaceTextures","incompatibleModels","Set","commonBG","green","black","grey","white","c","d","w","e","h","o","c100034_01","d210078_01","d210114_01","h0010001","h0010001_02","h0040101","r0070401","r0080401","smith","idxOffsets","face1","face2","face3","face4","face5","face6","face7","face8","face9","videoCodecs","drawerWidth","drawerBG","makeStyles","theme","display","drawer","overflowY","drawerPaper","alignItems","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","marginBottom","padding","top","left","margin","borderRadius","transition","cursor","zIndex","justifyContent","fontSize","resolve","FBXLoader","load","floorGeometry","rotateX","floorMaterial","visible","getMeshes","getOutline","meshes","isMesh","unshift","mesh","material","getTexturePath","endsWith","weaponCode","substring","item","disposedList","needToDispose","uuid","notDisposed","disposeObject","geometry","matType","nameRegex","test","createNewMaterial","matIsArray","checkParam","encoding","newMaterial","skinning","createOutlineMaterial","replaceMaterial","isSkinnedMesh","bind","skeleton","bindMatrix","uniforms","tyle","fragmentShader","vertexShader","fill","prevOffset","textureOffsets","currentOffset","currentIdx","prevIdx","applyOffset","part","groups","targetGroup","materialIndex","end","count","uv","attributes","u","getX","getY","setXY","applyTexture","aniCodes","currentAni","details","currentParts","Infinity","faceMod","processFaceChanges","sorted","sort","timeStamps","simplified","assign","_","others","colors","Uint8Array","minFilter","magFilter","generateMipmaps","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d338ff36.chunk.js","sourcesContent":["import { defaultSettings } from \"../consts\";\r\n\r\nexport const settingsReducer = (state, action) => {\r\n    const { type, key, subkey, value } = action;\r\n    switch (type) {\r\n        case \"toggle\":\r\n            let currentValue;\r\n            if (subkey) {\r\n                currentValue = state[key][subkey][value];\r\n                return {\r\n                    ...state,\r\n                    [key]: {\r\n                        ...state[key],\r\n                        [subkey]: {\r\n                            ...state[key][subkey],\r\n                            [value]: !currentValue,\r\n                        },\r\n                    },\r\n                };\r\n            }\r\n            currentValue = state[key][value];\r\n            return {\r\n                ...state,\r\n                [key]: { ...state[key], [value]: !currentValue },\r\n            };\r\n        case \"reset\":\r\n            // reset values\r\n            // value = array of keys in settings[key] or settings[key][subkey] to be reset, null -> reset all\r\n            const defaultSetting = subkey\r\n                ? defaultSettings[key][subkey]\r\n                : defaultSettings[key];\r\n            // no value -> reset all\r\n            if (!value)\r\n                return subkey\r\n                    ? {\r\n                          ...state,\r\n                          [key]: {\r\n                              ...state[key],\r\n                              [subkey]: {\r\n                                  ...state[key][subkey],\r\n                                  ...defaultSetting,\r\n                              },\r\n                          },\r\n                      }\r\n                    : {\r\n                          ...state,\r\n                          [key]: { ...state[key], ...defaultSetting },\r\n                      };\r\n            // if value is defined, reset only the specified keys\r\n            const update = {};\r\n            value.forEach(v => {\r\n                update[v] = defaultSetting[v];\r\n            });\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...update },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...update } };\r\n        case \"load\":\r\n            // load preset values\r\n            return;\r\n        case \"update\":\r\n            // update state[key] or state[key][subkey] with values from value\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...value },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...value } };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createContext, useReducer } from \"react\";\r\nimport { settingsReducer } from \"../reducer/settingsReducer\";\r\nimport { defaultSettings } from \"../consts\";\r\nimport { chainCodeToList } from \"../viewerHelpers\";\r\n\r\nexport const SettingsContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nconst initAniChain = chainCodeToList(defaultSettings.animation.code, \"init\");\r\n\r\nconst initSettings = { chainMaker: { chain: initAniChain } };\r\nObject.keys(defaultSettings).forEach(\r\n    key => (initSettings[key] = { ...defaultSettings[key] })\r\n);\r\ninitSettings.scene.lights = defaultSettings.scene.lights.map(light => ({\r\n    ...light,\r\n}));\r\n\r\nexport { initSettings };\r\n\r\nexport function SettingsProvider(props) {\r\n    const [settings, dispatch] = useReducer(settingsReducer, initSettings);\r\n\r\n    return (\r\n        <SettingsContext.Provider value={settings}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                {props.children}\r\n            </DispatchContext.Provider>\r\n        </SettingsContext.Provider>\r\n    );\r\n}\r\n","import Button from \"@material-ui/core/Button\";\r\n\r\nimport { initSettings } from \"./context/SettingsContext\";\r\nimport {\r\n    initKey,\r\n    WEAPON_CODE,\r\n    GENDER_CODE,\r\n    COMBO_LENGTH,\r\n    FS_LENGTH,\r\n    aniModList,\r\n} from \"./consts\";\r\n\r\nimport { chainCodeToList } from \"./viewerHelpers\";\r\n\r\nexport const isBlade = code => code.startsWith(\"w302\");\r\n\r\nexport const isSheath = code => isBlade(code) && code.endsWith(\"02\");\r\n\r\nexport const callbackOnEach = (list, callback) => {\r\n    if (Array.isArray(list)) {\r\n        list.forEach(child => callback(child));\r\n        return;\r\n    }\r\n    callback(list);\r\n};\r\n\r\nexport const setInitialSettings = params => {\r\n    if (params.length === 0) return;\r\n    let eyeTextureDefined = false;\r\n    let mouthTextureDefined = false;\r\n    params.forEach(param => {\r\n        if (!param) return;\r\n\r\n        const [keycode, ...value] = param.split(\"=\"); // animation code can have \"=\" inside\r\n        // if no value given, skip\r\n        if (!value[0]) return;\r\n\r\n        let setValue = value.length === 1 ? value[0] : value.join(\"=\");\r\n\r\n        switch (keycode) {\r\n            case \"et\":\r\n                eyeTextureDefined = true;\r\n                break;\r\n            case \"mt\":\r\n                mouthTextureDefined = true;\r\n                break;\r\n            case \"cc\":\r\n                // initialize chain maker chain\r\n                const chainList = chainCodeToList(setValue, \"Animation\");\r\n                initSettings[\"chainMaker\"][\"chain\"] = chainList;\r\n                break;\r\n            case \"bg\":\r\n                if (setValue !== \"transparent\") {\r\n                    setValue = `#${setValue}`;\r\n                }\r\n                break;\r\n            case \"cam\": // parameters in form x, y, z\r\n                setValue = setValue.split(\",\").map(n => parseFloat(n));\r\n                break;\r\n            default:\r\n        }\r\n        const { group, key } = initKey[keycode];\r\n\r\n        const isBooleanValue = setValue === \"true\" || setValue === \"false\";\r\n\r\n        initSettings[group][key] = isBooleanValue\r\n            ? Boolean(setValue === \"true\")\r\n            : setValue;\r\n    });\r\n\r\n    initSettings[\"model\"][\"texture\"] = initSettings[\"model\"][\"id\"];\r\n\r\n    if (!eyeTextureDefined) {\r\n        initSettings[\"model\"][\"eyeTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n    if (!mouthTextureDefined) {\r\n        initSettings[\"model\"][\"mouthTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n};\r\n\r\nexport const generateChainCode = chain => {\r\n    const length = chain.length;\r\n    let output = \"\";\r\n    chain.forEach((ani, i) => {\r\n        const { fileName, aniName, faceChanges } = ani;\r\n        if (fileName) {\r\n            if (i === 0) {\r\n                output = output.concat(fileName);\r\n            } else {\r\n                output = output.concat(\r\n                    fileName !== chain[i - 1].fileName ? fileName : \"\"\r\n                );\r\n            }\r\n            output = output.concat(\"+\");\r\n        }\r\n        output = output.concat(aniName);\r\n\r\n        // Add modifiers\r\n        const modCode = generateAniModCode(ani);\r\n        output = output.concat(modCode);\r\n        const faceCode = generateFaceCode(faceChanges);\r\n        output = output.concat(faceCode);\r\n\r\n        if (i < length - 1) {\r\n            output = output.concat(\">\");\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nconst generateAniModCode = ani => {\r\n    let output = \"\";\r\n    Object.keys(aniModList).forEach(modKey => {\r\n        const { key, defaultValue } = aniModList[modKey];\r\n        if (ani[key] !== defaultValue) {\r\n            output = output.concat(`&${modKey}=${ani[key]}`);\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nconst generateFaceCode = faceChanges => {\r\n    if (!faceChanges) return \"\";\r\n    let output = \"\";\r\n    faceChanges.forEach(change => {\r\n        const { time, eyeIdx, mouthIdx } = change;\r\n        if (!time) return;\r\n        if (eyeIdx) {\r\n            output = output.concat(`&e-${time}=${eyeIdx}`);\r\n        }\r\n        if (mouthIdx) {\r\n            output = output.concat(`&m-${time}=${mouthIdx}`);\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const collectFilter = toggleState => {\r\n    let collected = {};\r\n    Object.keys(toggleState).forEach(key => {\r\n        let tmp = [];\r\n        Object.keys(toggleState[key]).forEach(k => {\r\n            if (toggleState[key][k]) {\r\n                tmp.push(k);\r\n            }\r\n        });\r\n        collected[key] = tmp;\r\n    });\r\n    return collected;\r\n};\r\n\r\nexport const multiCondFilter = (input, filters) => {\r\n    const filterKeys = Object.keys(filters);\r\n\r\n    return input.filter(el => {\r\n        return filterKeys.every(key => {\r\n            if (!filters[key].length) return true;\r\n            return filters[key].includes(el[key]);\r\n        });\r\n    });\r\n};\r\n\r\nexport const complementaryColor = color => {\r\n    const hexColor = color.replace(\"#\", \"0x\");\r\n\r\n    return `#${(\"000000\" + (\"0xffffff\" ^ hexColor).toString(16)).slice(-6)}`;\r\n};\r\n\r\nconst hexToRgb = hex => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n        ? {\r\n              r: parseInt(result[1], 16),\r\n              g: parseInt(result[2], 16),\r\n              b: parseInt(result[3], 16),\r\n          }\r\n        : null;\r\n};\r\n\r\nexport const getBrightness = ({ r, g, b }) =>\r\n    (r * 299 + g * 587 + b * 114) / 1000;\r\n\r\nexport const getTextColor = color => {\r\n    const rgb = hexToRgb(color);\r\n    return getBrightness(rgb) > 128 ? \"#000000\" : \"#ffffff\";\r\n};\r\n\r\nexport const aniButtonsFromObject = (object, handleSelect, groupName) => {\r\n    if (!object) return null;\r\n    const style = { maxWidth: \"13.5rem\" };\r\n    return Object.keys(object).map(key => (\r\n        <Button\r\n            variant=\"contained\"\r\n            key={key}\r\n            data-value={object[key]}\r\n            data-name={`${groupName ? `${groupName} ` : \"\"}${key}`}\r\n            onClick={handleSelect}\r\n            style={style}\r\n        >\r\n            {key}\r\n        </Button>\r\n    ));\r\n};\r\n\r\n// Animation chain code generator\r\nexport const getStandbyCode = (weapon, gender) =>\r\n    `LOB_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_ONT_${GENDER_CODE[gender]}`;\r\n\r\nexport const getVictoryCode = weapon =>\r\n    `WIN_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_WIN_01>+${WEAPON_CODE[weapon]}_WIN_02`;\r\n\r\nexport const getDashAtkCode = weapon => `DAS+${WEAPON_CODE[weapon]}_DAS_02`;\r\n\r\nexport const getRollCode = weapon => `ROL+${WEAPON_CODE[weapon]}_ROL_01`;\r\n\r\nexport const getComboCode = weapon => {\r\n    const comboLength = COMBO_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `CMB_${code}`;\r\n    for (let i = 1; i <= comboLength; i++) {\r\n        result = result.concat(`+${code}_CMB_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Force Strike chain code\r\nexport const getFSCode = weapon => {\r\n    const fsAniLength = FS_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `FS_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= fsAniLength; i++) {\r\n        result = result.concat(`+${code}_CHR_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Join Lobby chain code\r\nexport const getLobbyCode = (weapon, gender) => {\r\n    const code = WEAPON_CODE[weapon];\r\n    if (gender === \"Male\")\r\n        return `LOB_${code}+${code}_ONT_05&ts=-0.5>+${code}_ONT_02>+${code}_ONT_07>+${code}_ONT_08>+${code}_ONT_21`;\r\n    // Female\r\n    return `LOB_${code}+${code}_ONT_06&ts=-0.5>+${code}_ONT_04>+${code}_ONT_09>+${code}_ONT_10>+${code}_ONT_23`;\r\n};\r\n","import { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { fbxSource } from \"./App\";\r\nimport { CAM_PARAMS, DEFAULT_FACE_IDX } from \"./consts\";\r\nimport { matDirectSetParams, matColorParams } from \"./consts\";\r\nimport {\r\n    createInvisibleFloor,\r\n    isSimpleViewer,\r\n    isDragon,\r\n    initDragonFace,\r\n    calculateTextureOffset,\r\n    calculateIdxOffset,\r\n    getModelPath,\r\n    analyzeWeaponCode,\r\n    analyzeChainCode,\r\n    loadModel,\r\n    getMaterial,\r\n    applyEyeTexture,\r\n    applyMouthTexture,\r\n    applyEyeOffset,\r\n    applyMouthOffset,\r\n    disposeItem,\r\n    createOutline,\r\n    applyOutlineSettings,\r\n    getParamsList,\r\n    changeMaterial,\r\n    createGradientMap,\r\n    getFaceChangesArray,\r\n} from \"./viewerHelpers\";\r\n\r\nimport { isBlade } from \"./helpers\";\r\n\r\nconst SIDES = [\"Right\", \"Left\"];\r\n\r\nclass ModelViewer extends PureComponent {\r\n    componentDidMount() {\r\n        window.app = this;\r\n        this.initialize();\r\n    }\r\n\r\n    async componentDidUpdate(prev) {\r\n        const current = this.props;\r\n\r\n        // // print updated props to console\r\n        // console.log(\"Updated\");\r\n        // Object.keys(prev).forEach(key => {\r\n        //     const oldValue = prev[key];\r\n        //     const currentValue = this.props[key];\r\n        //     const subkeys = Object.keys(oldValue);\r\n        //     if (subkeys.length === 0 || typeof oldValue === \"string\") {\r\n        //         if (oldValue !== currentValue) {\r\n        //             console.log(\r\n        //                 `${key}: ${JSON.stringify(\r\n        //                     oldValue\r\n        //                 )} to ${JSON.stringify(currentValue)}`\r\n        //             );\r\n        //         }\r\n        //     } else {\r\n        //         subkeys.forEach(subkey => {\r\n        //             if (oldValue[subkey] !== currentValue[subkey]) {\r\n        //                 console.log(\r\n        //                     `${key}.${subkey}: ${JSON.stringify(\r\n        //                         oldValue[subkey]\r\n        //                     )} to ${JSON.stringify(currentValue[subkey])}`\r\n        //                 );\r\n        //             }\r\n        //         });\r\n        //     }\r\n        // });\r\n\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n        this.updateModel(prev.model, current.model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n        this.updateOutline(prev.outline, current.outline);\r\n        this.updateMaterial(prev, current);\r\n        this.updateLights(prev.lights, current.lights);\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n\r\n        // Update background color\r\n        if (prev.bgColor !== current.bgColor) {\r\n            this.bgColor = current.bgColor;\r\n        }\r\n\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n\r\n        this.AA = current.antiAliasing;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixer = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n\r\n    initialize = async () => {\r\n        this.props.setIsLoading(true);\r\n\r\n        this.initScene();\r\n        await this.loadModels();\r\n\r\n        this.props.setIsLoading(false);\r\n\r\n        this.initAnimation();\r\n    };\r\n\r\n    initScene = () => {\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.bgColor = this.props.bgColor;\r\n\r\n        // Floor for auto rotate\r\n        this.floor = createInvisibleFloor();\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addLights(lights);\r\n\r\n        // effects\r\n        this.loadedFX = new Map();\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        const AAEnabled = this.props.antiAliasing;\r\n        this._AA = AAEnabled;\r\n\r\n        this.renderer = AAEnabled ? this.rendererAA : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        this.canvas = this.finalRenderer.domElement;\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n        this.mount.appendChild(this.canvas);\r\n\r\n        this.animate();\r\n    };\r\n\r\n    loadModels = async () => {\r\n        this.models = {};\r\n        this.modelInfo = {\r\n            main: this.props.model.id,\r\n            weaponLeft: analyzeWeaponCode(this.props.model.weaponLeft),\r\n            weaponRight: analyzeWeaponCode(this.props.model.weaponRight),\r\n        };\r\n        this.materials = [];\r\n\r\n        // save reference for outlines\r\n        this.outlines = {};\r\n\r\n        // Load the models\r\n        const [main, weaponRight, weaponLeft] = await this.initModelsLoad();\r\n\r\n        // save references to models\r\n        this.models = { main, weaponRight, weaponLeft };\r\n\r\n        // basic viewer for incompatible assets\r\n        const modelId = this.props.model.id;\r\n        if (isSimpleViewer(modelId)) {\r\n            if (isBlade(modelId)) {\r\n                const { materialType } = this.props.model;\r\n                const { texturePath } = analyzeWeaponCode(`${modelId}n`);\r\n                changeMaterial(main, { materialType, texturePath });\r\n            }\r\n\r\n            this.basicMainProcessing();\r\n\r\n            isDragon(modelId) && initDragonFace(main);\r\n            return;\r\n        }\r\n        this.initAllModels();\r\n    };\r\n\r\n    initAnimation = () => {\r\n        const modelId = this.props.model.id;\r\n        if (isSimpleViewer(modelId)) return;\r\n\r\n        this.addAnimation();\r\n    };\r\n\r\n    set AA(enabled) {\r\n        if (enabled === this._AA) return;\r\n\r\n        this._AA = enabled;\r\n        const currentSize = new THREE.Vector2();\r\n        this.renderer.getSize(currentSize);\r\n        this.renderer = enabled ? this.rendererAA : this.rendererNoAA;\r\n        this.renderer.setSize(currentSize.x, currentSize.y);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const newCanvas = this.renderer.domElement;\r\n        this.setCanvas(newCanvas);\r\n    }\r\n\r\n    addLights = lights => {\r\n        this.lights = [];\r\n        lights.forEach(({ enable, type, color, intensity, ...params }) => {\r\n            if (!enable) return;\r\n            const constructor = `${type}Light`;\r\n            const light = new THREE[constructor](color, intensity);\r\n\r\n            for (const [key, value] of Object.entries(params)) {\r\n                switch (key) {\r\n                    case \"position\":\r\n                        const setValue = value.map(v => v || 0);\r\n                        light.position.set(...setValue);\r\n                        break;\r\n                    default:\r\n                        light[key] = value;\r\n                }\r\n            }\r\n            this.scene.add(light);\r\n            this.lights.push(light);\r\n        });\r\n    };\r\n\r\n    removeLights = () => this.lights.forEach(light => this.scene.remove(light));\r\n\r\n    // Promise to load all models at initialize\r\n    initModelsLoad = () => {\r\n        const modelId = this.modelInfo.main;\r\n        const modelPath = getModelPath(modelId);\r\n        const loadMain = loadModel(modelPath);\r\n\r\n        const weaponRight = this.modelInfo.weaponRight?.modelPath;\r\n        const loadWeaponR = loadModel(weaponRight);\r\n\r\n        const weaponLeft = this.modelInfo.weaponLeft?.modelPath;\r\n        const loadWeaponL = loadModel(weaponLeft);\r\n\r\n        return Promise.all([loadMain, loadWeaponR, loadWeaponL]);\r\n    };\r\n\r\n    addToScene = model => this.floor.add(model);\r\n\r\n    basicMainProcessing = () => {\r\n        const model = this.models.main;\r\n\r\n        const outlineParams = this.props.outline;\r\n        this.outlines.main = createOutline(model, outlineParams);\r\n\r\n        const { materialType } = this.props.model;\r\n        changeMaterial(model, { materialType, forced: true });\r\n\r\n        this.addToScene(model);\r\n    };\r\n\r\n    initFace = () => {\r\n        const modelId = this.props.model.id;\r\n        this._eyeIdx = this._mouthIdx = DEFAULT_FACE_IDX;\r\n        const defaultFaceParams = {\r\n            mouthTexture: modelId,\r\n            mouthIdx: DEFAULT_FACE_IDX,\r\n            eyeTexture: modelId,\r\n            eyeIdx: DEFAULT_FACE_IDX,\r\n        };\r\n        this.updateFace(defaultFaceParams, this.props.model);\r\n    };\r\n\r\n    initMainModel = () => {\r\n        this.basicMainProcessing();\r\n        this.initFace();\r\n        // Save initial position and rotation\r\n        const model = this.models.main;\r\n        model.initPos = model.position.clone();\r\n        model.initRot = model.rotation.clone();\r\n    };\r\n\r\n    initAllModels = () => {\r\n        this.initMainModel();\r\n        this.initAllWeapons();\r\n        this.attachAllWeapons();\r\n        this.applyMaterialSettings();\r\n    };\r\n\r\n    initAllWeapons = () => {\r\n        const { materialType } = this.props.model;\r\n        SIDES.forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weapon = this.models[key];\r\n            if (!weapon) return;\r\n\r\n            const weaponInfo = this.modelInfo[key];\r\n            const { texturePath, flipped } = weaponInfo;\r\n            changeMaterial(weapon, { materialType, texturePath });\r\n            if (flipped) weapon.rotation.y += Math.PI;\r\n\r\n            const outlineParams = this.props.outline;\r\n            this.outlines[key] = createOutline(weapon, outlineParams);\r\n        });\r\n    };\r\n\r\n    attachWeapon = (weapon, side) => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name.includes(boneName) && child.children.length === 0) {\r\n                child.add(weapon);\r\n            }\r\n        });\r\n    };\r\n\r\n    attachAllWeapons = () => {\r\n        SIDES.forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weapon = this.models[key];\r\n            if (!weapon) return;\r\n\r\n            this.attachWeapon(weapon, side);\r\n        });\r\n    };\r\n\r\n    detachWeapon = side => {\r\n        const key = `weapon${side}`;\r\n        const model = this.models[key];\r\n        if (!model) return;\r\n\r\n        model.parent.remove(model);\r\n    };\r\n\r\n    detachAllWeapons = () => SIDES.forEach(side => this.detachWeapon(side));\r\n\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    addAnimation = async () => {\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        if (!aniCode) return;\r\n\r\n        this.props.setIsLoading(true);\r\n\r\n        const model = this.models.main;\r\n        const [fileList, animationList] = analyzeChainCode(aniCode);\r\n        this.nAni = animationList.length;\r\n\r\n        model.mixer = new THREE.AnimationMixer(model);\r\n        this.mixer = model.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        model.mixer.timeScale = timeScale; // Global timeScale\r\n        model.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = animationList.map(ani => ({\r\n            timeScale: ani.timeScale,\r\n            repetitions: ani.repetitions,\r\n            faceChanges: ani.faceChanges,\r\n        }));\r\n\r\n        // load all animation files\r\n        const batchLoader = fileList.map(file => {\r\n            const path = `${fbxSource}/fbx/${file}.fbx`;\r\n            return loadModel(path);\r\n        });\r\n        const animFiles = await Promise.all(batchLoader);\r\n\r\n        this.animations = [];\r\n        animationList.forEach(anim => {\r\n            const { fileIdx, aniName } = anim;\r\n            const animation = aniName\r\n                ? animFiles[fileIdx].animations.find(\r\n                      ani => ani.name === aniName\r\n                  )\r\n                : animFiles[fileIdx].animations[0];\r\n            this.animations.push(animation);\r\n        });\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.props.setIsLoading(false);\r\n    };\r\n\r\n    removeAnimation = () => {\r\n        const mainModel = this.models.main;\r\n        mainModel.mixer.stopAllAction();\r\n\r\n        // Reset position and rotation to initial value\r\n        const { initPos, initRot } = mainModel;\r\n        mainModel.position.copy(initPos);\r\n        mainModel.rotation.copy(initRot);\r\n\r\n        this.mixer = null;\r\n        this.animations = [];\r\n    };\r\n\r\n    resetFace = () => {\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    // this.aniIdx = n => play animation with index n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n\r\n        const { mixer } = this;\r\n        mixer.stopAllAction();\r\n\r\n        const anim = this.animations[newIdx];\r\n        const action = mixer.clipAction(anim);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        this.faceChanges = getFaceChangesArray(faceChanges, repetitions);\r\n        this.faceChangeTime = this.faceChanges.map(\r\n            change => (this.currentClipDuration * change.time) / 100\r\n        );\r\n\r\n        mixer.setTime(0);\r\n        this.currentClipDuration = anim.duration;\r\n        action.play();\r\n    }\r\n\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: this.props.capture.codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.props.setIsLoading(false);\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                const url = URL.createObjectURL(superBuffer);\r\n                const a = document.createElement(\"a\");\r\n                a.style = \"display: none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n            };\r\n        }\r\n        // disable user input\r\n        this.props.setIsLoading(true);\r\n        // Reset facial expression\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    updateEyeTexture = (prev, current) => {\r\n        const currentTexture = current.eyeTexture;\r\n        const prevTexture = prev.eyeTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const { materialType } = current;\r\n        applyEyeTexture(this.models.main, {\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyEyeOffset(this.models.main, offset);\r\n\r\n        return true;\r\n    };\r\n\r\n    set eyeIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._eyeIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyEyeOffset(this.models.main, offset);\r\n\r\n        this._eyeIdx = newIdx;\r\n    }\r\n\r\n    updateMouthTexture = (prev, current) => {\r\n        const currentTexture = current.mouthTexture;\r\n        const prevTexture = prev.mouthTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const { materialType } = current;\r\n        applyMouthTexture(this.models.main, {\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyMouthOffset(this.models.main, offset);\r\n\r\n        return true;\r\n    };\r\n\r\n    set mouthIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._mouthIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyMouthOffset(this.models.main, offset);\r\n\r\n        this._mouthIdx = newIdx;\r\n    }\r\n\r\n    updateFaceTexture = (prev, current) => {\r\n        const eyeUpdated = this.updateEyeTexture(prev, current);\r\n        const mouthUpdated = this.updateMouthTexture(prev, current);\r\n        if (eyeUpdated || mouthUpdated) {\r\n            this.applyMaterialSettings();\r\n        }\r\n    };\r\n\r\n    updateFaceOffset = ({ eyeIdx, mouthIdx }) => {\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    updateFace = (prev, current) => {\r\n        this.updateFaceTexture(prev, current);\r\n        this.updateFaceOffset(current);\r\n    };\r\n\r\n    disposeMainModel = () => {\r\n        const mainModel = this.models.main;\r\n        this.floor.remove(mainModel);\r\n        disposeItem(mainModel);\r\n    };\r\n\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        if (prev.id !== modelId) {\r\n            this.props.setIsLoading(true);\r\n            this.modelInfo.main = modelId;\r\n            const modelPath = getModelPath(modelId);\r\n            const model = await loadModel(modelPath);\r\n\r\n            this.detachAllWeapons();\r\n            this.disposeMainModel();\r\n\r\n            this.models.main = model;\r\n\r\n            this.initMainModel();\r\n            this.attachAllWeapons();\r\n            this.applyMaterialSettings();\r\n\r\n            this.addAnimation();\r\n\r\n            this.props.setIsLoading(false);\r\n            return;\r\n        }\r\n        // Update face when main model not changed\r\n        this.updateFace(prev, current);\r\n    };\r\n\r\n    updateWeapons = async (prev, current) => {\r\n        this.props.setIsLoading(true);\r\n        SIDES.forEach(async side => {\r\n            const key = `weapon${side}`;\r\n            if (prev[key] === current[key]) return;\r\n\r\n            // remove old weapon\r\n            this.detachWeapon(side);\r\n            disposeItem(this.models[key]); // dispose old weapon\r\n\r\n            // if current weapon is empty (weapon removed)\r\n            if (!current[key]) {\r\n                this.models[key] = null;\r\n                this.modelInfo[key] = \"\";\r\n                // remove reference to outline\r\n                this.outlines[key] = null;\r\n                return;\r\n            }\r\n\r\n            // load new weapon\r\n            this.modelInfo[key] = analyzeWeaponCode(this.props.model[key]);\r\n            const { modelPath, texturePath, flipped } = this.modelInfo[key];\r\n\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            this.models[key] = model;\r\n\r\n            // process new weapon\r\n            const { materialType } = current;\r\n            changeMaterial(model, { materialType, texturePath });\r\n            this.applyMaterialSettings();\r\n\r\n            if (flipped) {\r\n                model.rotation.y += Math.PI;\r\n            }\r\n\r\n            const outlineParams = this.props.outline;\r\n            this.outlines[key] = createOutline(model, outlineParams);\r\n\r\n            this.attachWeapon(model, side);\r\n        });\r\n        this.props.setIsLoading(false);\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        await this.updateMainModel(prev, current);\r\n        this.updateWeapons(prev, current);\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            if (prev.code) {\r\n                this.removeAnimation();\r\n                this.resetFace();\r\n            }\r\n            this.addAnimation();\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    updateOutlineParams = update => {\r\n        const outlines = Object.values(this.outlines).flat();\r\n        outlines.forEach(outline => {\r\n            applyOutlineSettings(outline, update);\r\n        });\r\n    };\r\n\r\n    updateOutline = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const updatedKeys = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedKeys.length === 0) return;\r\n\r\n        const update = new Map(updatedKeys.map(key => [key, current[key]]));\r\n        this.updateOutlineParams(update);\r\n    };\r\n\r\n    saveMaterialReference = () => {\r\n        const mainModel = this.models.main;\r\n        this.materials = getMaterial(mainModel);\r\n    };\r\n\r\n    forEachMaterial = callback => this.materials.forEach(mat => callback(mat));\r\n\r\n    applyMaterialParams = () => {\r\n        const { materialType } = this.props.model;\r\n        const current = this.props.materialParams;\r\n        const { useTexture, flatShading, gradientMap } = current;\r\n        const paramsList = getParamsList(materialType);\r\n\r\n        const paramFilter = param => paramsList.includes(param);\r\n        const directSetParams = matDirectSetParams.filter(paramFilter);\r\n        const colorParams = matColorParams.filter(paramFilter);\r\n\r\n        const hasGradientMap =\r\n            materialType === \"Toon\" && gradientMap !== \"none\";\r\n\r\n        if (hasGradientMap) {\r\n            const nTones = parseInt(gradientMap);\r\n            const newMap = createGradientMap(nTones);\r\n            this.forEachMaterial(mat => {\r\n                mat.gradientMap = newMap;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n\r\n        this.forEachMaterial(mat => {\r\n            directSetParams.forEach(param => (mat[param] = current[param]));\r\n            colorParams.forEach(param => {\r\n                const currentColor = current[param];\r\n                mat[param] = new THREE.Color(currentColor);\r\n            });\r\n            if (!useTexture) {\r\n                if (mat.map && !mat.backupMap) {\r\n                    mat.backupMap = mat.map;\r\n                }\r\n                mat.map = null;\r\n            } else {\r\n                if (mat.backupMap) {\r\n                    mat.map = mat.backupMap;\r\n                    delete mat.backupMap;\r\n                }\r\n            }\r\n            if (flatShading) {\r\n                mat.flatShading = current.flatShading;\r\n                mat.needsUpdate = true;\r\n            }\r\n        });\r\n    };\r\n\r\n    applyMaterialSettings = () => {\r\n        this.saveMaterialReference();\r\n        this.applyMaterialParams();\r\n    };\r\n\r\n    updateMaterialParams = (prev, current) => {\r\n        const { materialType } = this.props.model;\r\n        const { useTexture, flatShading, gradientMap } = current;\r\n        const paramsList = getParamsList(materialType);\r\n\r\n        const updatedParams = paramsList.filter(\r\n            param => prev[param] !== current[param]\r\n        );\r\n\r\n        const paramFilter = param => updatedParams.includes(param);\r\n\r\n        const directSetParams = matDirectSetParams.filter(paramFilter);\r\n        directSetParams.forEach(param => {\r\n            this.forEachMaterial(mat => (mat[param] = current[param]));\r\n        });\r\n\r\n        const colorParams = matColorParams.filter(paramFilter);\r\n        colorParams.forEach(param => {\r\n            const currentColor = current[param];\r\n            const color = new THREE.Color(currentColor);\r\n            this.forEachMaterial(mat => (mat[param] = color));\r\n        });\r\n\r\n        if (prev.useTexture !== useTexture) {\r\n            this.forEachMaterial(mat => {\r\n                if (!useTexture) {\r\n                    mat.backupMap = mat.map;\r\n                    mat.map = null;\r\n                } else {\r\n                    mat.map = mat.backupMap;\r\n                    delete mat.backupMap;\r\n                }\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n\r\n        if (prev.flatShading !== flatShading) {\r\n            this.forEachMaterial(mat => {\r\n                mat.flatShading = flatShading;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n\r\n        if (prev.gradientMap !== gradientMap) {\r\n            let newMap = null;\r\n            if (gradientMap !== \"none\") {\r\n                const nTones = parseInt(gradientMap);\r\n                newMap = createGradientMap(nTones);\r\n            }\r\n\r\n            this.forEachMaterial(mat => {\r\n                mat.gradientMap = newMap;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n    };\r\n\r\n    updateMaterial = (prev, current) => {\r\n        // update material type\r\n        const { materialType } = current.model;\r\n        if (prev.model.materialType !== materialType) {\r\n            changeMaterial(this.models.main, { materialType });\r\n\r\n            this.applyMaterialSettings();\r\n            return;\r\n        }\r\n        this.updateMaterialParams(prev.materialParams, current.materialParams);\r\n    };\r\n\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeLights();\r\n            this.addLights(current);\r\n        }\r\n    };\r\n\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n            const newCanvas = this.renderer.domElement;\r\n            this.setCanvas(newCanvas);\r\n            return;\r\n        }\r\n\r\n        if (!this.loadedFX.has(\"ascii\")) {\r\n            const { AsciiEffect } = await import(\r\n                \"three/examples/jsm/effects/AsciiEffect\"\r\n            );\r\n            this.loadedFX.set(\"ascii\", AsciiEffect);\r\n            this.showAscii();\r\n        } else this.showAscii();\r\n\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n    };\r\n\r\n    showAscii = () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const AsciiEffect = this.loadedFX.get(\"ascii\");\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n        this.effect.setSize(this.viewport.width, this.viewport.height);\r\n\r\n        const newCanvas = this.effect.domElement;\r\n        newCanvas.style.color = color;\r\n        newCanvas.style.background = bgColor;\r\n        this.setCanvas(newCanvas);\r\n\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    set bgColor(color) {\r\n        this.scene.background =\r\n            color !== \"transparent\" ? new THREE.Color(color) : null;\r\n    }\r\n\r\n    setCanvas = newCanvas => {\r\n        const { canvas } = this;\r\n        this.mount.removeChild(canvas);\r\n        this.mount.appendChild(newCanvas);\r\n        this.canvas = newCanvas;\r\n    };\r\n\r\n    rotateFloor = dt => {\r\n        const { rotateSpeed } = this.props;\r\n        const angle = (rotateSpeed * dt * Math.PI) / 2;\r\n        rotateSpeed && this.floor.rotateY(angle);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n\r\n        const dt = this.clock.getDelta();\r\n        this.rotateFloor(dt);\r\n        this.mixer && this.mixer.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length) {\r\n            const elapsedTime = this.mixer.time;\r\n            const nextFaceChangeTime = this.faceChangeTime[0];\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                this.faceChangeTime.shift();\r\n                const { eyeIdx, mouthIdx } = this.faceChanges.shift();\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModelViewer;\r\n","import { lazy, Suspense, useContext, useCallback } from \"react\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"./context/SettingsContext\";\r\nimport ModelViewer from \"./ModelViewer\";\r\n// import BaseViewer from \"./BaseViewer\";\r\nimport \"./styles/Display.css\";\r\n\r\nimport { getTextColor } from \"./helpers\";\r\nimport { cameraPositions, controlsPositions } from \"./consts\";\r\n\r\nconst AniControl = lazy(() => import(\"./AniControl\"));\r\n\r\nfunction Display(props) {\r\n    const { viewport } = props;\r\n\r\n    const settings = useContext(SettingsContext);\r\n    const {\r\n        model: { id: modelId },\r\n        scene: { rotateSpeed, background: bgColor, initCameraPosition, lights },\r\n        app: { showAniControl, antiAliasing },\r\n    } = settings;\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n    const toggleCapture = useCallback(() => {\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"capture\",\r\n            value: \"enable\",\r\n        };\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const type = modelId[0];\r\n\r\n    const defaultCameraPosition =\r\n        cameraPositions[modelId] || cameraPositions[type];\r\n\r\n    const cameraPosition = initCameraPosition\r\n        ? initCameraPosition.map((n, i) =>\r\n              isNaN(n) ? defaultCameraPosition[i] : n\r\n          )\r\n        : defaultCameraPosition;\r\n\r\n    const controlsPosition =\r\n        controlsPositions[modelId] || controlsPositions[type];\r\n\r\n    return (\r\n        <div className=\"Display\">\r\n            {showAniControl && (\r\n                <div\r\n                    className=\"Display-AniControl\"\r\n                    style={{ color: getTextColor(bgColor) }}\r\n                >\r\n                    <Suspense fallback={null}>\r\n                        <AniControl value={settings.animation.timeScale} />\r\n                    </Suspense>\r\n                </div>\r\n            )}\r\n            <ModelViewer\r\n                setIsLoading={props.setIsLoading}\r\n                capture={settings.capture}\r\n                toggleCapture={toggleCapture}\r\n                viewport={viewport}\r\n                cameraPosition={cameraPosition}\r\n                controlsPosition={controlsPosition}\r\n                model={settings.model}\r\n                materialParams={settings.materialParams}\r\n                outline={settings.outline}\r\n                animation={settings.animation}\r\n                rotateSpeed={rotateSpeed}\r\n                lights={lights}\r\n                bgColor={bgColor}\r\n                antiAliasing={antiAliasing}\r\n                ascii={settings.ascii}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n","import { lazy, Suspense, useState, useRef, useEffect, useContext } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\n\r\nimport Menu from \"@material-ui/icons/Menu\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport useStyles from \"./styles/MainPageStyles\";\r\n\r\nimport Display from \"./Display\";\r\nimport { SettingsContext } from \"./context/SettingsContext\";\r\nimport { setInitialSettings } from \"./helpers\";\r\n\r\nconst ControlPanel = lazy(() => import(\"./ControlPanel\"));\r\nconst SideBar = lazy(() => import(\"./SideBar\"));\r\n\r\nfunction MainPage({ location }) {\r\n    const classes = useStyles();\r\n\r\n    const [currentMode, setCurrentMode] = useState(\"model\");\r\n    const [sidebarOpen, toggleSidebarOpen] = useToggleState(true);\r\n    const [controlOpen, toggleControlOpen] = useToggleState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [initLoadDone, setInitLoadDone] = useState(false);\r\n    // const [handleSelect, setHandleSelect] = useState(null);\r\n    const handleSelect = useRef(null);\r\n    const {\r\n        app: { showSettings },\r\n    } = useContext(SettingsContext);\r\n\r\n    const viewerRef = useRef();\r\n    const [viewport, setViewport] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const params = location.pathname.split(\"/\");\r\n        setInitialSettings(params);\r\n        setInitLoadDone(true);\r\n\r\n        window.addEventListener(\"resize\", updateViewportSize);\r\n\r\n        return function () {\r\n            window.removeEventListener(\"resize\", updateViewportSize);\r\n        };\r\n    }, [location.pathname]);\r\n\r\n    const updateViewportSize = () => {\r\n        const height = viewerRef.current.clientHeight;\r\n        const width = viewerRef.current.clientWidth;\r\n        setViewport({ width, height });\r\n    };\r\n\r\n    const openControl = (mode, handler) => {\r\n        setCurrentMode(mode);\r\n        handleSelect.current = handler;\r\n        toggleControlOpen();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <div className={classes.loadingMsg}>Loading...</div>}\r\n            <div className={classes.root}>\r\n                <Suspense fallback={null}>\r\n                    <CssBaseline />\r\n                    <ControlPanel\r\n                        mode={currentMode}\r\n                        handleSelect={handleSelect.current}\r\n                        open={controlOpen}\r\n                        toggleControlOpen={toggleControlOpen}\r\n                    />\r\n                    {initLoadDone && showSettings && (\r\n                        <>\r\n                            <button\r\n                                onClick={toggleSidebarOpen}\r\n                                className={classes.openSidebarButton}\r\n                            >\r\n                                <Menu />\r\n                            </button>\r\n\r\n                            <SideBar\r\n                                toggleSidebarOpen={toggleSidebarOpen}\r\n                                open={sidebarOpen}\r\n                                openControl={openControl}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </Suspense>\r\n                {initLoadDone && (\r\n                    <main ref={viewerRef} className={classes.content}>\r\n                        <Display\r\n                            setIsLoading={setIsLoading}\r\n                            viewport={viewport}\r\n                        />\r\n                    </main>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import { SettingsProvider } from \"./context/SettingsContext\";\r\n\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\nimport MainPage from \"./MainPage\";\r\n\r\nimport \"./styles/App.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <SettingsProvider>\r\n            <HashRouter>\r\n                <Route render={routeProps => <MainPage {...routeProps} />} />\r\n            </HashRouter>\r\n        </SettingsProvider>\r\n    );\r\n}\r\n\r\nexport const fbxSource = process.env.PUBLIC_URL;\r\n\r\nexport default App;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nfunction useToggleState(initVal = false) {\r\n    const [state, setState] = useState(initVal);\r\n    const toggleState = useCallback(() => {\r\n        setState(state => !state);\r\n    }, [setState]);\r\n    return [state, toggleState];\r\n}\r\n\r\nexport default useToggleState;\r\n","const faceOffset = {\r\n    c110296_02: { x: 0.043, y: -0.0625 }, // Forager Mitsuba\r\n    c100004_17: { x: 0.043, y: -0.0625 }, // Forager Cleo\r\n    c110371_01: { x: 0.043, y: -0.0625 }, // Pecorine\r\n    c110350_02: { x: 0.043, y: -0.0625 }, // Formal Joachim\r\n    c110340_02: { x: 0.043, y: -0.0625 }, // Formal Noelle\r\n    c110018_02: { x: 0.043, y: -0.0625 }, // Opera Karina\r\n    c110370_01: { x: 0.043, y: -0.0625 }, // Lapis\r\n    c100015_04: { x: 0.05, y: -0.08 }, // Chelle\r\n    c110342_01: { x: 0, y: -0.02 }, // Chelsea\r\n    c110267_01: { x: 0.08, y: -0.03 }, // Hawk\r\n    c110050_02: { x: 0.07, y: 0.13 }, // HBerserker\r\n    c110291_01: { x: 0.07, y: 0.14 }, // Marth\r\n    c110354_01: { x: 0.07, y: 0.01 }, // Mega Man\r\n    c110345_01: { x: 0.08, y: 0.15 }, // Mitsuhide\r\n    c110266_01: { x: 0.01, y: 0.03 }, // Naveed\r\n    c110365_01: { x: 0.043, y: -0.0625 }, // Nevin\r\n    c110346_01: { x: 0.07, y: 0.08 }, // Nobunaga\r\n    c110366_01: { x: 0.043, y: -0.0625 }, // Pinon\r\n    c110299_02: { x: 0.07, y: 0.08 }, // RXZ\r\n    c110360_01: { x: 0.07, y: 0.14 }, // Tiki\r\n    c110307_01: { x: 0.08, y: -0.03 }, // Victor\r\n    c110322_01: { x: 0.043, y: 0.08 }, // Zhu Bajie\r\n    c110356_01: { x: 0.07, y: 0.08 }, // Gauld\r\n    c110300_01: { x: 0.07, y: -0.1 }, // Pipple\r\n    c110344_01: { x: 0.07, y: -0.02 }, // Yuya\r\n    c110053_03: { x: 0.043, y: -0.0625 }, // INefi\r\n    c110368_01: { x: 0.043, y: -0.0625 }, // Meene\r\n    c110367_01: { x: 0.043, y: -0.0625 }, // Ilia\r\n    c110003_02: { x: 0.043, y: -0.0625 }, // Gun Joe\r\n    c110270_02: { x: 0.043, y: -0.0625 }, // HMelsa\r\n    c110341_03: { x: 0.043, y: -0.0625 }, // Hakasha\r\n};\r\nexport default faceOffset;\r\n","export const DRAWER_WIDTH = \"16rem\";\r\nexport const DRAWER_BGCOLOR = \"#330000\";\r\n\r\nexport const DEFAULT_FACE_IDX = \"2\";\r\n\r\nexport const baseUrl = \"https://dgk3593.github.io/dl-model/#/\";\r\n\r\nconst defaultAni = \"MWM_CMN+CMN_MWM_03\";\r\n\r\nexport const matParamsDetails = {\r\n    wireframe: {\r\n        name: \"Wireframe\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    useTexture: {\r\n        name: \"Texture\",\r\n        type: \"boolean\",\r\n        default: true,\r\n    },\r\n    transparent: {\r\n        name: \"Transparent\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    flatShading: {\r\n        name: \"Flat Shading\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    color: {\r\n        name: \"Color\",\r\n        type: \"color\",\r\n        default: \"#ffffff\",\r\n    },\r\n    emissive: {\r\n        name: \"Emissive\",\r\n        type: \"color\",\r\n        default: \"#000000\",\r\n    },\r\n    opacity: {\r\n        name: \"Opacity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    emissiveIntensity: {\r\n        name: \"Emissive Intensity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    specular: {\r\n        name: \"Specular\",\r\n        type: \"color\",\r\n        default: \"#111111\",\r\n    },\r\n    metalness: {\r\n        name: \"Metalness\",\r\n        type: \"percentage\",\r\n        default: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    roughness: {\r\n        name: \"Roughness\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    shininess: {\r\n        name: \"Shininess\",\r\n        type: \"number\",\r\n        default: 30,\r\n        min: 1,\r\n        max: 100,\r\n        step: 1,\r\n    },\r\n    gradientMap: {\r\n        name: \"Gradient Map\",\r\n        type: \"select\",\r\n        default: \"none\",\r\n        options: [\"none\", \"2 Tones\", \"3 Tones\", \"4 Tones\", \"5 Tones\"],\r\n    },\r\n};\r\n\r\nexport const matDirectSetParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"emissiveIntensity\",\r\n    \"metalness\",\r\n    \"roughness\",\r\n    \"shininess\",\r\n];\r\n\r\nexport const matColorParams = [\"color\", \"emissive\", \"specular\"];\r\n\r\nconst defaultMatParams = {};\r\nObject.keys(matParamsDetails).forEach(key => {\r\n    defaultMatParams[key] = matParamsDetails[key].default;\r\n});\r\n\r\nexport const needsUpdateParams = [\"gradientMap\", \"flatShading\", \"useTexture\"];\r\n\r\nconst defaultLights = [\r\n    {\r\n        lightId: \"0\",\r\n        type: \"Ambient\",\r\n        color: \"#444444\",\r\n        enable: true,\r\n        intensity: 1,\r\n    },\r\n    {\r\n        lightId: \"1\",\r\n        type: \"Directional\",\r\n        color: \"#ffffff\",\r\n        enable: true,\r\n        position: [50, 0, 100],\r\n        intensity: 0.8,\r\n    },\r\n];\r\n\r\nexport const asciiSet = [\r\n    \" .:-=+*#%@\",\r\n    \" .'`^\\\",:;Il!i~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$\",\r\n];\r\n\r\nexport const defaultSettings = {\r\n    model: {\r\n        materialType: \"Basic\",\r\n        id: \"c100001_01\",\r\n        texture: \"c100001_01\",\r\n        eyeTexture: \"c100001_01\",\r\n        eyeIdx: \"2\",\r\n        mouthTexture: \"c100001_01\",\r\n        mouthIdx: \"2\",\r\n        weaponRight: \"\",\r\n        weaponLeft: \"\",\r\n    },\r\n    materialParams: { ...defaultMatParams },\r\n    scene: {\r\n        rotateSpeed: 0,\r\n        background: \"#cccccc\",\r\n        initCameraPosition: null,\r\n        lights: defaultLights,\r\n    },\r\n    animation: {\r\n        code: defaultAni,\r\n        timeScale: 1,\r\n    },\r\n    app: {\r\n        sideContent: \"settings\",\r\n        showSettings: true,\r\n        showAniControl: true,\r\n        antiAliasing: false,\r\n    },\r\n    outline: {\r\n        enable: true,\r\n        size: 5, // 1 -> 10\r\n        color: \"#000000\",\r\n        opacity: 1, // 0.1 -> 10%, 1-> 100%\r\n    },\r\n    capture: {\r\n        enable: false,\r\n        supportedCodecs: [],\r\n        codec: \"\",\r\n    },\r\n    ascii: {\r\n        enable: false,\r\n        charSet: asciiSet[1],\r\n        invert: false,\r\n        color: \"#00ff00\",\r\n        bgColor: \"#000000\",\r\n    },\r\n};\r\n\r\nexport const initKey = {\r\n    id: { group: \"model\", key: \"id\" },\r\n    et: { group: \"model\", key: \"eyeTexture\" },\r\n    ei: { group: \"model\", key: \"eyeIdx\" },\r\n    mt: { group: \"model\", key: \"mouthTexture\" },\r\n    mi: { group: \"model\", key: \"mouthIdx\" },\r\n    wr: { group: \"model\", key: \"weaponRight\" },\r\n    wl: { group: \"model\", key: \"weaponLeft\" },\r\n    bg: { group: \"scene\", key: \"background\" },\r\n    cam: { group: \"scene\", key: \"initCameraPosition\" },\r\n    ts: { group: \"animation\", key: \"timeScale\" },\r\n    showAC: { group: \"app\", key: \"showAniControl\" },\r\n    showSettings: { group: \"app\", key: \"showSettings\" },\r\n    showOutline: { group: \"outline\", key: \"enable\" },\r\n    AA: { group: \"app\", key: \"antiAliasing\" },\r\n    rot: { group: \"scene\", key: \"rotateSpeed\" },\r\n    cc: { group: \"animation\", key: \"code\" },\r\n};\r\n\r\nexport const MATERIALS = [\"Basic\", \"Toon\", \"Lambert\", \"Phong\", \"Standard\"];\r\n\r\nexport const matCommonParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"useTexture\",\r\n    \"color\",\r\n];\r\n\r\nexport const matExtraParams = {\r\n    Basic: [],\r\n    Toon: [\"emissive\", \"emissiveIntensity\", \"gradientMap\"],\r\n    Lambert: [\"emissive\", \"emissiveIntensity\"],\r\n    Phong: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"specular\",\r\n        \"shininess\",\r\n        \"flatShading\",\r\n    ],\r\n    Standard: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"metalness\",\r\n        \"roughness\",\r\n        \"flatShading\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_CODE = {\r\n    Sword: \"SWD\",\r\n    Blade: \"KAT\",\r\n    Dagger: \"DAG\",\r\n    Axe: \"AXE\",\r\n    Lance: \"LAN\",\r\n    Bow: \"BOW\",\r\n    Wand: \"ROD\",\r\n    Staff: \"CAN\",\r\n    Manacaster: \"GUN\",\r\n};\r\n\r\nexport const WEAPON_LIST = [\r\n    \"Sword\",\r\n    \"Blade\",\r\n    \"Dagger\",\r\n    \"Axe\",\r\n    \"Lance\",\r\n    \"Bow\",\r\n    \"Wand\",\r\n    \"Staff\",\r\n    \"Manacaster\",\r\n];\r\n\r\nexport const GENDER_CODE = {\r\n    Male: 21,\r\n    Female: 23,\r\n};\r\n\r\nexport const COMBO_LENGTH = {\r\n    Axe: 5,\r\n    Bow: 6,\r\n    Staff: 5,\r\n    Dagger: 6,\r\n    Blade: 5,\r\n    Lance: 5,\r\n    Wand: 5,\r\n    Sword: 5,\r\n};\r\n\r\nexport const FS_LENGTH = {\r\n    Axe: 3,\r\n    Bow: 3,\r\n    Staff: 5,\r\n    Dagger: 3,\r\n    Blade: 3,\r\n    Lance: 4,\r\n    Wand: 3,\r\n    Sword: 3,\r\n};\r\n\r\nexport const FILTERS = {\r\n    rarity: [\"3\", \"4\", \"5\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_FILTERS = {\r\n    rarity: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\", \"None\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const spFaceTextures = {\r\n    c110300_01: \"ec110300_01\",\r\n};\r\n\r\nexport const incompatibleModels = new Set([\r\n    \"c100007_01\",\r\n    \"c100007_05\",\r\n    \"c100007_09\",\r\n    \"c100034_01\",\r\n    \"c100036_01\",\r\n    \"c100037_01\",\r\n    \"c100041_01\",\r\n]);\r\n\r\nexport const commonBG = {\r\n    green: \"#00ff00\",\r\n    black: \"#000000\",\r\n    grey: \"#cccccc\",\r\n    white: \"#ffffff\",\r\n};\r\n\r\nexport const CAM_PARAMS = {\r\n    angle: 45,\r\n    far: 300,\r\n    near: 0.01,\r\n};\r\n\r\nexport const cameraPositions = {\r\n    c: [0, 0.5, 1.5],\r\n    d: [3, 0.5, 6],\r\n    w: [2, 0, 0],\r\n    b: [1, 0.5, 6],\r\n    e: [1, 1, 4],\r\n    h: [1, 0.5, 3],\r\n    o: [0, 0.5, 8],\r\n    r: [3, 3, 20],\r\n\r\n    c100034_01: [0, 0.5, 1.75],\r\n    d210078_01: [3, 3, 20],\r\n    d210114_01: [3, 3, 20],\r\n    h0010001: [6, 0.5, 8],\r\n    h0010001_02: [2, 0, 0],\r\n    h0040101: [1, 0.5, 4],\r\n    r0070401: [30, 30, 100],\r\n    r0080401: [1, 2, 5],\r\n\r\n    smith: [1, 1, 2],\r\n};\r\n\r\nexport const controlsPositions = {\r\n    c: [0, 0.5, 0],\r\n    d: [0, 1, 0],\r\n    w: [0, 0, 0],\r\n    b: [0, 1, 0],\r\n    e: [0, 0.5, 0],\r\n    h: [0, 1, 0],\r\n    o: [0, 0, 0],\r\n    r: [0, 3, 0],\r\n\r\n    d210078_01: [0, 3, 0],\r\n    d210114_01: [0, 3, 0],\r\n    h0010001_02: [0, 3, 0],\r\n    r0070401: [0, 20, 0],\r\n    r0080401: [0, 2, 0],\r\n\r\n    smith: [0, 0.5, 0],\r\n};\r\n\r\nexport const idxOffsets = {\r\n    face1: { x: 2, y: 1 },\r\n    face2: { x: 0, y: 0 },\r\n    face3: { x: 1, y: 0 },\r\n    face4: { x: 2, y: 0 },\r\n    face5: { x: 3, y: 0 },\r\n    face6: { x: 0, y: -1 },\r\n    face7: { x: 1, y: -1 },\r\n    face8: { x: 2, y: -1 },\r\n    face9: { x: 3, y: -1 },\r\n};\r\n\r\nexport const aniModList = {\r\n    ts: { key: \"timeScale\", defaultValue: 1 },\r\n    r: { key: \"repetitions\", defaultValue: 1 },\r\n};\r\n\r\nexport const videoCodecs = [\r\n    \"video/webm;codecs=h264\",\r\n    \"video/webm;codecs=vp9\",\r\n    \"video/webm;codecs=vp8\",\r\n    \"video/webm\",\r\n];\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_WIDTH, DRAWER_BGCOLOR } from \"../consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst drawerWidth = DRAWER_WIDTH;\r\nconst drawerBG = DRAWER_BGCOLOR;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"block\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        overflowY: \"scroll\",\r\n    },\r\n    drawerPaper: {\r\n        alignItems: \"center\",\r\n        backgroundColor: drawerBG,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        width: drawerWidth,\r\n        \"& button\": {\r\n            marginBottom: \"0.2rem\",\r\n        },\r\n    },\r\n    content: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        padding: 0,\r\n    },\r\n    openSidebarButton: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        margin: \"2rem\",\r\n        opacity: \"0.5\",\r\n        borderRadius: \"0.25rem\",\r\n        transition: \"0.5s all ease-in-out\",\r\n        backgroundColor: \"#cccccc\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            opacity: \"1\",\r\n        },\r\n    },\r\n    loadingMsg: {\r\n        position: \"absolute\",\r\n        zIndex: \"9999\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"white\",\r\n        fontSize: \"x-large\",\r\n        backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","export default __webpack_public_path__ + \"static/media/Rose-Petals.bc11ecc7.svg\";","import * as THREE from \"three\";\r\nimport { fbxSource } from \"./App\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport { idxOffsets, incompatibleModels } from \"./consts\";\r\nimport textureOffsets from \"./data/face_offset\";\r\n\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { callbackOnEach } from \"./helpers\";\r\nimport {\r\n    matCommonParams,\r\n    matExtraParams,\r\n    matColorParams,\r\n    needsUpdateParams,\r\n} from \"./consts\";\r\n\r\nimport outlineFragShader from \"./shader/outlineFragShader\";\r\nimport outlineVertShader from \"./shader/outlineVertShader\";\r\n\r\nexport const loadModel = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new FBXLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const loadTexture = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new THREE.TextureLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const createInvisibleFloor = () => {\r\n    const floorGeometry = new THREE.PlaneBufferGeometry(0.1, 0.1);\r\n    floorGeometry.rotateX(Math.PI / 2);\r\n    const floorMaterial = new THREE.MeshBasicMaterial();\r\n    floorMaterial.visible = false;\r\n    return new THREE.Mesh(floorGeometry, floorMaterial);\r\n};\r\n\r\nconst getMeshes = (object, getOutline = false) => {\r\n    if (!object) return [];\r\n\r\n    const meshes = [];\r\n    object.traverse(child => {\r\n        if (!child.isMesh) return;\r\n        if (!getOutline && child.name === \"outline\") return;\r\n\r\n        meshes.unshift(child);\r\n    });\r\n    return meshes;\r\n};\r\n\r\nexport const getMaterial = object => {\r\n    if (!object) return [];\r\n\r\n    const meshes = getMeshes(object);\r\n    const materials = meshes.map(mesh => mesh.material).flat();\r\n    return materials;\r\n};\r\n\r\nexport const getModelPath = id => `${fbxSource}/fbx/${id}/${id}.fbx`;\r\n\r\nexport const getTexturePath = id => `${fbxSource}/fbx/${id}/${id}.png`;\r\n\r\nexport const analyzeWeaponCode = code => {\r\n    if (!code) return \"\";\r\n    const flipped = code.endsWith(\"b\");\r\n    const weaponCode = code.substring(0, code.length - 1);\r\n    const modelPath = getModelPath(weaponCode);\r\n    const texturePath = getTexturePath(weaponCode);\r\n\r\n    return { modelPath, texturePath, flipped };\r\n};\r\n\r\nexport const disposeItem = item => {\r\n    if (!item) return;\r\n\r\n    const disposedList = new Set();\r\n\r\n    const notDisposed = object => !disposedList.has(object.uuid);\r\n\r\n    const needToDispose = object => object && notDisposed(object);\r\n\r\n    const disposeObject = object => {\r\n        disposedList.add(object.uuid);\r\n        object.dispose();\r\n    };\r\n    const dispose = object => {\r\n        if (needToDispose(object)) disposeObject(object);\r\n    };\r\n    const disposeMaterial = object => {\r\n        callbackOnEach(object.material, mat => {\r\n            dispose(mat.map);\r\n            dispose(mat.backupMap);\r\n            dispose(mat);\r\n        });\r\n    };\r\n\r\n    const meshes = getMeshes(item, true);\r\n    meshes.forEach(mesh => {\r\n        disposeMaterial(mesh);\r\n        dispose(mesh.geometry);\r\n    });\r\n};\r\n\r\nexport const getParamsList = matType => [\r\n    ...matCommonParams,\r\n    ...matExtraParams[matType],\r\n];\r\n\r\nexport const isSimpleViewer = modelId =>\r\n    !modelId.startsWith(\"c\") ||\r\n    modelId.endsWith(\"_h\") ||\r\n    incompatibleModels.has(modelId);\r\n\r\nexport const isDragon = modelId =>\r\n    modelId.startsWith(\"d\") || modelId === \"smith\";\r\n\r\n// Hide all eye and mouth that's not mEye_01 or mMouth_01\r\nexport const initDragonFace = model => {\r\n    const nameRegex = /m[A-Z].*_[0-9]/m;\r\n    model.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const { name } = child;\r\n        if (nameRegex.test(name)) {\r\n            child.visible = name.includes(\"01\");\r\n        }\r\n    });\r\n};\r\n\r\nconst createNewMaterial = (materialType, params) => {\r\n    const matType = `Mesh${materialType}Material`;\r\n    return new THREE[matType](params);\r\n};\r\n\r\nexport const changeMaterial = (\r\n    target,\r\n    { materialType, texturePath, forced = false }\r\n) => {\r\n    if (!target) return;\r\n\r\n    const meshes = getMeshes(target);\r\n    meshes.forEach(mesh => {\r\n        const materials = [mesh.material].flat();\r\n        const matIsArray = Array.isArray(mesh.material);\r\n\r\n        if (!forced && !texturePath) {\r\n            const checkParam = `isMesh${materialType}Material`;\r\n            const needToChange = materials.some(mat => !mat[checkParam]);\r\n            if (!needToChange) return;\r\n        }\r\n\r\n        materials.forEach((mat, i) => {\r\n            const texture = texturePath\r\n                ? new THREE.TextureLoader().load(texturePath)\r\n                : materials[i].map;\r\n\r\n            if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n\r\n            const initParams = {\r\n                map: texture,\r\n                skinning: true,\r\n            };\r\n            const newMaterial = createNewMaterial(materialType, initParams);\r\n            newMaterial.name = mat.name;\r\n            if (mat.backupMap) newMaterial.backupMap = mat.backupMap;\r\n\r\n            if (texturePath) {\r\n                mat.map?.dispose?.();\r\n                mat.backupMap?.dispose?.();\r\n            }\r\n            mat.dispose();\r\n\r\n            if (matIsArray) {\r\n                mesh.material[i] = newMaterial;\r\n            } else {\r\n                mesh.material = newMaterial;\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n// Add outline to object and return reference to outlines\r\nexport const createOutline = (object, params) => {\r\n    if (!object) return;\r\n    const outlines = []; // return value\r\n    const meshes = getMeshes(object);\r\n    meshes.forEach(mesh => {\r\n        const outline = mesh.clone();\r\n        outlines.push(outline);\r\n\r\n        const newMaterial = createOutlineMaterial(params);\r\n        replaceMaterial(outline, newMaterial);\r\n        outline.visible = params.enable;\r\n        outline.name = \"outline\";\r\n\r\n        if (mesh.isSkinnedMesh) {\r\n            outline.bind(mesh.skeleton, mesh.bindMatrix);\r\n        }\r\n        mesh.parent.add(outline);\r\n    });\r\n    return outlines;\r\n};\r\n\r\nconst createOutlineMaterial = ({ size, color, opacity }) => {\r\n    const uniforms = {\r\n        size: { type: \"float\", value: size },\r\n        color: { tyle: \"vec3\", value: new THREE.Color(color) },\r\n        opacity: { type: \"float\", value: opacity },\r\n    };\r\n\r\n    const material = new THREE.ShaderMaterial({\r\n        skinning: true,\r\n        side: THREE.BackSide,\r\n        transparent: true,\r\n        uniforms,\r\n        fragmentShader: outlineFragShader,\r\n        vertexShader: outlineVertShader,\r\n    });\r\n    return material;\r\n};\r\n\r\nexport const applyOutlineSettings = (outline, settings) => {\r\n    if (!outline || !settings) return;\r\n\r\n    const { material } = outline;\r\n    settings.forEach((value, key) => {\r\n        switch (key) {\r\n            case \"enable\":\r\n                outline.visible = value;\r\n                break;\r\n            case \"color\":\r\n                callbackOnEach(\r\n                    material,\r\n                    mat => (mat.uniforms.color.value = new THREE.Color(value))\r\n                );\r\n                break;\r\n            default:\r\n                callbackOnEach(\r\n                    material,\r\n                    mat => (mat.uniforms[key].value = value)\r\n                );\r\n        }\r\n    });\r\n};\r\n\r\n// replace material of an object\r\nconst replaceMaterial = (object, newMaterial) => {\r\n    const { material } = object;\r\n    // dispose old material\r\n    callbackOnEach(material, mat => {\r\n        mat.map.dispose?.();\r\n        mat.backupMap?.dispose?.();\r\n        mat.dispose();\r\n    });\r\n    // apply new material\r\n    const matIsArray = Array.isArray(object.material);\r\n    object.material = matIsArray\r\n        ? new Array(object.material.length).fill(newMaterial)\r\n        : newMaterial;\r\n};\r\n\r\nexport const calculateTextureOffset = (currentTexture, prevTexture) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentTexture !== prevTexture) {\r\n        const prevOffset = textureOffsets[prevTexture] || { x: 0, y: 0 };\r\n        const currentOffset = textureOffsets[currentTexture] || { x: 0, y: 0 };\r\n\r\n        offset.x = currentOffset.x - prevOffset.x;\r\n        offset.y = currentOffset.y - prevOffset.y;\r\n    }\r\n    return offset;\r\n};\r\n\r\nexport const calculateIdxOffset = (currentIdx, prevIdx) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentIdx !== prevIdx) {\r\n        const prevOffset = idxOffsets[`face${prevIdx}`];\r\n        const currentOffset = idxOffsets[`face${currentIdx}`];\r\n\r\n        offset.x = currentOffset.x - prevOffset.x;\r\n        offset.y = currentOffset.y - prevOffset.y;\r\n    }\r\n    return offset;\r\n};\r\n\r\nconst applyOffset = part => (target, offset) => {\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { start, count } = targetGroup;\r\n        const end = start + count;\r\n        const uv = child.geometry.attributes.uv;\r\n        for (let i = start; i < end; i++) {\r\n            const u = uv.getX(i) + 0.25 * offset.x;\r\n            const v = uv.getY(i) + 0.25 * offset.y;\r\n            uv.setXY(i, u, v);\r\n        }\r\n        uv.needsUpdate = true;\r\n    });\r\n};\r\n\r\nexport const applyEyeOffset = applyOffset(\"Eye\");\r\nexport const applyMouthOffset = applyOffset(\"Mouth\");\r\n// export const applyBodyOffset = applyOffset(\"BodyAll\");\r\n\r\nconst applyTexture = part => (target, { materialType, textureId }) => {\r\n    const texturePath = getTexturePath(textureId);\r\n    const texture = new THREE.TextureLoader().load(texturePath);\r\n    texture.encoding = THREE.sRGBEncoding;\r\n\r\n    const materialParams = {\r\n        map: texture,\r\n        skinning: true,\r\n    };\r\n    const newMaterial = createNewMaterial(materialType, materialParams);\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { materialIndex } = targetGroup;\r\n        newMaterial.name = child.material[materialIndex].name;\r\n\r\n        child.material[materialIndex] = newMaterial;\r\n    });\r\n};\r\n\r\nexport const applyEyeTexture = applyTexture(\"Eye\");\r\nexport const applyMouthTexture = applyTexture(\"Mouth\");\r\n// export const applyBodyTexture = applyTexture(\"BodyAll\");\r\n\r\n// Chain Code is invalid if starts with the character \"+\"\r\nexport const analyzeChainCode = code => {\r\n    if (!code) return [\"\", \"\"];\r\n    const aniCodes = code.split(\">\");\r\n    const nAni = aniCodes.length;\r\n    const fileList = [];\r\n    const animationList = [];\r\n    for (let i = 0; i < nAni; i++) {\r\n        let timeScale = 1,\r\n            repetitions = 1,\r\n            fileIdx = null,\r\n            aniName = null,\r\n            fileName = null,\r\n            details,\r\n            currentAni = {},\r\n            faceChanges = [];\r\n        const currentParts = aniCodes[i].split(\"+\");\r\n        const fromModelFile = currentParts.length === 1;\r\n        if (fromModelFile) {\r\n            details = currentParts[0];\r\n        } else {\r\n            [fileName, details] = currentParts;\r\n            fileIdx = fileList.length - 1;\r\n        }\r\n        if (fileName) {\r\n            fileIdx = fileList.length;\r\n            fileList.push(fileName);\r\n        }\r\n        if (details.includes(\"&\")) {\r\n            const [name, ...settings] = details.split(\"&\");\r\n            aniName = name;\r\n            for (let setting of settings) {\r\n                const [key, value] = setting.split(\"=\");\r\n                if (key === \"ts\") {\r\n                    timeScale = parseFloat(value);\r\n                }\r\n                if (key === \"r\") {\r\n                    repetitions = value === \"inf\" ? Infinity : parseInt(value);\r\n                }\r\n                if (key.includes(\"-\")) {\r\n                    const [part, time] = key.split(\"-\");\r\n                    const faceMod = { time: parseFloat(time) };\r\n                    const indexName = `${part === \"e\" ? \"eye\" : \"mouth\"}Idx`;\r\n                    faceMod[indexName] = value;\r\n                    faceChanges.push(faceMod);\r\n                }\r\n            }\r\n        } else {\r\n            aniName = details;\r\n        }\r\n        currentAni = {\r\n            fileIdx,\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            faceChanges: processFaceChanges(faceChanges),\r\n        };\r\n        animationList.push(currentAni);\r\n    }\r\n    return [fileList, animationList];\r\n};\r\n\r\nexport const processFaceChanges = faceChanges => {\r\n    if (!faceChanges.length) return faceChanges;\r\n\r\n    const sorted = faceChanges.sort(change => change.time);\r\n    const timeStamps = new Set(faceChanges.map(change => change.time));\r\n    if (faceChanges.length === timeStamps.size) {\r\n        sorted.forEach(change => {\r\n            change.id = uuid();\r\n        });\r\n        return sorted;\r\n    }\r\n\r\n    const simplified = [];\r\n    timeStamps.forEach(time => {\r\n        let output = { time, id: uuid(), eyeIdx: \"\", mouthIdx: \"\" };\r\n        const changes = sorted.filter(change => change.time === time);\r\n        changes.forEach(change => (output = Object.assign(output, change)));\r\n        simplified.push(output);\r\n    });\r\n    return simplified;\r\n};\r\n\r\nexport const getFaceChangesArray = (faceChanges, repetitions) => {\r\n    if (!faceChanges) return [];\r\n    if (repetitions === 1) return [...faceChanges];\r\n    // [0, 100, 200,...]\r\n    const timeOffset = new Array(repetitions).fill().map((_, i) => i * 100);\r\n\r\n    const offsetFaceChanges = offset =>\r\n        faceChanges.map(({ time, id, ...others }) => ({\r\n            ...others,\r\n            time: time + offset,\r\n        }));\r\n\r\n    return timeOffset.map(offsetFaceChanges).flat();\r\n};\r\n\r\nexport const chainCodeToList = (code, name) => {\r\n    const [fileList, animationList] = analyzeChainCode(code);\r\n    const length = animationList.length;\r\n    const output = animationList.map((ani, i) => {\r\n        const { fileIdx, aniName, timeScale, repetitions, faceChanges } = ani;\r\n        const partName = name.concat(length > 1 ? `#${i + 1}` : \"\");\r\n        const listItem = {\r\n            name: partName,\r\n            fileName: fileList[fileIdx],\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            faceChanges,\r\n            id: uuid(),\r\n        };\r\n        return listItem;\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const createGradientMap = nTones => {\r\n    const colors = new Uint8Array(nTones).map((_, i) => (i * 256) / nTones);\r\n    const map = new THREE.DataTexture(colors, nTones, 1, THREE.LuminanceFormat);\r\n    map.minFilter = THREE.NearestFilter;\r\n    map.magFilter = THREE.NearestFilter;\r\n    map.generateMipmaps = false;\r\n\r\n    return map;\r\n};\r\n\r\nexport const getUpdated = (prev, current) => {\r\n    const updated = Object.entries(current).filter(\r\n        ([key, value]) => value !== prev[key]\r\n    );\r\n    return updated;\r\n};\r\n\r\nexport const applyMaterialParam = (materials, [key, value]) => {\r\n    let handler;\r\n    const needsUpdate = needsUpdateParams.includes(key);\r\n    switch (key) {\r\n        case \"gradientMap\":\r\n            const nTones = parseInt(value);\r\n            const newMap = createGradientMap(nTones);\r\n            handler = mat => (mat.gradientMap = newMap);\r\n            break;\r\n        case \"useTexture\":\r\n            handler = value\r\n                ? mat => {\r\n                      mat.map = mat.backupMap;\r\n                      delete mat.backupMap;\r\n                  }\r\n                : mat => {\r\n                      mat.backupMap = mat.map;\r\n                      mat.map = null;\r\n                  };\r\n            break;\r\n        default:\r\n            const isColor = matColorParams.includes(key);\r\n            handler = mat =>\r\n                (mat[key] = isColor ? new THREE.Color(value) : value);\r\n    }\r\n\r\n    materials.forEach(mat => {\r\n        handler(mat);\r\n        mat.needsUpdate = needsUpdate;\r\n    });\r\n};\r\n","const outlineFragShader = `#define OUTLINE\r\nuniform float opacity;\r\nuniform vec3 color;\r\nvoid main() {\r\n\tgl_FragColor = vec4( color, opacity );\r\n}`;\r\n\r\nexport default outlineFragShader;\r\n","const outlineVertShader = `#define OUTLINE\r\nuniform float size;\r\nvarying vec3 vViewPosition;\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\nvoid main() {\r\n\t#include <color_vertex>\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\t\r\n    vec3 transformed = position + objectNormal*0.0005*size;\r\n        \r\n\t#include <skinning_vertex>\r\n\t#include <project_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\tvViewPosition = - mvPosition.xyz;\r\n\t#include <worldpos_vertex>\r\n}`;\r\n\r\nexport default outlineVertShader;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}