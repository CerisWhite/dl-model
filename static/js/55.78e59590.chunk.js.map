{"version":3,"sources":["components/ColorButton/ColorButton.js","MainPage/Sidebar/SidebarBody/AdvancedSettings/MaterialParamsSetting.js"],"names":["ColorButton","props","color","value","onClick","children","others","Button","style","backgroundColor","getTextColor","event","currentTarget","MaterialParamsSetting","matType","materialType","openModal","settings","useContext","SettingsContext","dispatch","DispatchContext","currentSettings","material","paramsList","commonParams","extraParams","updateMatParam","name","action","type","key","toggleSetting","paramName","generateControl","paramsDetails","currentValue","fullWidth","variant","createToggleButton","min","max","step","className","onChange","_","newValue","createSlider","createColorButton","selectOptions","options","map","option","e","target","createSelectBox","generateParamText","param","settingsList"],"mappings":"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","file":"static/js/55.78e59590.chunk.js","sourcesContent":["import Button from \"@material-ui/core/Button\";\r\nimport { getTextColor } from \"helpers/helpers\";\r\n\r\nfunction ColorButton(props) {\r\n    const { color, value, onClick, children, ...others } = props;\r\n\r\n    const onBtnClick = event => {\r\n        const { value } = event.currentTarget;\r\n        onClick(value);\r\n    };\r\n\r\n    return (\r\n        <Button\r\n            style={{\r\n                backgroundColor: color,\r\n                color: getTextColor(color),\r\n            }}\r\n            value={value}\r\n            onClick={onBtnClick}\r\n            {...others}\r\n        >\r\n            {children || color}\r\n        </Button>\r\n    );\r\n}\r\n\r\nexport default ColorButton;\r\n","import { Fragment, useContext } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport ColorButton from \"components/ColorButton\";\r\n\r\nimport {\r\n    matCommonParams as commonParams,\r\n    matExtraParams as extraParams,\r\n    matParamsDetails as paramsDetails,\r\n} from \"helpers/consts\";\r\n\r\nimport { DispatchContext, SettingsContext } from \"context/SettingsContext\";\r\n\r\nfunction MaterialParamsSetting({ materialType: matType, openModal }) {\r\n    const settings = useContext(SettingsContext);\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    const currentSettings = settings.material;\r\n\r\n    const paramsList = [...commonParams, ...extraParams[matType]];\r\n\r\n    const updateMatParam = (name, value) => {\r\n        const action = {\r\n            type: \"update\",\r\n            key: \"material\",\r\n            value: { [name]: value },\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const toggleSetting = event => {\r\n        const paramName = event.currentTarget.value;\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"material\",\r\n            value: paramName,\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const handleSliderChange = key => (_, newValue) => {\r\n        updateMatParam(key, newValue);\r\n    };\r\n\r\n    const handleSelectChange = key => e => {\r\n        updateMatParam(key, e.target.value);\r\n    };\r\n\r\n    const createToggleButton = name => {\r\n        const currentValue = currentSettings[name];\r\n        return (\r\n            <Button\r\n                value={name}\r\n                fullWidth\r\n                variant=\"contained\"\r\n                onClick={toggleSetting}\r\n            >\r\n                {currentValue ? \"ON\" : \"OFF\"}\r\n            </Button>\r\n        );\r\n    };\r\n\r\n    const createColorButton = name => {\r\n        const color = currentSettings[name];\r\n        return (\r\n            <ColorButton\r\n                fullWidth\r\n                color={color}\r\n                value={`material-${name}`}\r\n                onClick={openModal}\r\n            />\r\n        );\r\n    };\r\n\r\n    const createSlider = name => {\r\n        const currentValue = currentSettings[name];\r\n        const { min, max, step } = paramsDetails[name];\r\n        return (\r\n            <div className=\"AdvancedSettingsGroup-slider\">\r\n                <Slider\r\n                    value={currentValue}\r\n                    min={min}\r\n                    max={max}\r\n                    step={step}\r\n                    onChange={handleSliderChange(name)}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const createSelectBox = name => {\r\n        const currentValue = currentSettings[name];\r\n        const { options } = paramsDetails[name];\r\n        const selectOptions = options.map(option => (\r\n            <MenuItem value={option} key={option}>\r\n                {option}\r\n            </MenuItem>\r\n        ));\r\n        return (\r\n            <div>\r\n                <Select\r\n                    fullWidth\r\n                    value={currentValue}\r\n                    onChange={handleSelectChange(name)}\r\n                >\r\n                    {selectOptions}\r\n                </Select>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const generateControl = paramName => {\r\n        const { type } = paramsDetails[paramName];\r\n        switch (type) {\r\n            case \"boolean\":\r\n                return createToggleButton(paramName);\r\n            case \"number\":\r\n            case \"percentage\":\r\n                return createSlider(paramName);\r\n            case \"color\":\r\n                return createColorButton(paramName);\r\n            case \"select\":\r\n                return createSelectBox(paramName);\r\n            default:\r\n                return currentSettings[paramName];\r\n        }\r\n    };\r\n\r\n    const generateParamText = param => {\r\n        const { type, name } = paramsDetails[param];\r\n        switch (type) {\r\n            case \"number\":\r\n                return `${name}: ${currentSettings[param]}`;\r\n            case \"percentage\":\r\n                return `${name}: ${~~(currentSettings[param] * 100)}%`;\r\n            default:\r\n                return name;\r\n        }\r\n    };\r\n\r\n    const settingsList = paramsList.map(param => {\r\n        return (\r\n            <Fragment key={param}>\r\n                <div className=\"AdvancedSettingsGroup-optionName\">\r\n                    {generateParamText(param)}\r\n                </div>\r\n                <>{generateControl(param)}</>\r\n            </Fragment>\r\n        );\r\n    });\r\n\r\n    return <>{settingsList}</>;\r\n}\r\n\r\nexport default MaterialParamsSetting;\r\n"],"sourceRoot":""}