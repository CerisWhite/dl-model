{"version":3,"sources":["viewerHelpers.js","reducer/settingsReducer.js","context/SettingsContext.js","helpers.js","ModelViewer.js","Display.js","MainPage.js","App.js","data/face_offset.js","hooks/useToggleState.js","styles/MainPageStyles.js","styles/Rose-Petals.svg","consts.js","serviceWorker.js","index.js"],"names":["loadModel","url","Promise","resolve","FBXLoader","load","getModelPath","id","fbxSource","getTexturePath","analyzeWeaponCode","code","flipped","endsWith","weaponCode","substring","length","modelPath","texturePath","isSheath","disposeItem","item","disposedList","Set","needToDispose","object","has","uuid","notDisposed","dispose","add","disposeObject","traverse","child","isMesh","callbackOnPotentialArray","material","mat","map","backupMap","geometry","createNewMaterial","materialType","params","matType","THREE","changeMaterial","target","name","checkParam","Array","isArray","every","forEach","i","texture","encoding","newMaterial","skinning","changeOpacity","opacity","obj","updateOutlineShader","size","fog","needsUpdate","onBeforeCompile","shader","customTransform","vertexShader","replace","setTimeout","changeOutlineSize","updated","m","changeOutlineColor","color","createOutline","outlines","outline","clone","visible","enable","push","fill","replaceMaterial","side","transparent","createOutlineMaterial","isSkinnedMesh","bind","skeleton","bindMatrix","parent","applyOffset","part","offset","groups","targetGroup","find","group","materialIndex","start","end","count","uv","attributes","u","getX","x","v","getY","y","setXY","applyEyeOffset","applyMouthOffset","applyFaceOffset","input","applyTexture","textureId","applyEyeTexture","applyMouthTexture","applyFaceTexture","analyzeChainCode","aniCodes","split","nAni","fileList","animationList","currentAni","timeScale","repetitions","fileIdx","aniName","fileName","details","currentParts","includes","settings","key","value","parseFloat","Infinity","parseInt","chainCodeToList","ani","concat","settingsReducer","state","action","type","subkey","currentValue","defaultSetting","defaultSettings","update","SettingsContext","createContext","DispatchContext","initSettings","chainMaker","chain","animation","SettingsProvider","props","useReducer","dispatch","Provider","children","Object","keys","isBlade","startsWith","callback","setInitialSettings","faceTextureDefined","param","keycode","setValue","join","chainList","n","initKey","isBooleanValue","Boolean","generateChainCode","defaultMod","modList","ts","r","output","modKey","collectFilter","toggleState","collected","tmp","k","multiCondFilter","filters","filterKeys","filter","el","complementaryColor","hexColor","toString","slice","aniButtonsFromObject","handleSelect","groupName","style","maxWidth","variant","data-value","data-name","onClick","getStandbyCode","weapon","gender","WEAPON_CODE","GENDER_CODE","getVictoryCode","getDashAtkCode","getRollCode","getComboCode","comboLength","COMBO_LENGTH","result","getFSCode","fsAniLength","FS_LENGTH","getLobbyCode","ModelViewer","initScene","models","modelInfo","main","model","weaponLeft","weaponRight","materials","outlineParams","viewport","width","window","innerWidth","height","innerHeight","mixers","clock","scene","background","bgColor","floorGeometry","rotateX","Math","PI","floorMaterial","floor","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","light","intensity","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","renderer","antiAliasing","canvas","domElement","setSize","appendChild","animate","initLoad","modelId","loadMain","loadWeaponR","loadWeaponL","all","attachWeapon","boneName","detachWeapon","remove","saveMaterialReference","playNextAni","capture","_aniIdx","mediaRecorder","stop","toggleCapture","newIdx","aniIdx","addAnimationChain","animationChain","a","setIsLoading","mixer","addEventListener","aniSettings","batchLoader","file","path","animations","animFiles","anim","updateViewport","prev","current","aspect","captureAnimation","chunks","videoStream","captureStream","MediaRecorder","mimeType","codec","ondataavailable","event","data","onstop","superBuffer","Blob","URL","createObjectURL","document","createElement","body","href","download","click","revokeObjectURL","updateAA","currentSize","getSize","removeChild","updateMainModel","faceTexture","faceOverride","faceNumber","face","faceOffset","faceOffsets","initPos","initRot","rotation","weaponModel","aniCode","faceTextureChanged","oldFaceNumber","oldOffset","currentOffset","dx","dy","faceOffsetFix","oldFaceOffsetFix","faceOffsetFixList","currentFaceOffsetFix","updateWeapons","updateModel","some","applyMaterialParams","updateAnimation","mainModel","stopAllAction","copy","updateOutline","updatedParams","outlineName","outlineGroup","materialParams","paramsList","materialCommonParams","materialExtraParams","directSetMatParams","matColorParams","currentColor","matColor","useTexture","flatShading","updateMaterialParams","backupTexture","textureMap","Map","addBackupTexture","get","updateMaterial","setBackground","frameId","requestAnimationFrame","dt","getDelta","rotateY","rotateSpeed","render","app","this","weaponInfo","faceOffsetX","faceOffsetY","offsetFix","offsetFixBase","offsetFixOverride","console","log","oldValue","subkeys","JSON","stringify","cancelAnimationFrame","renderLists","ref","clipAction","setLoop","clampWhenFinished","time","play","PureComponent","AniControl","lazy","Display","useContext","initCameraPosition","showAniControl","useCallback","defaultCameraPosition","cameraPositions","isNaN","controlsPositions","className","fallback","ControlPanel","SideBar","MainPage","location","classes","useStyles","useState","currentMode","setCurrentMode","useToggleState","sidebarOpen","toggleSidebarOpen","controlOpen","toggleControlOpen","isLoading","initLoadDone","setInitLoadDone","showSettings","viewerRef","useRef","setViewport","useEffect","pathname","updateViewportSize","removeEventListener","clientHeight","clientWidth","loadingMsg","root","CssBaseline","mode","open","openSidebarButton","openControl","content","process","App","routeProps","c110018_02","c110370_01","c100015_04","c110267_01","c110050_02","c110291_01","c110354_01","c110345_01","c110266_01","c110365_01","c110346_01","c110366_01","c110299_02","c110360_01","c110307_01","c110322_01","c110356_01","c110300_01","c110344_01","c110053_03","c110368_01","c110367_01","c110003_02","c110270_02","c110341_03","initVal","setState","drawerWidth","DRAWER_WIDTH","drawerBG","DRAWER_BGCOLOR","makeStyles","theme","display","drawer","overflowY","drawerPaper","alignItems","backgroundColor","backgroundImage","bg","backgroundSize","backgroundPosition","marginBottom","padding","top","left","margin","borderRadius","transition","cursor","zIndex","justifyContent","fontSize","baseUrl","matParamsDetails","wireframe","default","emissive","min","max","step","emissiveIntensity","specular","metalness","roughness","shininess","gradientMap","defaultMatParams","sideContent","supportedCodecs","ft","f","wr","wl","cam","showAC","showOutline","AA","rot","cc","MATERIALS","Basic","Toon","Lambert","Phong","Standard","Sword","Blade","Dagger","Axe","Lance","Bow","Wand","Staff","Manacaster","WEAPON_LIST","Male","Female","FILTERS","rarity","element","WEAPON_FILTERS","spFaceTextures","commonBG","green","black","grey","white","c","d","c100034_01","d210078_01","d210114_01","smith","face1","face2","face3","face4","face5","face6","face7","face8","face9","videoCodecs","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.601ebb9f.chunk.js","sourcesContent":["import * as THREE from \"three\";\r\nimport { fbxSource } from \"./App\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { callbackOnPotentialArray, isSheath } from \"./helpers\";\r\n\r\nexport const loadModel = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new FBXLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const loadTexture = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new THREE.TextureLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const getModelPath = id => `${fbxSource}/fbx/${id}/${id}.fbx`;\r\n\r\nexport const getTexturePath = id => `${fbxSource}/fbx/${id}/${id}.png`;\r\n\r\nexport const analyzeWeaponCode = code => {\r\n    if (!code) return \"\";\r\n    const flipped = code.endsWith(\"b\");\r\n    const weaponCode = code.substring(0, code.length - 1);\r\n    const modelPath = getModelPath(weaponCode);\r\n    const texturePath = getTexturePath(weaponCode);\r\n\r\n    return {\r\n        modelPath,\r\n        texturePath,\r\n        flipped,\r\n        isSheath: isSheath(weaponCode),\r\n    };\r\n};\r\n\r\nexport const disposeItem = item => {\r\n    if (!item) return;\r\n\r\n    const disposedList = new Set();\r\n\r\n    const notDisposed = object => !disposedList.has(object.uuid);\r\n\r\n    const needToDispose = object => object && notDisposed(object);\r\n\r\n    const disposeObject = object => {\r\n        disposedList.add(object.uuid);\r\n        object.dispose();\r\n    };\r\n\r\n    const dispose = object => {\r\n        if (needToDispose(object)) disposeObject(object);\r\n    };\r\n\r\n    item.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        // dispose material\r\n        callbackOnPotentialArray(child.material, mat => {\r\n            if (mat.map) dispose(mat.map);\r\n            if (mat.backupMap) dispose(mat.backupMap);\r\n\r\n            dispose(mat);\r\n        });\r\n        // dispose geometry\r\n        dispose(child.geometry);\r\n    });\r\n};\r\n\r\nconst createNewMaterial = (materialType, params) => {\r\n    const matType = `Mesh${materialType}Material`;\r\n    return new THREE[matType](params);\r\n};\r\n\r\nexport const changeMaterial = ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    texturePath,\r\n}) => {\r\n    if (!target) return;\r\n    target.traverse(child => {\r\n        if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n        const checkParam = `isMesh${materialType}Material`;\r\n        const material = child.material;\r\n\r\n        if (Array.isArray(material)) {\r\n            if (material.every(mat => mat[checkParam]) && !texturePath) return;\r\n\r\n            material.forEach((mat, i) => {\r\n                const texture = texturePath\r\n                    ? new THREE.TextureLoader().load(texturePath)\r\n                    : material[i].map;\r\n\r\n                if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n\r\n                const materialParams = {\r\n                    map: texture,\r\n                    skinning: true,\r\n                };\r\n                const newMaterial = createNewMaterial(\r\n                    materialType,\r\n                    materialParams\r\n                );\r\n                newMaterial.name = mat.name;\r\n\r\n                if (texturePath && material[i].map) {\r\n                    material[i].map.dispose();\r\n                }\r\n                material[i].dispose();\r\n                child.material[i] = newMaterial;\r\n            });\r\n        } else {\r\n            if (material[checkParam] && !texturePath) return;\r\n            const texture = texturePath\r\n                ? new THREE.TextureLoader().load(texturePath)\r\n                : material.map;\r\n\r\n            if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n            const materialParams = {\r\n                map: texture,\r\n                skinning: true,\r\n            };\r\n            const newMaterial = createNewMaterial(materialType, materialParams);\r\n            newMaterial.name = material.name;\r\n\r\n            if (texturePath && material.map) {\r\n                material.map.dispose();\r\n            }\r\n            material.dispose();\r\n\r\n            child.material = newMaterial;\r\n        }\r\n    });\r\n};\r\n\r\nconst createOutlineMaterial = ({ size, color, opacity }) => {\r\n    const newMaterial = new THREE.MeshToonMaterial({\r\n        color,\r\n        opacity,\r\n        side: THREE.BackSide,\r\n        transparent: true,\r\n        skinning: true,\r\n    });\r\n    newMaterial.onBeforeCompile = shader => {\r\n        const token = \"#include <begin_vertex>\";\r\n        const customTransform = `\r\n            vec3 transformed = position + objectNormal*${size * 0.0005};\r\n        `;\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            token,\r\n            customTransform\r\n        );\r\n    };\r\n    return newMaterial;\r\n};\r\n\r\n// replace material of an object\r\nconst replaceMaterial = (object, newMaterial) => {\r\n    // dispose old material\r\n    callbackOnPotentialArray(object.material, obj => {\r\n        // obj.map?.dispose?.()\r\n        if (obj.map) obj.map.dispose();\r\n        obj.dispose();\r\n    });\r\n    // apply new material\r\n    if (Array.isArray(object.material)) {\r\n        object.material = new Array(object.material.length).fill(newMaterial);\r\n    } else {\r\n        object.material = newMaterial;\r\n    }\r\n};\r\n\r\n// change opacity of an object\r\nexport const changeOpacity = ({ material }, opacity) => {\r\n    callbackOnPotentialArray(material, obj => {\r\n        obj.opacity = opacity;\r\n    });\r\n};\r\n\r\n// update outline shader to change size\r\nconst updateOutlineShader = (material, size) => {\r\n    // Hacky way to force shader recompilation, needs fixing !!!!!!!!!!!!!!!!!!\r\n    material.fog = !material.fog;\r\n    material.needsUpdate = true;\r\n\r\n    material.onBeforeCompile = shader => {\r\n        const token = \"#include <begin_vertex>\";\r\n        const customTransform = `\r\n                vec3 transformed = position + objectNormal*${size * 0.0005};\r\n            `;\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            token,\r\n            customTransform\r\n        );\r\n    };\r\n    setTimeout(() => {\r\n        material.fog = !material.fog;\r\n        material.needsUpdate = true;\r\n    }, 100); // Sometimes doesn't work with 0 delay\r\n};\r\n\r\n// change size of outline\r\nexport const changeOutlineSize = ({ material }, size) => {\r\n    if (Array.isArray(material)) {\r\n        const updated = new Set();\r\n        material.forEach(m => {\r\n            if (updated.has(m.uuid)) return;\r\n\r\n            updateOutlineShader(m, size);\r\n            updated.add(m.uuid);\r\n        });\r\n    } else {\r\n        updateOutlineShader(material, size);\r\n    }\r\n};\r\n\r\n// Change color of outline\r\nexport const changeOutlineColor = ({ material }, color) => {\r\n    if (Array.isArray(material)) {\r\n        const updated = new Set();\r\n        material.forEach(m => {\r\n            if (updated.has(m.uuid)) return;\r\n\r\n            m.color = new THREE.Color(color);\r\n            updated.add(m.uuid);\r\n        });\r\n    } else {\r\n        material.color = new THREE.Color(color);\r\n    }\r\n};\r\n\r\n// Add outline to object and return reference to outlines\r\nexport const createOutline = (object, params) => {\r\n    if (!object) return;\r\n    const outlines = []; // return value\r\n    object.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const outline = child.clone();\r\n        outline.name = \"outline\";\r\n        outline.visible = params.enable;\r\n\r\n        outlines.push(outline);\r\n        const newMaterial = createOutlineMaterial(params);\r\n        replaceMaterial(outline, newMaterial);\r\n\r\n        if (child.isSkinnedMesh) {\r\n            outline.bind(child.skeleton, child.bindMatrix);\r\n        }\r\n        child.parent.add(outline);\r\n    });\r\n    return outlines;\r\n};\r\n\r\nconst applyOffset = part => ({ target, offset }) => {\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { start, count } = targetGroup;\r\n        const end = start + count;\r\n        const uv = child.geometry.attributes.uv;\r\n        for (let i = start; i < end; i++) {\r\n            const u = uv.getX(i) + 0.25 * offset.x;\r\n            const v = uv.getY(i) + 0.25 * offset.y;\r\n            uv.setXY(i, u, v);\r\n        }\r\n        uv.needsUpdate = true;\r\n    });\r\n};\r\n\r\nexport const applyEyeOffset = applyOffset(\"Eye\");\r\nexport const applyMouthOffset = applyOffset(\"Mouth\");\r\nexport const applyBodyOffset = applyOffset(\"BodyAll\");\r\n\r\nexport const applyFaceOffset = input => {\r\n    if (input.offset.x === 0 && input.offset.y === 0) return;\r\n    applyEyeOffset(input);\r\n    applyMouthOffset(input);\r\n};\r\n\r\nconst applyTexture = part => ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    textureId,\r\n}) => {\r\n    const texturePath = getTexturePath(textureId);\r\n    const texture = new THREE.TextureLoader().load(texturePath);\r\n    texture.encoding = THREE.sRGBEncoding;\r\n\r\n    const materialParams = {\r\n        map: texture,\r\n        skinning: true,\r\n    };\r\n    const newMaterial = createNewMaterial(materialType, materialParams);\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { materialIndex } = targetGroup;\r\n        newMaterial.name = child.material[materialIndex].name;\r\n\r\n        child.material[materialIndex] = newMaterial;\r\n    });\r\n};\r\n\r\nexport const applyEyeTexture = applyTexture(\"Eye\");\r\nexport const applyMouthTexture = applyTexture(\"Mouth\");\r\nexport const applyBodyTexture = applyTexture(\"BodyAll\");\r\n\r\nexport const applyFaceTexture = input => {\r\n    applyEyeTexture(input);\r\n    applyMouthTexture(input);\r\n};\r\n\r\n// Chain Code is invalid if starts with the character \"+\"\r\nexport const analyzeChainCode = code => {\r\n    if (!code) return [\"\", \"\"];\r\n    const aniCodes = code.split(\">\");\r\n    const nAni = aniCodes.length;\r\n    const fileList = [];\r\n    const animationList = [];\r\n    for (let i = 0; i < nAni; i++) {\r\n        let timeScale = 1,\r\n            repetitions = 1,\r\n            fileIdx = null,\r\n            aniName = null,\r\n            fileName = null,\r\n            details,\r\n            currentAni = {};\r\n        const currentParts = aniCodes[i].split(\"+\");\r\n        const fromModelFile = currentParts.length === 1;\r\n        if (fromModelFile) {\r\n            details = currentParts[0];\r\n        } else {\r\n            [fileName, details] = currentParts;\r\n            fileIdx = fileList.length - 1;\r\n        }\r\n        if (fileName) {\r\n            fileIdx = fileList.length;\r\n            fileList.push(fileName);\r\n        }\r\n        if (details.includes(\"&\")) {\r\n            const [name, ...settings] = details.split(\"&\");\r\n            aniName = name;\r\n            for (let setting of settings) {\r\n                const [key, value] = setting.split(\"=\");\r\n                if (key === \"ts\") {\r\n                    timeScale = parseFloat(value);\r\n                }\r\n                if (key === \"r\") {\r\n                    repetitions = value === \"inf\" ? Infinity : parseInt(value);\r\n                }\r\n            }\r\n        } else {\r\n            aniName = details;\r\n        }\r\n        currentAni = {\r\n            fileIdx,\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n        };\r\n        animationList.push(currentAni);\r\n    }\r\n    return [fileList, animationList];\r\n};\r\n\r\nexport const chainCodeToList = (code, name) => {\r\n    const [fileList, animationList] = analyzeChainCode(code);\r\n    const length = animationList.length;\r\n    const output = animationList.map((ani, i) => {\r\n        const { fileIdx, aniName, timeScale, repetitions } = ani;\r\n        const partName = name.concat(length > 1 ? `#${i + 1}` : \"\");\r\n        return {\r\n            name: partName,\r\n            fileName: fileList[fileIdx],\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            id: uuid(),\r\n        };\r\n    });\r\n    return output;\r\n};\r\n","import { defaultSettings } from \"../consts\";\r\n\r\nexport const settingsReducer = (state, action) => {\r\n    const { type, key, subkey, value } = action;\r\n    switch (type) {\r\n        case \"toggle\":\r\n            let currentValue;\r\n            if (subkey) {\r\n                currentValue = state[key][subkey][value];\r\n                return {\r\n                    ...state,\r\n                    [key]: {\r\n                        ...state[key],\r\n                        [subkey]: {\r\n                            ...state[key][subkey],\r\n                            [value]: !currentValue,\r\n                        },\r\n                    },\r\n                };\r\n            }\r\n            currentValue = state[key][value];\r\n            return {\r\n                ...state,\r\n                [key]: { ...state[key], [value]: !currentValue },\r\n            };\r\n        case \"reset\":\r\n            // reset values\r\n            // value = array of keys in settings[key] or settings[key][subkey] to be reset, null -> reset all\r\n            const defaultSetting = subkey\r\n                ? defaultSettings[key][subkey]\r\n                : defaultSettings[key];\r\n            // no value -> reset all\r\n            if (!value)\r\n                return subkey\r\n                    ? {\r\n                          ...state,\r\n                          [key]: {\r\n                              ...state[key],\r\n                              [subkey]: {\r\n                                  ...state[key][subkey],\r\n                                  ...defaultSetting,\r\n                              },\r\n                          },\r\n                      }\r\n                    : {\r\n                          ...state,\r\n                          [key]: { ...state[key], ...defaultSetting },\r\n                      };\r\n            // if value is defined, reset only the specified keys\r\n            const update = {};\r\n            value.forEach(v => {\r\n                update[v] = defaultSetting[v];\r\n            });\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...update },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...update } };\r\n        case \"load\":\r\n            // load preset values\r\n            return;\r\n        case \"update\":\r\n            // update state[key] or state[key][subkey] with values from value\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...value },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...value } };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createContext, useReducer } from \"react\";\r\nimport { settingsReducer } from \"../reducer/settingsReducer\";\r\nimport { defaultSettings } from \"../consts\";\r\nimport { chainCodeToList } from \"../viewerHelpers\";\r\n\r\nexport const SettingsContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nconst initAniChain = chainCodeToList(defaultSettings.animation.code, \"init\");\r\n\r\nconst initSettings = { chainMaker: { chain: initAniChain } };\r\nObject.keys(defaultSettings).forEach(\r\n    key => (initSettings[key] = { ...defaultSettings[key] })\r\n);\r\nexport { initSettings };\r\n\r\nexport function SettingsProvider(props) {\r\n    const [settings, dispatch] = useReducer(settingsReducer, initSettings);\r\n\r\n    return (\r\n        <SettingsContext.Provider value={settings}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                {props.children}\r\n            </DispatchContext.Provider>\r\n        </SettingsContext.Provider>\r\n    );\r\n}\r\n","import Button from \"@material-ui/core/Button\";\r\n\r\nimport { initSettings } from \"./context/SettingsContext\";\r\nimport {\r\n    initKey,\r\n    WEAPON_CODE,\r\n    GENDER_CODE,\r\n    COMBO_LENGTH,\r\n    FS_LENGTH,\r\n} from \"./consts\";\r\n\r\nimport { chainCodeToList } from \"./viewerHelpers\";\r\n\r\nexport const isBlade = code => code.startsWith(\"w302\");\r\n\r\nexport const isSheath = code => isBlade(code) && code.endsWith(\"02\");\r\n\r\n// if object is an array, apply callback on each element of object, otherwise, apply call back on the object\r\nexport const callbackOnPotentialArray = (object, callback) => {\r\n    if (Array.isArray(object)) {\r\n        object.forEach(child => callback(child));\r\n        return;\r\n    }\r\n    callback(object);\r\n};\r\n\r\nexport const setInitialSettings = params => {\r\n    if (params.length === 0) return;\r\n    let faceTextureDefined = false;\r\n    params.forEach(param => {\r\n        if (!param) return;\r\n\r\n        const [keycode, ...value] = param.split(\"=\"); // animation code can have \"=\" inside\r\n        // if no value given, skip\r\n        if (!value[0]) return;\r\n\r\n        let setValue = value.length === 1 ? value[0] : value.join(\"=\");\r\n\r\n        switch (keycode) {\r\n            case \"ft\":\r\n                faceTextureDefined = true;\r\n                break;\r\n            case \"cc\":\r\n                // initialize chain maker chain\r\n                const chainList = chainCodeToList(setValue, \"Animation\");\r\n                initSettings[\"chainMaker\"][\"chain\"] = chainList;\r\n                break;\r\n            case \"bg\":\r\n                if (setValue !== \"transparent\") {\r\n                    setValue = `#${setValue}`;\r\n                }\r\n                break;\r\n            case \"cam\": // parameters in form x, y, z\r\n                setValue = setValue.split(\",\").map(n => parseFloat(n));\r\n                break;\r\n            default:\r\n        }\r\n        const { group, key } = initKey[keycode];\r\n\r\n        const isBooleanValue = setValue === \"true\" || setValue === \"false\";\r\n\r\n        initSettings[group][key] = isBooleanValue\r\n            ? Boolean(setValue === \"true\")\r\n            : setValue;\r\n    });\r\n\r\n    initSettings[\"model\"][\"texture\"] = initSettings[\"model\"][\"id\"];\r\n\r\n    if (!faceTextureDefined) {\r\n        initSettings[\"model\"][\"faceTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n};\r\n\r\nexport const generateChainCode = chain => {\r\n    const defaultMod = {\r\n        timeScale: 1,\r\n        repetitions: 1,\r\n    };\r\n    const modList = {\r\n        ts: \"timeScale\",\r\n        r: \"repetitions\",\r\n    };\r\n    const length = chain.length;\r\n    let output = \"\";\r\n    chain.forEach((ani, i) => {\r\n        const { fileName, aniName } = ani;\r\n        if (fileName) {\r\n            if (i === 0) {\r\n                output = output.concat(fileName);\r\n            } else {\r\n                output = output.concat(\r\n                    fileName !== chain[i - 1].fileName ? fileName : \"\"\r\n                );\r\n            }\r\n            output = output.concat(\"+\");\r\n        }\r\n        output = output.concat(aniName);\r\n        // Add modifiers\r\n        Object.keys(modList).forEach(modKey => {\r\n            const key = modList[modKey];\r\n            if (ani[key] !== defaultMod[key]) {\r\n                output = output.concat(`&${modKey}=${ani[key]}`);\r\n            }\r\n        });\r\n        if (i < length - 1) {\r\n            output = output.concat(\">\");\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const collectFilter = toggleState => {\r\n    let collected = {};\r\n    Object.keys(toggleState).forEach(key => {\r\n        let tmp = [];\r\n        Object.keys(toggleState[key]).forEach(k => {\r\n            if (toggleState[key][k]) {\r\n                tmp.push(k);\r\n            }\r\n        });\r\n        collected[key] = tmp;\r\n    });\r\n    return collected;\r\n};\r\n\r\nexport const multiCondFilter = (input, filters) => {\r\n    const filterKeys = Object.keys(filters);\r\n\r\n    return input.filter(el => {\r\n        return filterKeys.every(key => {\r\n            if (!filters[key].length) return true;\r\n            return filters[key].includes(el[key]);\r\n        });\r\n    });\r\n};\r\n\r\nexport const complementaryColor = color => {\r\n    const hexColor = color.replace(\"#\", \"0x\");\r\n\r\n    return `#${(\"000000\" + (\"0xffffff\" ^ hexColor).toString(16)).slice(-6)}`;\r\n};\r\n\r\nexport const aniButtonsFromObject = (object, handleSelect, groupName) => {\r\n    if (!object) return null;\r\n    const style = { maxWidth: \"13.5rem\" };\r\n    return Object.keys(object).map(key => (\r\n        <Button\r\n            variant=\"contained\"\r\n            key={key}\r\n            data-value={object[key]}\r\n            data-name={`${groupName ? `${groupName} ` : \"\"}${key}`}\r\n            onClick={handleSelect}\r\n            style={style}\r\n        >\r\n            {key}\r\n        </Button>\r\n    ));\r\n};\r\n\r\n// Animation chain code generator\r\nexport const getStandbyCode = (weapon, gender) =>\r\n    `LOB_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_ONT_${GENDER_CODE[gender]}`;\r\n\r\nexport const getVictoryCode = weapon =>\r\n    `WIN_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_WIN_01>+${WEAPON_CODE[weapon]}_WIN_02`;\r\n\r\nexport const getDashAtkCode = weapon => `DAS+${WEAPON_CODE[weapon]}_DAS_02`;\r\n\r\nexport const getRollCode = weapon => `ROL+${WEAPON_CODE[weapon]}_ROL_01`;\r\n\r\nexport const getComboCode = weapon => {\r\n    const comboLength = COMBO_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `CMB_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= comboLength; i++) {\r\n        result = result.concat(`+${code}_CMB_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Force Strike chain code\r\nexport const getFSCode = weapon => {\r\n    const fsAniLength = FS_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `FS_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= fsAniLength; i++) {\r\n        result = result.concat(`+${code}_CHR_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Join Lobby chain code\r\nexport const getLobbyCode = (weapon, gender) => {\r\n    const code = WEAPON_CODE[weapon];\r\n    if (gender === \"Male\")\r\n        return `LOB_${code}+${code}_ONT_05&ts=-0.5>+${code}_ONT_02>+${code}_ONT_07>+${code}_ONT_08>+${code}_ONT_21`;\r\n    // Female\r\n    return `LOB_${code}+${code}_ONT_06&ts=-0.5>+${code}_ONT_04>+${code}_ONT_09>+${code}_ONT_10>+${code}_ONT_23`;\r\n};\r\n","import { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { fbxSource } from \"./App\";\r\nimport { CAM_PARAMS, faceOffsets } from \"./consts\";\r\nimport faceOffsetFixList from \"./data/face_offset\";\r\nimport {\r\n    directSetMatParams,\r\n    matColorParams,\r\n    materialCommonParams,\r\n    materialExtraParams,\r\n} from \"./consts\";\r\nimport {\r\n    getModelPath,\r\n    analyzeWeaponCode,\r\n    analyzeChainCode,\r\n    loadModel,\r\n    applyFaceTexture,\r\n    applyFaceOffset,\r\n    disposeItem,\r\n    createOutline,\r\n    changeMaterial,\r\n    changeOpacity,\r\n    changeOutlineSize,\r\n    changeOutlineColor,\r\n} from \"./viewerHelpers\";\r\n\r\nclass ModelViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        window.app = this;\r\n        this.initScene();\r\n        this.props.setIsLoading(true);\r\n\r\n        // Load the models\r\n        const [main, weaponRight, weaponLeft] = await this.initLoad();\r\n\r\n        // save references to models\r\n        this.models = {\r\n            main,\r\n            weaponRight,\r\n            weaponLeft,\r\n        };\r\n\r\n        // add outline to main model and save reference\r\n        this.outlines.main = createOutline(main, this.outlineParams);\r\n\r\n        // Save initial position and rotation\r\n        main.initPos = main.position.clone();\r\n        main.initRot = main.rotation.clone();\r\n\r\n        // change the material\r\n\r\n        const { materialType } = this.props.model;\r\n        changeMaterial({ target: main, materialType });\r\n\r\n        // process weapons\r\n        [\"Right\", \"Left\"].forEach(side => {\r\n            const key = `weapon${side}`;\r\n            // if weapon not specified, return\r\n            if (!this.props.model[key]) return;\r\n            // add weapon\r\n            const weaponInfo = this.modelInfo[key];\r\n            const weaponModel = this.models[key];\r\n            const { texturePath } = weaponInfo;\r\n            changeMaterial({\r\n                target: weaponModel,\r\n                materialType,\r\n                texturePath,\r\n            });\r\n            // flip weapon if needed\r\n            weaponModel.rotation.y += weaponInfo.flipped ? Math.PI : 0;\r\n            // add outline to weapon and save reference\r\n            this.outlines[key] = createOutline(weaponModel, this.outlineParams);\r\n            // attach weapon to main body\r\n            this.attachWeapon(this.models[`weapon${side}`], side);\r\n        });\r\n\r\n        // Apply face settings\r\n        const { texture, faceTexture } = this.props.model;\r\n        const faceOverride = texture !== faceTexture;\r\n        const faceNumber = `face${this.props.model.face}`;\r\n        const { x: faceOffsetX, y: faceOffsetY } = faceOffsets[faceNumber];\r\n        if (faceOffsetX !== 0 || faceOffsetY !== 0 || faceOverride) {\r\n            let offsetFix = { x: 0, y: 0 };\r\n            if (faceOverride) {\r\n                applyFaceTexture({\r\n                    target: main,\r\n                    materialType,\r\n                    textureId: faceTexture,\r\n                });\r\n\r\n                const offsetFixBase = faceOffsetFixList[texture] || {\r\n                    x: 0,\r\n                    y: 0,\r\n                };\r\n                const offsetFixOverride = faceOffsetFixList[faceTexture] || {\r\n                    x: 0,\r\n                    y: 0,\r\n                };\r\n                offsetFix = {\r\n                    x: offsetFixOverride.x - offsetFixBase.x,\r\n                    y: offsetFixOverride.y - offsetFixBase.y,\r\n                };\r\n            }\r\n            const offset = {\r\n                x: faceOffsetX + offsetFix.x,\r\n                y: faceOffsetY + offsetFix.y,\r\n            };\r\n            applyFaceOffset({ target: main, offset });\r\n        }\r\n\r\n        this.saveMaterialReference();\r\n        this.applyMaterialParams();\r\n\r\n        // Add character to scene\r\n        this.floor.add(main);\r\n        // main model loading finished\r\n        this.props.setIsLoading(false);\r\n\r\n        // Add animation\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        this.addAnimationChain(main, aniCode, timeScale);\r\n    }\r\n\r\n    async componentDidUpdate(prev) {\r\n        const current = this.props;\r\n\r\n        // print updated props to console\r\n        console.log(\"Updated\");\r\n        Object.keys(prev).forEach(key => {\r\n            const oldValue = prev[key];\r\n            const currentValue = this.props[key];\r\n            const subkeys = Object.keys(oldValue);\r\n            if (subkeys.length === 0 || typeof oldValue === \"string\") {\r\n                if (oldValue !== currentValue) {\r\n                    console.log(\r\n                        `${key}: ${JSON.stringify(\r\n                            oldValue\r\n                        )} to ${JSON.stringify(currentValue)}`\r\n                    );\r\n                }\r\n            } else {\r\n                subkeys.forEach(subkey => {\r\n                    if (oldValue[subkey] !== currentValue[subkey]) {\r\n                        console.log(\r\n                            `${key}.${subkey}: ${JSON.stringify(\r\n                                oldValue[subkey]\r\n                            )} to ${JSON.stringify(currentValue[subkey])}`\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n\r\n        this.updateModel(prev.model, current.model);\r\n\r\n        this.updateAnimation(prev.animation, current.animation);\r\n\r\n        this.updateOutline(prev.outline, current.outline);\r\n\r\n        this.updateMaterial(prev, current);\r\n\r\n        // Update background color\r\n        if (prev.bgColor !== current.bgColor) {\r\n            this.setBackground(current.bgColor);\r\n        }\r\n\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n\r\n        // Update Anti Aliasinng\r\n        if (prev.antiAliasing !== current.antiAliasing) {\r\n            this.updateAA();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixers = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n\r\n    // set up initial scene\r\n    initScene = () => {\r\n        this.models = {};\r\n        this.modelInfo = {\r\n            main: this.props.model.id,\r\n            weaponLeft: analyzeWeaponCode(this.props.model.weaponLeft),\r\n            weaponRight: analyzeWeaponCode(this.props.model.weaponRight),\r\n        };\r\n        this.materials = [];\r\n\r\n        // save reference and specifications for outlines\r\n        this.outlines = {};\r\n        this.outlineParams = { ...this.props.outline };\r\n\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // mixers\r\n        this.mixers = [];\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.scene.background =\r\n            this.props.bgColor !== \"transparent\"\r\n                ? new THREE.Color(this.props.bgColor)\r\n                : null;\r\n\r\n        // Create an invisible floor to add the models on (for auto rotate)\r\n        const floorGeometry = new THREE.PlaneBufferGeometry(0.1, 0.1);\r\n        floorGeometry.rotateX(Math.PI / 2);\r\n        const floorMaterial = new THREE.MeshBasicMaterial();\r\n        floorMaterial.visible = false;\r\n        this.floor = new THREE.Mesh(floorGeometry, floorMaterial);\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        let light = new THREE.DirectionalLight(0xffffff);\r\n        light.position.set(0, 200, 100);\r\n        light.intensity = 0.5;\r\n        this.scene.add(light);\r\n        light = new THREE.AmbientLight(0xaaaaaa);\r\n        this.scene.add(light);\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.renderer = this.props.antiAliasing\r\n            ? this.rendererAA\r\n            : this.rendererNoAA;\r\n        this.canvas = this.renderer.domElement;\r\n        this.renderer.setSize(this.viewport.width, this.viewport.height);\r\n        this.mount.appendChild(this.canvas);\r\n\r\n        this.animate();\r\n    };\r\n\r\n    // Promise to load all models at initialize\r\n    initLoad = () => {\r\n        const modelId = this.modelInfo.main;\r\n        const modelPath = getModelPath(modelId);\r\n        const loadMain = loadModel(modelPath);\r\n\r\n        const weaponRight = this.modelInfo.weaponRight?.modelPath;\r\n        const loadWeaponR = loadModel(weaponRight);\r\n\r\n        const weaponLeft = this.modelInfo.weaponLeft?.modelPath;\r\n        const loadWeaponL = loadModel(weaponLeft);\r\n\r\n        return Promise.all([loadMain, loadWeaponR, loadWeaponL]);\r\n    };\r\n\r\n    attachWeapon = (weapon, side) => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name === boneName && child.children.length === 0) {\r\n                child.add(weapon);\r\n            }\r\n        });\r\n    };\r\n\r\n    detachWeapon = side => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.children.length === 1 && child.name === boneName) {\r\n                if (child.children[0].type === \"Group\") {\r\n                    child.remove(this.models[`weapon${side}`]);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    saveMaterialReference = () => {\r\n        this.materials = [];\r\n        const mainModel = this.models.main;\r\n        mainModel.traverse(child => {\r\n            if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n            const { material } = child;\r\n\r\n            if (Array.isArray(material)) {\r\n                this.materials = this.materials.concat(material);\r\n            } else {\r\n                this.materials.push(material);\r\n            }\r\n        });\r\n    };\r\n\r\n    playNextAni = () => {\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        if (this.props.capture.enable && this._aniIdx === this.nAni - 1) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % this.nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    addAnimationChain = async (object, animationChain, timeScale) => {\r\n        if (!animationChain) return;\r\n\r\n        const [fileList, animationList] = analyzeChainCode(animationChain);\r\n        this.nAni = animationList.length;\r\n\r\n        this.props.setIsLoading(true);\r\n\r\n        object.mixer = new THREE.AnimationMixer(object);\r\n        this.mixers.push(object.mixer);\r\n\r\n        this._aniIdx = 0;\r\n        object.mixer.timeScale = timeScale; // Global timeScale\r\n        object.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = animationList.map(ani => ({\r\n            timeScale: ani.timeScale,\r\n            repetitions: ani.repetitions,\r\n        }));\r\n        const batchLoader = fileList.map(file => {\r\n            const path = `${fbxSource}/fbx/${file}.fbx`;\r\n            return loadModel(path);\r\n        });\r\n\r\n        const animations = [];\r\n        // load all animation files\r\n        const animFiles = await Promise.all(batchLoader);\r\n\r\n        animationList.forEach(anim => {\r\n            const { fileIdx, aniName } = anim;\r\n            const animation = aniName\r\n                ? animFiles[fileIdx].animations.find(\r\n                      ani => ani.name === aniName\r\n                  )\r\n                : animFiles[fileIdx].animations[0];\r\n            animations.push(animation);\r\n        });\r\n        this.animations = animations;\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.props.setIsLoading(false);\r\n    };\r\n\r\n    // this.aniIdx = n => play animation with index n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n        const anim = this.animations[newIdx];\r\n        const mixer = this.models.main.mixer;\r\n        mixer.stopAllAction();\r\n        const action = mixer.clipAction(anim);\r\n        const { timeScale, repetitions } = this.aniSettings[newIdx];\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n        action.play();\r\n    }\r\n\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width !== width || prev.height !== height) {\r\n            this.renderer.setSize(width, height);\r\n            this.camera.aspect = width / height;\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: this.props.capture.codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.props.setIsLoading(false);\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                var url = URL.createObjectURL(superBuffer);\r\n                var a = document.createElement(\"a\");\r\n                document.body.appendChild(a);\r\n                a.style = \"display: none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n            };\r\n        }\r\n        // disable user input\r\n        this.props.setIsLoading(true);\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    updateAA = () => {\r\n        // get current viewport size\r\n        const currentSize = new THREE.Vector2();\r\n        this.renderer.getSize(currentSize);\r\n        // switch renderer\r\n        this.renderer = this.props.antiAliasing\r\n            ? this.rendererAA\r\n            : this.rendererNoAA;\r\n        this.renderer.setSize(currentSize.x, currentSize.y);\r\n        // remove old canvas\r\n        this.mount.removeChild(this.canvas);\r\n        // Add new canvas\r\n        this.canvas = this.renderer.domElement;\r\n        this.mount.appendChild(this.canvas);\r\n    };\r\n\r\n    updateMainModel = async (prev, current) => {\r\n        const { texture, faceTexture } = current;\r\n        const faceOverride = texture !== faceTexture;\r\n        const faceNumber = `face${current.face}`;\r\n        const faceOffset = faceOffsets[faceNumber];\r\n        if (prev.id !== current.id) {\r\n            this.props.setIsLoading(true);\r\n            const modelPath = getModelPath(current.id);\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            const { materialType } = current;\r\n            changeMaterial({ target: model, materialType });\r\n            // add outline\r\n            this.outlines.main = createOutline(model, this.outlineParams);\r\n\r\n            // detach weapons from old model if they exist\r\n            [\"Right\", \"Left\"].forEach(side => {\r\n                const key = `weapon${side}`;\r\n                if (prev[key]) {\r\n                    this.detachWeapon(side);\r\n                }\r\n            });\r\n            // remove and dispose old model\r\n            this.floor.remove(this.models.main);\r\n            disposeItem(this.models.main);\r\n            // add reference\r\n            this.models.main = model;\r\n\r\n            // Save initial position and rotation\r\n            model.initPos = model.position.clone();\r\n            model.initRot = model.rotation.clone();\r\n\r\n            // Add new model to scene\r\n            this.floor.add(model);\r\n\r\n            // Apply face to new model\r\n            if (faceOverride) {\r\n                applyFaceTexture({\r\n                    target: model,\r\n                    materialType,\r\n                    textureId: faceTexture,\r\n                });\r\n            }\r\n\r\n            if (faceOffset.x !== 0 || faceOffset.y !== 0) {\r\n                applyFaceOffset({ target: model, offset: faceOffset });\r\n            }\r\n\r\n            // Attach weapons to new model\r\n            [\"Right\", \"Left\"].forEach(side => {\r\n                const key = `weapon${side}`;\r\n                const weaponModel = this.models[key];\r\n\r\n                if (!weaponModel) return;\r\n                this.attachWeapon(weaponModel, side);\r\n                // add outline if not exist\r\n                if (!this.outlines[key]) {\r\n                    this.outlines[key] = createOutline(\r\n                        weaponModel,\r\n                        this.outlineParams\r\n                    );\r\n                }\r\n            });\r\n\r\n            // Add animation to new model\r\n            const { code: aniCode, timeScale } = this.props.animation;\r\n            this.addAnimationChain(model, aniCode, timeScale);\r\n\r\n            this.props.setIsLoading(false);\r\n        } else {\r\n            // Update face when main model not changed\r\n            const faceTextureChanged = prev.faceTexture !== faceTexture;\r\n            const faceChanged = prev.face !== current.face;\r\n            if (faceChanged || faceTextureChanged) {\r\n                const oldFaceNumber = `face${prev.face}`;\r\n                const faceNumber = `face${current.face}`;\r\n\r\n                const oldOffset = faceOffsets[oldFaceNumber];\r\n                const currentOffset = faceOffsets[faceNumber];\r\n\r\n                const dx = currentOffset.x - oldOffset.x;\r\n                const dy = currentOffset.y - oldOffset.y;\r\n\r\n                let faceOffsetFix = { x: 0, y: 0 };\r\n                if (faceTextureChanged) {\r\n                    const { materialType } = current;\r\n                    applyFaceTexture({\r\n                        target: this.models.main,\r\n                        materialType,\r\n                        textureId: faceTexture,\r\n                    });\r\n                    const oldFaceOffsetFix = faceOffsetFixList[\r\n                        prev.faceTexture\r\n                    ] || { x: 0, y: 0 };\r\n\r\n                    const currentFaceOffsetFix = faceOffsetFixList[\r\n                        faceTexture\r\n                    ] || { x: 0, y: 0 };\r\n\r\n                    faceOffsetFix = {\r\n                        x: currentFaceOffsetFix.x - oldFaceOffsetFix.x,\r\n                        y: currentFaceOffsetFix.y - oldFaceOffsetFix.y,\r\n                    };\r\n                }\r\n                const offset = {\r\n                    x: dx + faceOffsetFix.x,\r\n                    y: dy + faceOffsetFix.y,\r\n                };\r\n\r\n                applyFaceOffset({ target: this.models.main, offset });\r\n            }\r\n        }\r\n    };\r\n\r\n    updateWeapons = async (prev, current) => {\r\n        [\"Right\", \"Left\"].forEach(async side => {\r\n            const key = `weapon${side}`;\r\n            // if not changed, return\r\n            if (prev[key] === current[key]) return;\r\n            // Update weapon\r\n            this.detachWeapon(side); // remove old weapon\r\n            disposeItem(this.models[key]); // dispose old weapon\r\n            // if current weapon is empty (weapon removed)\r\n            if (!current[key]) {\r\n                this.models[key] = null;\r\n                this.modelInfo[key] = \"\";\r\n                // remove reference to outline\r\n                this.outlines[key] = null;\r\n                return;\r\n            }\r\n            // load new weapon\r\n            this.props.setIsLoading(true);\r\n\r\n            this.modelInfo[key] = analyzeWeaponCode(this.props.model[key]);\r\n            const { modelPath, texturePath } = this.modelInfo[key];\r\n\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            this.models[key] = model;\r\n\r\n            // process new weapon\r\n            const { materialType } = current;\r\n            changeMaterial({\r\n                target: this.models[key],\r\n                materialType,\r\n                texturePath,\r\n            });\r\n\r\n            if (this.modelInfo[key].flipped) {\r\n                this.models[key].rotation.y = Math.PI;\r\n            }\r\n            // add outline to new weapon\r\n            this.outlines[key] = createOutline(model, this.outlineParams);\r\n            // attach new weapon to main model\r\n            this.attachWeapon(model, side);\r\n\r\n            this.props.setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        await this.updateMainModel(prev, current);\r\n        await this.updateWeapons(prev, current);\r\n\r\n        this.saveMaterialReference();\r\n        this.applyMaterialParams();\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            const mainModel = this.models.main;\r\n            if (prev.code) {\r\n                mainModel.mixer.stopAllAction();\r\n\r\n                // Reset position and rotation to initial value\r\n                const { initPos, initRot } = mainModel;\r\n                mainModel.position.copy(initPos);\r\n                mainModel.rotation.copy(initRot);\r\n\r\n                this.mixers = [];\r\n                this.animations = [];\r\n            }\r\n            // Add new animation\r\n            this.addAnimationChain(mainModel, code, timeScale);\r\n        }\r\n        //Update timeScale\r\n        else if (prev.timeScale !== timeScale) {\r\n            this.mixers.forEach(mixer => (mixer.timeScale = timeScale));\r\n        }\r\n    };\r\n\r\n    updateOutline = (prev, current) => {\r\n        this.outlineParams = { ...current };\r\n        const updatedParams = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedParams.length === 0) return;\r\n        const { enable, size, opacity, color } = current;\r\n        const outlineList = Object.keys(this.outlines);\r\n        outlineList.forEach(outlineName => {\r\n            const outlineGroup = this.outlines[outlineName];\r\n            if (!outlineGroup) return;\r\n            outlineGroup.forEach(outline => {\r\n                if (updatedParams.includes(\"enable\")) {\r\n                    outline.visible = enable;\r\n                }\r\n                if (updatedParams.includes(\"size\")) {\r\n                    changeOutlineSize(outline, size);\r\n                }\r\n                if (updatedParams.includes(\"opacity\")) {\r\n                    changeOpacity(outline, opacity);\r\n                }\r\n                if (updatedParams.includes(\"color\")) {\r\n                    changeOutlineColor(outline, color);\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    applyMaterialParams = () => {\r\n        const { materialType } = this.props.model;\r\n        const current = this.props.materialParams;\r\n        const paramsList = [\r\n            ...materialCommonParams,\r\n            ...materialExtraParams[materialType],\r\n        ];\r\n        this.materials.forEach(mat => {\r\n            directSetMatParams.forEach(param => {\r\n                if (!paramsList.includes(param)) return;\r\n                mat[param] = current[param];\r\n            });\r\n\r\n            matColorParams.forEach(param => {\r\n                if (!paramsList.includes(param)) return;\r\n                const currentColor = current[param];\r\n                const matColor = new THREE.Color(currentColor);\r\n                mat[param] = matColor;\r\n            });\r\n\r\n            if (!current.useTexture) {\r\n                if (mat.map) mat.backupMap = mat.map;\r\n                mat.map = null;\r\n            }\r\n            if (current.flatShading) {\r\n                mat.flatShading = current.flatShading;\r\n                mat.needsUpdate = true;\r\n            }\r\n        });\r\n    };\r\n\r\n    updateMaterialParams = (prev, current) => {\r\n        const { materialType } = this.props.model;\r\n        const { useTexture, flatShading } = current;\r\n        const { materials } = this;\r\n        const paramsList = [\r\n            ...materialCommonParams,\r\n            ...materialExtraParams[materialType],\r\n        ];\r\n        directSetMatParams.forEach(param => {\r\n            if (!paramsList.includes(param) || prev[param] === current[param])\r\n                return;\r\n            materials.forEach(mat => (mat[param] = current[param]));\r\n        });\r\n\r\n        matColorParams.forEach(param => {\r\n            if (!paramsList.includes(param) || prev[param] === current[param])\r\n                return;\r\n            const currentColor = current[param];\r\n            const matColor = new THREE.Color(currentColor);\r\n            materials.forEach(mat => (mat[param] = matColor));\r\n        });\r\n\r\n        if (prev.useTexture !== useTexture) {\r\n            if (!useTexture) {\r\n                materials.forEach(mat => {\r\n                    mat.backupMap = mat.map;\r\n                    mat.map = null;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            } else {\r\n                materials.forEach(mat => {\r\n                    mat.map = mat.backupMap;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            }\r\n        }\r\n\r\n        if (prev.flatShading !== flatShading) {\r\n            materials.forEach(mat => {\r\n                mat.flatShading = flatShading;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n    };\r\n\r\n    backupTexture = () => {\r\n        const textureMap = new Map();\r\n        this.materials.forEach(mat => textureMap.set(mat.name, mat.backupMap));\r\n        this.textureMap = textureMap;\r\n    };\r\n\r\n    addBackupTexture = () => {\r\n        const { textureMap } = this;\r\n        this.materials.forEach(mat => {\r\n            mat.backupMap = textureMap.get(mat.name);\r\n        });\r\n    };\r\n\r\n    updateMaterial = (prev, current) => {\r\n        // update material type\r\n        if (prev.model.materialType !== current.model.materialType) {\r\n            const { materialType } = current.model;\r\n\r\n            if (!current.materialParams.useTexture) this.backupTexture();\r\n\r\n            changeMaterial({ target: this.models.main, materialType });\r\n            this.saveMaterialReference();\r\n            if (!current.materialParams.useTexture) this.addBackupTexture();\r\n\r\n            this.applyMaterialParams();\r\n        }\r\n\r\n        this.updateMaterialParams(prev.materialParams, current.materialParams);\r\n    };\r\n\r\n    setBackground = bgColor => {\r\n        this.scene.background =\r\n            bgColor !== \"transparent\" ? new THREE.Color(bgColor) : null;\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n        const dt = this.clock.getDelta();\r\n        // Rotate the floor\r\n        this.floor.rotateY((this.props.rotateSpeed * dt * Math.PI) / 2);\r\n\r\n        this.mixers.forEach(mixer => mixer.update(dt));\r\n\r\n        this.renderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModelViewer;\r\n","import { lazy, Suspense, useContext, useCallback } from \"react\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"./context/SettingsContext\";\r\nimport ModelViewer from \"./ModelViewer\";\r\nimport \"./styles/Display.css\";\r\n\r\nimport { cameraPositions, controlsPositions } from \"./consts\";\r\n\r\nconst AniControl = lazy(() => import(\"./AniControl\"));\r\n\r\nfunction Display(props) {\r\n    const { viewport } = props;\r\n\r\n    const settings = useContext(SettingsContext);\r\n    const {\r\n        model: { id: modelId },\r\n        scene: { rotateSpeed, background: bgColor, initCameraPosition },\r\n        app: { showAniControl, antiAliasing },\r\n    } = settings;\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n    const toggleCapture = useCallback(() => {\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"capture\",\r\n            value: \"enable\",\r\n        };\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const type = modelId[0];\r\n\r\n    const defaultCameraPosition = cameraPositions[modelId]\r\n        ? cameraPositions[modelId]\r\n        : cameraPositions[type];\r\n\r\n    const cameraPosition = initCameraPosition\r\n        ? initCameraPosition.map((n, i) =>\r\n              isNaN(n) ? defaultCameraPosition[i] : n\r\n          )\r\n        : defaultCameraPosition;\r\n\r\n    const controlsPosition = controlsPositions[modelId]\r\n        ? controlsPositions[modelId]\r\n        : controlsPositions[type];\r\n\r\n    return (\r\n        <div className=\"Display\">\r\n            {showAniControl && (\r\n                <div className=\"Display-AniControl\">\r\n                    <Suspense fallback={null}>\r\n                        <AniControl value={settings.animation.timeScale} />\r\n                    </Suspense>\r\n                </div>\r\n            )}\r\n            <ModelViewer\r\n                setIsLoading={props.setIsLoading}\r\n                capture={settings.capture}\r\n                toggleCapture={toggleCapture}\r\n                viewport={viewport}\r\n                cameraPosition={cameraPosition}\r\n                controlsPosition={controlsPosition}\r\n                model={settings.model}\r\n                materialParams={settings.materialParams}\r\n                outline={settings.outline}\r\n                animation={settings.animation}\r\n                rotateSpeed={rotateSpeed}\r\n                bgColor={bgColor}\r\n                antiAliasing={antiAliasing}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n","import { lazy, Suspense, useState, useRef, useEffect, useContext } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\n\r\nimport Menu from \"@material-ui/icons/Menu\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport useStyles from \"./styles/MainPageStyles\";\r\n\r\nimport Display from \"./Display\";\r\nimport { SettingsContext } from \"./context/SettingsContext\";\r\nimport { setInitialSettings } from \"./helpers\";\r\n\r\nconst ControlPanel = lazy(() => import(\"./ControlPanel\"));\r\nconst SideBar = lazy(() => import(\"./SideBar\"));\r\n\r\nfunction MainPage({ location }) {\r\n    const classes = useStyles();\r\n\r\n    const [currentMode, setCurrentMode] = useState(\"model\");\r\n    const [sidebarOpen, toggleSidebarOpen] = useToggleState(true);\r\n    const [controlOpen, toggleControlOpen] = useToggleState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [initLoadDone, setInitLoadDone] = useState(false);\r\n    const {\r\n        app: { showSettings },\r\n    } = useContext(SettingsContext);\r\n\r\n    const viewerRef = useRef();\r\n    const [viewport, setViewport] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const params = location.pathname.split(\"/\");\r\n        setInitialSettings(params);\r\n        setInitLoadDone(true);\r\n\r\n        window.addEventListener(\"resize\", updateViewportSize);\r\n\r\n        return function () {\r\n            window.removeEventListener(\"resize\", updateViewportSize);\r\n        };\r\n    }, [location.pathname]);\r\n\r\n    const updateViewportSize = () => {\r\n        const height = viewerRef.current.clientHeight;\r\n        const width = viewerRef.current.clientWidth;\r\n        setViewport({ width, height });\r\n    };\r\n\r\n    const openControl = mode => {\r\n        toggleControlOpen();\r\n        setCurrentMode(mode);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <div className={classes.loadingMsg}>Loading...</div>}\r\n            <div className={classes.root}>\r\n                <Suspense fallback={null}>\r\n                    <CssBaseline />\r\n                    <ControlPanel\r\n                        mode={currentMode}\r\n                        open={controlOpen}\r\n                        toggleControlOpen={toggleControlOpen}\r\n                    />\r\n                    {initLoadDone && showSettings && (\r\n                        <>\r\n                            <button\r\n                                onClick={toggleSidebarOpen}\r\n                                className={classes.openSidebarButton}\r\n                            >\r\n                                <Menu />\r\n                            </button>\r\n\r\n                            <SideBar\r\n                                toggleSidebarOpen={toggleSidebarOpen}\r\n                                open={sidebarOpen}\r\n                                openControl={openControl}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </Suspense>\r\n                {initLoadDone && (\r\n                    <main ref={viewerRef} className={classes.content}>\r\n                        <Display\r\n                            setIsLoading={setIsLoading}\r\n                            viewport={viewport}\r\n                        />\r\n                    </main>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import { SettingsProvider } from \"./context/SettingsContext\";\r\n\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\nimport MainPage from \"./MainPage\";\r\n\r\nimport \"./styles/App.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <SettingsProvider>\r\n            <HashRouter>\r\n                <Route render={routeProps => <MainPage {...routeProps} />} />\r\n            </HashRouter>\r\n        </SettingsProvider>\r\n    );\r\n}\r\n\r\nexport const fbxSource = process.env.PUBLIC_URL;\r\n\r\nexport default App;\r\n","const faceOffset = {\r\n    c110018_02: { x: 0.043, y: -0.0625 }, // Opera Karina\r\n    c110370_01: { x: 0.043, y: -0.0625 }, // Lapis\r\n    c100015_04: { x: 0.05, y: -0.08 }, // Chelle\r\n    c110267_01: { x: 0.08, y: -0.03 }, // Hawk\r\n    c110050_02: { x: 0.07, y: 0.13 }, // HBerserker\r\n    c110291_01: { x: 0.07, y: 0.14 }, // Marth\r\n    c110354_01: { x: 0.07, y: 0.01 }, // Mega Man\r\n    c110345_01: { x: 0.08, y: -0.13 }, // Mitsuhide\r\n    c110266_01: { x: 0.01, y: 0.03 }, // Naveed\r\n    c110365_01: { x: 0.043, y: -0.0625 }, // Nevin\r\n    c110346_01: { x: 0.07, y: 0.08 }, // Nobunaga\r\n    c110366_01: { x: 0.043, y: -0.0625 }, // Pinon\r\n    c110299_02: { x: 0.07, y: 0.08 }, // RXZ\r\n    c110360_01: { x: 0.07, y: 0.14 }, // Tiki\r\n    c110307_01: { x: 0.08, y: -0.03 }, // Victor\r\n    c110322_01: { x: 0.043, y: 0.08 }, // Zhu Bajie\r\n    c110356_01: { x: 0.07, y: 0.08 }, // Gauld\r\n    c110300_01: { x: 0.07, y: -0.1 }, // Pipple\r\n    c110344_01: { x: 0.07, y: -0.02 }, // Yuya\r\n    c110053_03: { x: 0.043, y: -0.0625 }, // INefi\r\n    c110368_01: { x: 0.043, y: -0.0625 }, // Meene\r\n    c110367_01: { x: 0.043, y: -0.0625 }, // Ilia\r\n    c110003_02: { x: 0.043, y: -0.0625 }, // Gun Joe\r\n    c110270_02: { x: 0.043, y: -0.0625 }, // HMelsa\r\n    c110341_03: { x: 0.043, y: -0.0625 }, // Hakasha\r\n};\r\nexport default faceOffset;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nfunction useToggleState(initVal = false) {\r\n    const [state, setState] = useState(initVal);\r\n    const toggleState = useCallback(() => {\r\n        setState(state => !state);\r\n    }, [setState]);\r\n    return [state, toggleState];\r\n}\r\n\r\nexport default useToggleState;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_WIDTH, DRAWER_BGCOLOR } from \"../consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst drawerWidth = DRAWER_WIDTH;\r\nconst drawerBG = DRAWER_BGCOLOR;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"block\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        overflowY: \"scroll\",\r\n    },\r\n    drawerPaper: {\r\n        alignItems: \"center\",\r\n        backgroundColor: drawerBG,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        width: drawerWidth,\r\n        \"& button\": {\r\n            marginBottom: \"0.2rem\",\r\n        },\r\n    },\r\n    content: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        padding: 0,\r\n    },\r\n    openSidebarButton: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        margin: \"2rem\",\r\n        opacity: \"0.5\",\r\n        borderRadius: \"0.25rem\",\r\n        transition: \"0.5s all ease-in-out\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            opacity: \"1\",\r\n        },\r\n    },\r\n    loadingMsg: {\r\n        position: \"absolute\",\r\n        zIndex: \"9999\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"white\",\r\n        fontSize: \"x-large\",\r\n        backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","export default __webpack_public_path__ + \"static/media/Rose-Petals.bc11ecc7.svg\";","export const DRAWER_WIDTH = \"16rem\";\r\nexport const DRAWER_BGCOLOR = \"#330000\";\r\n\r\nexport const baseUrl = \"https://dgk3593.github.io/dl-model/#/\";\r\n\r\nconst defaultAni = \"MWM_CMN+CMN_MWM_03\";\r\n\r\nexport const matParamsDetails = {\r\n    wireframe: {\r\n        name: \"Wireframe\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    useTexture: {\r\n        name: \"Texture\",\r\n        type: \"boolean\",\r\n        default: true,\r\n    },\r\n    transparent: {\r\n        name: \"Transparent\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    flatShading: {\r\n        name: \"Flat Shading\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    color: {\r\n        name: \"Color\",\r\n        type: \"color\",\r\n        default: \"#ffffff\",\r\n    },\r\n    emissive: {\r\n        name: \"Emissive\",\r\n        type: \"color\",\r\n        default: \"#000000\",\r\n    },\r\n    opacity: {\r\n        name: \"Opacity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    emissiveIntensity: {\r\n        name: \"Emissive Intensity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    specular: {\r\n        name: \"Specular\",\r\n        type: \"color\",\r\n        default: \"#111111\",\r\n    },\r\n    metalness: {\r\n        name: \"Metalness\",\r\n        type: \"percentage\",\r\n        default: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    roughness: {\r\n        name: \"Roughness\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    shininess: {\r\n        name: \"Shininess\",\r\n        type: \"number\",\r\n        default: 30,\r\n        min: 1,\r\n        max: 100,\r\n        step: 1,\r\n    },\r\n    gradientMap: {\r\n        name: \"Gradient Map\",\r\n        type: \"select\",\r\n        default: \"TBA\",\r\n    },\r\n};\r\n\r\nexport const directSetMatParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"emissiveIntensity\",\r\n    \"metalness\",\r\n    \"roughness\",\r\n    \"shininess\",\r\n];\r\n\r\nexport const matColorParams = [\"color\", \"emissive\", \"specular\"];\r\n\r\nconst defaultMatParams = {};\r\nObject.keys(matParamsDetails).forEach(key => {\r\n    defaultMatParams[key] = matParamsDetails[key].default;\r\n});\r\n\r\nexport const defaultSettings = {\r\n    model: {\r\n        materialType: \"Basic\",\r\n        id: \"c100001_01\",\r\n        texture: \"c100001_01\",\r\n        faceTexture: \"c100001_01\",\r\n        face: 2,\r\n        weaponRight: \"\",\r\n        weaponLeft: \"\",\r\n    },\r\n    materialParams: { ...defaultMatParams },\r\n    scene: {\r\n        rotateSpeed: 0,\r\n        background: \"#cccccc\",\r\n        initCameraPosition: null,\r\n    },\r\n    animation: {\r\n        code: defaultAni,\r\n        timeScale: 1,\r\n    },\r\n    app: {\r\n        sideContent: \"settings\",\r\n        showSettings: true,\r\n        showAniControl: true,\r\n        antiAliasing: false,\r\n    },\r\n    outline: {\r\n        enable: true,\r\n        size: 5, // 1 -> 10\r\n        color: \"#000000\",\r\n        opacity: 1, // 0.1 -> 10%, 1-> 100%\r\n    },\r\n    capture: {\r\n        enable: false,\r\n        supportedCodecs: [],\r\n        codec: \"\",\r\n    },\r\n};\r\n\r\nexport const initKey = {\r\n    id: { group: \"model\", key: \"id\" },\r\n    ft: { group: \"model\", key: \"faceTexture\" },\r\n    f: { group: \"model\", key: \"face\" },\r\n    wr: { group: \"model\", key: \"weaponRight\" },\r\n    wl: { group: \"model\", key: \"weaponLeft\" },\r\n    bg: { group: \"scene\", key: \"background\" },\r\n    cam: { group: \"scene\", key: \"initCameraPosition\" },\r\n    ts: { group: \"animation\", key: \"timeScale\" },\r\n    showAC: { group: \"app\", key: \"showAniControl\" },\r\n    showSettings: { group: \"app\", key: \"showSettings\" },\r\n    showOutline: { group: \"outline\", key: \"enable\" },\r\n    AA: { group: \"app\", key: \"antiAliasing\" },\r\n    rot: { group: \"scene\", key: \"rotateSpeed\" },\r\n    cc: { group: \"animation\", key: \"code\" },\r\n};\r\n\r\nexport const MATERIALS = [\"Basic\", \"Toon\", \"Lambert\", \"Phong\", \"Standard\"];\r\n\r\nexport const materialCommonParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"useTexture\",\r\n    \"color\",\r\n];\r\n\r\nexport const materialExtraParams = {\r\n    Basic: [],\r\n    Toon: [\"emissive\", \"emissiveIntensity\", \"gradientMap\"],\r\n    Lambert: [\"emissive\", \"emissiveIntensity\"],\r\n    Phong: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"specular\",\r\n        \"shininess\",\r\n        \"flatShading\",\r\n    ],\r\n    Standard: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"metalness\",\r\n        \"roughness\",\r\n        \"flatShading\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_CODE = {\r\n    Sword: \"SWD\",\r\n    Blade: \"KAT\",\r\n    Dagger: \"DAG\",\r\n    Axe: \"AXE\",\r\n    Lance: \"LAN\",\r\n    Bow: \"BOW\",\r\n    Wand: \"ROD\",\r\n    Staff: \"CAN\",\r\n    Manacaster: \"GUN\",\r\n};\r\n\r\nexport const WEAPON_LIST = [\r\n    \"Sword\",\r\n    \"Blade\",\r\n    \"Dagger\",\r\n    \"Axe\",\r\n    \"Lance\",\r\n    \"Bow\",\r\n    \"Wand\",\r\n    \"Staff\",\r\n    \"Manacaster\",\r\n];\r\n\r\nexport const GENDER_CODE = {\r\n    Male: 21,\r\n    Female: 23,\r\n};\r\n\r\nexport const COMBO_LENGTH = {\r\n    Axe: 5,\r\n    Bow: 6,\r\n    Staff: 5,\r\n    Dagger: 6,\r\n    Blade: 5,\r\n    Lance: 5,\r\n    Wand: 5,\r\n    Sword: 5,\r\n};\r\n\r\nexport const FS_LENGTH = {\r\n    Axe: 3,\r\n    Bow: 3,\r\n    Staff: 5,\r\n    Dagger: 3,\r\n    Blade: 3,\r\n    Lance: 4,\r\n    Wand: 3,\r\n    Sword: 3,\r\n};\r\n\r\nexport const FILTERS = {\r\n    rarity: [\"3\", \"4\", \"5\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_FILTERS = {\r\n    rarity: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\", \"None\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const spFaceTextures = {\r\n    c110300_01: \"ec110300_01\",\r\n};\r\n\r\nexport const commonBG = {\r\n    green: \"#00ff00\",\r\n    black: \"#000000\",\r\n    grey: \"#cccccc\",\r\n    white: \"#ffffff\",\r\n};\r\n\r\nexport const CAM_PARAMS = {\r\n    angle: 45,\r\n    far: 300,\r\n    near: 0.01,\r\n};\r\n\r\nexport const cameraPositions = {\r\n    c: [0, 0.5, 1.5],\r\n    d: [3, 0.5, 6],\r\n\r\n    c100034_01: [0, 0.5, 1.75],\r\n    d210078_01: [3, 3, 20],\r\n    d210114_01: [3, 3, 20],\r\n\r\n    smith: [1, 1, 2],\r\n};\r\n\r\nexport const controlsPositions = {\r\n    c: [0, 0.5, 0],\r\n    d: [0, 1, 0],\r\n\r\n    d210078_01: [0, 3, 0],\r\n    d210114_01: [0, 3, 0],\r\n\r\n    smith: [0, 0.5, 0],\r\n};\r\n\r\nexport const faceOffsets = {\r\n    face1: { x: 2, y: 1 },\r\n    face2: { x: 0, y: 0 },\r\n    face3: { x: 1, y: 0 },\r\n    face4: { x: 2, y: 0 },\r\n    face5: { x: 3, y: 0 },\r\n    face6: { x: 0, y: -1 },\r\n    face7: { x: 1, y: -1 },\r\n    face8: { x: 2, y: -1 },\r\n    face9: { x: 3, y: -1 },\r\n};\r\n\r\nexport const videoCodecs = [\r\n    \"video/webm;codecs=h264\",\r\n    \"video/webm;codecs=vp9\",\r\n    \"video/webm;codecs=vp8\",\r\n    \"video/webm\",\r\n];\r\n\r\nexport const asciiSet = [\r\n    \" .:-=+*#%@\",\r\n    \" .'`^\\\",:;Il!i~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$\",\r\n];\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}