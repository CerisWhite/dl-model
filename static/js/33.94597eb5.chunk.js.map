{"version":3,"sources":["WeaponBtn.js"],"names":["BladeSelector","lazy","WeaponBtn","props","wid","iconName","name","useState","bladeMode","setBladeMode","useToggleState","clicked","toggleClicked","reverseGrip","toggleReverseGrip","iconPath","process","dispatch","useContext","DispatchContext","weaponIsBlade","isBlade","setWeapon","event","stopPropagation","side","currentTarget","dataset","value","idCode","replace","weaponCode","type","key","className","src","alt","onClick","e","id","checked","onChange","htmlFor","data-value","fallback","handleClick","mode"],"mappings":"sMAOMA,EAAgBC,gBAAK,kBAAM,kCAoGlBC,UAlGf,SAAmBC,GAAQ,IACfC,EAAwBD,EAAxBC,IAAKC,EAAmBF,EAAnBE,SAAUC,EAASH,EAATG,KADD,EAEYC,mBAAS,SAFrB,mBAEfC,EAFe,KAEJC,EAFI,OAGWC,aAAe,GAH1B,mBAGfC,EAHe,KAGNC,EAHM,OAImBF,aAAe,GAJlC,mBAIfG,EAJe,KAIFC,EAJE,KAKhBC,EAAQ,UAAMC,YAAN,4BAAgDX,GAExDY,EAAWC,qBAAWC,KAEtBC,EAAgBC,YAAQjB,GAExBkB,EAAY,SAAAC,GACdA,EAAMC,kBACN,IAAMC,EAAOF,EAAMG,cAAcC,QAAQC,MAEnCC,EAAuB,WAAdrB,EAAyBJ,EAAI0B,QAAQ,MAAO,OAAS1B,EAE9D2B,EAAU,UAAMF,GAAN,OAAehB,EAAc,IAAM,KAC/Ce,EAAQ,GACZA,EAAM,SAAD,OAAUH,IAAUM,EAMzBd,EALe,CACXe,KAAM,SACNC,IAAK,QACLL,WAWR,OACI,sBAAKM,UAAU,YAAf,UACK7B,GACG,qBACI8B,IAAKpB,EACLa,MAAOxB,EACPgC,IAAKhC,EACLiC,QAASzB,EACTsB,UAAU,mBAGjBvB,EACG,sBAAKuB,UAAU,gBAAgBG,QAASzB,EAAxC,UACI,qBACIsB,UAAS,yBACLd,EAAgB,QAAU,IAE9BiB,QAAS,SAAAC,GAAC,OAAIA,EAAEd,mBAJpB,SAMI,gCACI,uBACIQ,KAAK,WACLO,GAAE,eACFC,QAAS3B,EACT4B,SAAU3B,IAEd,uBAAO4B,QAAO,eAAd,+BAGR,sBAAKR,UAAU,wBAAf,UACI,qBACIA,UAAU,mBACVS,aAAW,OACXN,QAASf,EAHb,oBAOA,sCACA,qBACIY,UAAU,mBACVS,aAAW,QACXN,QAASf,EAHb,uBAQHF,GACG,cAAC,WAAD,CAAUwB,SAAU,KAApB,SACI,cAAC5C,EAAD,CACI4B,MAAOpB,EACPqC,YAxDJ,SAAAtB,GACpBA,EAAMC,kBACN,IAAMsB,EAAOvB,EAAMG,cAAcC,QAAQC,MACzCnB,EAAaqC,WA2DL,qBAAKZ,UAAU,iBAAiBG,QAASzB,EAAzC,SACKN","file":"static/js/33.94597eb5.chunk.js","sourcesContent":["import { lazy, Suspense, useState, useContext } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\nimport \"./styles/WeaponBtn.css\";\r\n\r\nimport { DispatchContext } from \"./context/SettingsContext\";\r\nimport { isBlade } from \"./helpers\";\r\n\r\nconst BladeSelector = lazy(() => import(\"./BladeSelector\"));\r\n\r\nfunction WeaponBtn(props) {\r\n    const { wid, iconName, name } = props;\r\n    const [bladeMode, setBladeMode] = useState(\"Blade\");\r\n    const [clicked, toggleClicked] = useToggleState(false);\r\n    const [reverseGrip, toggleReverseGrip] = useToggleState(false);\r\n    const iconPath = `${process.env.PUBLIC_URL}/img/weaponIcons/${iconName}`;\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    const weaponIsBlade = isBlade(wid);\r\n\r\n    const setWeapon = event => {\r\n        event.stopPropagation();\r\n        const side = event.currentTarget.dataset.value;\r\n        // change id code for sheath if needed\r\n        const idCode = bladeMode === \"Sheath\" ? wid.replace(\"_01\", \"_02\") : wid;\r\n\r\n        const weaponCode = `${idCode}${reverseGrip ? \"b\" : \"n\"}`;\r\n        let value = {};\r\n        value[`weapon${side}`] = weaponCode;\r\n        const action = {\r\n            type: \"update\",\r\n            key: \"model\",\r\n            value,\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const changeBladeMode = event => {\r\n        event.stopPropagation();\r\n        const mode = event.currentTarget.dataset.value;\r\n        setBladeMode(mode);\r\n    };\r\n\r\n    return (\r\n        <div className=\"WeaponBtn\">\r\n            {iconName && (\r\n                <img\r\n                    src={iconPath}\r\n                    value={wid}\r\n                    alt={wid}\r\n                    onClick={toggleClicked}\r\n                    className=\"WeaponBtn-icon\"\r\n                />\r\n            )}\r\n            {clicked ? (\r\n                <div className=\"WeaponBtn-add\" onClick={toggleClicked}>\r\n                    <div\r\n                        className={`WeaponBtn-grip ${\r\n                            weaponIsBlade ? \"blade\" : \"\"\r\n                        }`}\r\n                        onClick={e => e.stopPropagation()}\r\n                    >\r\n                        <div>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                id={`reverseGrip-`}\r\n                                checked={reverseGrip}\r\n                                onChange={toggleReverseGrip}\r\n                            />\r\n                            <label htmlFor={`reverseGrip-`}>Reverse Grip</label>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"WeaponBtn-addBtnGroup\">\r\n                        <div\r\n                            className=\"WeaponBtn-addBtn\"\r\n                            data-value=\"Left\"\r\n                            onClick={setWeapon}\r\n                        >\r\n                            &#8656;\r\n                        </div>\r\n                        <div>ADD</div>\r\n                        <div\r\n                            className=\"WeaponBtn-addBtn\"\r\n                            data-value=\"Right\"\r\n                            onClick={setWeapon}\r\n                        >\r\n                            &#8658;\r\n                        </div>\r\n                    </div>\r\n                    {weaponIsBlade && (\r\n                        <Suspense fallback={null}>\r\n                            <BladeSelector\r\n                                value={bladeMode}\r\n                                handleClick={changeBladeMode}\r\n                            />\r\n                        </Suspense>\r\n                    )}\r\n                </div>\r\n            ) : (\r\n                <div className=\"WeaponBtn-name\" onClick={toggleClicked}>\r\n                    {name}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeaponBtn;\r\n"],"sourceRoot":""}