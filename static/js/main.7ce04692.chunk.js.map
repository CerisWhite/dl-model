{"version":3,"sources":["viewerHelpers.js","reducer/settingsReducer.js","context/SettingsContext.js","helpers.js","ModelViewer.js","Display.js","MainPage.js","App.js","hooks/useToggleState.js","data/face_offset.js","consts.js","styles/MainPageStyles.js","styles/Rose-Petals.svg","serviceWorker.js","index.js"],"names":["loadModel","url","Promise","resolve","FBXLoader","load","getModelPath","id","fbxSource","getTexturePath","analyzeWeaponCode","code","flipped","endsWith","weaponCode","substring","length","modelPath","texturePath","isSheath","disposeItem","item","disposedList","Set","needToDispose","object","has","uuid","notDisposed","dispose","add","disposeObject","traverse","child","isMesh","callbackOnPotentialArray","material","mat","map","backupMap","geometry","createNewMaterial","materialType","params","matType","THREE","changeMaterial","target","name","checkParam","Array","isArray","every","forEach","i","texture","encoding","newMaterial","skinning","changeOpacity","opacity","obj","updateOutlineShader","size","fog","needsUpdate","onBeforeCompile","shader","customTransform","vertexShader","replace","setTimeout","changeOutlineSize","updated","m","changeOutlineColor","color","createOutline","outlines","outline","clone","visible","enable","push","matIsArray","fill","replaceMaterial","side","transparent","createOutlineMaterial","isSkinnedMesh","bind","skeleton","bindMatrix","parent","calculateTextureOffset","currentTexture","prevTexture","offset","x","y","prevOffset","textureOffsets","currentOffset","calculateIdxOffset","currentIdx","prevIdx","idxOffsets","applyOffset","part","groups","targetGroup","find","group","materialIndex","start","end","count","uv","attributes","u","getX","v","getY","setXY","applyEyeOffset","applyMouthOffset","applyTexture","textureId","applyEyeTexture","applyMouthTexture","analyzeChainCode","aniCodes","split","nAni","fileList","animationList","currentAni","timeScale","repetitions","fileIdx","aniName","fileName","details","faceChanges","currentParts","includes","settings","key","value","parseFloat","Infinity","parseInt","time","faceMod","eyeIdx","mouthIdx","processFaceChanges","blankFaceChange","sorted","sort","change","timeStamps","hasBlank","simplified","output","filter","Object","assign","chainCodeToList","ani","listItem","concat","createGradientMap","nTones","colors","Uint8Array","_","minFilter","magFilter","generateMipmaps","settingsReducer","state","action","type","subkey","currentValue","defaultSetting","defaultSettings","update","SettingsContext","createContext","DispatchContext","initSettings","chainMaker","chain","animation","SettingsProvider","props","useReducer","dispatch","Provider","children","keys","scene","lights","light","isBlade","startsWith","callback","setInitialSettings","eyeTextureDefined","mouthTextureDefined","param","keycode","setValue","join","chainList","n","initKey","isBooleanValue","Boolean","generateChainCode","modCode","generateAniModCode","faceCode","generateFaceCode","aniModList","modKey","defaultValue","collectFilter","toggleState","collected","tmp","k","multiCondFilter","input","filters","filterKeys","el","complementaryColor","hexColor","toString","slice","aniButtonsFromObject","handleSelect","groupName","style","maxWidth","variant","data-value","data-name","onClick","getStandbyCode","weapon","gender","WEAPON_CODE","GENDER_CODE","getVictoryCode","getDashAtkCode","getRollCode","getComboCode","comboLength","COMBO_LENGTH","result","getFSCode","fsAniLength","FS_LENGTH","getLobbyCode","ModelViewer","initScene","models","modelInfo","main","model","weaponLeft","weaponRight","materials","outlineParams","viewport","width","window","innerWidth","height","innerHeight","mixers","clock","background","bgColor","floorGeometry","rotateX","Math","PI","floorMaterial","floor","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","addLights","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","renderer","antiAliasing","finalRenderer","canvas","domElement","setSize","appendChild","animate","intensity","constructor","entries","removeLights","remove","initLoad","modelId","loadMain","loadWeaponR","loadWeaponL","all","attachWeapon","boneName","detachWeapon","saveMaterialReference","playNextAni","capture","_aniIdx","mediaRecorder","stop","toggleCapture","newIdx","aniIdx","addAnimationChain","animationChain","a","setIsLoading","mixer","addEventListener","aniSettings","batchLoader","file","path","animations","animFiles","anim","getFaceChangesArray","others","flat","updateViewport","prev","current","aspect","captureAnimation","chunks","videoStream","captureStream","MediaRecorder","mimeType","codec","ondataavailable","event","data","onstop","superBuffer","Blob","URL","createObjectURL","document","createElement","body","href","download","click","revokeObjectURL","updateAA","currentSize","getSize","ascii","newCanvas","replaceCanvas","updateEyeTexture","eyeTexture","updateMouthTexture","mouthTexture","updateFaceTexture","updateFaceOffset","updateFace","updateMainModel","initPos","initRot","rotation","currentEyeIdx","currentMouthIdx","weaponModel","aniCode","applyMaterialParams","updateWeapons","updateModel","some","updateAnimation","mainModel","stopAllAction","copy","updateOutline","updatedParams","outlineName","outlineGroup","materialParams","paramsList","materialCommonParams","materialExtraParams","directSetMatParams","matColorParams","currentColor","matColor","useTexture","flatShading","gradientMap","newMap","updateMaterialParams","updateMaterial","updateLights","updateAscii","loadedFX","AsciiEffect","fxConstructors","showAscii","charSet","invert","get","effect","currentCanvas","setBackground","oldCanvas","removeChild","frameId","requestAnimationFrame","dt","getDelta","rotateSpeed","rotateY","currentClipDuration","currentFaceChange","shift","render","app","this","Map","incompatibleModels","weaponInfo","defaultFaceParams","console","log","oldValue","subkeys","JSON","stringify","cancelAnimationFrame","renderLists","ref","clipAction","currentAniSettings","setLoop","clampWhenFinished","setTime","duration","play","oldIdx","PureComponent","AniControl","lazy","Display","useContext","initCameraPosition","showAniControl","useCallback","defaultCameraPosition","cameraPositions","isNaN","controlsPositions","className","fallback","ControlPanel","SideBar","MainPage","location","classes","useStyles","useState","currentMode","setCurrentMode","useToggleState","sidebarOpen","toggleSidebarOpen","controlOpen","toggleControlOpen","isLoading","initLoadDone","setInitLoadDone","showSettings","viewerRef","useRef","setViewport","useEffect","pathname","updateViewportSize","removeEventListener","clientHeight","clientWidth","loadingMsg","root","CssBaseline","mode","open","openSidebarButton","openControl","content","process","App","routeProps","initVal","setState","faceOffset","c110350_02","c110340_02","c110018_02","c110370_01","c100015_04","c110267_01","c110050_02","c110291_01","c110354_01","c110345_01","c110266_01","c110365_01","c110346_01","c110366_01","c110299_02","c110360_01","c110307_01","c110322_01","c110356_01","c110300_01","c110344_01","c110053_03","c110368_01","c110367_01","c110003_02","c110270_02","c110341_03","DRAWER_WIDTH","DRAWER_BGCOLOR","baseUrl","matParamsDetails","wireframe","default","emissive","min","max","step","emissiveIntensity","specular","metalness","roughness","shininess","options","defaultMatParams","asciiSet","lightId","sideContent","supportedCodecs","et","ei","mt","mi","wr","wl","bg","cam","ts","showAC","showOutline","AA","rot","cc","MATERIALS","Basic","Toon","Lambert","Phong","Standard","Sword","Blade","Dagger","Axe","Lance","Bow","Wand","Staff","Manacaster","WEAPON_LIST","Male","Female","FILTERS","rarity","element","WEAPON_FILTERS","spFaceTextures","commonBG","green","black","grey","white","c","d","w","b","e","h","o","r","c100034_01","d210078_01","d210114_01","h0010001","h0010001_02","h0040101","r0070401","r0080401","smith","face1","face2","face3","face4","face5","face6","face7","face8","face9","videoCodecs","drawerWidth","drawerBG","makeStyles","theme","display","drawer","overflowY","drawerPaper","alignItems","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","marginBottom","padding","top","left","margin","borderRadius","transition","cursor","zIndex","justifyContent","fontSize","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ce04692.chunk.js","sourcesContent":["import * as THREE from \"three\";\r\nimport { fbxSource } from \"./App\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport { idxOffsets } from \"./consts\";\r\nimport textureOffsets from \"./data/face_offset\";\r\n\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { callbackOnPotentialArray, isSheath } from \"./helpers\";\r\n\r\nexport const loadModel = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new FBXLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const loadTexture = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new THREE.TextureLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const getModelPath = id => `${fbxSource}/fbx/${id}/${id}.fbx`;\r\n\r\nexport const getTexturePath = id => `${fbxSource}/fbx/${id}/${id}.png`;\r\n\r\nexport const analyzeWeaponCode = code => {\r\n    if (!code) return \"\";\r\n    const flipped = code.endsWith(\"b\");\r\n    const weaponCode = code.substring(0, code.length - 1);\r\n    const modelPath = getModelPath(weaponCode);\r\n    const texturePath = getTexturePath(weaponCode);\r\n\r\n    return {\r\n        modelPath,\r\n        texturePath,\r\n        flipped,\r\n        isSheath: isSheath(weaponCode),\r\n    };\r\n};\r\n\r\nexport const disposeItem = item => {\r\n    if (!item) return;\r\n\r\n    const disposedList = new Set();\r\n\r\n    const notDisposed = object => !disposedList.has(object.uuid);\r\n\r\n    const needToDispose = object => object && notDisposed(object);\r\n\r\n    const disposeObject = object => {\r\n        disposedList.add(object.uuid);\r\n        object.dispose();\r\n    };\r\n\r\n    const dispose = object => {\r\n        if (needToDispose(object)) disposeObject(object);\r\n    };\r\n\r\n    item.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        // dispose material\r\n        callbackOnPotentialArray(child.material, mat => {\r\n            if (mat.map) dispose(mat.map);\r\n            if (mat.backupMap) dispose(mat.backupMap);\r\n\r\n            dispose(mat);\r\n        });\r\n        // dispose geometry\r\n        dispose(child.geometry);\r\n    });\r\n};\r\n\r\nconst createNewMaterial = (materialType, params) => {\r\n    const matType = `Mesh${materialType}Material`;\r\n    return new THREE[matType](params);\r\n};\r\n\r\nexport const changeMaterial = ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    texturePath,\r\n}) => {\r\n    if (!target) return;\r\n    target.traverse(child => {\r\n        if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n        const checkParam = `isMesh${materialType}Material`;\r\n        const material = child.material;\r\n\r\n        if (Array.isArray(material)) {\r\n            if (material.every(mat => mat[checkParam]) && !texturePath) return;\r\n\r\n            material.forEach((mat, i) => {\r\n                const texture = texturePath\r\n                    ? new THREE.TextureLoader().load(texturePath)\r\n                    : material[i].map;\r\n\r\n                if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n\r\n                const materialParams = {\r\n                    map: texture,\r\n                    skinning: true,\r\n                };\r\n                const newMaterial = createNewMaterial(\r\n                    materialType,\r\n                    materialParams\r\n                );\r\n                newMaterial.name = mat.name;\r\n                if (mat.backupMap) newMaterial.backupMap = mat.backupMap;\r\n\r\n                if (texturePath && material[i].map) {\r\n                    material[i].map.dispose();\r\n                }\r\n                material[i].dispose();\r\n                child.material[i] = newMaterial;\r\n            });\r\n        } else {\r\n            if (material[checkParam] && !texturePath) return;\r\n            const texture = texturePath\r\n                ? new THREE.TextureLoader().load(texturePath)\r\n                : material.map;\r\n\r\n            if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n            const materialParams = {\r\n                map: texture,\r\n                skinning: true,\r\n            };\r\n            const newMaterial = createNewMaterial(materialType, materialParams);\r\n\r\n            newMaterial.name = material.name;\r\n\r\n            if (material.backupMap) newMaterial.backupMap = material.backupMap;\r\n\r\n            if (texturePath && material.map) {\r\n                material.map.dispose();\r\n            }\r\n            material.dispose();\r\n\r\n            child.material = newMaterial;\r\n        }\r\n    });\r\n};\r\n\r\nconst createOutlineMaterial = ({ size, color, opacity }) => {\r\n    const newMaterial = new THREE.MeshToonMaterial({\r\n        color,\r\n        opacity,\r\n        side: THREE.BackSide,\r\n        transparent: true,\r\n        skinning: true,\r\n    });\r\n    newMaterial.onBeforeCompile = shader => {\r\n        const token = \"#include <begin_vertex>\";\r\n        const customTransform = `\r\n            vec3 transformed = position + objectNormal*${size * 0.0005};\r\n        `;\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            token,\r\n            customTransform\r\n        );\r\n    };\r\n    return newMaterial;\r\n};\r\n\r\n// replace material of an object\r\nconst replaceMaterial = (object, newMaterial) => {\r\n    // dispose old material\r\n    callbackOnPotentialArray(object.material, obj => {\r\n        // obj.map?.dispose?.()\r\n        if (obj.map) obj.map.dispose();\r\n        obj.dispose();\r\n    });\r\n    // apply new material\r\n    const matIsArray = Array.isArray(object.material);\r\n    object.material = matIsArray\r\n        ? new Array(object.material.length).fill(newMaterial)\r\n        : newMaterial;\r\n};\r\n\r\n// change opacity of an object\r\nexport const changeOpacity = ({ material }, opacity) => {\r\n    callbackOnPotentialArray(material, obj => {\r\n        obj.opacity = opacity;\r\n    });\r\n};\r\n\r\n// update outline shader to change size\r\nconst updateOutlineShader = (material, size) => {\r\n    // Hacky way to force shader recompilation, needs fixing !!!!!!!!!!!!!!!!!!\r\n    material.fog = !material.fog;\r\n    material.needsUpdate = true;\r\n\r\n    material.onBeforeCompile = shader => {\r\n        const token = \"#include <begin_vertex>\";\r\n        const customTransform = `\r\n                vec3 transformed = position + objectNormal*${size * 0.0005};\r\n            `;\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            token,\r\n            customTransform\r\n        );\r\n    };\r\n    setTimeout(() => {\r\n        material.fog = !material.fog;\r\n        material.needsUpdate = true;\r\n    }, 100); // Sometimes doesn't work with 0 delay\r\n};\r\n\r\n// change size of outline\r\nexport const changeOutlineSize = ({ material }, size) => {\r\n    const matIsArray = Array.isArray(material);\r\n    if (matIsArray) {\r\n        const updated = new Set();\r\n        material.forEach(m => {\r\n            if (updated.has(m.uuid)) return;\r\n\r\n            updateOutlineShader(m, size);\r\n            updated.add(m.uuid);\r\n        });\r\n        return;\r\n    }\r\n    updateOutlineShader(material, size);\r\n};\r\n\r\n// Change color of outline\r\nexport const changeOutlineColor = ({ material }, color) => {\r\n    const matIsArray = Array.isArray(material);\r\n    if (matIsArray) {\r\n        const updated = new Set();\r\n        material.forEach(m => {\r\n            if (updated.has(m.uuid)) return;\r\n\r\n            m.color = new THREE.Color(color);\r\n            updated.add(m.uuid);\r\n        });\r\n        return;\r\n    }\r\n    material.color = new THREE.Color(color);\r\n};\r\n\r\n// Add outline to object and return reference to outlines\r\nexport const createOutline = (object, params) => {\r\n    if (!object) return;\r\n    const outlines = []; // return value\r\n    object.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const outline = child.clone();\r\n        outline.name = \"outline\";\r\n        outline.visible = params.enable;\r\n\r\n        outlines.push(outline);\r\n        const newMaterial = createOutlineMaterial(params);\r\n        replaceMaterial(outline, newMaterial);\r\n\r\n        if (child.isSkinnedMesh) {\r\n            outline.bind(child.skeleton, child.bindMatrix);\r\n        }\r\n        child.parent.add(outline);\r\n    });\r\n    return outlines;\r\n};\r\n\r\nexport const calculateTextureOffset = (currentTexture, prevTexture) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentTexture !== prevTexture) {\r\n        const prevOffset = textureOffsets[prevTexture] || {\r\n            x: 0,\r\n            y: 0,\r\n        };\r\n        const currentOffset = textureOffsets[currentTexture] || { x: 0, y: 0 };\r\n\r\n        offset.x = currentOffset.x - prevOffset.x;\r\n        offset.y = currentOffset.y - prevOffset.y;\r\n    }\r\n    return offset;\r\n};\r\n\r\nexport const calculateIdxOffset = (currentIdx, prevIdx) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentIdx !== prevIdx) {\r\n        const prevOffset = idxOffsets[`face${prevIdx}`];\r\n        const currentOffset = idxOffsets[`face${currentIdx}`];\r\n\r\n        offset.x = currentOffset.x - prevOffset.x;\r\n        offset.y = currentOffset.y - prevOffset.y;\r\n    }\r\n    return offset;\r\n};\r\n\r\nconst applyOffset = part => ({ target, offset }) => {\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { start, count } = targetGroup;\r\n        const end = start + count;\r\n        const uv = child.geometry.attributes.uv;\r\n        for (let i = start; i < end; i++) {\r\n            const u = uv.getX(i) + 0.25 * offset.x;\r\n            const v = uv.getY(i) + 0.25 * offset.y;\r\n            uv.setXY(i, u, v);\r\n        }\r\n        uv.needsUpdate = true;\r\n    });\r\n};\r\n\r\nexport const applyEyeOffset = applyOffset(\"Eye\");\r\nexport const applyMouthOffset = applyOffset(\"Mouth\");\r\n// export const applyBodyOffset = applyOffset(\"BodyAll\");\r\n\r\nconst applyTexture = part => ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    textureId,\r\n}) => {\r\n    const texturePath = getTexturePath(textureId);\r\n    const texture = new THREE.TextureLoader().load(texturePath);\r\n    texture.encoding = THREE.sRGBEncoding;\r\n\r\n    const materialParams = {\r\n        map: texture,\r\n        skinning: true,\r\n    };\r\n    const newMaterial = createNewMaterial(materialType, materialParams);\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { materialIndex } = targetGroup;\r\n        newMaterial.name = child.material[materialIndex].name;\r\n\r\n        child.material[materialIndex] = newMaterial;\r\n    });\r\n};\r\n\r\nexport const applyEyeTexture = applyTexture(\"Eye\");\r\nexport const applyMouthTexture = applyTexture(\"Mouth\");\r\n// export const applyBodyTexture = applyTexture(\"BodyAll\");\r\n\r\n// Chain Code is invalid if starts with the character \"+\"\r\nexport const analyzeChainCode = code => {\r\n    if (!code) return [\"\", \"\"];\r\n    const aniCodes = code.split(\">\");\r\n    const nAni = aniCodes.length;\r\n    const fileList = [];\r\n    const animationList = [];\r\n    for (let i = 0; i < nAni; i++) {\r\n        let timeScale = 1,\r\n            repetitions = 1,\r\n            fileIdx = null,\r\n            aniName = null,\r\n            fileName = null,\r\n            details,\r\n            currentAni = {},\r\n            faceChanges = [];\r\n        const currentParts = aniCodes[i].split(\"+\");\r\n        const fromModelFile = currentParts.length === 1;\r\n        if (fromModelFile) {\r\n            details = currentParts[0];\r\n        } else {\r\n            [fileName, details] = currentParts;\r\n            fileIdx = fileList.length - 1;\r\n        }\r\n        if (fileName) {\r\n            fileIdx = fileList.length;\r\n            fileList.push(fileName);\r\n        }\r\n        if (details.includes(\"&\")) {\r\n            const [name, ...settings] = details.split(\"&\");\r\n            aniName = name;\r\n            for (let setting of settings) {\r\n                const [key, value] = setting.split(\"=\");\r\n                if (key === \"ts\") {\r\n                    timeScale = parseFloat(value);\r\n                }\r\n                if (key === \"r\") {\r\n                    repetitions = value === \"inf\" ? Infinity : parseInt(value);\r\n                }\r\n                if (key.includes(\"-\")) {\r\n                    const [part, time] = key.split(\"-\");\r\n                    const faceMod = {\r\n                        time: parseFloat(time),\r\n                        eyeIdx: \"\",\r\n                        mouthIdx: \"\",\r\n                    };\r\n                    const indexName = `${part === \"e\" ? \"eye\" : \"mouth\"}Idx`;\r\n                    faceMod[indexName] = value;\r\n                    faceChanges.push(faceMod);\r\n                }\r\n            }\r\n        } else {\r\n            aniName = details;\r\n        }\r\n        currentAni = {\r\n            fileIdx,\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            faceChanges: processFaceChanges(faceChanges),\r\n        };\r\n\r\n        animationList.push(currentAni);\r\n    }\r\n    return [fileList, animationList];\r\n};\r\n\r\nexport const processFaceChanges = faceChanges => {\r\n    const blankFaceChange = { id: uuid(), time: \"\", eyeIdx: \"\", mouthIdx: \"\" };\r\n    const sorted = faceChanges.sort(change => change.time);\r\n    const timeStamps = new Set(faceChanges.map(change => change.time));\r\n    const hasBlank = timeStamps.has(\"\");\r\n\r\n    if (faceChanges.length === timeStamps.size) {\r\n        sorted.forEach(change => {\r\n            change.id = uuid();\r\n        });\r\n        return hasBlank ? sorted : [...sorted, blankFaceChange];\r\n    }\r\n\r\n    const simplified = [];\r\n    timeStamps.forEach(time => {\r\n        let output = { time, id: uuid(), eyeIdx: \"\", mouthIdx: \"\" };\r\n        const changes = sorted.filter(change => change.time === time);\r\n        changes.forEach(change => (output = Object.assign(output, change)));\r\n        simplified.push(output);\r\n    });\r\n    return hasBlank ? simplified : [...simplified, blankFaceChange];\r\n};\r\n\r\nexport const chainCodeToList = (code, name) => {\r\n    const [fileList, animationList] = analyzeChainCode(code);\r\n    const length = animationList.length;\r\n    const output = animationList.map((ani, i) => {\r\n        const { fileIdx, aniName, timeScale, repetitions, faceChanges } = ani;\r\n        const partName = name.concat(length > 1 ? `#${i + 1}` : \"\");\r\n        const listItem = {\r\n            name: partName,\r\n            fileName: fileList[fileIdx],\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            id: uuid(),\r\n        };\r\n        if (faceChanges) {\r\n            listItem.faceChanges = faceChanges;\r\n        }\r\n        return listItem;\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const createGradientMap = nTones => {\r\n    const colors = new Uint8Array(nTones).map((_, i) => (i * 256) / nTones);\r\n    const map = new THREE.DataTexture(colors, nTones, 1, THREE.LuminanceFormat);\r\n    map.minFilter = THREE.NearestFilter;\r\n    map.magFilter = THREE.NearestFilter;\r\n    map.generateMipmaps = false;\r\n\r\n    return map;\r\n};\r\n","import { defaultSettings } from \"../consts\";\r\n\r\nexport const settingsReducer = (state, action) => {\r\n    const { type, key, subkey, value } = action;\r\n    switch (type) {\r\n        case \"toggle\":\r\n            let currentValue;\r\n            if (subkey) {\r\n                currentValue = state[key][subkey][value];\r\n                return {\r\n                    ...state,\r\n                    [key]: {\r\n                        ...state[key],\r\n                        [subkey]: {\r\n                            ...state[key][subkey],\r\n                            [value]: !currentValue,\r\n                        },\r\n                    },\r\n                };\r\n            }\r\n            currentValue = state[key][value];\r\n            return {\r\n                ...state,\r\n                [key]: { ...state[key], [value]: !currentValue },\r\n            };\r\n        case \"reset\":\r\n            // reset values\r\n            // value = array of keys in settings[key] or settings[key][subkey] to be reset, null -> reset all\r\n            const defaultSetting = subkey\r\n                ? defaultSettings[key][subkey]\r\n                : defaultSettings[key];\r\n            // no value -> reset all\r\n            if (!value)\r\n                return subkey\r\n                    ? {\r\n                          ...state,\r\n                          [key]: {\r\n                              ...state[key],\r\n                              [subkey]: {\r\n                                  ...state[key][subkey],\r\n                                  ...defaultSetting,\r\n                              },\r\n                          },\r\n                      }\r\n                    : {\r\n                          ...state,\r\n                          [key]: { ...state[key], ...defaultSetting },\r\n                      };\r\n            // if value is defined, reset only the specified keys\r\n            const update = {};\r\n            value.forEach(v => {\r\n                update[v] = defaultSetting[v];\r\n            });\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...update },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...update } };\r\n        case \"load\":\r\n            // load preset values\r\n            return;\r\n        case \"update\":\r\n            // update state[key] or state[key][subkey] with values from value\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...value },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...value } };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createContext, useReducer } from \"react\";\r\nimport { settingsReducer } from \"../reducer/settingsReducer\";\r\nimport { defaultSettings } from \"../consts\";\r\nimport { chainCodeToList } from \"../viewerHelpers\";\r\n\r\nexport const SettingsContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nconst initAniChain = chainCodeToList(defaultSettings.animation.code, \"init\");\r\n\r\nconst initSettings = { chainMaker: { chain: initAniChain } };\r\nObject.keys(defaultSettings).forEach(\r\n    key => (initSettings[key] = { ...defaultSettings[key] })\r\n);\r\ninitSettings.scene.lights = defaultSettings.scene.lights.map(light => ({\r\n    ...light,\r\n}));\r\n\r\nexport { initSettings };\r\n\r\nexport function SettingsProvider(props) {\r\n    const [settings, dispatch] = useReducer(settingsReducer, initSettings);\r\n\r\n    return (\r\n        <SettingsContext.Provider value={settings}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                {props.children}\r\n            </DispatchContext.Provider>\r\n        </SettingsContext.Provider>\r\n    );\r\n}\r\n","import Button from \"@material-ui/core/Button\";\r\n\r\nimport { initSettings } from \"./context/SettingsContext\";\r\nimport {\r\n    initKey,\r\n    WEAPON_CODE,\r\n    GENDER_CODE,\r\n    COMBO_LENGTH,\r\n    FS_LENGTH,\r\n    aniModList,\r\n} from \"./consts\";\r\n\r\nimport { chainCodeToList } from \"./viewerHelpers\";\r\n\r\nexport const isBlade = code => code.startsWith(\"w302\");\r\n\r\nexport const isSheath = code => isBlade(code) && code.endsWith(\"02\");\r\n\r\n// if object is an array, apply callback on each element of object, otherwise, apply call back on the object\r\nexport const callbackOnPotentialArray = (object, callback) => {\r\n    if (Array.isArray(object)) {\r\n        object.forEach(child => callback(child));\r\n        return;\r\n    }\r\n    callback(object);\r\n};\r\n\r\nexport const setInitialSettings = params => {\r\n    if (params.length === 0) return;\r\n    let eyeTextureDefined = false;\r\n    let mouthTextureDefined = false;\r\n    params.forEach(param => {\r\n        if (!param) return;\r\n\r\n        const [keycode, ...value] = param.split(\"=\"); // animation code can have \"=\" inside\r\n        // if no value given, skip\r\n        if (!value[0]) return;\r\n\r\n        let setValue = value.length === 1 ? value[0] : value.join(\"=\");\r\n\r\n        switch (keycode) {\r\n            case \"et\":\r\n                eyeTextureDefined = true;\r\n                break;\r\n            case \"mt\":\r\n                mouthTextureDefined = true;\r\n                break;\r\n            case \"cc\":\r\n                // initialize chain maker chain\r\n                const chainList = chainCodeToList(setValue, \"Animation\");\r\n                initSettings[\"chainMaker\"][\"chain\"] = chainList;\r\n                break;\r\n            case \"bg\":\r\n                if (setValue !== \"transparent\") {\r\n                    setValue = `#${setValue}`;\r\n                }\r\n                break;\r\n            case \"cam\": // parameters in form x, y, z\r\n                setValue = setValue.split(\",\").map(n => parseFloat(n));\r\n                break;\r\n            default:\r\n        }\r\n        const { group, key } = initKey[keycode];\r\n\r\n        const isBooleanValue = setValue === \"true\" || setValue === \"false\";\r\n\r\n        initSettings[group][key] = isBooleanValue\r\n            ? Boolean(setValue === \"true\")\r\n            : setValue;\r\n    });\r\n\r\n    initSettings[\"model\"][\"texture\"] = initSettings[\"model\"][\"id\"];\r\n\r\n    if (!eyeTextureDefined) {\r\n        initSettings[\"model\"][\"eyeTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n    if (!mouthTextureDefined) {\r\n        initSettings[\"model\"][\"mouthTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n};\r\n\r\nexport const generateChainCode = chain => {\r\n    const length = chain.length;\r\n    let output = \"\";\r\n    chain.forEach((ani, i) => {\r\n        const { fileName, aniName, faceChanges } = ani;\r\n        if (fileName) {\r\n            if (i === 0) {\r\n                output = output.concat(fileName);\r\n            } else {\r\n                output = output.concat(\r\n                    fileName !== chain[i - 1].fileName ? fileName : \"\"\r\n                );\r\n            }\r\n            output = output.concat(\"+\");\r\n        }\r\n        output = output.concat(aniName);\r\n\r\n        // Add modifiers\r\n        const modCode = generateAniModCode(ani);\r\n        output = output.concat(modCode);\r\n        const faceCode = generateFaceCode(faceChanges);\r\n        output = output.concat(faceCode);\r\n\r\n        if (i < length - 1) {\r\n            output = output.concat(\">\");\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nconst generateAniModCode = ani => {\r\n    let output = \"\";\r\n    Object.keys(aniModList).forEach(modKey => {\r\n        const { key, defaultValue } = aniModList[modKey];\r\n        if (ani[key] !== defaultValue) {\r\n            output = output.concat(`&${modKey}=${ani[key]}`);\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nconst generateFaceCode = faceChanges => {\r\n    if (!faceChanges) return \"\";\r\n    let output = \"\";\r\n    faceChanges.forEach(change => {\r\n        const { time, eyeIdx, mouthIdx } = change;\r\n        if (!time) return;\r\n        if (eyeIdx) {\r\n            output = output.concat(`&e-${time}=${eyeIdx}`);\r\n        }\r\n        if (mouthIdx) {\r\n            output = output.concat(`&m-${time}=${mouthIdx}`);\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const collectFilter = toggleState => {\r\n    let collected = {};\r\n    Object.keys(toggleState).forEach(key => {\r\n        let tmp = [];\r\n        Object.keys(toggleState[key]).forEach(k => {\r\n            if (toggleState[key][k]) {\r\n                tmp.push(k);\r\n            }\r\n        });\r\n        collected[key] = tmp;\r\n    });\r\n    return collected;\r\n};\r\n\r\nexport const multiCondFilter = (input, filters) => {\r\n    const filterKeys = Object.keys(filters);\r\n\r\n    return input.filter(el => {\r\n        return filterKeys.every(key => {\r\n            if (!filters[key].length) return true;\r\n            return filters[key].includes(el[key]);\r\n        });\r\n    });\r\n};\r\n\r\nexport const complementaryColor = color => {\r\n    const hexColor = color.replace(\"#\", \"0x\");\r\n\r\n    return `#${(\"000000\" + (\"0xffffff\" ^ hexColor).toString(16)).slice(-6)}`;\r\n};\r\n\r\nexport const aniButtonsFromObject = (object, handleSelect, groupName) => {\r\n    if (!object) return null;\r\n    const style = { maxWidth: \"13.5rem\" };\r\n    return Object.keys(object).map(key => (\r\n        <Button\r\n            variant=\"contained\"\r\n            key={key}\r\n            data-value={object[key]}\r\n            data-name={`${groupName ? `${groupName} ` : \"\"}${key}`}\r\n            onClick={handleSelect}\r\n            style={style}\r\n        >\r\n            {key}\r\n        </Button>\r\n    ));\r\n};\r\n\r\n// Animation chain code generator\r\nexport const getStandbyCode = (weapon, gender) =>\r\n    `LOB_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_ONT_${GENDER_CODE[gender]}`;\r\n\r\nexport const getVictoryCode = weapon =>\r\n    `WIN_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_WIN_01>+${WEAPON_CODE[weapon]}_WIN_02`;\r\n\r\nexport const getDashAtkCode = weapon => `DAS+${WEAPON_CODE[weapon]}_DAS_02`;\r\n\r\nexport const getRollCode = weapon => `ROL+${WEAPON_CODE[weapon]}_ROL_01`;\r\n\r\nexport const getComboCode = weapon => {\r\n    const comboLength = COMBO_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `CMB_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= comboLength; i++) {\r\n        result = result.concat(`+${code}_CMB_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Force Strike chain code\r\nexport const getFSCode = weapon => {\r\n    const fsAniLength = FS_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `FS_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= fsAniLength; i++) {\r\n        result = result.concat(`+${code}_CHR_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Join Lobby chain code\r\nexport const getLobbyCode = (weapon, gender) => {\r\n    const code = WEAPON_CODE[weapon];\r\n    if (gender === \"Male\")\r\n        return `LOB_${code}+${code}_ONT_05&ts=-0.5>+${code}_ONT_02>+${code}_ONT_07>+${code}_ONT_08>+${code}_ONT_21`;\r\n    // Female\r\n    return `LOB_${code}+${code}_ONT_06&ts=-0.5>+${code}_ONT_04>+${code}_ONT_09>+${code}_ONT_10>+${code}_ONT_23`;\r\n};\r\n","import { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { fbxSource } from \"./App\";\r\nimport { CAM_PARAMS } from \"./consts\";\r\nimport {\r\n    directSetMatParams,\r\n    matColorParams,\r\n    materialCommonParams,\r\n    materialExtraParams,\r\n    incompatibleModels,\r\n} from \"./consts\";\r\nimport {\r\n    calculateTextureOffset,\r\n    calculateIdxOffset,\r\n    getModelPath,\r\n    analyzeWeaponCode,\r\n    analyzeChainCode,\r\n    loadModel,\r\n    applyEyeTexture,\r\n    applyMouthTexture,\r\n    applyEyeOffset,\r\n    applyMouthOffset,\r\n    disposeItem,\r\n    createOutline,\r\n    changeMaterial,\r\n    changeOpacity,\r\n    changeOutlineSize,\r\n    changeOutlineColor,\r\n    createGradientMap,\r\n} from \"./viewerHelpers\";\r\n\r\nimport { isBlade } from \"./helpers\";\r\n\r\nclass ModelViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        window.app = this;\r\n        this.initScene();\r\n        this.props.setIsLoading(true);\r\n\r\n        // Load the models\r\n        const [main, weaponRight, weaponLeft] = await this.initLoad();\r\n\r\n        // save references to models\r\n        this.models = {\r\n            main,\r\n            weaponRight,\r\n            weaponLeft,\r\n        };\r\n\r\n        // effects\r\n        this.loadedFX = new Set();\r\n        this.fxConstructors = new Map();\r\n\r\n        // add outline to main model and save reference\r\n        this.outlines.main = createOutline(main, this.outlineParams);\r\n\r\n        // Save initial position and rotation\r\n        main.initPos = main.position.clone();\r\n        main.initRot = main.rotation.clone();\r\n\r\n        // change the material\r\n        const { materialType } = this.props.model;\r\n        changeMaterial({ target: main, materialType });\r\n\r\n        // basic viewer for non-human assets\r\n        const modelId = this.props.model.id;\r\n        const isSimpleViewer =\r\n            !modelId.startsWith(\"c\") ||\r\n            modelId.endsWith(\"_h\") ||\r\n            incompatibleModels.has(modelId);\r\n\r\n        if (isSimpleViewer) {\r\n            if (isBlade(modelId)) {\r\n                const { texturePath } = analyzeWeaponCode(modelId + \"n\");\r\n                changeMaterial({ target: main, materialType, texturePath });\r\n            }\r\n            this.floor.add(main);\r\n            this.props.setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        // process weapons\r\n        [\"Right\", \"Left\"].forEach(side => {\r\n            const key = `weapon${side}`;\r\n            // if weapon not specified, return\r\n            if (!this.props.model[key]) return;\r\n            // add weapon\r\n            const weaponInfo = this.modelInfo[key];\r\n            const weaponModel = this.models[key];\r\n            const { texturePath } = weaponInfo;\r\n            changeMaterial({\r\n                target: weaponModel,\r\n                materialType,\r\n                texturePath,\r\n            });\r\n            // flip weapon if needed\r\n            weaponModel.rotation.y += weaponInfo.flipped ? Math.PI : 0;\r\n            // add outline to weapon and save reference\r\n            this.outlines[key] = createOutline(weaponModel, this.outlineParams);\r\n            // attach weapon to main body\r\n            this.attachWeapon(this.models[`weapon${side}`], side);\r\n        });\r\n\r\n        // Apply face settings\r\n        this.currentEyeIdx = \"2\";\r\n        this.currentMouthIdx = \"2\";\r\n        const defaultFaceParams = {\r\n            mouthTexture: modelId,\r\n            mouthIdx: \"2\",\r\n            eyeTexture: modelId,\r\n            eyeIdx: \"2\",\r\n        };\r\n        this.updateFace(defaultFaceParams, this.props.model);\r\n\r\n        // Apply material settings\r\n        this.saveMaterialReference();\r\n        this.applyMaterialParams();\r\n\r\n        // Add character to scene\r\n        this.floor.add(main);\r\n        // main model loading finished\r\n        this.props.setIsLoading(false);\r\n\r\n        // Add animation\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        this.addAnimationChain(main, aniCode, timeScale);\r\n    }\r\n\r\n    async componentDidUpdate(prev) {\r\n        const current = this.props;\r\n\r\n        // print updated props to console\r\n        console.log(\"Updated\");\r\n        Object.keys(prev).forEach(key => {\r\n            const oldValue = prev[key];\r\n            const currentValue = this.props[key];\r\n            const subkeys = Object.keys(oldValue);\r\n            if (subkeys.length === 0 || typeof oldValue === \"string\") {\r\n                if (oldValue !== currentValue) {\r\n                    console.log(\r\n                        `${key}: ${JSON.stringify(\r\n                            oldValue\r\n                        )} to ${JSON.stringify(currentValue)}`\r\n                    );\r\n                }\r\n            } else {\r\n                subkeys.forEach(subkey => {\r\n                    if (oldValue[subkey] !== currentValue[subkey]) {\r\n                        console.log(\r\n                            `${key}.${subkey}: ${JSON.stringify(\r\n                                oldValue[subkey]\r\n                            )} to ${JSON.stringify(currentValue[subkey])}`\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n\r\n        this.updateModel(prev.model, current.model);\r\n\r\n        this.updateAnimation(prev.animation, current.animation);\r\n\r\n        this.updateOutline(prev.outline, current.outline);\r\n\r\n        this.updateMaterial(prev, current);\r\n\r\n        this.updateLights(prev.lights, current.lights);\r\n\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n\r\n        // Update background color\r\n        if (prev.bgColor !== current.bgColor) {\r\n            this.setBackground(current.bgColor);\r\n        }\r\n\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n\r\n        // Update Anti Aliasinng\r\n        if (prev.antiAliasing !== current.antiAliasing) {\r\n            this.updateAA();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixers = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n\r\n    // set up initial scene\r\n    initScene = () => {\r\n        this.models = {};\r\n        this.modelInfo = {\r\n            main: this.props.model.id,\r\n            weaponLeft: analyzeWeaponCode(this.props.model.weaponLeft),\r\n            weaponRight: analyzeWeaponCode(this.props.model.weaponRight),\r\n        };\r\n        this.materials = [];\r\n\r\n        // save reference and specifications for outlines\r\n        this.outlines = {};\r\n        this.outlineParams = { ...this.props.outline };\r\n\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // mixers\r\n        this.mixers = [];\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.scene.background =\r\n            this.props.bgColor !== \"transparent\"\r\n                ? new THREE.Color(this.props.bgColor)\r\n                : null;\r\n\r\n        // Create an invisible floor to add the models on (for auto rotate)\r\n        const floorGeometry = new THREE.PlaneBufferGeometry(0.1, 0.1);\r\n        floorGeometry.rotateX(Math.PI / 2);\r\n        const floorMaterial = new THREE.MeshBasicMaterial();\r\n        floorMaterial.visible = false;\r\n        this.floor = new THREE.Mesh(floorGeometry, floorMaterial);\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addLights(lights);\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.renderer = this.props.antiAliasing\r\n            ? this.rendererAA\r\n            : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        this.canvas = this.finalRenderer.domElement;\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n        this.mount.appendChild(this.canvas);\r\n\r\n        this.animate();\r\n    };\r\n\r\n    addLights = lights => {\r\n        this.lights = [];\r\n        lights.forEach(({ enable, type, color, intensity, ...params }) => {\r\n            if (!enable) return;\r\n            const constructor = `${type}Light`;\r\n            const light = new THREE[constructor](color, intensity);\r\n\r\n            for (const [key, value] of Object.entries(params)) {\r\n                switch (key) {\r\n                    case \"position\":\r\n                        const setValue = value.map(v => v || 0);\r\n                        light.position.set(...setValue);\r\n                        break;\r\n                    default:\r\n                        light[key] = value;\r\n                }\r\n            }\r\n            this.scene.add(light);\r\n            this.lights.push(light);\r\n        });\r\n    };\r\n\r\n    removeLights = () => this.lights.forEach(light => this.scene.remove(light));\r\n\r\n    // Promise to load all models at initialize\r\n    initLoad = () => {\r\n        const modelId = this.modelInfo.main;\r\n        const modelPath = getModelPath(modelId);\r\n        const loadMain = loadModel(modelPath);\r\n\r\n        const weaponRight = this.modelInfo.weaponRight?.modelPath;\r\n        const loadWeaponR = loadModel(weaponRight);\r\n\r\n        const weaponLeft = this.modelInfo.weaponLeft?.modelPath;\r\n        const loadWeaponL = loadModel(weaponLeft);\r\n\r\n        return Promise.all([loadMain, loadWeaponR, loadWeaponL]);\r\n    };\r\n\r\n    attachWeapon = (weapon, side) => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name === boneName && child.children.length === 0) {\r\n                child.add(weapon);\r\n            }\r\n        });\r\n    };\r\n\r\n    detachWeapon = side => {\r\n        const key = `weapon${side}`;\r\n        const model = this.models[key];\r\n        if (!model) return;\r\n        model.parent.remove(model);\r\n    };\r\n\r\n    saveMaterialReference = () => {\r\n        this.materials = [];\r\n        const mainModel = this.models.main;\r\n        mainModel.traverse(child => {\r\n            if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n            const { material } = child;\r\n\r\n            if (Array.isArray(material)) {\r\n                this.materials = this.materials.concat(material);\r\n                return;\r\n            }\r\n            this.materials.push(material);\r\n        });\r\n    };\r\n\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    addAnimationChain = async (object, animationChain, timeScale) => {\r\n        if (!animationChain) return;\r\n\r\n        const [fileList, animationList] = analyzeChainCode(animationChain);\r\n        this.nAni = animationList.length;\r\n\r\n        this.props.setIsLoading(true);\r\n\r\n        object.mixer = new THREE.AnimationMixer(object);\r\n        this.mixers.push(object.mixer);\r\n\r\n        this._aniIdx = 0;\r\n        object.mixer.timeScale = timeScale; // Global timeScale\r\n        object.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = animationList.map(ani => {\r\n            const settings = {\r\n                timeScale: ani.timeScale,\r\n                repetitions: ani.repetitions,\r\n            };\r\n            if (ani.faceChanges) settings.faceChanges = ani.faceChanges;\r\n            return settings;\r\n        });\r\n        const batchLoader = fileList.map(file => {\r\n            const path = `${fbxSource}/fbx/${file}.fbx`;\r\n            return loadModel(path);\r\n        });\r\n\r\n        const animations = [];\r\n        // load all animation files\r\n        const animFiles = await Promise.all(batchLoader);\r\n\r\n        animationList.forEach(anim => {\r\n            const { fileIdx, aniName } = anim;\r\n            const animation = aniName\r\n                ? animFiles[fileIdx].animations.find(\r\n                      ani => ani.name === aniName\r\n                  )\r\n                : animFiles[fileIdx].animations[0];\r\n            animations.push(animation);\r\n        });\r\n        this.animations = animations;\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.props.setIsLoading(false);\r\n    };\r\n\r\n    getFaceChangesArray = (faceChanges, repetitions) => {\r\n        if (!faceChanges) return \"\";\r\n        if (repetitions === 1) return [...faceChanges];\r\n        // [0, 100, 200,...]\r\n        const timeOffset = new Array(repetitions).fill().map((_, i) => i * 100);\r\n\r\n        const offsetFaceChanges = offset =>\r\n            faceChanges.map(({ time, id, ...others }) => ({\r\n                ...others,\r\n                time: time + offset,\r\n            }));\r\n\r\n        return timeOffset.map(offsetFaceChanges).flat();\r\n    };\r\n\r\n    // this.aniIdx = n => play animation with index n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n        const anim = this.animations[newIdx];\r\n        const mixer = this.models.main.mixer;\r\n        mixer.stopAllAction();\r\n        const action = mixer.clipAction(anim);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n        this.faceChanges = this.getFaceChangesArray(faceChanges, repetitions);\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        mixer.setTime(0);\r\n        this.currentClipDuration = anim.duration;\r\n        action.play();\r\n    }\r\n\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: this.props.capture.codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.props.setIsLoading(false);\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                var url = URL.createObjectURL(superBuffer);\r\n                var a = document.createElement(\"a\");\r\n                document.body.appendChild(a);\r\n                a.style = \"display: none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n            };\r\n        }\r\n        // disable user input\r\n        this.props.setIsLoading(true);\r\n        // Reset facial expression\r\n        this.eyeIdx = this.props.model.eyeIdx;\r\n        this.mouthIdx = this.props.model.mouthIdx;\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    updateAA = () => {\r\n        // get current viewport size\r\n        const currentSize = new THREE.Vector2();\r\n        this.renderer.getSize(currentSize);\r\n        // switch renderer\r\n        this.renderer = this.props.antiAliasing\r\n            ? this.rendererAA\r\n            : this.rendererNoAA;\r\n        this.renderer.setSize(currentSize.x, currentSize.y);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const { canvas } = this;\r\n        const newCanvas = this.renderer.domElement;\r\n        this.replaceCanvas(canvas, newCanvas);\r\n        this.canvas = newCanvas;\r\n    };\r\n\r\n    updateEyeTexture = (prev, current) => {\r\n        const currentTexture = current.eyeTexture;\r\n        const prevTexture = prev.eyeTexture;\r\n        const { materialType } = current;\r\n\r\n        if (currentTexture === prevTexture) return;\r\n        applyEyeTexture({\r\n            target: this.models.main,\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyEyeOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n    };\r\n\r\n    set eyeIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this.currentEyeIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyEyeOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n        this.currentEyeIdx = newIdx;\r\n    }\r\n\r\n    updateMouthTexture = (prev, current) => {\r\n        const currentTexture = current.mouthTexture;\r\n        const prevTexture = prev.mouthTexture;\r\n        const { materialType } = current;\r\n\r\n        if (currentTexture === prevTexture) return;\r\n        applyMouthTexture({\r\n            target: this.models.main,\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyMouthOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n    };\r\n\r\n    set mouthIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this.currentMouthIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyMouthOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n        this.currentMouthIdx = newIdx;\r\n    }\r\n\r\n    updateFaceTexture = (prev, current) => {\r\n        this.updateEyeTexture(prev, current);\r\n        this.updateMouthTexture(prev, current);\r\n    };\r\n\r\n    updateFaceOffset = current => {\r\n        this.eyeIdx = current.eyeIdx;\r\n        this.mouthIdx = current.mouthIdx;\r\n    };\r\n\r\n    updateFace = (prev, current) => {\r\n        this.updateFaceTexture(prev, current);\r\n        this.updateFaceOffset(current);\r\n    };\r\n\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        if (prev.id !== modelId) {\r\n            this.props.setIsLoading(true);\r\n            const modelPath = getModelPath(modelId);\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            const { materialType } = current;\r\n            changeMaterial({ target: model, materialType });\r\n            // add outline\r\n            this.outlines.main = createOutline(model, this.outlineParams);\r\n\r\n            // detach weapons from old model if they exist\r\n            [\"Right\", \"Left\"].forEach(side => {\r\n                const key = `weapon${side}`;\r\n                if (prev[key]) {\r\n                    this.detachWeapon(side);\r\n                }\r\n            });\r\n\r\n            // remove and dispose old model\r\n            this.floor.remove(this.models.main);\r\n            disposeItem(this.models.main);\r\n\r\n            // add reference\r\n            this.models.main = model;\r\n\r\n            // Save initial position and rotation\r\n            model.initPos = model.position.clone();\r\n            model.initRot = model.rotation.clone();\r\n\r\n            // Add new model to scene\r\n            this.floor.add(model);\r\n\r\n            // Apply face to new model\r\n            this.currentEyeIdx = \"2\";\r\n            this.currentMouthIdx = \"2\";\r\n            const { eyeIdx, mouthIdx } = this.props.model;\r\n            this.eyeIdx = eyeIdx;\r\n            this.mouthIdx = mouthIdx;\r\n\r\n            // Attach weapons to new model\r\n            [\"Right\", \"Left\"].forEach(side => {\r\n                const key = `weapon${side}`;\r\n                const weaponModel = this.models[key];\r\n\r\n                if (!weaponModel) return;\r\n                this.attachWeapon(weaponModel, side);\r\n            });\r\n\r\n            // Add animation to new model\r\n            const { code: aniCode, timeScale } = this.props.animation;\r\n            this.addAnimationChain(model, aniCode, timeScale);\r\n\r\n            this.saveMaterialReference();\r\n            this.applyMaterialParams();\r\n\r\n            this.props.setIsLoading(false);\r\n            return;\r\n        }\r\n        // Update face when main model not changed\r\n        this.updateFace(prev, current);\r\n\r\n        this.saveMaterialReference();\r\n        this.applyMaterialParams();\r\n    };\r\n\r\n    updateWeapons = async (prev, current) => {\r\n        [\"Right\", \"Left\"].forEach(async side => {\r\n            const key = `weapon${side}`;\r\n            // if not changed, return\r\n            if (prev[key] === current[key]) return;\r\n            // Update weapon\r\n            this.detachWeapon(side); // remove old weapon\r\n            disposeItem(this.models[key]); // dispose old weapon\r\n            // if current weapon is empty (weapon removed)\r\n            if (!current[key]) {\r\n                this.models[key] = null;\r\n                this.modelInfo[key] = \"\";\r\n                // remove reference to outline\r\n                this.outlines[key] = null;\r\n                return;\r\n            }\r\n            // load new weapon\r\n            this.props.setIsLoading(true);\r\n\r\n            this.modelInfo[key] = analyzeWeaponCode(this.props.model[key]);\r\n            const { modelPath, texturePath } = this.modelInfo[key];\r\n\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            this.models[key] = model;\r\n\r\n            // process new weapon\r\n            const { materialType } = current;\r\n            changeMaterial({\r\n                target: this.models[key],\r\n                materialType,\r\n                texturePath,\r\n            });\r\n\r\n            if (this.modelInfo[key].flipped) {\r\n                this.models[key].rotation.y = Math.PI;\r\n            }\r\n            // add outline to new weapon\r\n            this.outlines[key] = createOutline(model, this.outlineParams);\r\n            // attach new weapon to main model\r\n            this.attachWeapon(model, side);\r\n\r\n            this.saveMaterialReference();\r\n            this.applyMaterialParams();\r\n\r\n            this.props.setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        await this.updateMainModel(prev, current);\r\n        this.updateWeapons(prev, current);\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            const mainModel = this.models.main;\r\n            if (prev.code) {\r\n                mainModel.mixer.stopAllAction();\r\n\r\n                // Reset position and rotation to initial value\r\n                const { initPos, initRot } = mainModel;\r\n                mainModel.position.copy(initPos);\r\n                mainModel.rotation.copy(initRot);\r\n\r\n                // Reset facial expression\r\n                this.eyeIdx = this.props.model.eyeIdx;\r\n                this.mouthIdx = this.props.model.mouthIdx;\r\n\r\n                this.mixers = [];\r\n                this.animations = [];\r\n            }\r\n            // Add new animation\r\n            this.addAnimationChain(mainModel, code, timeScale);\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixers.forEach(mixer => (mixer.timeScale = timeScale));\r\n        }\r\n    };\r\n\r\n    updateOutline = (prev, current) => {\r\n        this.outlineParams = { ...current };\r\n        const updatedParams = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedParams.length === 0) return;\r\n        const { enable, size, opacity, color } = current;\r\n        const outlineList = Object.keys(this.outlines);\r\n        outlineList.forEach(outlineName => {\r\n            const outlineGroup = this.outlines[outlineName];\r\n            if (!outlineGroup) return;\r\n            outlineGroup.forEach(outline => {\r\n                if (updatedParams.includes(\"enable\")) {\r\n                    outline.visible = enable;\r\n                }\r\n                if (updatedParams.includes(\"size\")) {\r\n                    changeOutlineSize(outline, size);\r\n                }\r\n                if (updatedParams.includes(\"opacity\")) {\r\n                    changeOpacity(outline, opacity);\r\n                }\r\n                if (updatedParams.includes(\"color\")) {\r\n                    changeOutlineColor(outline, color);\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    applyMaterialParams = () => {\r\n        const { materialType } = this.props.model;\r\n        const current = this.props.materialParams;\r\n        const { materials } = this;\r\n        const paramsList = [\r\n            ...materialCommonParams,\r\n            ...materialExtraParams[materialType],\r\n        ];\r\n\r\n        materials.forEach(mat => {\r\n            directSetMatParams.forEach(param => {\r\n                if (!paramsList.includes(param)) return;\r\n                mat[param] = current[param];\r\n            });\r\n\r\n            matColorParams.forEach(param => {\r\n                if (!paramsList.includes(param)) return;\r\n                const currentColor = current[param];\r\n                const matColor = new THREE.Color(currentColor);\r\n                mat[param] = matColor;\r\n            });\r\n\r\n            if (!current.useTexture) {\r\n                if (mat.map) mat.backupMap = mat.map;\r\n                mat.map = null;\r\n            }\r\n\r\n            if (current.flatShading) {\r\n                mat.flatShading = current.flatShading;\r\n                mat.needsUpdate = true;\r\n            }\r\n\r\n            if (materialType === \"Toon\" && current.gradientMap !== \"none\") {\r\n                let newMap = null;\r\n                const nTones = parseInt(current.gradientMap);\r\n                newMap = createGradientMap(nTones);\r\n\r\n                materials.forEach(mat => {\r\n                    mat.gradientMap = newMap;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    updateMaterialParams = (prev, current) => {\r\n        const { materialType } = this.props.model;\r\n        const { useTexture, flatShading, gradientMap } = current;\r\n        const { materials } = this;\r\n        const paramsList = [\r\n            ...materialCommonParams,\r\n            ...materialExtraParams[materialType],\r\n        ];\r\n\r\n        directSetMatParams.forEach(param => {\r\n            if (!paramsList.includes(param) || prev[param] === current[param])\r\n                return;\r\n            materials.forEach(mat => (mat[param] = current[param]));\r\n        });\r\n\r\n        matColorParams.forEach(param => {\r\n            if (!paramsList.includes(param) || prev[param] === current[param])\r\n                return;\r\n            const currentColor = current[param];\r\n            const matColor = new THREE.Color(currentColor);\r\n            materials.forEach(mat => (mat[param] = matColor));\r\n        });\r\n\r\n        if (prev.useTexture !== useTexture) {\r\n            if (!useTexture) {\r\n                materials.forEach(mat => {\r\n                    mat.backupMap = mat.map;\r\n                    mat.map = null;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            } else {\r\n                materials.forEach(mat => {\r\n                    mat.map = mat.backupMap;\r\n                    delete mat.backupMap;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            }\r\n        }\r\n\r\n        if (prev.flatShading !== flatShading) {\r\n            materials.forEach(mat => {\r\n                mat.flatShading = flatShading;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n\r\n        if (prev.gradientMap !== gradientMap) {\r\n            let newMap = null;\r\n            if (gradientMap !== \"none\") {\r\n                const nTones = parseInt(gradientMap);\r\n                newMap = createGradientMap(nTones);\r\n            }\r\n\r\n            materials.forEach(mat => {\r\n                mat.gradientMap = newMap;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n    };\r\n\r\n    updateMaterial = (prev, current) => {\r\n        // update material type\r\n        if (prev.model.materialType !== current.model.materialType) {\r\n            const { materialType } = current.model;\r\n\r\n            changeMaterial({ target: this.models.main, materialType });\r\n            this.saveMaterialReference();\r\n\r\n            this.applyMaterialParams();\r\n            return;\r\n        }\r\n\r\n        this.updateMaterialParams(prev.materialParams, current.materialParams);\r\n    };\r\n\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeLights();\r\n            this.addLights(current);\r\n        }\r\n    };\r\n\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n            const { canvas } = this;\r\n            const newCanvas = this.renderer.domElement;\r\n            this.replaceCanvas(canvas, newCanvas);\r\n            this.canvas = newCanvas;\r\n            return;\r\n        }\r\n\r\n        if (!this.loadedFX.has(\"ascii\")) {\r\n            const { AsciiEffect } = await import(\r\n                \"three/examples/jsm/effects/AsciiEffect\"\r\n            );\r\n            this.loadedFX.add(\"ascii\");\r\n            this.fxConstructors.set(\"ascii\", AsciiEffect);\r\n            this.showAscii();\r\n        } else this.showAscii();\r\n\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n    };\r\n\r\n    showAscii = () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const AsciiEffect = this.fxConstructors.get(\"ascii\");\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n        this.effect.setSize(this.viewport.width, this.viewport.height);\r\n\r\n        const newCanvas = this.effect.domElement;\r\n        const currentCanvas = this.canvas;\r\n        newCanvas.style.color = color;\r\n        newCanvas.style.background = bgColor;\r\n\r\n        this.replaceCanvas(currentCanvas, newCanvas);\r\n        this.canvas = newCanvas;\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    setBackground = bgColor => {\r\n        this.scene.background =\r\n            bgColor !== \"transparent\" ? new THREE.Color(bgColor) : null;\r\n    };\r\n\r\n    replaceCanvas = (oldCanvas, newCanvas) => {\r\n        this.mount.removeChild(oldCanvas);\r\n        this.mount.appendChild(newCanvas);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n        const dt = this.clock.getDelta();\r\n        // Rotate the floor\r\n        const { rotateSpeed } = this.props;\r\n        this.floor.rotateY((rotateSpeed * dt * Math.PI) / 2);\r\n\r\n        this.mixers.forEach(mixer => mixer.update(dt));\r\n\r\n        if (this.faceChanges && this.faceChanges.length > 0) {\r\n            const elapsedTime = this.models.main.mixer.time;\r\n            const nextFaceChangeTime =\r\n                (this.faceChanges[0].time * this.currentClipDuration) / 100;\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                const currentFaceChange = this.faceChanges.shift();\r\n                const { eyeIdx, mouthIdx } = currentFaceChange;\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModelViewer;\r\n","import { lazy, Suspense, useContext, useCallback } from \"react\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"./context/SettingsContext\";\r\nimport ModelViewer from \"./ModelViewer\";\r\nimport \"./styles/Display.css\";\r\n\r\nimport { cameraPositions, controlsPositions } from \"./consts\";\r\n\r\nconst AniControl = lazy(() => import(\"./AniControl\"));\r\n\r\nfunction Display(props) {\r\n    const { viewport } = props;\r\n\r\n    const settings = useContext(SettingsContext);\r\n    const {\r\n        model: { id: modelId },\r\n        scene: { rotateSpeed, background: bgColor, initCameraPosition, lights },\r\n        app: { showAniControl, antiAliasing },\r\n    } = settings;\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n    const toggleCapture = useCallback(() => {\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"capture\",\r\n            value: \"enable\",\r\n        };\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const type = modelId[0];\r\n\r\n    const defaultCameraPosition = cameraPositions[modelId]\r\n        ? cameraPositions[modelId]\r\n        : cameraPositions[type];\r\n\r\n    const cameraPosition = initCameraPosition\r\n        ? initCameraPosition.map((n, i) =>\r\n              isNaN(n) ? defaultCameraPosition[i] : n\r\n          )\r\n        : defaultCameraPosition;\r\n\r\n    const controlsPosition = controlsPositions[modelId]\r\n        ? controlsPositions[modelId]\r\n        : controlsPositions[type];\r\n\r\n    return (\r\n        <div className=\"Display\">\r\n            {showAniControl && (\r\n                <div className=\"Display-AniControl\">\r\n                    <Suspense fallback={null}>\r\n                        <AniControl value={settings.animation.timeScale} />\r\n                    </Suspense>\r\n                </div>\r\n            )}\r\n            <ModelViewer\r\n                setIsLoading={props.setIsLoading}\r\n                capture={settings.capture}\r\n                toggleCapture={toggleCapture}\r\n                viewport={viewport}\r\n                cameraPosition={cameraPosition}\r\n                controlsPosition={controlsPosition}\r\n                model={settings.model}\r\n                materialParams={settings.materialParams}\r\n                outline={settings.outline}\r\n                animation={settings.animation}\r\n                rotateSpeed={rotateSpeed}\r\n                lights={lights}\r\n                bgColor={bgColor}\r\n                antiAliasing={antiAliasing}\r\n                ascii={settings.ascii}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n","import { lazy, Suspense, useState, useRef, useEffect, useContext } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\n\r\nimport Menu from \"@material-ui/icons/Menu\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport useStyles from \"./styles/MainPageStyles\";\r\n\r\nimport Display from \"./Display\";\r\nimport { SettingsContext } from \"./context/SettingsContext\";\r\nimport { setInitialSettings } from \"./helpers\";\r\n\r\nconst ControlPanel = lazy(() => import(\"./ControlPanel\"));\r\nconst SideBar = lazy(() => import(\"./SideBar\"));\r\n\r\nfunction MainPage({ location }) {\r\n    const classes = useStyles();\r\n\r\n    const [currentMode, setCurrentMode] = useState(\"model\");\r\n    const [sidebarOpen, toggleSidebarOpen] = useToggleState(true);\r\n    const [controlOpen, toggleControlOpen] = useToggleState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [initLoadDone, setInitLoadDone] = useState(false);\r\n    const {\r\n        app: { showSettings },\r\n    } = useContext(SettingsContext);\r\n\r\n    const viewerRef = useRef();\r\n    const [viewport, setViewport] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const params = location.pathname.split(\"/\");\r\n        setInitialSettings(params);\r\n        setInitLoadDone(true);\r\n\r\n        window.addEventListener(\"resize\", updateViewportSize);\r\n\r\n        return function () {\r\n            window.removeEventListener(\"resize\", updateViewportSize);\r\n        };\r\n    }, [location.pathname]);\r\n\r\n    const updateViewportSize = () => {\r\n        const height = viewerRef.current.clientHeight;\r\n        const width = viewerRef.current.clientWidth;\r\n        setViewport({ width, height });\r\n    };\r\n\r\n    const openControl = mode => {\r\n        toggleControlOpen();\r\n        setCurrentMode(mode);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <div className={classes.loadingMsg}>Loading...</div>}\r\n            <div className={classes.root}>\r\n                <Suspense fallback={null}>\r\n                    <CssBaseline />\r\n                    <ControlPanel\r\n                        mode={currentMode}\r\n                        open={controlOpen}\r\n                        toggleControlOpen={toggleControlOpen}\r\n                    />\r\n                    {initLoadDone && showSettings && (\r\n                        <>\r\n                            <button\r\n                                onClick={toggleSidebarOpen}\r\n                                className={classes.openSidebarButton}\r\n                            >\r\n                                <Menu />\r\n                            </button>\r\n\r\n                            <SideBar\r\n                                toggleSidebarOpen={toggleSidebarOpen}\r\n                                open={sidebarOpen}\r\n                                openControl={openControl}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </Suspense>\r\n                {initLoadDone && (\r\n                    <main ref={viewerRef} className={classes.content}>\r\n                        <Display\r\n                            setIsLoading={setIsLoading}\r\n                            viewport={viewport}\r\n                        />\r\n                    </main>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import { SettingsProvider } from \"./context/SettingsContext\";\r\n\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\nimport MainPage from \"./MainPage\";\r\n\r\nimport \"./styles/App.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <SettingsProvider>\r\n            <HashRouter>\r\n                <Route render={routeProps => <MainPage {...routeProps} />} />\r\n            </HashRouter>\r\n        </SettingsProvider>\r\n    );\r\n}\r\n\r\nexport const fbxSource = process.env.PUBLIC_URL;\r\n\r\nexport default App;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nfunction useToggleState(initVal = false) {\r\n    const [state, setState] = useState(initVal);\r\n    const toggleState = useCallback(() => {\r\n        setState(state => !state);\r\n    }, [setState]);\r\n    return [state, toggleState];\r\n}\r\n\r\nexport default useToggleState;\r\n","const faceOffset = {\r\n    c110350_02: { x: 0.043, y: -0.0625 }, // Formal Joachim\r\n    c110340_02: { x: 0.043, y: -0.0625 }, // Formal Noelle\r\n    c110018_02: { x: 0.043, y: -0.0625 }, // Opera Karina\r\n    c110370_01: { x: 0.043, y: -0.0625 }, // Lapis\r\n    c100015_04: { x: 0.05, y: -0.08 }, // Chelle\r\n    c110267_01: { x: 0.08, y: -0.03 }, // Hawk\r\n    c110050_02: { x: 0.07, y: 0.13 }, // HBerserker\r\n    c110291_01: { x: 0.07, y: 0.14 }, // Marth\r\n    c110354_01: { x: 0.07, y: 0.01 }, // Mega Man\r\n    c110345_01: { x: 0.08, y: -0.13 }, // Mitsuhide\r\n    c110266_01: { x: 0.01, y: 0.03 }, // Naveed\r\n    c110365_01: { x: 0.043, y: -0.0625 }, // Nevin\r\n    c110346_01: { x: 0.07, y: 0.08 }, // Nobunaga\r\n    c110366_01: { x: 0.043, y: -0.0625 }, // Pinon\r\n    c110299_02: { x: 0.07, y: 0.08 }, // RXZ\r\n    c110360_01: { x: 0.07, y: 0.14 }, // Tiki\r\n    c110307_01: { x: 0.08, y: -0.03 }, // Victor\r\n    c110322_01: { x: 0.043, y: 0.08 }, // Zhu Bajie\r\n    c110356_01: { x: 0.07, y: 0.08 }, // Gauld\r\n    c110300_01: { x: 0.07, y: -0.1 }, // Pipple\r\n    c110344_01: { x: 0.07, y: -0.02 }, // Yuya\r\n    c110053_03: { x: 0.043, y: -0.0625 }, // INefi\r\n    c110368_01: { x: 0.043, y: -0.0625 }, // Meene\r\n    c110367_01: { x: 0.043, y: -0.0625 }, // Ilia\r\n    c110003_02: { x: 0.043, y: -0.0625 }, // Gun Joe\r\n    c110270_02: { x: 0.043, y: -0.0625 }, // HMelsa\r\n    c110341_03: { x: 0.043, y: -0.0625 }, // Hakasha\r\n};\r\nexport default faceOffset;\r\n","export const DRAWER_WIDTH = \"16rem\";\r\nexport const DRAWER_BGCOLOR = \"#330000\";\r\n\r\nexport const baseUrl = \"https://dgk3593.github.io/dl-model/#/\";\r\n\r\nconst defaultAni = \"MWM_CMN+CMN_MWM_03\";\r\n\r\nexport const matParamsDetails = {\r\n    wireframe: {\r\n        name: \"Wireframe\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    useTexture: {\r\n        name: \"Texture\",\r\n        type: \"boolean\",\r\n        default: true,\r\n    },\r\n    transparent: {\r\n        name: \"Transparent\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    flatShading: {\r\n        name: \"Flat Shading\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    color: {\r\n        name: \"Color\",\r\n        type: \"color\",\r\n        default: \"#ffffff\",\r\n    },\r\n    emissive: {\r\n        name: \"Emissive\",\r\n        type: \"color\",\r\n        default: \"#000000\",\r\n    },\r\n    opacity: {\r\n        name: \"Opacity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    emissiveIntensity: {\r\n        name: \"Emissive Intensity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    specular: {\r\n        name: \"Specular\",\r\n        type: \"color\",\r\n        default: \"#111111\",\r\n    },\r\n    metalness: {\r\n        name: \"Metalness\",\r\n        type: \"percentage\",\r\n        default: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    roughness: {\r\n        name: \"Roughness\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    shininess: {\r\n        name: \"Shininess\",\r\n        type: \"number\",\r\n        default: 30,\r\n        min: 1,\r\n        max: 100,\r\n        step: 1,\r\n    },\r\n    gradientMap: {\r\n        name: \"Gradient Map\",\r\n        type: \"select\",\r\n        default: \"none\",\r\n        options: [\"none\", \"2 Tones\", \"3 Tones\", \"4 Tones\", \"5 Tones\"],\r\n    },\r\n};\r\n\r\nexport const directSetMatParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"emissiveIntensity\",\r\n    \"metalness\",\r\n    \"roughness\",\r\n    \"shininess\",\r\n];\r\n\r\nexport const matColorParams = [\"color\", \"emissive\", \"specular\"];\r\n\r\nconst defaultMatParams = {};\r\nObject.keys(matParamsDetails).forEach(key => {\r\n    defaultMatParams[key] = matParamsDetails[key].default;\r\n});\r\n\r\nconst defaultLights = [\r\n    {\r\n        lightId: \"0\",\r\n        type: \"Ambient\",\r\n        color: \"#444444\",\r\n        enable: true,\r\n        intensity: 1,\r\n    },\r\n    {\r\n        lightId: \"1\",\r\n        type: \"Directional\",\r\n        color: \"#ffffff\",\r\n        enable: true,\r\n        position: [50, 0, 100],\r\n        intensity: 0.8,\r\n    },\r\n];\r\n\r\nexport const asciiSet = [\r\n    \" .:-=+*#%@\",\r\n    \" .'`^\\\",:;Il!i~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$\",\r\n];\r\n\r\nexport const defaultSettings = {\r\n    model: {\r\n        materialType: \"Basic\",\r\n        id: \"c100001_01\",\r\n        texture: \"c100001_01\",\r\n        eyeTexture: \"c100001_01\",\r\n        eyeIdx: \"2\",\r\n        mouthTexture: \"c100001_01\",\r\n        mouthIdx: \"2\",\r\n        weaponRight: \"\",\r\n        weaponLeft: \"\",\r\n    },\r\n    materialParams: { ...defaultMatParams },\r\n    scene: {\r\n        rotateSpeed: 0,\r\n        background: \"#cccccc\",\r\n        initCameraPosition: null,\r\n        lights: defaultLights,\r\n    },\r\n    animation: {\r\n        code: defaultAni,\r\n        timeScale: 1,\r\n    },\r\n    app: {\r\n        sideContent: \"settings\",\r\n        showSettings: true,\r\n        showAniControl: true,\r\n        antiAliasing: false,\r\n    },\r\n    outline: {\r\n        enable: true,\r\n        size: 5, // 1 -> 10\r\n        color: \"#000000\",\r\n        opacity: 1, // 0.1 -> 10%, 1-> 100%\r\n    },\r\n    capture: {\r\n        enable: false,\r\n        supportedCodecs: [],\r\n        codec: \"\",\r\n    },\r\n    ascii: {\r\n        enable: false,\r\n        charSet: asciiSet[1],\r\n        invert: false,\r\n        color: \"#00ff00\",\r\n        bgColor: \"#000000\",\r\n    },\r\n};\r\n\r\nexport const initKey = {\r\n    id: { group: \"model\", key: \"id\" },\r\n    et: { group: \"model\", key: \"eyeTexture\" },\r\n    ei: { group: \"model\", key: \"eyeIdx\" },\r\n    mt: { group: \"model\", key: \"mouthTexture\" },\r\n    mi: { group: \"model\", key: \"mouthIdx\" },\r\n    wr: { group: \"model\", key: \"weaponRight\" },\r\n    wl: { group: \"model\", key: \"weaponLeft\" },\r\n    bg: { group: \"scene\", key: \"background\" },\r\n    cam: { group: \"scene\", key: \"initCameraPosition\" },\r\n    ts: { group: \"animation\", key: \"timeScale\" },\r\n    showAC: { group: \"app\", key: \"showAniControl\" },\r\n    showSettings: { group: \"app\", key: \"showSettings\" },\r\n    showOutline: { group: \"outline\", key: \"enable\" },\r\n    AA: { group: \"app\", key: \"antiAliasing\" },\r\n    rot: { group: \"scene\", key: \"rotateSpeed\" },\r\n    cc: { group: \"animation\", key: \"code\" },\r\n};\r\n\r\nexport const MATERIALS = [\"Basic\", \"Toon\", \"Lambert\", \"Phong\", \"Standard\"];\r\n\r\nexport const materialCommonParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"useTexture\",\r\n    \"color\",\r\n];\r\n\r\nexport const materialExtraParams = {\r\n    Basic: [],\r\n    Toon: [\"emissive\", \"emissiveIntensity\", \"gradientMap\"],\r\n    Lambert: [\"emissive\", \"emissiveIntensity\"],\r\n    Phong: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"specular\",\r\n        \"shininess\",\r\n        \"flatShading\",\r\n    ],\r\n    Standard: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"metalness\",\r\n        \"roughness\",\r\n        \"flatShading\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_CODE = {\r\n    Sword: \"SWD\",\r\n    Blade: \"KAT\",\r\n    Dagger: \"DAG\",\r\n    Axe: \"AXE\",\r\n    Lance: \"LAN\",\r\n    Bow: \"BOW\",\r\n    Wand: \"ROD\",\r\n    Staff: \"CAN\",\r\n    Manacaster: \"GUN\",\r\n};\r\n\r\nexport const WEAPON_LIST = [\r\n    \"Sword\",\r\n    \"Blade\",\r\n    \"Dagger\",\r\n    \"Axe\",\r\n    \"Lance\",\r\n    \"Bow\",\r\n    \"Wand\",\r\n    \"Staff\",\r\n    \"Manacaster\",\r\n];\r\n\r\nexport const GENDER_CODE = {\r\n    Male: 21,\r\n    Female: 23,\r\n};\r\n\r\nexport const COMBO_LENGTH = {\r\n    Axe: 5,\r\n    Bow: 6,\r\n    Staff: 5,\r\n    Dagger: 6,\r\n    Blade: 5,\r\n    Lance: 5,\r\n    Wand: 5,\r\n    Sword: 5,\r\n};\r\n\r\nexport const FS_LENGTH = {\r\n    Axe: 3,\r\n    Bow: 3,\r\n    Staff: 5,\r\n    Dagger: 3,\r\n    Blade: 3,\r\n    Lance: 4,\r\n    Wand: 3,\r\n    Sword: 3,\r\n};\r\n\r\nexport const FILTERS = {\r\n    rarity: [\"3\", \"4\", \"5\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_FILTERS = {\r\n    rarity: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\", \"None\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const spFaceTextures = {\r\n    c110300_01: \"ec110300_01\",\r\n};\r\n\r\nexport const incompatibleModels = new Set([\r\n    \"c100007_01\",\r\n    \"c100007_05\",\r\n    \"c100007_09\",\r\n    \"c100034_01\",\r\n    \"c100036_01\",\r\n    \"c100037_01\",\r\n    \"c100041_01\",\r\n]);\r\n\r\nexport const commonBG = {\r\n    green: \"#00ff00\",\r\n    black: \"#000000\",\r\n    grey: \"#cccccc\",\r\n    white: \"#ffffff\",\r\n};\r\n\r\nexport const CAM_PARAMS = {\r\n    angle: 45,\r\n    far: 300,\r\n    near: 0.01,\r\n};\r\n\r\nexport const cameraPositions = {\r\n    c: [0, 0.5, 1.5],\r\n    d: [3, 0.5, 6],\r\n    w: [2, 0, 0],\r\n    b: [1, 0.5, 6],\r\n    e: [1, 1, 4],\r\n    h: [1, 0.5, 3],\r\n    o: [0, 0.5, 8],\r\n    r: [3, 3, 20],\r\n\r\n    c100034_01: [0, 0.5, 1.75],\r\n    d210078_01: [3, 3, 20],\r\n    d210114_01: [3, 3, 20],\r\n    h0010001: [6, 0.5, 8],\r\n    h0010001_02: [2, 0, 0],\r\n    h0040101: [1, 0.5, 4],\r\n    r0070401: [30, 30, 100],\r\n    r0080401: [1, 2, 5],\r\n\r\n    smith: [1, 1, 2],\r\n};\r\n\r\nexport const controlsPositions = {\r\n    c: [0, 0.5, 0],\r\n    d: [0, 1, 0],\r\n    w: [0, 0, 0],\r\n    b: [0, 1, 0],\r\n    e: [0, 0.5, 0],\r\n    h: [0, 1, 0],\r\n    o: [0, 0, 0],\r\n    r: [0, 3, 0],\r\n\r\n    d210078_01: [0, 3, 0],\r\n    d210114_01: [0, 3, 0],\r\n    h0010001_02: [0, 3, 0],\r\n    r0070401: [0, 20, 0],\r\n    r0080401: [0, 2, 0],\r\n\r\n    smith: [0, 0.5, 0],\r\n};\r\n\r\nexport const idxOffsets = {\r\n    face1: { x: 2, y: 1 },\r\n    face2: { x: 0, y: 0 },\r\n    face3: { x: 1, y: 0 },\r\n    face4: { x: 2, y: 0 },\r\n    face5: { x: 3, y: 0 },\r\n    face6: { x: 0, y: -1 },\r\n    face7: { x: 1, y: -1 },\r\n    face8: { x: 2, y: -1 },\r\n    face9: { x: 3, y: -1 },\r\n};\r\n\r\nexport const aniModList = {\r\n    ts: { key: \"timeScale\", defaultValue: 1 },\r\n    r: { key: \"repetitions\", defaultValue: 1 },\r\n};\r\n\r\nexport const videoCodecs = [\r\n    \"video/webm;codecs=h264\",\r\n    \"video/webm;codecs=vp9\",\r\n    \"video/webm;codecs=vp8\",\r\n    \"video/webm\",\r\n];\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_WIDTH, DRAWER_BGCOLOR } from \"../consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst drawerWidth = DRAWER_WIDTH;\r\nconst drawerBG = DRAWER_BGCOLOR;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"block\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        overflowY: \"scroll\",\r\n    },\r\n    drawerPaper: {\r\n        alignItems: \"center\",\r\n        backgroundColor: drawerBG,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        width: drawerWidth,\r\n        \"& button\": {\r\n            marginBottom: \"0.2rem\",\r\n        },\r\n    },\r\n    content: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        padding: 0,\r\n    },\r\n    openSidebarButton: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        margin: \"2rem\",\r\n        opacity: \"0.5\",\r\n        borderRadius: \"0.25rem\",\r\n        transition: \"0.5s all ease-in-out\",\r\n        backgroundColor: \"#cccccc\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            opacity: \"1\",\r\n        },\r\n    },\r\n    loadingMsg: {\r\n        position: \"absolute\",\r\n        zIndex: \"9999\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"white\",\r\n        fontSize: \"x-large\",\r\n        backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","export default __webpack_public_path__ + \"static/media/Rose-Petals.bc11ecc7.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}