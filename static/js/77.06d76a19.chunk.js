(this["webpackJsonpdl-model"]=this["webpackJsonpdl-model"]||[]).push([[77],{494:function(n,t,e){"use strict";e.r(t),e.d(t,"USDZExporter",(function(){return u}));var a=e(8),r=e.n(a),o=e(15),i=e(0),c=e(2),s=e(66),u=function(){function n(){Object(i.a)(this,n)}return Object(c.a)(n,[{key:"parse",value:function(){var n=Object(o.a)(r.a.mark((function n(t){var e,a,o,i,c,u,f,m,v,g,x,_,y;return r.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:"model.usda",(e={})["model.usda"]=null,a='#usda 1.0\n(\n    customLayerData = {\n        string creator = "Three.js USDZExporter"\n    }\n    metersPerUnit = 1\n    upAxis = "Y"\n)\n\n',o={},i={},t.traverseVisible((function(n){if(n.isMesh&&n.material.isMeshStandardMaterial){var t=n.geometry,r=n.material,i="geometries/Geometry_"+t.id+".usd";if(!(i in e)){var c=h(t);e[i]=p(c)}r.uuid in o||(o[r.uuid]=r),a+=d(n,t,r)}})),a+=M(o,i),e["model.usda"]=s.strToU8(a),a=null,n.t0=r.a.keys(i);case 11:if((n.t1=n.t0()).done){n.next=20;break}return c=n.t1.value,u=i[c],f=c.split("_")[1],n.next=17,l(u.image,f);case 17:e["textures/Texture_"+c+".jpg"]=n.sent,n.next=11;break;case 20:for(v in m=0,e)g=e[v],x=34+v.length,4!==(_=63&(m+=x))&&(y=new Uint8Array(64-_),e[v]=[g,{extra:{12345:y}}]),m=g.length;return n.abrupt("return",s.zipSync(e,{level:0}));case 23:case"end":return n.stop()}}),n)})));return function(t){return n.apply(this,arguments)}}()}]),n}();function l(n,t){return f.apply(this,arguments)}function f(){return(f=Object(o.a)(r.a.mark((function n(t,e){var a,o,i,c;return r.a.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!("undefined"!==typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!==typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!==typeof OffscreenCanvas&&t instanceof OffscreenCanvas||"undefined"!==typeof ImageBitmap&&t instanceof ImageBitmap)){n.next=16;break}return a=1024/Math.max(t.width,t.height),(o=document.createElement("canvas")).width=t.width*Math.min(1,a),o.height=t.height*Math.min(1,a),(i=o.getContext("2d")).drawImage(t,0,0,o.width,o.height),void 0!==e&&(i.globalCompositeOperation="multiply",i.fillStyle="#".concat(e),i.fillRect(0,0,o.width,o.height)),n.next=10,new Promise((function(n){return o.toBlob(n,"image/jpeg",1)}));case 10:return c=n.sent,n.t0=Uint8Array,n.next=14,c.arrayBuffer();case 14:return n.t1=n.sent,n.abrupt("return",new n.t0(n.t1));case 16:case"end":return n.stop()}}),n)})))).apply(this,arguments)}function p(n){var t='#usda 1.0\n(\n    customLayerData = {\n        string creator = "Three.js USDZExporter"\n    }\n    metersPerUnit = 1\n    upAxis = "Y"\n)\n\n';return t+=n,s.strToU8(t)}function d(n,t,e){var a="Object_"+n.id,r=function(n){var t=n.elements;return"( ".concat(m(t,0),", ").concat(m(t,4),", ").concat(m(t,8),", ").concat(m(t,12)," )")}(n.matrixWorld);return'def Xform "'.concat(a,'" (\n    prepend references = @./geometries/Geometry_').concat(t.id,".usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ").concat(r,'\n    uniform token[] xformOpOrder = ["xformOp:transform"]\n\n    rel material:binding = </Materials/Material_').concat(e.id,">\n}\n\n")}function m(n,t){return"(".concat(n[t+0],", ").concat(n[t+1],", ").concat(n[t+2],", ").concat(n[t+3],")")}function h(n){var t=function(n){var t="Geometry",e=n.attributes,a=e.position.count;return'\n    def Mesh "'.concat(t,'"\n    {\n        int[] faceVertexCounts = [').concat(function(n){var t=null!==n.index?n.index.array.length:n.attributes.position.count;return Array(t/3).fill(3).join(", ")}(n),"]\n        int[] faceVertexIndices = [").concat(function(n){if(null!==n.index)return n.index.array.join(", ");for(var t=[],e=n.attributes.position.count,a=0;a<e;a++)t.push(a);return t.join(", ")}(n),"]\n        normal3f[] normals = [").concat(v(e.normal,a),'] (\n            interpolation = "vertex"\n        )\n        point3f[] points = [').concat(v(e.position,a),"]\n        float2[] primvars:st = [").concat(function(n,t){if(void 0===n)return console.warn("USDZExporter: UVs missing."),Array(t).fill("(0, 0)").join(", ");for(var e=[],a=n.array,r=0;r<a.length;r+=2)e.push("(".concat(a[r+0].toPrecision(7),", ").concat(1-a[r+1].toPrecision(7),")"));return e.join(", ")}(e.uv,a),'] (\n            interpolation = "vertex"\n        )\n        uniform token subdivisionScheme = "none"\n    }\n')}(n);return'\ndef "Geometry"\n{\n  '.concat(t,"\n}\n")}function v(n,t){if(void 0===n)return console.warn("USDZExporter: Normals missing."),Array(t).fill("(0, 0, 0)").join(", ");for(var e=[],a=n.array,r=0;r<a.length;r+=3)e.push("(".concat(a[r+0].toPrecision(7),", ").concat(a[r+1].toPrecision(7),", ").concat(a[r+2].toPrecision(7),")"));return e.join(", ")}function M(n,t){var e=[];for(var a in n){var r=n[a];e.push(g(r,t))}return'def "Materials"\n{\n'.concat(e.join(""),"\n}\n\n")}function g(n,t){var e="            ",a=[],r=[];function o(e,a,r){var o=e.id+(r?"_"+r.getHexString():"");return t[o]=e,'\n        def Shader "Transform2d_'.concat(a,'" (\n            sdrMetadata = {\n                string role = "math"\n            }\n        )\n        {\n            uniform token info:id = "UsdTransform2d"\n            float2 inputs:in.connect = </Materials/Material_').concat(n.id,"/uvReader_st.outputs:result>\n            float2 inputs:scale = ").concat(_(e.repeat),"\n            float2 inputs:translation = ").concat(_(e.offset),'\n            float2 outputs:result\n        }\n\n        def Shader "Texture_').concat(e.id,"_").concat(a,'"\n        {\n            uniform token info:id = "UsdUVTexture"\n            asset inputs:file = @textures/Texture_').concat(o,".jpg@\n            float2 inputs:st.connect = </Materials/Material_").concat(n.id,"/Transform2d_").concat(a,'.outputs:result>\n            token inputs:wrapS = "repeat"\n            token inputs:wrapT = "repeat"\n            float outputs:r\n            float outputs:g\n            float outputs:b\n            float3 outputs:rgb\n        }')}return null!==n.map?(a.push("".concat(e,"color3f inputs:diffuseColor.connect = </Materials/Material_").concat(n.id,"/Texture_").concat(n.map.id,"_diffuse.outputs:rgb>")),r.push(o(n.map,"diffuse",n.color))):a.push("".concat(e,"color3f inputs:diffuseColor = ").concat(x(n.color))),null!==n.emissiveMap?(a.push("".concat(e,"color3f inputs:emissiveColor.connect = </Materials/Material_").concat(n.id,"/Texture_").concat(n.emissiveMap.id,"_emissive.outputs:rgb>")),r.push(o(n.emissiveMap,"emissive"))):n.emissive.getHex()>0&&a.push("".concat(e,"color3f inputs:emissiveColor = ").concat(x(n.emissive))),null!==n.normalMap&&(a.push("".concat(e,"normal3f inputs:normal.connect = </Materials/Material_").concat(n.id,"/Texture_").concat(n.normalMap.id,"_normal.outputs:rgb>")),r.push(o(n.normalMap,"normal"))),null!==n.aoMap&&(a.push("".concat(e,"float inputs:occlusion.connect = </Materials/Material_").concat(n.id,"/Texture_").concat(n.aoMap.id,"_occlusion.outputs:r>")),r.push(o(n.aoMap,"occlusion"))),null!==n.roughnessMap?(a.push("".concat(e,"float inputs:roughness.connect = </Materials/Material_").concat(n.id,"/Texture_").concat(n.roughnessMap.id,"_roughness.outputs:g>")),r.push(o(n.roughnessMap,"roughness"))):a.push("".concat(e,"float inputs:roughness = ").concat(n.roughness)),null!==n.metalnessMap?(a.push("".concat(e,"float inputs:metallic.connect = </Materials/Material_").concat(n.id,"/Texture_").concat(n.metalnessMap.id,"_metallic.outputs:b>")),r.push(o(n.metalnessMap,"metallic"))):a.push("".concat(e,"float inputs:metallic = ").concat(n.metalness)),a.push("".concat(e,"float inputs:opacity = ").concat(n.opacity)),'\n    def Material "Material_'.concat(n.id,'"\n    {\n        def Shader "PreviewSurface"\n        {\n            uniform token info:id = "UsdPreviewSurface"\n').concat(a.join("\n"),"\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n\n        token outputs:surface.connect = </Materials/Material_").concat(n.id,'/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = "st"\n\n        def Shader "uvReader_st"\n        {\n            uniform token info:id = "UsdPrimvarReader_float2"\n            token inputs:varname.connect = </Materials/Material_').concat(n.id,".inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n\n").concat(r.join("\n"),"\n\n    }\n")}function x(n){return"(".concat(n.r,", ").concat(n.g,", ").concat(n.b,")")}function _(n){return"(".concat(n.x,", ").concat(n.y,")")}}}]);
//# sourceMappingURL=77.06d76a19.chunk.js.map