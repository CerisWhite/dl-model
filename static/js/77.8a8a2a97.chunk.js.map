{"version":3,"sources":["../node_modules/three/examples/jsm/exporters/USDZExporter.js"],"names":["USDZExporter","scene","a","output","materials","textures","traverse","object","isMesh","geometry","material","uuid","map","normalMap","aoMap","roughnessMap","metalnessMap","emissiveMap","buildXform","buildMesh","buildMaterials","buildTextures","files","fflate","texture","imgToU8","image","id","filename","offset","file","headerSize","length","offsetMod64","padding","Uint8Array","extra","12345","level","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","canvas","document","createElement","min","getContext","drawImage","Promise","resolve","toBlob","blob","arrayBuffer","define","name","transform","matrix","array","elements","buildMatrixRow","buildMatrix","matrixWorld","attributes","count","position","console","warn","index","Array","fill","join","buildMeshVertexCount","i","push","buildMeshVertexIndices","buildVector3Array","normal","attribute","undefined","data","toPrecision","buildVector2Array","uv","buildMaterial","pad","parameters","buildColor","color","emissive","getHex","roughness","metalness","buildTexture","r","g","b"],"mappings":"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","file":"static/js/77.8a8a2a97.chunk.js","sourcesContent":["import * as fflate from '../libs/fflate.module.js';\n\nclass USDZExporter {\n\n\tasync parse( scene ) {\n\n\t\tlet output = buildHeader();\n\n\t\tconst materials = {};\n\t\tconst textures = {};\n\n\t\tscene.traverse( ( object ) => {\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tconst geometry = object.geometry;\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t\tif ( material.map !== null ) textures[ material.map.uuid ] = material.map;\n\t\t\t\tif ( material.normalMap !== null ) textures[ material.normalMap.uuid ] = material.normalMap;\n\t\t\t\tif ( material.aoMap !== null ) textures[ material.aoMap.uuid ] = material.aoMap;\n\t\t\t\tif ( material.roughnessMap !== null ) textures[ material.roughnessMap.uuid ] = material.roughnessMap;\n\t\t\t\tif ( material.metalnessMap !== null ) textures[ material.metalnessMap.uuid ] = material.metalnessMap;\n\t\t\t\tif ( material.emissiveMap !== null ) textures[ material.emissiveMap.uuid ] = material.emissiveMap;\n\n\t\t\t\toutput += buildXform( object, buildMesh( geometry, material ) );\n\n\t\t\t}\n\n\t\t} );\n\n\t\toutput += buildMaterials( materials );\n\t\toutput += buildTextures( textures );\n\n\t\tconst files = { 'model.usda': fflate.strToU8( output ) };\n\n\t\tfor ( const uuid in textures ) {\n\n\t\t\tconst texture = textures[ uuid ];\n\t\t\tfiles[ 'textures/Texture_' + texture.id + '.jpg' ] = await imgToU8( texture.image );\n\n\t\t}\n\n\t\t// 64 byte alignment\n\t\t// https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n\t\tlet offset = 0;\n\n\t\tfor ( const filename in files ) {\n\n\t\t\tconst file = files[ filename ];\n\t\t\tconst headerSize = 34 + filename.length;\n\n\t\t\toffset += headerSize;\n\n\t\t\tconst offsetMod64 = offset & 63;\n\n\t\t\tif ( offsetMod64 !== 4 ) {\n\n\t\t\t\tconst padLength = 64 - offsetMod64;\n\t\t\t\tconst padding = new Uint8Array( padLength );\n\n\t\t\t\tfiles[ filename ] = [ file, { extra: { 12345: padding } } ];\n\n\t\t\t}\n\n\t\t\toffset = file.length;\n\n\t\t}\n\n\t\treturn fflate.zipSync( files, { level: 0 } );\n\n\t}\n\n}\n\nasync function imgToU8( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\tconst scale = 1024 / Math.max( image.width, image.height );\n\n\t\tconst canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width * Math.min( 1, scale );\n\t\tcanvas.height = image.height * Math.min( 1, scale );\n\n\t\tconst context = canvas.getContext( '2d' );\n\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\tconst blob = await new Promise( resolve => canvas.toBlob( resolve, 'image/jpeg', 1 ) );\n\t\treturn new Uint8Array( await blob.arrayBuffer() );\n\n\t}\n\n}\n\n//\n\nconst PRECISION = 7;\n\nfunction buildHeader() {\n\n\treturn `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n\n`;\n\n}\n\n// Xform\n\nfunction buildXform( object, define ) {\n\n\tconst name = 'Object_' + object.id;\n\tconst transform = buildMatrix( object.matrixWorld );\n\n\treturn `def Xform \"${ name }\"\n{\n    matrix4d xformOp:transform = ${ transform }\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n    ${ define }\n}\n\n`;\n\n}\n\nfunction buildMatrix( matrix ) {\n\n\tconst array = matrix.elements;\n\n\treturn `( ${ buildMatrixRow( array, 0 ) }, ${ buildMatrixRow( array, 4 ) }, ${ buildMatrixRow( array, 8 ) }, ${ buildMatrixRow( array, 12 ) } )`;\n\n}\n\nfunction buildMatrixRow( array, offset ) {\n\n\treturn `(${ array[ offset + 0 ] }, ${ array[ offset + 1 ] }, ${ array[ offset + 2 ] }, ${ array[ offset + 3 ] })`;\n\n}\n\n// Mesh\n\nfunction buildMesh( geometry, material ) {\n\n\tconst name = 'Geometry_' + geometry.id;\n\tconst attributes = geometry.attributes;\n\tconst count = attributes.position.count;\n\n\tif ( 'uv2' in attributes ) {\n\n\t\tconsole.warn( 'THREE.USDZExporter: uv2 not supported yet.' );\n\n\t}\n\n\treturn `def Mesh \"${ name }\"\n    {\n        int[] faceVertexCounts = [${ buildMeshVertexCount( geometry ) }]\n        int[] faceVertexIndices = [${ buildMeshVertexIndices( geometry ) }]\n        rel material:binding = </Materials/Material_${ material.id }>\n        normal3f[] normals = [${ buildVector3Array( attributes.normal, count )}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${ buildVector3Array( attributes.position, count )}]\n        float2[] primvars:st = [${ buildVector2Array( attributes.uv, count )}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n\n}\n\nfunction buildMeshVertexCount( geometry ) {\n\n\tconst count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n\n\treturn Array( count / 3 ).fill( 3 ).join( ', ' );\n\n}\n\nfunction buildMeshVertexIndices( geometry ) {\n\n\tif ( geometry.index !== null ) {\n\n\t\treturn geometry.index.array.join( ', ' );\n\n\t}\n\n\tconst array = [];\n\tconst length = geometry.attributes.position.count;\n\n\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\tarray.push( i );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector3Array( attribute, count ) {\n\n\tif ( attribute === undefined ) {\n\n\t\tconsole.warn( 'USDZExporter: Normals missing.' );\n\t\treturn Array( count ).fill( '(0, 0, 0)' ).join( ', ' );\n\n\t}\n\n\tconst array = [];\n\tconst data = attribute.array;\n\n\tfor ( let i = 0; i < data.length; i += 3 ) {\n\n\t\tarray.push( `(${ data[ i + 0 ].toPrecision( PRECISION ) }, ${ data[ i + 1 ].toPrecision( PRECISION ) }, ${ data[ i + 2 ].toPrecision( PRECISION ) })` );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector2Array( attribute, count ) {\n\n\tif ( attribute === undefined ) {\n\n\t\tconsole.warn( 'USDZExporter: UVs missing.' );\n\t\treturn Array( count ).fill( '(0, 0)' ).join( ', ' );\n\n\t}\n\n\tconst array = [];\n\tconst data = attribute.array;\n\n\tfor ( let i = 0; i < data.length; i += 2 ) {\n\n\t\tarray.push( `(${ data[ i + 0 ].toPrecision( PRECISION ) }, ${ 1 - data[ i + 1 ].toPrecision( PRECISION ) })` );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\n// Materials\n\nfunction buildMaterials( materials ) {\n\n\tconst array = [];\n\n\tfor ( const uuid in materials ) {\n\n\t\tconst material = materials[ uuid ];\n\n\t\tarray.push( buildMaterial( material ) );\n\n\t}\n\n\treturn `def \"Materials\"\n{\n${ array.join( '' ) }\n}\n\n`;\n\n}\n\nfunction buildMaterial( material ) {\n\n\t// https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n\n\tconst pad = '            ';\n\tconst parameters = [];\n\n\tif ( material.map !== null ) {\n\n\t\tparameters.push( `${ pad }color3f inputs:diffuseColor.connect = </Textures/Texture_${ material.map.id }.outputs:rgb>` );\n\n\t} else {\n\n\t\tparameters.push( `${ pad }color3f inputs:diffuseColor = ${ buildColor( material.color ) }` );\n\n\t}\n\n\tif ( material.emissiveMap !== null ) {\n\n\t\tparameters.push( `${ pad }color3f inputs:emissiveColor.connect = </Textures/Texture_${ material.emissiveMap.id }.outputs:rgb>` );\n\n\t} else if ( material.emissive.getHex() > 0 ) {\n\n\t\tparameters.push( `${ pad }color3f inputs:emissiveColor = ${ buildColor( material.emissive ) }` );\n\n\t}\n\n\tif ( material.normalMap !== null ) {\n\n\t\tparameters.push( `${ pad }normal3f inputs:normal.connect = </Textures/Texture_${ material.normalMap.id }.outputs:rgb>` );\n\n\t}\n\n\tif ( material.aoMap !== null ) {\n\n\t\tparameters.push( `${ pad }float inputs:occlusion.connect = </Textures/Texture_${ material.aoMap.id }.outputs:r>` );\n\n\t}\n\n\tif ( material.roughnessMap !== null ) {\n\n\t\tparameters.push( `${ pad }float inputs:roughness.connect = </Textures/Texture_${ material.roughnessMap.id }.outputs:g>` );\n\n\t} else {\n\n\t\tparameters.push( `${ pad }float inputs:roughness = ${ material.roughness }` );\n\n\t}\n\n\tif ( material.metalnessMap !== null ) {\n\n\t\tparameters.push( `${ pad }float inputs:metallic.connect = </Textures/Texture_${ material.metalnessMap.id }.outputs:b>` );\n\n\t} else {\n\n\t\tparameters.push( `${ pad }float inputs:metallic = ${ material.metalness }` );\n\n\t}\n\n\treturn `\n    def Material \"Material_${ material.id }\"\n    {\n        token outputs:surface.connect = </Materials/Material_${ material.id }/PreviewSurface.outputs:surface>\n\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${ parameters.join( '\\n' ) }\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n    }\n`;\n\n}\n\nfunction buildTextures( textures ) {\n\n\tconst array = [];\n\n\tfor ( const uuid in textures ) {\n\n\t\tconst texture = textures[ uuid ];\n\n\t\tarray.push( buildTexture( texture ) );\n\n\t}\n\n\treturn `def \"Textures\"\n{\n${ array.join( '' ) }\n}\n\n`;\n\n}\n\nfunction buildTexture( texture ) {\n\n\treturn `\n    def Shader \"Texture_${ texture.id }\"\n    {\n        uniform token info:id = \"UsdUVTexture\"\n        asset inputs:file = @textures/Texture_${ texture.id }.jpg@\n        token inputs:wrapS = \"repeat\"\n        token inputs:wrapT = \"repeat\"\n        float outputs:r\n        float outputs:g\n        float outputs:b\n        float3 outputs:rgb\n    }\n`;\n\n}\n\nfunction buildColor( color ) {\n\n\treturn `(${ color.r }, ${ color.g }, ${ color.b })`;\n\n}\n\nexport { USDZExporter };\n"],"sourceRoot":""}