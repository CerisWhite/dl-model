{"version":3,"sources":["MainPage/Display/viewers/AniViewer.js","MainPage/Display/viewers/AdvViewer.js"],"names":["AniViewer","afterMainModelLoad","saveMainModelInitState","addAnimation","afterMainModelUpdate","updateModel","prev","current","a","updateMainModel","model","updateAnimation","animation","otherUpdate","capture","enable","captureAnimation","models","main","initPos","position","clone","initRot","rotation","resetFace","props","eyeIdx","mouthIdx","beforeAddAni","aniCode","code","timeScale","disableInput","mainModel","aniList","analyzeChainCode","nAni","length","mixer","THREE","_aniIdx","addEventListener","playNextAni","aniSettings","loadAnimations","animations","aniIdx","enableInput","removeAnimation","stopAllAction","copy","mediaRecorder","stop","toggleCapture","newIdx","chunks","videoStream","canvas","captureStream","codec","MediaRecorder","mimeType","ondataavailable","event","push","data","onstop","superBuffer","Blob","type","url","URL","createObjectURL","document","createElement","style","href","download","body","appendChild","click","window","revokeObjectURL","removeChild","beforeCaptureAnimation","start","everyAnimate","dt","clock","getDelta","rotateFloor","update","faceChanges","time","faceChangeTime","shift","this","anim","action","clipAction","currentAniSettings","repetitions","setLoop","clampWhenFinished","getFaceChangesArray","map","change","currentClipDuration","setTime","duration","play","BaseViewer","SIDES","AdvViewer","initFace","addWeapons","beforeMainModelUpdate","detachAllWeapons","attachAllWeapons","prevModel","id","updateFace","updateWeapons","modelId","defaultFaceParams","mouthTexture","DEFAULT_FACE_IDX","eyeTexture","getWeaponInfo","initWeaponLoad","weaponRight","weaponLeft","Object","assign","initAllWeapons","newInfo","analyzeWeaponCode","modelInfo","modelPath","loadWeaponR","loadModel","loadWeaponL","Promise","all","materialType","matType","forEach","side","key","weapon","weaponInfo","texturePath","flipped","changeMaterial","y","Math","PI","outlineParams","outline","outlines","createOutline","attachWeapon","boneName","traverse","child","name","includes","children","add","detachWeapon","parent","remove","updateEyeTexture","currentTexture","prevTexture","applyEyeTexture","textureId","offset","calculateTextureOffset","applyEyeOffset","updateMouthTexture","applyMouthTexture","applyMouthOffset","updateFaceTexture","eyeUpdated","mouthUpdated","applyNewModelMat","updateFaceOffset","disposeItem","_eyeIdx","_mouthIdx","oldIdx","calculateIdxOffset"],"mappings":"sMAiBaA,EAAb,4MACIC,mBAAqB,WACjB,EAAKC,yBACL,EAAKC,gBAHb,EAMIC,qBAAuB,WACnB,EAAKF,yBACL,EAAKC,gBARb,EAWIE,YAXJ,uCAWkB,WAAOC,EAAMC,GAAb,SAAAC,EAAA,sEACJ,EAAKC,gBAAgBH,EAAKI,MAAOH,EAAQG,OADrC,OAEV,EAAKC,gBAAgBL,EAAKM,UAAWL,EAAQK,WAFnC,2CAXlB,0DAgBIC,YAAc,SAACP,EAAMC,GAEbA,EAAQO,QAAQC,SAAWT,EAAKQ,QAAQC,QACxC,EAAKC,oBAnBjB,EAuBId,uBAAyB,WACrB,IAAMQ,EAAQ,EAAKO,OAAOC,KAC1BR,EAAMS,QAAUT,EAAMU,SAASC,QAC/BX,EAAMY,QAAUZ,EAAMa,SAASF,SA1BvC,EAuDIG,UAAY,WAAO,IAAD,EACe,EAAKC,MAAMf,MAAhCgB,EADM,EACNA,OAAQC,EADF,EACEA,SAChB,EAAKD,OAASA,EACd,EAAKC,SAAWA,GA1DxB,EA6DIC,aAAe,WACX,EAAKJ,aA9Db,EAiEIrB,aAjEJ,sBAiEmB,wCAAAK,EAAA,yDACX,gBAAKoB,oBAAL,iBADW,EAG0B,EAAKH,MAAMb,UAAlCiB,EAHH,EAGHC,KAAeC,EAHZ,EAGYA,UAClBF,EAJM,wDAMX,EAAKG,eAECC,EAAY,EAAKhB,OAAOC,KACxBgB,EAAUC,YAAiBN,GACjC,EAAKO,KAAOF,EAAQG,OAEpBJ,EAAUK,MAAQ,IAAIC,iBAAqBN,GAC3C,EAAKK,MAAQL,EAAUK,MAEvB,EAAKE,QAAU,EACfP,EAAUK,MAAMP,UAAYA,EAC5BE,EAAUK,MAAMG,iBAAiB,WAAY,EAAKC,aAClD,EAAKC,YAAcT,EAlBR,UAoBaU,YAAeV,GApB5B,QAoBX,EAAKW,WApBM,OAuBX,EAAKC,OAAS,EACd,EAAKC,cAxBM,4CAjEnB,EA4FIC,gBAAkB,WAAO,IAAD,IACdf,EAAY,EAAKhB,OAAOC,KAC9B,UAAAe,EAAUK,aAAV,mBAAiBW,qBAAjB,iBAFoB,IAKZ9B,EAAqBc,EAArBd,QAASG,EAAYW,EAAZX,QACjBW,EAAUb,SAAS8B,KAAK/B,GACxBc,EAAUV,SAAS2B,KAAK5B,GAExB,EAAKgB,MAAQ,KACb,EAAKO,WAAa,GAClB,EAAKF,YAAc,IAvG3B,EA0GID,YAAc,WAAO,IACTN,EADQ,eACRA,KAGJ,EAAKX,MAAMX,QAAQC,QAAU,EAAKyB,UAAYJ,EAAO,IAErD,EAAKe,cAAcC,OACnB,EAAK3B,MAAM4B,iBAEf,IAAMC,GAAU,EAAKd,QAAU,GAAKJ,EACpC,EAAKU,OAASQ,GApHtB,EAuHI3C,gBAAkB,SAACL,EAAMC,GAAa,IAC1BuB,EAAoBvB,EAApBuB,KAAMC,EAAcxB,EAAdwB,UACd,GAAIzB,EAAKwB,OAASA,EAGd,OAFA,EAAKkB,uBACL,EAAK7C,eAILG,EAAKyB,YAAcA,IACnB,EAAKO,MAAMP,UAAYA,IAhInC,EAoIIf,iBAAmB,WAAO,IAAD,IAIrB,GAHA,EAAKuC,OAAS,GACd,EAAKC,YAAc,EAAKC,OAAOC,cAAc,KAExC,EAAKP,cAAe,CAAC,IACdQ,EAAU,EAAKlC,MAAMX,QAArB6C,MACR,EAAKR,cAAgB,IAAIS,cAAc,EAAKJ,YAAa,CACrDK,SAAUF,IAEd,EAAKR,cAAcW,gBAAkB,SAAAC,GAAK,OACtC,EAAKR,OAAOS,KAAKD,EAAME,OAC3B,EAAKd,cAAce,OAAS,WACxB,EAAKnB,cACL,IAAMoB,EAAc,IAAIC,KAAK,EAAKb,OAAQ,CACtCc,KAAM,eAEJC,EAAMC,IAAIC,gBAAgBL,GAC1B3D,EAAIiE,SAASC,cAAc,KACjClE,EAAEmE,MAAQ,gBACVnE,EAAEoE,KAAON,EACT9D,EAAEqE,SAAW,iBACbJ,SAASK,KAAKC,YAAYvE,GAC1BA,EAAEwE,QACFC,OAAOV,IAAIW,gBAAgBZ,GAC3BG,SAASK,KAAKK,YAAY3E,IAGlC,EAAKwB,aAAa,aAClB,gBAAKoD,8BAAL,iBAEA,EAAKtC,OAAS,EACd,EAAKK,cAAckC,SAnK3B,EAsKIC,aAAe,WAAO,IAAD,EACXC,EAAK,EAAKC,MAAMC,WAItB,IAHA,EAAKC,YAAYH,GACjB,YAAKjD,aAAL,SAAYqD,OAAOJ,GAEf,EAAKK,aAAe,EAAKA,YAAYvD,SACjB,EAAKC,MAAMuD,MACJ,EAAKC,eAAe,GACR,CACnC,EAAKA,eAAeC,QADe,MAEN,EAAKH,YAAYG,QAAtCrE,EAF2B,EAE3BA,OAAQC,EAFmB,EAEnBA,SAChB,EAAKD,OAASA,EACd,EAAKC,SAAWA,IAlLhC,mDA6Be2B,GAAS,IAAD,OACf0C,KAAKxD,QAAUc,EADA,IAGPhB,EAAU0D,KAAV1D,MACRA,EAAMW,gBAEN,IAAMgD,EAAOD,KAAKnD,WAAWS,GACvB4C,EAAS5D,EAAM6D,WAAWF,GAC1BG,EAAqBJ,KAAKrD,YAAYW,GACpCvB,EAAwCqE,EAAxCrE,UAAWsE,EAA6BD,EAA7BC,YAAaT,EAAgBQ,EAAhBR,YAEhCM,EAAOI,QAAQ/D,aAAkB8D,GACjCH,EAAOK,mBAAoB,EAC3BL,EAAOnE,UAAYA,EACnBmE,EAAOL,KAAO,EAEdG,KAAKJ,YAAcY,YAAoBZ,EAAaS,GACpDL,KAAKF,eAAiBE,KAAKJ,YAAYa,KACnC,SAAAC,GAAM,OAAK,EAAKC,oBAAsBD,EAAOb,KAAQ,OAGzDvD,EAAMsE,QAAQ,GACdZ,KAAKW,oBAAsBV,EAAKY,SAChCX,EAAOY,WApDf,GAA+BC,WAwLhB/G,O,2KC/KTgH,EAAQ,CAAC,QAAS,QAEXC,EAAb,kDACI,aAAe,IAAD,8BACV,gBAIJhH,mBAAqB,WACjB,EAAKC,yBACL,EAAKgH,WACL,EAAKC,aACL,EAAKhH,gBATK,EAYdiH,sBAAwB,WACpB,EAAKC,oBAbK,EAgBdjH,qBAAuB,WACnB,EAAKF,yBACL,EAAKgH,WACL,EAAKI,mBACL,EAAKnH,gBApBK,EAuBdE,YAvBc,uCAuBA,WAAOC,EAAMC,GAAb,iBAAAC,EAAA,yDACNF,IAASC,EADH,oDAGJgH,EAAYjH,EAAKI,MACfA,EAAUH,EAAVG,MACJ6G,EAAUC,KAAO9G,EAAM8G,GALjB,gCAMA,EAAK/G,gBAAgB8G,EAAW7G,GANhC,8BAQN,EAAK+G,WAAWF,EAAW7G,GARrB,QAUV,EAAKgH,cAAcH,EAAW7G,GAC9B,EAAKC,gBAAgBL,EAAKM,UAAWL,EAAQK,WAXnC,4CAvBA,0DAqCdsG,SAAW,WACP,IAAMS,EAAU,EAAKlG,MAAMf,MAAM8G,GAC3BI,EAAoB,CACtBC,aAAcF,EACdhG,SAAUmG,IACVC,WAAYJ,EACZjG,OAAQoG,KAEZ,EAAKL,WAAWG,EAAmB,EAAKnG,MAAMf,QA7CpC,EAgDdyG,WAhDc,sBAgDD,kCAAA3G,EAAA,6DACT,EAAKwH,gBADI,SAG+B,EAAKC,iBAHpC,0CAGFC,EAHE,KAGWC,EAHX,KAIT,EAAKlH,OAASmH,OAAOC,OAAO,EAAKpH,OAAQ,CAAEiH,cAAaC,eAJ/C,UAMH,EAAKG,iBANF,QAOT,EAAKhB,mBAPI,4CAhDC,EA0DdU,cAAgB,WAAO,IAAD,EACkB,EAAKvG,MAAMf,MAAvCwH,EADU,EACVA,YAAaC,EADH,EACGA,WACfI,EAAU,CACZL,YAAaM,YAAkBN,GAC/BC,WAAYK,YAAkBL,IAElC,EAAKM,UAAYL,OAAOC,OAAO,EAAKI,UAAWF,IAhErC,EAmEdN,eAAiB,WAAO,IAAD,IACbC,EAAW,UAAG,EAAKO,UAAUP,mBAAlB,aAAG,EAA4BQ,UAC1CC,EAAcC,YAAUV,GAExBC,EAAU,UAAG,EAAKM,UAAUN,kBAAlB,aAAG,EAA2BO,UACxCG,EAAcD,YAAUT,GAE9B,OAAOW,QAAQC,IAAI,CAACJ,EAAaE,KA1EvB,EA6EdP,eA7Ec,sBA6EG,4BAAA9H,EAAA,sDACPwI,EAAe,EAAKC,QAC1BjC,EAAMkC,SAAQ,SAAAC,GACV,IAAMC,EAAG,gBAAYD,GACfE,EAAS,EAAKpI,OAAOmI,GAC3B,GAAKC,EAAL,CAEA,IAAMC,EAAa,EAAKb,UAAUW,GAC1BG,EAAyBD,EAAzBC,YAAaC,EAAYF,EAAZE,QACrBC,YAAeJ,EAAQ,CAAEL,eAAcO,gBACnCC,IAASH,EAAO9H,SAASmI,GAAKC,KAAKC,IAEvC,IAAMC,EAAgB,EAAKpI,MAAMqI,QACjC,EAAKC,SAASX,GAAOY,YAAcX,EAAQQ,OAblC,2CA7EH,EA8FdI,aAAe,SAACZ,EAAQF,GACpB,IAAMe,EAAQ,iBAAaf,EAAK,IAChC,EAAKlI,OAAOC,KAAKiJ,UAAS,SAAAC,GAClBA,EAAMC,KAAKC,SAASJ,IAAuC,IAA1BE,EAAMG,SAASlI,QAChD+H,EAAMI,IAAInB,OAlGR,EAuGd/B,iBAAmB,WACfN,EAAMkC,SAAQ,SAAAC,GACV,IAAMC,EAAG,gBAAYD,GACfE,EAAS,EAAKpI,OAAOmI,GACtBC,GAEL,EAAKY,aAAaZ,EAAQF,OA7GpB,EAiHdsB,aAAe,SAAAtB,GACX,IAAMC,EAAG,gBAAYD,GACfzI,EAAQ,EAAKO,OAAOmI,GACrB1I,GAELA,EAAMgK,OAAOC,OAAOjK,IAtHV,EAyHd2G,iBAAmB,kBAAML,EAAMkC,SAAQ,SAAAC,GAAI,OAAI,EAAKsB,aAAatB,OAzHnD,EA2HdyB,iBAAmB,SAACtK,EAAMC,GACtB,IAAMsK,EAAiBtK,EAAQwH,WACzB+C,EAAcxK,EAAKyH,WAEzB,GAAI8C,IAAmBC,EAAa,OAAO,EAE3C,IAAM9B,EAAe,EAAKC,QAC1B8B,YAAgB,EAAK9J,OAAOC,KAAM,CAC9B8H,eACAgC,UAAWH,IAEf,IAAMI,EAASC,YAAuBL,EAAgBC,GAGtD,OAFAK,YAAe,EAAKlK,OAAOC,KAAM+J,IAE1B,GAzIG,EAwJdG,mBAAqB,SAAC9K,EAAMC,GACxB,IAAMsK,EAAiBtK,EAAQsH,aACzBiD,EAAcxK,EAAKuH,aAEzB,GAAIgD,IAAmBC,EAAa,OAAO,EAE3C,IAAM9B,EAAe,EAAKC,QAC1BoC,YAAkB,EAAKpK,OAAOC,KAAM,CAChC8H,eACAgC,UAAWH,IAEf,IAAMI,EAASC,YAAuBL,EAAgBC,GAGtD,OAFAQ,YAAiB,EAAKrK,OAAOC,KAAM+J,IAE5B,GAtKG,EAqLdM,kBAAoB,SAACjL,EAAMC,GACvB,IAAMiL,EAAa,EAAKZ,iBAAiBtK,EAAMC,GACzCkL,EAAe,EAAKL,mBAAmB9K,EAAMC,GACnD,GAAIiL,GAAcC,EAAc,CAC5B,IAAMxJ,EAAY,EAAKhB,OAAOC,KAC9B,EAAKwK,iBAAiBzJ,KA1LhB,EA8Ld0J,iBAAmB,YAA2B,IAAxBjK,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAC1B,EAAKD,OAASA,EACd,EAAKC,SAAWA,GAhMN,EAmMd8F,WAAa,SAACnH,EAAMC,GAChB,EAAKgL,kBAAkBjL,EAAMC,GAC7B,EAAKoL,iBAAiBpL,IArMZ,EAwMdmH,cAxMc,uCAwME,WAAOpH,EAAMC,GAAb,SAAAC,EAAA,sDACZ,EAAKwB,eACLgF,EAAMkC,QAAN,uCAAc,WAAMC,GAAN,6BAAA3I,EAAA,yDACJ4I,EADI,gBACWD,GACjB7I,EAAK8I,KAAS7I,EAAQ6I,GAFhB,oDAKV,EAAKqB,aAAatB,GAClByC,YAAY,EAAK3K,OAAOmI,IAGnB7I,EAAQ6I,GATH,wBAUN,EAAKnI,OAAOmI,GAAO,KACnB,EAAKX,UAAUW,GAAO,GAEtB,EAAKW,SAASX,GAAO,KAbf,kCAkBV,EAAKX,UAAUW,GAAOZ,YAAkBjI,EAAQ6I,IAlBtC,EAmBkC,EAAKX,UAAUW,GAAnDV,EAnBE,EAmBFA,UAAWa,EAnBT,EAmBSA,YAAaC,EAnBtB,EAmBsBA,QAnBtB,UAsBUZ,YAAUF,GAtBpB,QAsBJhI,EAtBI,OAuBV,EAAKO,OAAOmI,GAAO1I,EAGbsI,EAAe,EAAKC,QAC1BQ,YAAe/I,EAAO,CAAEsI,eAAcO,gBACtC,EAAKmC,iBAAiBhL,GAElB8I,IACA9I,EAAMa,SAASmI,GAAKC,KAAKC,IAGvBC,EAAgB,EAAKpI,MAAMqI,QACjC,EAAKC,SAASX,GAAOY,YAActJ,EAAOmJ,GAE1C,EAAKI,aAAavJ,EAAOyI,GArCf,4CAAd,uDAuCA,EAAKpG,cAzCO,2CAxMF,wDAEV,EAAK8I,QAAU,EAAKC,UAAYhE,IAFtB,EADlB,iDA6IexE,GACP,GAAKA,EAAL,CAEA,IAAMyI,EAAS/F,KAAK6F,QACpB,GAAIvI,IAAWyI,EAAf,CAEA,IAAMd,EAASe,YAAmB1I,EAAQyI,GAC1CZ,YAAenF,KAAK/E,OAAOC,KAAM+J,GAEjCjF,KAAK6F,QAAUvI,MAtJvB,6BA0KiBA,GACT,GAAKA,EAAL,CAEA,IAAMyI,EAAS/F,KAAK8F,UACpB,GAAIxI,IAAWyI,EAAf,CAEA,IAAMd,EAASe,YAAmB1I,EAAQyI,GAC1CT,YAAiBtF,KAAK/E,OAAOC,KAAM+J,GAEnCjF,KAAK8F,UAAYxI,QAnLzB,GAA+BtD,KAsPhBiH","file":"static/js/48.2b9e0d40.chunk.js","sourcesContent":["/* \r\n################################################\r\n# Extension of Base Viewer that adds:\r\n#    - Animation\r\n#    - Recording Animation\r\n################################################  \r\n*/\r\n\r\nimport BaseViewer from \"./BaseViewer\";\r\n\r\nimport * as THREE from \"three\";\r\nimport {\r\n    analyzeChainCode,\r\n    loadAnimations,\r\n    getFaceChangesArray,\r\n} from \"helpers/viewerHelpers\";\r\n\r\nexport class AniViewer extends BaseViewer {\r\n    afterMainModelLoad = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        await this.updateMainModel(prev.model, current.model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    otherUpdate = (prev, current) => {\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n    };\r\n\r\n    saveMainModelInitState = () => {\r\n        const model = this.models.main;\r\n        model.initPos = model.position.clone();\r\n        model.initRot = model.rotation.clone();\r\n    };\r\n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n\r\n        const { mixer } = this;\r\n        mixer.stopAllAction();\r\n\r\n        const anim = this.animations[newIdx];\r\n        const action = mixer.clipAction(anim);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        this.faceChanges = getFaceChangesArray(faceChanges, repetitions);\r\n        this.faceChangeTime = this.faceChanges.map(\r\n            change => (this.currentClipDuration * change.time) / 100\r\n        );\r\n\r\n        mixer.setTime(0);\r\n        this.currentClipDuration = anim.duration;\r\n        action.play();\r\n    }\r\n\r\n    resetFace = () => {\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    beforeAddAni = () => {\r\n        this.resetFace();\r\n    };\r\n\r\n    addAnimation = async () => {\r\n        this.beforeAddAni?.();\r\n\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        if (!aniCode) return;\r\n\r\n        this.disableInput();\r\n\r\n        const mainModel = this.models.main;\r\n        const aniList = analyzeChainCode(aniCode);\r\n        this.nAni = aniList.length;\r\n\r\n        mainModel.mixer = new THREE.AnimationMixer(mainModel);\r\n        this.mixer = mainModel.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        mainModel.mixer.timeScale = timeScale; // Global timeScale\r\n        mainModel.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = aniList;\r\n\r\n        this.animations = await loadAnimations(aniList);\r\n\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.enableInput();\r\n    };\r\n\r\n    removeAnimation = () => {\r\n        const mainModel = this.models.main;\r\n        mainModel.mixer?.stopAllAction?.();\r\n\r\n        // Reset position and rotation to initial value\r\n        const { initPos, initRot } = mainModel;\r\n        mainModel.position.copy(initPos);\r\n        mainModel.rotation.copy(initRot);\r\n\r\n        this.mixer = null;\r\n        this.animations = [];\r\n        this.aniSettings = [];\r\n    };\r\n\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            this.removeAnimation();\r\n            this.addAnimation();\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            const { codec } = this.props.capture;\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.enableInput();\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                const url = URL.createObjectURL(superBuffer);\r\n                const a = document.createElement(\"a\");\r\n                a.style = \"display: none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n            };\r\n        }\r\n        this.disableInput(\"Recording\");\r\n        this.beforeCaptureAnimation?.();\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    everyAnimate = () => {\r\n        const dt = this.clock.getDelta();\r\n        this.rotateFloor(dt);\r\n        this.mixer?.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length) {\r\n            const elapsedTime = this.mixer.time;\r\n            const nextFaceChangeTime = this.faceChangeTime[0];\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                this.faceChangeTime.shift();\r\n                const { eyeIdx, mouthIdx } = this.faceChanges.shift();\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default AniViewer;\r\n","/* \r\n################################################\r\n# Extension of Ani Viewer that adds:\r\n#    - Weapons\r\n#    - Face Texture\r\n#    - Face offset\r\n################################################  \r\n*/\r\n\r\nimport AniViewer from \"./AniViewer\";\r\n\r\nimport { DEFAULT_FACE_IDX } from \"helpers/consts\";\r\nimport {\r\n    calculateTextureOffset,\r\n    calculateIdxOffset,\r\n    analyzeWeaponCode,\r\n    loadModel,\r\n    applyEyeTexture,\r\n    applyMouthTexture,\r\n    applyEyeOffset,\r\n    applyMouthOffset,\r\n    disposeItem,\r\n    createOutline,\r\n    changeMaterial,\r\n} from \"helpers/viewerHelpers\";\r\n\r\nconst SIDES = [\"Right\", \"Left\"];\r\n\r\nexport class AdvViewer extends AniViewer {\r\n    constructor() {\r\n        super();\r\n        this._eyeIdx = this._mouthIdx = DEFAULT_FACE_IDX;\r\n    }\r\n\r\n    afterMainModelLoad = () => {\r\n        this.saveMainModelInitState();\r\n        this.initFace();\r\n        this.addWeapons();\r\n        this.addAnimation();\r\n    };\r\n\r\n    beforeMainModelUpdate = () => {\r\n        this.detachAllWeapons();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.saveMainModelInitState();\r\n        this.initFace();\r\n        this.attachAllWeapons();\r\n        this.addAnimation();\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const prevModel = prev.model;\r\n        const { model } = current;\r\n        if (prevModel.id !== model.id) {\r\n            await this.updateMainModel(prevModel, model);\r\n        } else {\r\n            this.updateFace(prevModel, model);\r\n        }\r\n        this.updateWeapons(prevModel, model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    initFace = () => {\r\n        const modelId = this.props.model.id;\r\n        const defaultFaceParams = {\r\n            mouthTexture: modelId,\r\n            mouthIdx: DEFAULT_FACE_IDX,\r\n            eyeTexture: modelId,\r\n            eyeIdx: DEFAULT_FACE_IDX,\r\n        };\r\n        this.updateFace(defaultFaceParams, this.props.model);\r\n    };\r\n\r\n    addWeapons = async () => {\r\n        this.getWeaponInfo();\r\n\r\n        const [weaponRight, weaponLeft] = await this.initWeaponLoad();\r\n        this.models = Object.assign(this.models, { weaponRight, weaponLeft });\r\n\r\n        await this.initAllWeapons();\r\n        this.attachAllWeapons();\r\n    };\r\n\r\n    getWeaponInfo = () => {\r\n        const { weaponRight, weaponLeft } = this.props.model;\r\n        const newInfo = {\r\n            weaponRight: analyzeWeaponCode(weaponRight),\r\n            weaponLeft: analyzeWeaponCode(weaponLeft),\r\n        };\r\n        this.modelInfo = Object.assign(this.modelInfo, newInfo);\r\n    };\r\n\r\n    initWeaponLoad = () => {\r\n        const weaponRight = this.modelInfo.weaponRight?.modelPath;\r\n        const loadWeaponR = loadModel(weaponRight);\r\n\r\n        const weaponLeft = this.modelInfo.weaponLeft?.modelPath;\r\n        const loadWeaponL = loadModel(weaponLeft);\r\n\r\n        return Promise.all([loadWeaponR, loadWeaponL]);\r\n    };\r\n\r\n    initAllWeapons = async () => {\r\n        const materialType = this.matType;\r\n        SIDES.forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weapon = this.models[key];\r\n            if (!weapon) return;\r\n\r\n            const weaponInfo = this.modelInfo[key];\r\n            const { texturePath, flipped } = weaponInfo;\r\n            changeMaterial(weapon, { materialType, texturePath });\r\n            if (flipped) weapon.rotation.y += Math.PI;\r\n\r\n            const outlineParams = this.props.outline;\r\n            this.outlines[key] = createOutline(weapon, outlineParams);\r\n        });\r\n    };\r\n\r\n    attachWeapon = (weapon, side) => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name.includes(boneName) && child.children.length === 0) {\r\n                child.add(weapon);\r\n            }\r\n        });\r\n    };\r\n\r\n    attachAllWeapons = () => {\r\n        SIDES.forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weapon = this.models[key];\r\n            if (!weapon) return;\r\n\r\n            this.attachWeapon(weapon, side);\r\n        });\r\n    };\r\n\r\n    detachWeapon = side => {\r\n        const key = `weapon${side}`;\r\n        const model = this.models[key];\r\n        if (!model) return;\r\n\r\n        model.parent.remove(model);\r\n    };\r\n\r\n    detachAllWeapons = () => SIDES.forEach(side => this.detachWeapon(side));\r\n\r\n    updateEyeTexture = (prev, current) => {\r\n        const currentTexture = current.eyeTexture;\r\n        const prevTexture = prev.eyeTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const materialType = this.matType;\r\n        applyEyeTexture(this.models.main, {\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyEyeOffset(this.models.main, offset);\r\n\r\n        return true;\r\n    };\r\n\r\n    set eyeIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._eyeIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyEyeOffset(this.models.main, offset);\r\n\r\n        this._eyeIdx = newIdx;\r\n    }\r\n\r\n    updateMouthTexture = (prev, current) => {\r\n        const currentTexture = current.mouthTexture;\r\n        const prevTexture = prev.mouthTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const materialType = this.matType;\r\n        applyMouthTexture(this.models.main, {\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyMouthOffset(this.models.main, offset);\r\n\r\n        return true;\r\n    };\r\n\r\n    set mouthIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._mouthIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyMouthOffset(this.models.main, offset);\r\n\r\n        this._mouthIdx = newIdx;\r\n    }\r\n\r\n    updateFaceTexture = (prev, current) => {\r\n        const eyeUpdated = this.updateEyeTexture(prev, current);\r\n        const mouthUpdated = this.updateMouthTexture(prev, current);\r\n        if (eyeUpdated || mouthUpdated) {\r\n            const mainModel = this.models.main;\r\n            this.applyNewModelMat(mainModel);\r\n        }\r\n    };\r\n\r\n    updateFaceOffset = ({ eyeIdx, mouthIdx }) => {\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    updateFace = (prev, current) => {\r\n        this.updateFaceTexture(prev, current);\r\n        this.updateFaceOffset(current);\r\n    };\r\n\r\n    updateWeapons = async (prev, current) => {\r\n        this.disableInput();\r\n        SIDES.forEach(async side => {\r\n            const key = `weapon${side}`;\r\n            if (prev[key] === current[key]) return;\r\n\r\n            // remove old weapon\r\n            this.detachWeapon(side);\r\n            disposeItem(this.models[key]); // dispose old weapon\r\n\r\n            // if current weapon is empty (weapon removed)\r\n            if (!current[key]) {\r\n                this.models[key] = null;\r\n                this.modelInfo[key] = \"\";\r\n                // remove reference to outline\r\n                this.outlines[key] = null;\r\n                return;\r\n            }\r\n\r\n            // load new weapon\r\n            this.modelInfo[key] = analyzeWeaponCode(current[key]);\r\n            const { modelPath, texturePath, flipped } = this.modelInfo[key];\r\n\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            this.models[key] = model;\r\n\r\n            // process new weapon\r\n            const materialType = this.matType;\r\n            changeMaterial(model, { materialType, texturePath });\r\n            this.applyNewModelMat(model);\r\n\r\n            if (flipped) {\r\n                model.rotation.y += Math.PI;\r\n            }\r\n\r\n            const outlineParams = this.props.outline;\r\n            this.outlines[key] = createOutline(model, outlineParams);\r\n\r\n            this.attachWeapon(model, side);\r\n        });\r\n        this.enableInput();\r\n    };\r\n}\r\n\r\nexport default AdvViewer;\r\n"],"sourceRoot":""}