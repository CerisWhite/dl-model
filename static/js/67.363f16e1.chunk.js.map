{"version":3,"sources":["components/viewers/BasicViewer.js"],"names":["BasicViewer","addFullScreenListener","fscreen","fullscreenEnabled","toggleFullScreen","fullscreenElement","exitFullscreen","requestFullscreen","mount","addEventListener","removeFullScreenListener","removeEventListener","disableInput","msg","props","setLoadingMsg","enableInput","initialize","a","initScene","outlines","models","modelInfo","loadMainModel","afterMainModelLoad","viewport","width","window","innerWidth","height","innerHeight","clock","THREE","scene","background","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","lights","addAllLights","pixelRatio","rendererAA","antialias","alpha","outputEncoding","setPixelRatio","rendererNoAA","AAEnabled","antiAliasing","_AA","renderer","finalRenderer","setSize","canvas","domElement","controls","OrbitControls","controlsPosition","target","update","animate","modelId","model","id","main","modelPath","getModelPath","loadModel","basicMainProcessing","addLight","light","enable","params","newLight","createLight","add","push","forEach","removeLight","remove","removeAllLights","addToScene","initTexture","texture","defaultTexture","getDefaultTexture","split","source","name","textureSource","textureName","texturePath","fbxSource","mainModel","replaceTexture","oldTexture","applyModelMod","modCode","mod","applyMod","removeEffects","disableFrustumCulling","materialType","matType","isBlade","analyzeWeaponCode","changeMaterial","forced","applyNewModelMat","outlineParams","outline","createOutline","updateViewer","prev","current","updateExport","export","updateCommon","updateModel","otherUpdate","updateViewport","updateOutline","updateMaterial","material","updateLights","updateAscii","ascii","updateCamera","updateControl","updatePixelRatio","AA","updateMainModel","aspect","setVideoBackgroundSize","disposeMainModel","dispose3dObject","replaceMainModel","idChanged","beforeMainModelUpdate","afterMainModelUpdate","updateOutlineParams","Object","values","flat","applyOutlineSettings","updatedKeys","keys","filter","key","length","Map","map","matParams","updateMatParams","prevParams","useTexture","matTypeChanged","type","some","showAscii","charSet","color","bgColor","invert","AsciiEffect","effect","style","exportModel","onExportFinish","cameraStream","screenWidth","screenAspectRatio","getVideoTracks","getSettings","camWidth","camAspectRatio","aspectRatio","videoWidth","videoHeight","video","useCameraAsBackground","navigator","mediaDevices","getUserMedia","audio","facingMode","rearCameraStream","document","createElement","assign","srcObject","autoplay","playsinline","videoTexture","minFilter","rotateModel","dt","rotateSpeed","Math","PI","rotateY","updateScene","frameId","requestAnimationFrame","getDelta","visibilityState","render","this","finishedInit","console","log","logUpdate","stop","cancelAnimationFrame","renderLists","dispose","mixer","enabled","newCanvas","allParams","paramList","getParamsList","filterObject","bg","_canvas","oldCanvas","removeChild","appendChild","ref","el","PureComponent"],"mappings":"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","file":"static/js/67.363f16e1.chunk.js","sourcesContent":["import { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { CAM_PARAMS } from \"helpers/consts\";\r\nimport { isBlade, filterObject, getDefaultTexture } from \"helpers/helpers\";\r\nimport {\r\n    createLight,\r\n    analyzeWeaponCode,\r\n    getModelPath,\r\n    loadModel,\r\n    dispose3dObject,\r\n    createOutline,\r\n    applyOutlineSettings,\r\n    getParamsList,\r\n    changeMaterial,\r\n    updateMatParams,\r\n    removeEffects,\r\n    disableFrustumCulling,\r\n    replaceTexture,\r\n    applyMod,\r\n    logUpdate,\r\n} from \"helpers/viewerHelpers\";\r\nimport fscreen from \"fscreen\";\r\n\r\nimport { fbxSource } from \"App\";\r\n\r\n/**\r\n * Basic Viewer that supports adding / updating:\r\n *   - 1 main model\r\n *   - auto rotate\r\n *   - viewport\r\n *   - material\r\n *   - background color\r\n *   - lighting\r\n *   - anti aliasing\r\n *   - ASCII mode\r\n * @typedef {ViewerProps} Props\r\n * @extends PureComponent<Props>\r\n */\r\nclass BasicViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        // window.app = this;\r\n\r\n        // const { fbx2json } = await import(\"helpers/fbx2json\");\r\n        // await fbx2json();\r\n\r\n        await this.initialize();\r\n        this.finishedInit = true;\r\n\r\n        this.addFullScreenListener();\r\n    }\r\n\r\n    /**\r\n     * @param {ViewerProps} prev\r\n     */\r\n    componentDidUpdate(prev) {\r\n        if (!this.finishedInit) return;\r\n        /**\r\n         * @type {ViewerProps}\r\n         */\r\n        const current = this.props;\r\n\r\n        // print updated props to console\r\n        console.log(\"Updated\");\r\n        logUpdate(prev, current);\r\n\r\n        this.updateViewer(prev, current);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.cameraStream?.getVideoTracks()[0].stop();\r\n        this.removeFullScreenListener?.();\r\n        cancelAnimationFrame(this.frameId);\r\n        dispose3dObject(this.scene);\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists?.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists?.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n        this.mixer = null;\r\n        this.clock = null;\r\n        this.scene = null;\r\n    }\r\n\r\n    addFullScreenListener = () => {\r\n        if (!fscreen.fullscreenEnabled) return;\r\n\r\n        const toggleFullScreen = () => {\r\n            if (!fscreen.fullscreenElement) {\r\n                fscreen.requestFullscreen(this.mount);\r\n                return;\r\n            }\r\n\r\n            fscreen.exitFullscreen();\r\n        };\r\n        this.mount?.addEventListener(\"dblclick\", () => toggleFullScreen());\r\n        this.removeFullScreenListener = () =>\r\n            this.mount?.removeEventListener(\"dblclick\", () =>\r\n                toggleFullScreen()\r\n            );\r\n    };\r\n\r\n    /**\r\n     * disable input and display a message, default is \"Loading...\"\r\n     * @param {string} [msg]\r\n     */\r\n    disableInput = msg => this.props.setLoadingMsg(msg || \"Loading...\");\r\n\r\n    /**\r\n     * remove loading message\r\n     */\r\n    enableInput = () => this.props.setLoadingMsg(\"\");\r\n\r\n    /**\r\n     * called when viewer is mounted to initialize the scene\r\n     */\r\n    initialize = async () => {\r\n        this.disableInput();\r\n\r\n        this.initScene();\r\n\r\n        this.outlines = {};\r\n        this.models = {};\r\n        this.modelInfo = {};\r\n        await this.loadMainModel();\r\n        await this.afterMainModelLoad();\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * Called after main model is loaded and added to scene\r\n     */\r\n    afterMainModelLoad = () => void 0;\r\n\r\n    /**\r\n     * initialize scene, display size, floor, clock, light, camera, controls, and renderers\r\n     */\r\n    initScene = () => {\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.background = this.props.background;\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        /**\r\n         * @type {xyzCoordinate}\r\n         */\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addAllLights(lights);\r\n\r\n        // Renderer\r\n        const { pixelRatio } = this.props;\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n            // logarithmicDepthBuffer: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n        this.rendererAA.setPixelRatio(pixelRatio);\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n            // logarithmicDepthBuffer: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n        this.rendererNoAA.setPixelRatio(pixelRatio);\r\n\r\n        const AAEnabled = this.props.antiAliasing;\r\n        this._AA = AAEnabled;\r\n\r\n        this.renderer = AAEnabled ? this.rendererAA : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        const { width, height } = this.props.viewport;\r\n        this.finalRenderer.setSize(width, height);\r\n\r\n        const canvas = this.finalRenderer.domElement;\r\n        this.canvas = canvas;\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        /**\r\n         * @type {xyzCoordinate}\r\n         */\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        this.animate();\r\n    };\r\n\r\n    /**\r\n     * load, and perform basic processing on main model\r\n     */\r\n    loadMainModel = async () => {\r\n        const modelId = this.props.model.id;\r\n        this.modelInfo.main = modelId;\r\n\r\n        const modelPath = getModelPath(modelId);\r\n        const model = await loadModel(modelPath);\r\n        this.models.main = model;\r\n\r\n        await this.basicMainProcessing();\r\n        return;\r\n    };\r\n\r\n    /**\r\n     * enable / disable Anti Aliasing\r\n     * @param {Boolean} enabled\r\n     */\r\n    set AA(enabled) {\r\n        if (enabled === this._AA) return;\r\n\r\n        this._AA = enabled;\r\n        this.renderer = enabled ? this.rendererAA : this.rendererNoAA;\r\n        const { width, height } = this.viewport;\r\n        this.renderer.setSize(width, height);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const newCanvas = this.renderer.domElement;\r\n        this.canvas = newCanvas;\r\n    }\r\n\r\n    /**\r\n     * add light to scene\r\n     * @param {LightParam} light\r\n     */\r\n    addLight = light => {\r\n        const { id, enable, ...params } = light;\r\n        if (!enable) return;\r\n\r\n        const newLight = createLight(params);\r\n\r\n        this.scene.add(newLight);\r\n        this.lights.push(newLight);\r\n    };\r\n\r\n    /**\r\n     * add lights to scene\r\n     * @param {LightParam[]} lights\r\n     */\r\n    addAllLights = lights => {\r\n        /**\r\n         * @type {THREE.Light[]}\r\n         */\r\n        this.lights = [];\r\n        lights.forEach(this.addLight);\r\n    };\r\n\r\n    /**\r\n     * remove light from scene\r\n     * @param {THREE.Light} light\r\n     */\r\n    removeLight = light => this.scene.remove(light);\r\n\r\n    /**\r\n     * remove all lights in the scene\r\n     */\r\n    removeAllLights = () => this.lights.forEach(this.removeLight);\r\n\r\n    /**\r\n     * add model to scene\r\n     * @param {THREE.Object3D} model\r\n     */\r\n    addToScene = model => this.scene?.add(model);\r\n\r\n    /**\r\n     * change main model's texture if specified\r\n     */\r\n    initTexture = async () => {\r\n        const { id: modelId, texture } = this.props.model;\r\n        if (!texture || texture === \">\") return;\r\n\r\n        const defaultTexture = getDefaultTexture(modelId);\r\n        const [source, name] = texture.split(\">\");\r\n        const textureSource = source || modelId;\r\n        const textureName = name || getDefaultTexture(textureSource);\r\n\r\n        const texturePath = `${fbxSource}/fbx/${textureSource}/${textureName}.png`;\r\n        const mainModel = this.models.main;\r\n        await replaceTexture(mainModel, {\r\n            oldTexture: defaultTexture,\r\n            texturePath,\r\n        });\r\n    };\r\n\r\n    /**\r\n     * apply modifier code to main model\r\n     */\r\n    applyModelMod = () => {\r\n        const modCode = this.props.model.mod;\r\n        modCode && applyMod(this.models.main, modCode);\r\n    };\r\n\r\n    /**\r\n     * main model basic processing:\r\n     * remove effects, change material, change texture, add outline, then add to scene\r\n     */\r\n    basicMainProcessing = async () => {\r\n        const model = this.models.main;\r\n\r\n        removeEffects(model);\r\n        disableFrustumCulling(model);\r\n\r\n        const materialType = this.matType;\r\n        const modelId = this.props.model.id;\r\n        if (isBlade(modelId)) {\r\n            const { texturePath } = analyzeWeaponCode(`${modelId}n`);\r\n            changeMaterial(model, { materialType, texturePath });\r\n        } else {\r\n            changeMaterial(model, { materialType, forced: true });\r\n        }\r\n\r\n        await this.initTexture();\r\n        this.applyModelMod();\r\n\r\n        this.applyNewModelMat(model);\r\n\r\n        const outlineParams = this.props.outline;\r\n        this.outlines.main = await createOutline(model, outlineParams);\r\n\r\n        this.addToScene(model);\r\n    };\r\n\r\n    /**\r\n     * update viewer's display\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateViewer = async (prev, current) => {\r\n        await this.updateExport(prev.export, current.export);\r\n        this.updateCommon(prev, current);\r\n        this.updateModel(prev, current);\r\n        this.otherUpdate(prev, current);\r\n    };\r\n\r\n    /**\r\n     * update settings other than model and environment\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    otherUpdate = (prev, current) => void 0;\r\n\r\n    /**\r\n     * update viewport, outline, material, lighting, ASCII,\r\n     * camera, control, background, and Anti Aliasing\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateCommon = (prev, current) => {\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n        this.updateOutline(prev.outline, current.outline);\r\n        this.updateMaterial(prev.material, current.material);\r\n        this.updateLights(prev.lights, current.lights);\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n        this.updateCamera(prev.cameraPosition, current.cameraPosition);\r\n        this.updateControl(prev.controlsPosition, current.controlsPosition);\r\n        this.updatePixelRatio(prev.pixelRatio, current.pixelRatio);\r\n\r\n        // Update background color\r\n        if (prev.background !== current.background) {\r\n            this.background = current.background;\r\n        }\r\n\r\n        this.AA = current.antiAliasing;\r\n    };\r\n\r\n    /**\r\n     * update model settings\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateModel = (prev, current) => {\r\n        this.updateMainModel(prev.model, current.model);\r\n    };\r\n\r\n    /**\r\n     * update viewport\r\n     * @param {ViewerProps[\"viewport\"]} prev\r\n     * @param {ViewerProps[\"viewport\"]} current\r\n     */\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.viewport.width = width;\r\n        this.viewport.height = height;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this.props.background === \"camera\" && this.setVideoBackgroundSize();\r\n    };\r\n\r\n    /**\r\n     * remove from scene and dispose main model\r\n     */\r\n    disposeMainModel = () => {\r\n        const mainModel = this.models.main;\r\n        this.scene?.remove(mainModel);\r\n        dispose3dObject(mainModel);\r\n    };\r\n\r\n    /**\r\n     * replace main model\r\n     */\r\n    replaceMainModel = async () => {\r\n        this.disableInput();\r\n\r\n        this.disposeMainModel();\r\n        await this.loadMainModel();\r\n        this.applyNewModelMat(this.models.main);\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * update main model\r\n     * @param {ViewerProps[\"model\"]} prev\r\n     * @param {ViewerProps[\"model\"]} current\r\n     */\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        const idChanged = prev.id !== modelId;\r\n        const modChanged = prev.mod !== current.mod;\r\n\r\n        modChanged && this.applyModelMod();\r\n\r\n        if (!idChanged) return;\r\n\r\n        this.beforeMainModelUpdate();\r\n        await this.replaceMainModel();\r\n        this.afterMainModelUpdate();\r\n    };\r\n\r\n    /**\r\n     * called before main model is updated\r\n     */\r\n    beforeMainModelUpdate = () => void 0;\r\n\r\n    /**\r\n     * called after main model is updated\r\n     */\r\n    afterMainModelUpdate = () => void 0;\r\n\r\n    /**\r\n     * update outline parameters\r\n     * @param {Map<string, *>} update\r\n     */\r\n    updateOutlineParams = update => {\r\n        const outlines = Object.values(this.outlines).flat();\r\n        outlines.forEach(outline => {\r\n            applyOutlineSettings(outline, update);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * update outline settings\r\n     * @param {AppOutlineState} prev - previous settings\r\n     * @param {AppOutlineState} current - current settings\r\n     */\r\n    updateOutline = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const updatedKeys = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedKeys.length === 0) return;\r\n\r\n        const update = new Map(updatedKeys.map(key => [key, current[key]]));\r\n        this.updateOutlineParams(update);\r\n    };\r\n\r\n    /**\r\n     * get relevant parameters for the current material type\r\n     */\r\n    get matParams() {\r\n        const { type: materialType, ...allParams } = this.props.material;\r\n        const paramList = getParamsList(materialType);\r\n        return filterObject(allParams, paramList);\r\n    }\r\n\r\n    /**\r\n     * get the current material type\r\n     */\r\n    get matType() {\r\n        return this.props.material.type;\r\n    }\r\n\r\n    /**\r\n     * apply material setting to a newly loaded model\r\n     */\r\n    applyNewModelMat = model => {\r\n        const params = this.matParams;\r\n        const defaultParams = { useTexture: true };\r\n        updateMatParams(model, { prevParams: defaultParams, params });\r\n    };\r\n\r\n    /**\r\n     * update material settings\r\n     */\r\n    updateMaterial = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const materialType = this.matType;\r\n        const mainModel = this.models.main;\r\n\r\n        const matTypeChanged = prev.type !== materialType;\r\n        if (matTypeChanged) {\r\n            changeMaterial(this.models.main, { materialType });\r\n        }\r\n\r\n        const prevParams = matTypeChanged\r\n            ? { useTexture: prev.useTexture }\r\n            : prev;\r\n        const params = this.matParams;\r\n        updateMatParams(mainModel, { prevParams, params });\r\n    };\r\n\r\n    /**\r\n     * update lighting\r\n     * @param {LightParam[]} prev\r\n     * @param {LightParam[]} current\r\n     */\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeAllLights();\r\n            this.addAllLights(current);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update ASCII settings\r\n     * @param {ViewerProps[\"ascii\"]} prev\r\n     * @param {ViewerProps[\"ascii\"]} current\r\n     */\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n\r\n            const { width, height } = this.viewport;\r\n            this.renderer.setSize(width, height);\r\n\r\n            const canvas = this.renderer.domElement;\r\n            this.canvas = canvas;\r\n\r\n            return;\r\n        }\r\n\r\n        this.showAscii();\r\n    };\r\n\r\n    /**\r\n     * render scene as ASCII\r\n     */\r\n    showAscii = async () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const { AsciiEffect } = await import(\r\n            /* webpackChunkName: \"AsciiEffect\" */\r\n            \"three/examples/jsm/effects/AsciiEffect\"\r\n        );\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n\r\n        const { width, height } = this.viewport;\r\n        this.effect.setSize(width, height);\r\n\r\n        const canvas = this.effect.domElement;\r\n        canvas.style.color = color;\r\n        canvas.style.background = bgColor;\r\n        this.canvas = canvas;\r\n\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    /**\r\n     * @param {xyzCoordinate} prev\r\n     * @param {xyzCoordinate} current\r\n     */\r\n    updateCamera = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        this.camera.position.set(...current);\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    /**\r\n     * @param {xyzCoordinate} prev\r\n     * @param {xyzCoordinate} current\r\n     */\r\n    updateControl = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        this.controls.target.set(...current);\r\n        this.controls.update();\r\n    };\r\n\r\n    /**\r\n     * update renderer's pixel ratio\r\n     * @param {number} prev\r\n     * @param {number} current\r\n     */\r\n    updatePixelRatio = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        this.rendererAA.setPixelRatio(current);\r\n        this.rendererNoAA.setPixelRatio(current);\r\n    };\r\n\r\n    /**\r\n     * @param {ViewerProps[\"export\"]} prev\r\n     * @param {ViewerProps[\"export\"]} current\r\n     */\r\n    updateExport = async (prev, current) => {\r\n        if (!current.enable || prev.enable) return;\r\n        this.disableInput(\"Exporting\");\r\n\r\n        const { exportModel } = await import(\r\n            /* webpackChunkName: \"exporter\" */ \"helpers/exportModel\"\r\n        );\r\n        await exportModel(this.models.main, current);\r\n        this.props.onExportFinish();\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * @param {ColorCode | 'transparent' | 'camera'} bg\r\n     */\r\n    set background(bg) {\r\n        switch (bg) {\r\n            case \"transparent\":\r\n                this.scene.background = null;\r\n                return;\r\n            case \"camera\":\r\n                this.useCameraAsBackground();\r\n                return;\r\n            default:\r\n                this.cameraStream?.getVideoTracks()[0].stop();\r\n                this.scene.background = new THREE.Color(bg);\r\n        }\r\n    }\r\n\r\n    setVideoBackgroundSize = () => {\r\n        if (!this.cameraStream) return;\r\n\r\n        const { width: screenWidth, height: screenHeight } = this.viewport;\r\n        const screenAspectRatio = screenWidth / screenHeight;\r\n\r\n        const {\r\n            width: camWidth,\r\n            aspectRatio: camAspectRatio,\r\n        } = this.cameraStream.getVideoTracks()[0].getSettings();\r\n\r\n        const videoWidth =\r\n            camAspectRatio > screenAspectRatio ? screenWidth : camWidth;\r\n        const videoAspectRatio =\r\n            camAspectRatio > screenAspectRatio\r\n                ? screenAspectRatio\r\n                : camAspectRatio;\r\n        const videoHeight = videoWidth / videoAspectRatio;\r\n\r\n        this.video.width = videoWidth;\r\n        this.video.height = videoHeight;\r\n    };\r\n\r\n    /**\r\n     * use hardware camera as background, rear facing is prioritized\r\n     */\r\n    useCameraAsBackground = async () => {\r\n        if (!navigator.mediaDevices?.getUserMedia) return;\r\n\r\n        const rearCameraStream = await navigator.mediaDevices?.getUserMedia({\r\n            audio: false,\r\n            video: { facingMode: \"environment\" },\r\n        });\r\n\r\n        this.cameraStream =\r\n            rearCameraStream ||\r\n            (await navigator.mediaDevices?.getUserMedia({\r\n                audio: false,\r\n                video: { facingMode: \"user\" },\r\n            }));\r\n\r\n        if (!this.cameraStream) return;\r\n\r\n        this.video = document.createElement(\"video\");\r\n\r\n        Object.assign(this.video, {\r\n            srcObject: this.cameraStream,\r\n            autoplay: true,\r\n            playsinline: true,\r\n        });\r\n\r\n        const videoTexture = new THREE.VideoTexture(this.video);\r\n        videoTexture.minFilter = THREE.LinearFilter;\r\n        this.scene.background = videoTexture;\r\n\r\n        // this.setVideoBackgroundSize();\r\n    };\r\n\r\n    /**\r\n     * set display canvas\r\n     */\r\n    set canvas(canvas) {\r\n        const oldCanvas = this._canvas;\r\n        oldCanvas && this.mount.removeChild(oldCanvas);\r\n        this.mount.appendChild(canvas);\r\n        this._canvas = canvas;\r\n    }\r\n\r\n    /**\r\n     * get currently displayed canvas\r\n     */\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    /**\r\n     * rotate the floor\r\n     * @param {number} dt - time difference\r\n     */\r\n    rotateModel = dt => {\r\n        const { rotateSpeed } = this.props;\r\n        if (!rotateSpeed) return;\r\n\r\n        const angle = (rotateSpeed * dt * Math.PI) / 2;\r\n        this.models.main.rotateY(angle);\r\n    };\r\n\r\n    /**\r\n     * called during every animation frame\r\n     * @param {number} dt - time difference since last call\r\n     */\r\n    updateScene = dt => void 0;\r\n\r\n    /**\r\n     * render loop\r\n     */\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n\r\n        const dt = this.clock.getDelta();\r\n        if (document.visibilityState === \"hidden\") return;\r\n\r\n        this.rotateModel(dt);\r\n\r\n        this.updateScene(dt);\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default BasicViewer;\r\n"],"sourceRoot":""}