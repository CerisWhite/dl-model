{"version":3,"sources":["BaseViewer.js","AniViewer.js","DragonViewer.js"],"names":["BaseViewer","disableInput","props","setIsLoading","enableInput","initialize","a","initScene","materials","outlines","models","modelInfo","loadMainModel","afterMainModelLoad","viewport","width","window","innerWidth","height","innerHeight","clock","THREE","scene","bgColor","floor","createInvisibleFloor","add","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","target","update","lights","addLights","loadedFX","Map","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","AAEnabled","antiAliasing","_AA","renderer","finalRenderer","setSize","canvas","domElement","animate","modelId","model","id","main","modelPath","getModelPath","loadModel","basicMainProcessing","forEach","enable","type","color","intensity","params","constructor","light","Object","entries","key","value","setValue","map","v","push","removeLights","remove","addToScene","removeEffects","materialType","matType","isBlade","texturePath","analyzeWeaponCode","changeMaterial","forced","applyNewModelMat","outlineParams","outline","createOutline","updateViewer","prev","current","updateEnvironment","updateModel","otherUpdate","updateViewport","updateOutline","updateMaterial","material","updateLights","updateAscii","ascii","AA","updateMainModel","aspect","disposeMainModel","mainModel","disposeItem","replaceMainModel","beforeMainModelUpdate","afterMainModelUpdate","updateOutlineParams","values","flat","applyOutlineSettings","updatedKeys","keys","filter","length","saveMaterialReference","getMaterial","matParams","updateMatParams","prevParams","useTexture","matTypeChanged","some","newCanvas","has","AsciiEffect","showAscii","charSet","invert","get","effect","style","background","rotateFloor","dt","rotateSpeed","Math","PI","rotateY","everyAnimate","getDelta","frameId","requestAnimationFrame","render","app","this","finishedInit","console","log","getUpdated","oldValue","subkeys","JSON","stringify","subkey","cancelAnimationFrame","mixer","renderLists","dispose","ref","el","enabled","allParams","paramList","getParamsList","filterObject","oldCanvas","_canvas","removeChild","appendChild","PureComponent","AniViewer","saveMainModelInitState","addAnimation","updateAnimation","animation","capture","captureAnimation","initPos","clone","initRot","rotation","resetFace","eyeIdx","mouthIdx","beforeAddAni","aniCode","code","timeScale","aniList","analyzeChainCode","nAni","_aniIdx","addEventListener","playNextAni","aniSettings","loadAnimations","animations","aniIdx","removeAnimation","stopAllAction","copy","mediaRecorder","stop","toggleCapture","newIdx","chunks","videoStream","captureStream","codec","MediaRecorder","mimeType","ondataavailable","event","data","onstop","superBuffer","Blob","url","URL","createObjectURL","document","createElement","href","download","body","click","revokeObjectURL","beforeCaptureAnimation","start","faceChanges","time","faceChangeTime","shift","anim","action","clipAction","currentAniSettings","repetitions","setLoop","clampWhenFinished","getFaceChangesArray","change","currentClipDuration","setTime","duration","play","DragonViewer","initNewModel","initFace","eyes","getDragonEye","eye","frustumCulled","mouths","getDragonMouth","mouth","DEFAULT_DRAGON_FACE_IDX","_eyeIdx","_mouthIdx","idx","parseInt","oldIdx","regex","mesh","name","exec","visible"],"mappings":"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","file":"static/js/34.fc01f087.chunk.js","sourcesContent":["/* \r\n################################################\r\n# Base Viewer that supports adding / updating:\r\n#    - 1 main model\r\n#    - auto rotate\r\n#    - viewport\r\n#    - material\r\n#    - background color\r\n#    - lighting\r\n#    - anti aliasing\r\n#    - ASCII mode\r\n################################################\r\n*/\r\n\r\nimport { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { CAM_PARAMS } from \"./consts\";\r\nimport { isBlade } from \"./helpers\";\r\nimport {\r\n    createInvisibleFloor,\r\n    analyzeWeaponCode,\r\n    getUpdated,\r\n    filterObject,\r\n    getModelPath,\r\n    loadModel,\r\n    getMaterial,\r\n    disposeItem,\r\n    createOutline,\r\n    applyOutlineSettings,\r\n    getParamsList,\r\n    changeMaterial,\r\n    updateMatParams,\r\n    removeEffects,\r\n} from \"./viewerHelpers\";\r\n\r\nclass BaseViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        window.app = this;\r\n\r\n        // const { fbx2json } = await import(\"./fbx2json/fbx2json.js\");\r\n        // await fbx2json();\r\n\r\n        await this.initialize();\r\n        this.finishedInit = true;\r\n    }\r\n\r\n    componentDidUpdate(prev) {\r\n        if (!this.finishedInit) return;\r\n        const current = this.props;\r\n\r\n        // print updated props to console\r\n        console.log(\"Updated\");\r\n        const updated = getUpdated(prev, current);\r\n        updated.forEach(([key, value]) => {\r\n            const oldValue = prev[key];\r\n            const subkeys = Object.keys(value);\r\n            if (subkeys.length === 0 || typeof value === \"string\") {\r\n                console.log(\r\n                    `${key}: ${JSON.stringify(oldValue)} to ${JSON.stringify(\r\n                        value\r\n                    )}`\r\n                );\r\n            } else {\r\n                subkeys.forEach(subkey => {\r\n                    if (oldValue[subkey] !== value[subkey]) {\r\n                        console.log(\r\n                            `${key}.${subkey}: ${JSON.stringify(\r\n                                oldValue[subkey]\r\n                            )} to ${JSON.stringify(value[subkey])}`\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        this.updateViewer(prev, current);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixer = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n\r\n    disableInput = () => this.props.setIsLoading(true);\r\n\r\n    enableInput = () => this.props.setIsLoading(false);\r\n\r\n    initialize = async () => {\r\n        this.disableInput();\r\n\r\n        this.initScene();\r\n\r\n        this.materials = [];\r\n        this.outlines = {};\r\n        this.models = {};\r\n        this.modelInfo = {};\r\n        await this.loadMainModel();\r\n        await this.afterMainModelLoad?.();\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    initScene = () => {\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.bgColor = this.props.bgColor;\r\n\r\n        // Floor for auto rotate\r\n        this.floor = createInvisibleFloor();\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addLights(lights);\r\n\r\n        // effects\r\n        this.loadedFX = new Map();\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        const AAEnabled = this.props.antiAliasing;\r\n        this._AA = AAEnabled;\r\n\r\n        this.renderer = AAEnabled ? this.rendererAA : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        const { width, height } = this.props.viewport;\r\n        this.finalRenderer.setSize(width, height);\r\n\r\n        const canvas = this.finalRenderer.domElement;\r\n        this.canvas = canvas;\r\n\r\n        this.animate();\r\n    };\r\n\r\n    loadMainModel = async () => {\r\n        const modelId = this.props.model.id;\r\n        this.modelInfo.main = modelId;\r\n\r\n        const modelPath = getModelPath(modelId);\r\n        const model = await loadModel(modelPath);\r\n        this.models.main = model;\r\n\r\n        this.basicMainProcessing(model);\r\n        return;\r\n    };\r\n\r\n    set AA(enabled) {\r\n        if (enabled === this._AA) return;\r\n\r\n        this._AA = enabled;\r\n        this.renderer = enabled ? this.rendererAA : this.rendererNoAA;\r\n        const { width, height } = this.viewport;\r\n        this.renderer.setSize(width, height);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const newCanvas = this.renderer.domElement;\r\n        this.canvas = newCanvas;\r\n    }\r\n\r\n    addLights = lights => {\r\n        this.lights = [];\r\n        lights.forEach(({ enable, type, color, intensity, ...params }) => {\r\n            if (!enable) return;\r\n            const constructor = `${type}Light`;\r\n            const light = new THREE[constructor](color, intensity);\r\n\r\n            for (const [key, value] of Object.entries(params)) {\r\n                switch (key) {\r\n                    case \"position\":\r\n                        const setValue = value.map(v => v || 0);\r\n                        light.position.set(...setValue);\r\n                        break;\r\n                    default:\r\n                        light[key] = value;\r\n                }\r\n            }\r\n            this.scene.add(light);\r\n            this.lights.push(light);\r\n        });\r\n    };\r\n\r\n    removeLights = () => this.lights.forEach(light => this.scene.remove(light));\r\n\r\n    addToScene = model => this.floor.add(model);\r\n\r\n    basicMainProcessing = () => {\r\n        const model = this.models.main;\r\n\r\n        removeEffects(model);\r\n        const materialType = this.matType;\r\n        const modelId = this.props.model.id;\r\n        if (isBlade(modelId)) {\r\n            const { texturePath } = analyzeWeaponCode(`${modelId}n`);\r\n            changeMaterial(model, { materialType, texturePath });\r\n        } else {\r\n            changeMaterial(model, { materialType, forced: true });\r\n        }\r\n\r\n        this.applyNewModelMat(model);\r\n\r\n        const outlineParams = this.props.outline;\r\n        this.outlines.main = createOutline(model, outlineParams);\r\n\r\n        this.addToScene(model);\r\n    };\r\n\r\n    updateViewer = (prev, current) => {\r\n        this.updateEnvironment(prev, current);\r\n        this.updateModel(prev, current);\r\n        this.otherUpdate?.(prev, current);\r\n    };\r\n\r\n    updateEnvironment = (prev, current) => {\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n        this.updateOutline(prev.outline, current.outline);\r\n        this.updateMaterial(prev.material, current.material);\r\n        this.updateLights(prev.lights, current.lights);\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n\r\n        // Update background color\r\n        if (prev.bgColor !== current.bgColor) {\r\n            this.bgColor = current.bgColor;\r\n        }\r\n\r\n        this.AA = current.antiAliasing;\r\n    };\r\n\r\n    updateModel = (prev, current) => {\r\n        this.updateMainModel(prev.model, current.model);\r\n    };\r\n\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.viewport.width = width;\r\n        this.viewport.height = height;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    disposeMainModel = () => {\r\n        const mainModel = this.models.main;\r\n        this.floor.remove(mainModel);\r\n        disposeItem(mainModel);\r\n    };\r\n\r\n    replaceMainModel = async () => {\r\n        this.disableInput();\r\n\r\n        this.disposeMainModel();\r\n        await this.loadMainModel();\r\n        this.applyNewModelMat(this.models.main);\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        const mainUpdated = prev.id !== modelId;\r\n        if (!mainUpdated) return;\r\n\r\n        this.beforeMainModelUpdate?.();\r\n        await this.replaceMainModel();\r\n        this.afterMainModelUpdate?.();\r\n    };\r\n\r\n    updateOutlineParams = update => {\r\n        const outlines = Object.values(this.outlines).flat();\r\n        outlines.forEach(outline => {\r\n            applyOutlineSettings(outline, update);\r\n        });\r\n    };\r\n\r\n    updateOutline = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const updatedKeys = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedKeys.length === 0) return;\r\n\r\n        const update = new Map(updatedKeys.map(key => [key, current[key]]));\r\n        this.updateOutlineParams(update);\r\n    };\r\n\r\n    saveMaterialReference = () => {\r\n        const mainModel = this.models.main;\r\n        this.materials = getMaterial(mainModel);\r\n    };\r\n\r\n    get matParams() {\r\n        const { type: materialType, ...allParams } = this.props.material;\r\n        const paramList = getParamsList(materialType);\r\n        return filterObject(allParams, paramList);\r\n    }\r\n\r\n    get matType() {\r\n        return this.props.material.type;\r\n    }\r\n\r\n    applyNewModelMat = model => {\r\n        const params = this.matParams;\r\n        const defaultParams = { useTexture: true };\r\n        updateMatParams(model, { prevParams: defaultParams, params });\r\n    };\r\n\r\n    updateMaterial = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const { type: materialType } = current;\r\n        const mainModel = this.models.main;\r\n\r\n        const matTypeChanged = prev.type !== materialType;\r\n        if (matTypeChanged) {\r\n            changeMaterial(this.models.main, { materialType });\r\n        }\r\n\r\n        const prevParams = matTypeChanged\r\n            ? { useTexture: prev.useTexture }\r\n            : prev;\r\n        const params = this.matParams;\r\n        updateMatParams(mainModel, { prevParams, params });\r\n    };\r\n\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeLights();\r\n            this.addLights(current);\r\n        }\r\n    };\r\n\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n            const newCanvas = this.renderer.domElement;\r\n            this.canvas = newCanvas;\r\n            return;\r\n        }\r\n\r\n        if (!this.loadedFX.has(\"ascii\")) {\r\n            const { AsciiEffect } = await import(\r\n                \"three/examples/jsm/effects/AsciiEffect\"\r\n            );\r\n            this.loadedFX.set(\"ascii\", AsciiEffect);\r\n            this.showAscii();\r\n        } else this.showAscii();\r\n\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n    };\r\n\r\n    showAscii = () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const AsciiEffect = this.loadedFX.get(\"ascii\");\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n\r\n        const { width, height } = this.viewport;\r\n        this.effect.setSize(width, height);\r\n\r\n        const newCanvas = this.effect.domElement;\r\n        newCanvas.style.color = color;\r\n        newCanvas.style.background = bgColor;\r\n        this.canvas = newCanvas;\r\n\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    set bgColor(color) {\r\n        this.scene.background =\r\n            color !== \"transparent\" ? new THREE.Color(color) : null;\r\n    }\r\n\r\n    set canvas(canvas) {\r\n        const oldCanvas = this._canvas;\r\n        oldCanvas && this.mount.removeChild(oldCanvas);\r\n        this.mount.appendChild(canvas);\r\n        this._canvas = canvas;\r\n    }\r\n\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    rotateFloor = dt => {\r\n        const { rotateSpeed } = this.props;\r\n        if (!rotateSpeed) return;\r\n\r\n        const angle = (rotateSpeed * dt * Math.PI) / 2;\r\n        this.floor.rotateY(angle);\r\n    };\r\n\r\n    everyAnimate = () => {\r\n        const dt = this.clock.getDelta();\r\n        this.rotateFloor(dt);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n\r\n        this.everyAnimate();\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default BaseViewer;\r\n","/* \r\n################################################\r\n# Extension of Base Viewer that adds:\r\n#    - Animation\r\n#    - Recording Animation\r\n################################################  \r\n*/\r\n\r\nimport BaseViewer from \"./BaseViewer\";\r\n\r\nimport * as THREE from \"three\";\r\nimport {\r\n    analyzeChainCode,\r\n    loadAnimations,\r\n    getFaceChangesArray,\r\n} from \"./viewerHelpers\";\r\n\r\nexport class AniViewer extends BaseViewer {\r\n    afterMainModelLoad = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        await this.updateMainModel(prev.model, current.model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    otherUpdate = (prev, current) => {\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n    };\r\n\r\n    saveMainModelInitState = () => {\r\n        const model = this.models.main;\r\n        model.initPos = model.position.clone();\r\n        model.initRot = model.rotation.clone();\r\n    };\r\n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n\r\n        const { mixer } = this;\r\n        mixer.stopAllAction();\r\n\r\n        const anim = this.animations[newIdx];\r\n        const action = mixer.clipAction(anim);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        this.faceChanges = getFaceChangesArray(faceChanges, repetitions);\r\n        this.faceChangeTime = this.faceChanges.map(\r\n            change => (this.currentClipDuration * change.time) / 100\r\n        );\r\n\r\n        mixer.setTime(0);\r\n        this.currentClipDuration = anim.duration;\r\n        action.play();\r\n    }\r\n\r\n    resetFace = () => {\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    beforeAddAni = () => {\r\n        this.resetFace();\r\n    };\r\n\r\n    addAnimation = async () => {\r\n        this.beforeAddAni?.();\r\n\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        if (!aniCode) return;\r\n\r\n        this.disableInput();\r\n\r\n        const mainModel = this.models.main;\r\n        const aniList = analyzeChainCode(aniCode);\r\n        this.nAni = aniList.length;\r\n\r\n        mainModel.mixer = new THREE.AnimationMixer(mainModel);\r\n        this.mixer = mainModel.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        mainModel.mixer.timeScale = timeScale; // Global timeScale\r\n        mainModel.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = aniList;\r\n\r\n        this.animations = await loadAnimations(aniList);\r\n\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.enableInput();\r\n    };\r\n\r\n    removeAnimation = () => {\r\n        const mainModel = this.models.main;\r\n        mainModel.mixer?.stopAllAction?.();\r\n\r\n        // Reset position and rotation to initial value\r\n        const { initPos, initRot } = mainModel;\r\n        mainModel.position.copy(initPos);\r\n        mainModel.rotation.copy(initRot);\r\n\r\n        this.mixer = null;\r\n        this.animations = [];\r\n        this.aniSettings = [];\r\n    };\r\n\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            this.removeAnimation();\r\n            this.addAnimation();\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            const { codec } = this.props.capture;\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.enableInput();\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                const url = URL.createObjectURL(superBuffer);\r\n                const a = document.createElement(\"a\");\r\n                a.style = \"display: none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n            };\r\n        }\r\n        this.disableInput();\r\n        this.beforeCaptureAnimation?.();\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    everyAnimate = () => {\r\n        const dt = this.clock.getDelta();\r\n        this.rotateFloor(dt);\r\n        this.mixer?.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length) {\r\n            const elapsedTime = this.mixer.time;\r\n            const nextFaceChangeTime = this.faceChangeTime[0];\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                this.faceChangeTime.shift();\r\n                const { eyeIdx, mouthIdx } = this.faceChanges.shift();\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default AniViewer;\r\n","/* \r\n################################################\r\n# Extension of Ani Viewer for dragons that adds:\r\n#    - Eyes and Mouth\r\n################################################  \r\n*/\r\n\r\nimport AniViewer from \"./AniViewer\";\r\n\r\nimport { getDragonEye, getDragonMouth } from \"./viewerHelpers\";\r\nimport { DEFAULT_DRAGON_FACE_IDX } from \"./consts\";\r\n\r\nexport class DragonViewer extends AniViewer {\r\n    constructor() {\r\n        super();\r\n        this._eyeIdx = this._mouthIdx = DEFAULT_DRAGON_FACE_IDX;\r\n    }\r\n\r\n    initNewModel = () => {\r\n        this.saveMainModelInitState();\r\n        this.initFace();\r\n        this.addAnimation();\r\n    };\r\n\r\n    afterMainModelLoad = () => {\r\n        this.initNewModel();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.initNewModel();\r\n    };\r\n\r\n    initFace = () => {\r\n        const mainModel = this.models.main;\r\n        this.eyes = getDragonEye(mainModel);\r\n        this.eyes.forEach(eye => (eye.frustumCulled = false));\r\n\r\n        this.mouths = getDragonMouth(mainModel);\r\n        this.mouths.forEach(mouth => (mouth.frustumCulled = false));\r\n\r\n        this.eyeIdx = DEFAULT_DRAGON_FACE_IDX;\r\n        this.mouthIdx = DEFAULT_DRAGON_FACE_IDX;\r\n    };\r\n\r\n    set eyeIdx(newIdx) {\r\n        const idx = parseInt(newIdx);\r\n        const oldIdx = this._eyeIdx;\r\n        if (idx === oldIdx) return;\r\n\r\n        this._eyeIdx = idx;\r\n        const regex = /[0-9]{2}/;\r\n        this.eyes.forEach(mesh => {\r\n            const { name } = mesh;\r\n            const id = regex.exec(name)[0];\r\n            mesh.visible = parseInt(id) === idx;\r\n        });\r\n    }\r\n\r\n    set mouthIdx(newIdx) {\r\n        const idx = parseInt(newIdx);\r\n        const oldIdx = this._mouthIdx;\r\n        if (idx === oldIdx) return;\r\n\r\n        this._mouthIdx = idx;\r\n        const regex = /[0-9]{2}/;\r\n        this.mouths.forEach(mesh => {\r\n            const { name } = mesh;\r\n            const id = regex.exec(name)[0];\r\n            mesh.visible = parseInt(id) === idx;\r\n        });\r\n    }\r\n}\r\n\r\nexport default DragonViewer;\r\n"],"sourceRoot":""}