{"version":3,"sources":["viewerHelpers.js","shader/outlineFragShader.js","shader/outlineVertShader.js","reducer/settingsReducer.js","context/SettingsContext.js","helpers.js","ModelViewer.js","Display.js","MainPage.js","App.js","hooks/useToggleState.js","data/face_offset.js","consts.js","styles/MainPageStyles.js","styles/Rose-Petals.svg","serviceWorker.js","index.js"],"names":["loadModel","url","Promise","resolve","FBXLoader","load","createInvisibleFloor","floorGeometry","THREE","rotateX","Math","PI","floorMaterial","visible","getModelPath","id","fbxSource","getTexturePath","analyzeWeaponCode","code","flipped","endsWith","weaponCode","substring","length","modelPath","texturePath","isSheath","disposeItem","item","disposedList","Set","needToDispose","object","has","uuid","notDisposed","dispose","add","disposeObject","traverse","child","isMesh","callbackOnEach","material","mat","map","backupMap","geometry","createNewMaterial","materialType","params","matType","changeMaterial","target","name","checkParam","Array","isArray","every","forEach","i","texture","encoding","newMaterial","skinning","createOutline","outlines","outline","clone","push","createOutlineMaterial","replaceMaterial","enable","isSkinnedMesh","bind","skeleton","bindMatrix","parent","size","color","opacity","uniforms","type","value","tyle","side","transparent","fragmentShader","vertexShader","applyOutlineSettings","settings","key","matIsArray","fill","calculateTextureOffset","currentTexture","prevTexture","offset","x","y","prevOffset","textureOffsets","currentOffset","calculateIdxOffset","currentIdx","prevIdx","idxOffsets","applyOffset","part","groups","targetGroup","find","group","materialIndex","start","end","count","uv","attributes","u","getX","v","getY","setXY","needsUpdate","applyEyeOffset","applyMouthOffset","applyTexture","textureId","applyEyeTexture","applyMouthTexture","analyzeChainCode","aniCodes","split","nAni","fileList","animationList","currentAni","timeScale","repetitions","fileIdx","aniName","fileName","details","faceChanges","currentParts","includes","parseFloat","Infinity","parseInt","time","faceMod","processFaceChanges","sorted","sort","change","timeStamps","simplified","output","eyeIdx","mouthIdx","filter","Object","assign","getFaceChangesArray","_","others","flat","chainCodeToList","ani","listItem","concat","createGradientMap","nTones","colors","Uint8Array","minFilter","magFilter","generateMipmaps","settingsReducer","state","action","subkey","currentValue","defaultSetting","defaultSettings","update","SettingsContext","createContext","DispatchContext","initSettings","chainMaker","chain","animation","SettingsProvider","props","useReducer","dispatch","Provider","children","keys","scene","lights","light","isBlade","startsWith","list","callback","setInitialSettings","eyeTextureDefined","mouthTextureDefined","param","keycode","setValue","join","chainList","n","initKey","isBooleanValue","Boolean","generateChainCode","modCode","generateAniModCode","faceCode","generateFaceCode","aniModList","modKey","defaultValue","collectFilter","toggleState","collected","tmp","k","multiCondFilter","input","filters","filterKeys","el","getTextColor","rgb","hex","result","exec","r","g","b","hexToRgb","aniButtonsFromObject","handleSelect","groupName","style","maxWidth","variant","data-value","data-name","onClick","getStandbyCode","weapon","gender","WEAPON_CODE","GENDER_CODE","getVictoryCode","getDashAtkCode","getRollCode","getComboCode","comboLength","COMBO_LENGTH","slice","getFSCode","fsAniLength","FS_LENGTH","getLobbyCode","ModelViewer","initScene","models","modelInfo","main","model","weaponLeft","weaponRight","materials","outlineParams","viewport","width","window","innerWidth","height","innerHeight","clock","bgColor","floor","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","addLights","fxConstructors","Map","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","AAEnabled","antiAliasing","_AA","renderer","finalRenderer","canvas","domElement","setSize","appendChild","animate","intensity","constructor","entries","removeLights","remove","initLoad","modelId","loadMain","loadWeaponR","loadWeaponL","all","addToScene","basicMainProcessing","initMainModel","initFace","initPos","initRot","rotation","_eyeIdx","_mouthIdx","DEFAULT_FACE_IDX","defaultFaceParams","mouthTexture","eyeTexture","updateFace","initAllWeapons","weaponModel","weaponInfo","attachWeapon","boneName","attachAllWeapons","detachWeapon","detachAllWeapons","playNextAni","capture","_aniIdx","mediaRecorder","stop","toggleCapture","newIdx","aniIdx","addAnimation","aniCode","a","setIsLoading","mixer","addEventListener","aniSettings","batchLoader","file","path","animFiles","animations","anim","updateViewport","prev","current","aspect","captureAnimation","chunks","videoStream","captureStream","MediaRecorder","mimeType","codec","ondataavailable","event","data","onstop","superBuffer","Blob","URL","createObjectURL","document","createElement","body","href","download","click","revokeObjectURL","updateEyeTexture","updateMouthTexture","updateFaceTexture","eyeUpdate","mouthUpdate","applyMaterialSettings","updateFaceOffset","updateMainModel","updateWeapons","updateModel","some","updateAnimation","mainModel","stopAllAction","copy","updateOutlineParams","updateOutline","updatedKeys","saveMaterialReference","applyMaterialParams","materialParams","paramsList","materialCommonParams","materialExtraParams","directSetMatParams","matColorParams","currentColor","matColor","useTexture","flatShading","gradientMap","newMap","updateMaterialParams","updateMaterial","updateLights","updateAscii","newCanvas","replaceCanvas","AsciiEffect","showAscii","ascii","charSet","invert","get","effect","currentCanvas","background","oldCanvas","removeChild","frameId","requestAnimationFrame","dt","getDelta","rotateSpeed","rotateY","currentClipDuration","currentFaceChange","shift","render","app","this","incompatibleModels","AA","cancelAnimationFrame","renderLists","ref","enabled","currentSize","getSize","clipAction","currentAniSettings","setLoop","clampWhenFinished","setTime","duration","play","oldIdx","PureComponent","AniControl","lazy","Display","useContext","initCameraPosition","showAniControl","useCallback","defaultCameraPosition","cameraPositions","isNaN","controlsPositions","className","fallback","ControlPanel","SideBar","MainPage","location","classes","useStyles","useState","currentMode","setCurrentMode","useToggleState","sidebarOpen","toggleSidebarOpen","controlOpen","toggleControlOpen","isLoading","initLoadDone","setInitLoadDone","useRef","showSettings","viewerRef","setViewport","useEffect","pathname","updateViewportSize","removeEventListener","clientHeight","clientWidth","loadingMsg","root","CssBaseline","mode","open","openSidebarButton","openControl","handler","content","process","App","routeProps","initVal","setState","faceOffset","c110350_02","c110340_02","c110018_02","c110370_01","c100015_04","c110267_01","c110050_02","c110291_01","c110354_01","c110345_01","c110266_01","c110365_01","c110346_01","c110366_01","c110299_02","c110360_01","c110307_01","c110322_01","c110356_01","c110300_01","c110344_01","c110053_03","c110368_01","c110367_01","c110003_02","c110270_02","c110341_03","DRAWER_WIDTH","DRAWER_BGCOLOR","baseUrl","matParamsDetails","wireframe","default","emissive","min","max","step","emissiveIntensity","specular","metalness","roughness","shininess","options","defaultMatParams","asciiSet","lightId","sideContent","supportedCodecs","et","ei","mt","mi","wr","wl","bg","cam","ts","showAC","showOutline","rot","cc","MATERIALS","Basic","Toon","Lambert","Phong","Standard","Sword","Blade","Dagger","Axe","Lance","Bow","Wand","Staff","Manacaster","WEAPON_LIST","Male","Female","FILTERS","rarity","element","WEAPON_FILTERS","spFaceTextures","commonBG","green","black","grey","white","c","d","w","e","h","o","c100034_01","d210078_01","d210114_01","h0010001","h0010001_02","h0040101","r0070401","r0080401","smith","face1","face2","face3","face4","face5","face6","face7","face8","face9","videoCodecs","drawerWidth","drawerBG","makeStyles","theme","display","drawer","overflowY","drawerPaper","alignItems","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","marginBottom","padding","top","left","margin","borderRadius","transition","cursor","zIndex","justifyContent","fontSize","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a21a98d8.chunk.js","sourcesContent":["import * as THREE from \"three\";\r\nimport { fbxSource } from \"./App\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport { idxOffsets } from \"./consts\";\r\nimport textureOffsets from \"./data/face_offset\";\r\n\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { callbackOnEach, isSheath } from \"./helpers\";\r\n\r\nimport outlineFragShader from \"./shader/outlineFragShader\";\r\nimport outlineVertShader from \"./shader/outlineVertShader\";\r\n\r\nexport const loadModel = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new FBXLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const loadTexture = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new THREE.TextureLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const createInvisibleFloor = () => {\r\n    const floorGeometry = new THREE.PlaneBufferGeometry(0.1, 0.1);\r\n    floorGeometry.rotateX(Math.PI / 2);\r\n    const floorMaterial = new THREE.MeshBasicMaterial();\r\n    floorMaterial.visible = false;\r\n    return new THREE.Mesh(floorGeometry, floorMaterial);\r\n};\r\n\r\nexport const getModelPath = id => `${fbxSource}/fbx/${id}/${id}.fbx`;\r\n\r\nexport const getTexturePath = id => `${fbxSource}/fbx/${id}/${id}.png`;\r\n\r\nexport const analyzeWeaponCode = code => {\r\n    if (!code) return \"\";\r\n    const flipped = code.endsWith(\"b\");\r\n    const weaponCode = code.substring(0, code.length - 1);\r\n    const modelPath = getModelPath(weaponCode);\r\n    const texturePath = getTexturePath(weaponCode);\r\n\r\n    return {\r\n        modelPath,\r\n        texturePath,\r\n        flipped,\r\n        isSheath: isSheath(weaponCode),\r\n    };\r\n};\r\n\r\nexport const disposeItem = item => {\r\n    if (!item) return;\r\n\r\n    const disposedList = new Set();\r\n\r\n    const notDisposed = object => !disposedList.has(object.uuid);\r\n\r\n    const needToDispose = object => object && notDisposed(object);\r\n\r\n    const disposeObject = object => {\r\n        disposedList.add(object.uuid);\r\n        object.dispose();\r\n    };\r\n\r\n    const dispose = object => {\r\n        if (needToDispose(object)) disposeObject(object);\r\n    };\r\n\r\n    item.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        // dispose material\r\n        callbackOnEach(child.material, mat => {\r\n            if (mat.map) dispose(mat.map);\r\n            if (mat.backupMap) dispose(mat.backupMap);\r\n\r\n            dispose(mat);\r\n        });\r\n        // dispose geometry\r\n        dispose(child.geometry);\r\n    });\r\n};\r\n\r\nconst createNewMaterial = (materialType, params) => {\r\n    const matType = `Mesh${materialType}Material`;\r\n    return new THREE[matType](params);\r\n};\r\n\r\nexport const changeMaterial = ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    texturePath,\r\n}) => {\r\n    if (!target) return;\r\n    target.traverse(child => {\r\n        if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n        const checkParam = `isMesh${materialType}Material`;\r\n        const material = child.material;\r\n\r\n        if (Array.isArray(material)) {\r\n            if (material.every(mat => mat[checkParam]) && !texturePath) return;\r\n\r\n            material.forEach((mat, i) => {\r\n                const texture = texturePath\r\n                    ? new THREE.TextureLoader().load(texturePath)\r\n                    : material[i].map;\r\n\r\n                if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n\r\n                const materialParams = {\r\n                    map: texture,\r\n                    skinning: true,\r\n                };\r\n                const newMaterial = createNewMaterial(\r\n                    materialType,\r\n                    materialParams\r\n                );\r\n                newMaterial.name = mat.name;\r\n                if (mat.backupMap) newMaterial.backupMap = mat.backupMap;\r\n\r\n                if (texturePath && material[i].map) {\r\n                    material[i].map.dispose();\r\n                }\r\n                material[i].dispose();\r\n                child.material[i] = newMaterial;\r\n            });\r\n        } else {\r\n            if (material[checkParam] && !texturePath) return;\r\n            const texture = texturePath\r\n                ? new THREE.TextureLoader().load(texturePath)\r\n                : material.map;\r\n\r\n            if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n            const materialParams = {\r\n                map: texture,\r\n                skinning: true,\r\n            };\r\n            const newMaterial = createNewMaterial(materialType, materialParams);\r\n\r\n            newMaterial.name = material.name;\r\n\r\n            if (material.backupMap) newMaterial.backupMap = material.backupMap;\r\n\r\n            if (texturePath && material.map) {\r\n                material.map.dispose();\r\n            }\r\n            material.dispose();\r\n\r\n            child.material = newMaterial;\r\n        }\r\n    });\r\n};\r\n\r\n// Add outline to object and return reference to outlines\r\nexport const createOutline = (object, params) => {\r\n    if (!object) return;\r\n    const outlines = []; // return value\r\n    object.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const outline = child.clone();\r\n        outlines.push(outline);\r\n\r\n        const newMaterial = createOutlineMaterial(params);\r\n        replaceMaterial(outline, newMaterial);\r\n        outline.visible = params.enable;\r\n        outline.name = \"outline\";\r\n\r\n        if (child.isSkinnedMesh) {\r\n            outline.bind(child.skeleton, child.bindMatrix);\r\n        }\r\n        child.parent.add(outline);\r\n    });\r\n    return outlines;\r\n};\r\n\r\nconst createOutlineMaterial = ({ size, color, opacity }) => {\r\n    const uniforms = {\r\n        size: { type: \"float\", value: size },\r\n        color: { tyle: \"vec3\", value: new THREE.Color(color) },\r\n        opacity: { type: \"float\", value: opacity },\r\n    };\r\n\r\n    const material = new THREE.ShaderMaterial({\r\n        skinning: true,\r\n        side: THREE.BackSide,\r\n        transparent: true,\r\n        uniforms,\r\n        fragmentShader: outlineFragShader,\r\n        vertexShader: outlineVertShader,\r\n    });\r\n    return material;\r\n};\r\n\r\nexport const applyOutlineSettings = (outline, settings) => {\r\n    if (!outline || !settings) return;\r\n\r\n    const { material } = outline;\r\n    settings.forEach((value, key) => {\r\n        switch (key) {\r\n            case \"enable\":\r\n                outline.visible = value;\r\n                break;\r\n            case \"color\":\r\n                callbackOnEach(\r\n                    material,\r\n                    mat => (mat.uniforms.color.value = new THREE.Color(value))\r\n                );\r\n                break;\r\n            default:\r\n                callbackOnEach(\r\n                    material,\r\n                    mat => (mat.uniforms[key].value = value)\r\n                );\r\n        }\r\n    });\r\n};\r\n\r\n// replace material of an object\r\nconst replaceMaterial = (object, newMaterial) => {\r\n    const { material } = object;\r\n    // dispose old material\r\n    callbackOnEach(material, mat => {\r\n        // obj.map?.dispose?.()\r\n        if (mat.map) mat.map.dispose();\r\n        mat.dispose();\r\n    });\r\n    // apply new material\r\n    const matIsArray = Array.isArray(object.material);\r\n    object.material = matIsArray\r\n        ? new Array(object.material.length).fill(newMaterial)\r\n        : newMaterial;\r\n};\r\n\r\nexport const calculateTextureOffset = (currentTexture, prevTexture) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentTexture !== prevTexture) {\r\n        const prevOffset = textureOffsets[prevTexture] || {\r\n            x: 0,\r\n            y: 0,\r\n        };\r\n        const currentOffset = textureOffsets[currentTexture] || { x: 0, y: 0 };\r\n\r\n        offset.x = currentOffset.x - prevOffset.x;\r\n        offset.y = currentOffset.y - prevOffset.y;\r\n    }\r\n    return offset;\r\n};\r\n\r\nexport const calculateIdxOffset = (currentIdx, prevIdx) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentIdx !== prevIdx) {\r\n        const prevOffset = idxOffsets[`face${prevIdx}`];\r\n        const currentOffset = idxOffsets[`face${currentIdx}`];\r\n\r\n        offset.x = currentOffset.x - prevOffset.x;\r\n        offset.y = currentOffset.y - prevOffset.y;\r\n    }\r\n    return offset;\r\n};\r\n\r\nconst applyOffset = part => ({ target, offset }) => {\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { start, count } = targetGroup;\r\n        const end = start + count;\r\n        const uv = child.geometry.attributes.uv;\r\n        for (let i = start; i < end; i++) {\r\n            const u = uv.getX(i) + 0.25 * offset.x;\r\n            const v = uv.getY(i) + 0.25 * offset.y;\r\n            uv.setXY(i, u, v);\r\n        }\r\n        uv.needsUpdate = true;\r\n    });\r\n};\r\n\r\nexport const applyEyeOffset = applyOffset(\"Eye\");\r\nexport const applyMouthOffset = applyOffset(\"Mouth\");\r\n// export const applyBodyOffset = applyOffset(\"BodyAll\");\r\n\r\nconst applyTexture = part => ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    textureId,\r\n}) => {\r\n    const texturePath = getTexturePath(textureId);\r\n    const texture = new THREE.TextureLoader().load(texturePath);\r\n    texture.encoding = THREE.sRGBEncoding;\r\n\r\n    const materialParams = {\r\n        map: texture,\r\n        skinning: true,\r\n    };\r\n    const newMaterial = createNewMaterial(materialType, materialParams);\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { materialIndex } = targetGroup;\r\n        newMaterial.name = child.material[materialIndex].name;\r\n\r\n        child.material[materialIndex] = newMaterial;\r\n    });\r\n};\r\n\r\nexport const applyEyeTexture = applyTexture(\"Eye\");\r\nexport const applyMouthTexture = applyTexture(\"Mouth\");\r\n// export const applyBodyTexture = applyTexture(\"BodyAll\");\r\n\r\n// Chain Code is invalid if starts with the character \"+\"\r\nexport const analyzeChainCode = code => {\r\n    if (!code) return [\"\", \"\"];\r\n    const aniCodes = code.split(\">\");\r\n    const nAni = aniCodes.length;\r\n    const fileList = [];\r\n    const animationList = [];\r\n    for (let i = 0; i < nAni; i++) {\r\n        let timeScale = 1,\r\n            repetitions = 1,\r\n            fileIdx = null,\r\n            aniName = null,\r\n            fileName = null,\r\n            details,\r\n            currentAni = {},\r\n            faceChanges = [];\r\n        const currentParts = aniCodes[i].split(\"+\");\r\n        const fromModelFile = currentParts.length === 1;\r\n        if (fromModelFile) {\r\n            details = currentParts[0];\r\n        } else {\r\n            [fileName, details] = currentParts;\r\n            fileIdx = fileList.length - 1;\r\n        }\r\n        if (fileName) {\r\n            fileIdx = fileList.length;\r\n            fileList.push(fileName);\r\n        }\r\n        if (details.includes(\"&\")) {\r\n            const [name, ...settings] = details.split(\"&\");\r\n            aniName = name;\r\n            for (let setting of settings) {\r\n                const [key, value] = setting.split(\"=\");\r\n                if (key === \"ts\") {\r\n                    timeScale = parseFloat(value);\r\n                }\r\n                if (key === \"r\") {\r\n                    repetitions = value === \"inf\" ? Infinity : parseInt(value);\r\n                }\r\n                if (key.includes(\"-\")) {\r\n                    const [part, time] = key.split(\"-\");\r\n                    const faceMod = { time: parseFloat(time) };\r\n                    const indexName = `${part === \"e\" ? \"eye\" : \"mouth\"}Idx`;\r\n                    faceMod[indexName] = value;\r\n                    faceChanges.push(faceMod);\r\n                }\r\n            }\r\n        } else {\r\n            aniName = details;\r\n        }\r\n        currentAni = {\r\n            fileIdx,\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            faceChanges: processFaceChanges(faceChanges),\r\n        };\r\n\r\n        animationList.push(currentAni);\r\n    }\r\n    return [fileList, animationList];\r\n};\r\n\r\nexport const processFaceChanges = faceChanges => {\r\n    const sorted = faceChanges.sort(change => change.time);\r\n    const timeStamps = new Set(faceChanges.map(change => change.time));\r\n\r\n    if (faceChanges.length === timeStamps.size) {\r\n        sorted.forEach(change => {\r\n            change.id = uuid();\r\n        });\r\n        return sorted;\r\n    }\r\n\r\n    const simplified = [];\r\n    timeStamps.forEach(time => {\r\n        let output = { time, id: uuid(), eyeIdx: \"\", mouthIdx: \"\" };\r\n        const changes = sorted.filter(change => change.time === time);\r\n        changes.forEach(change => (output = Object.assign(output, change)));\r\n        simplified.push(output);\r\n    });\r\n    return simplified;\r\n};\r\n\r\nexport const getFaceChangesArray = (faceChanges, repetitions) => {\r\n    if (!faceChanges) return \"\";\r\n    if (repetitions === 1) return [...faceChanges];\r\n    // [0, 100, 200,...]\r\n    const timeOffset = new Array(repetitions).fill().map((_, i) => i * 100);\r\n\r\n    const offsetFaceChanges = offset =>\r\n        faceChanges.map(({ time, id, ...others }) => ({\r\n            ...others,\r\n            time: time + offset,\r\n        }));\r\n\r\n    return timeOffset.map(offsetFaceChanges).flat();\r\n};\r\n\r\nexport const chainCodeToList = (code, name) => {\r\n    const [fileList, animationList] = analyzeChainCode(code);\r\n    const length = animationList.length;\r\n    const output = animationList.map((ani, i) => {\r\n        const { fileIdx, aniName, timeScale, repetitions, faceChanges } = ani;\r\n        const partName = name.concat(length > 1 ? `#${i + 1}` : \"\");\r\n        const listItem = {\r\n            name: partName,\r\n            fileName: fileList[fileIdx],\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            id: uuid(),\r\n        };\r\n        if (faceChanges) {\r\n            listItem.faceChanges = faceChanges;\r\n        }\r\n        return listItem;\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const createGradientMap = nTones => {\r\n    const colors = new Uint8Array(nTones).map((_, i) => (i * 256) / nTones);\r\n    const map = new THREE.DataTexture(colors, nTones, 1, THREE.LuminanceFormat);\r\n    map.minFilter = THREE.NearestFilter;\r\n    map.magFilter = THREE.NearestFilter;\r\n    map.generateMipmaps = false;\r\n\r\n    return map;\r\n};\r\n","const outlineFragShader = `#define OUTLINE\r\nuniform float opacity;\r\nuniform vec3 color;\r\nvoid main() {\r\n\tgl_FragColor = vec4( color, opacity );\r\n}`;\r\n\r\nexport default outlineFragShader;\r\n","const outlineVertShader = `#define OUTLINE\r\nuniform float size;\r\nvarying vec3 vViewPosition;\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\nvoid main() {\r\n\t#include <color_vertex>\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\t\r\n    vec3 transformed = position + objectNormal*0.0005*size;\r\n        \r\n\t#include <skinning_vertex>\r\n\t#include <project_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\tvViewPosition = - mvPosition.xyz;\r\n\t#include <worldpos_vertex>\r\n}`;\r\n\r\nexport default outlineVertShader;\r\n","import { defaultSettings } from \"../consts\";\r\n\r\nexport const settingsReducer = (state, action) => {\r\n    const { type, key, subkey, value } = action;\r\n    switch (type) {\r\n        case \"toggle\":\r\n            let currentValue;\r\n            if (subkey) {\r\n                currentValue = state[key][subkey][value];\r\n                return {\r\n                    ...state,\r\n                    [key]: {\r\n                        ...state[key],\r\n                        [subkey]: {\r\n                            ...state[key][subkey],\r\n                            [value]: !currentValue,\r\n                        },\r\n                    },\r\n                };\r\n            }\r\n            currentValue = state[key][value];\r\n            return {\r\n                ...state,\r\n                [key]: { ...state[key], [value]: !currentValue },\r\n            };\r\n        case \"reset\":\r\n            // reset values\r\n            // value = array of keys in settings[key] or settings[key][subkey] to be reset, null -> reset all\r\n            const defaultSetting = subkey\r\n                ? defaultSettings[key][subkey]\r\n                : defaultSettings[key];\r\n            // no value -> reset all\r\n            if (!value)\r\n                return subkey\r\n                    ? {\r\n                          ...state,\r\n                          [key]: {\r\n                              ...state[key],\r\n                              [subkey]: {\r\n                                  ...state[key][subkey],\r\n                                  ...defaultSetting,\r\n                              },\r\n                          },\r\n                      }\r\n                    : {\r\n                          ...state,\r\n                          [key]: { ...state[key], ...defaultSetting },\r\n                      };\r\n            // if value is defined, reset only the specified keys\r\n            const update = {};\r\n            value.forEach(v => {\r\n                update[v] = defaultSetting[v];\r\n            });\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...update },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...update } };\r\n        case \"load\":\r\n            // load preset values\r\n            return;\r\n        case \"update\":\r\n            // update state[key] or state[key][subkey] with values from value\r\n            return subkey\r\n                ? {\r\n                      ...state,\r\n                      [key]: {\r\n                          ...state[key],\r\n                          [subkey]: { ...state[key][subkey], ...value },\r\n                      },\r\n                  }\r\n                : { ...state, [key]: { ...state[key], ...value } };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createContext, useReducer } from \"react\";\r\nimport { settingsReducer } from \"../reducer/settingsReducer\";\r\nimport { defaultSettings } from \"../consts\";\r\nimport { chainCodeToList } from \"../viewerHelpers\";\r\n\r\nexport const SettingsContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nconst initAniChain = chainCodeToList(defaultSettings.animation.code, \"init\");\r\n\r\nconst initSettings = { chainMaker: { chain: initAniChain } };\r\nObject.keys(defaultSettings).forEach(\r\n    key => (initSettings[key] = { ...defaultSettings[key] })\r\n);\r\ninitSettings.scene.lights = defaultSettings.scene.lights.map(light => ({\r\n    ...light,\r\n}));\r\n\r\nexport { initSettings };\r\n\r\nexport function SettingsProvider(props) {\r\n    const [settings, dispatch] = useReducer(settingsReducer, initSettings);\r\n\r\n    return (\r\n        <SettingsContext.Provider value={settings}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                {props.children}\r\n            </DispatchContext.Provider>\r\n        </SettingsContext.Provider>\r\n    );\r\n}\r\n","import Button from \"@material-ui/core/Button\";\r\n\r\nimport { initSettings } from \"./context/SettingsContext\";\r\nimport {\r\n    initKey,\r\n    WEAPON_CODE,\r\n    GENDER_CODE,\r\n    COMBO_LENGTH,\r\n    FS_LENGTH,\r\n    aniModList,\r\n} from \"./consts\";\r\n\r\nimport { chainCodeToList } from \"./viewerHelpers\";\r\n\r\nexport const isBlade = code => code.startsWith(\"w302\");\r\n\r\nexport const isSheath = code => isBlade(code) && code.endsWith(\"02\");\r\n\r\nexport const callbackOnEach = (list, callback) => {\r\n    if (Array.isArray(list)) {\r\n        list.forEach(child => callback(child));\r\n        return;\r\n    }\r\n    callback(list);\r\n};\r\n\r\nexport const setInitialSettings = params => {\r\n    if (params.length === 0) return;\r\n    let eyeTextureDefined = false;\r\n    let mouthTextureDefined = false;\r\n    params.forEach(param => {\r\n        if (!param) return;\r\n\r\n        const [keycode, ...value] = param.split(\"=\"); // animation code can have \"=\" inside\r\n        // if no value given, skip\r\n        if (!value[0]) return;\r\n\r\n        let setValue = value.length === 1 ? value[0] : value.join(\"=\");\r\n\r\n        switch (keycode) {\r\n            case \"et\":\r\n                eyeTextureDefined = true;\r\n                break;\r\n            case \"mt\":\r\n                mouthTextureDefined = true;\r\n                break;\r\n            case \"cc\":\r\n                // initialize chain maker chain\r\n                const chainList = chainCodeToList(setValue, \"Animation\");\r\n                initSettings[\"chainMaker\"][\"chain\"] = chainList;\r\n                break;\r\n            case \"bg\":\r\n                if (setValue !== \"transparent\") {\r\n                    setValue = `#${setValue}`;\r\n                }\r\n                break;\r\n            case \"cam\": // parameters in form x, y, z\r\n                setValue = setValue.split(\",\").map(n => parseFloat(n));\r\n                break;\r\n            default:\r\n        }\r\n        const { group, key } = initKey[keycode];\r\n\r\n        const isBooleanValue = setValue === \"true\" || setValue === \"false\";\r\n\r\n        initSettings[group][key] = isBooleanValue\r\n            ? Boolean(setValue === \"true\")\r\n            : setValue;\r\n    });\r\n\r\n    initSettings[\"model\"][\"texture\"] = initSettings[\"model\"][\"id\"];\r\n\r\n    if (!eyeTextureDefined) {\r\n        initSettings[\"model\"][\"eyeTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n    if (!mouthTextureDefined) {\r\n        initSettings[\"model\"][\"mouthTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n};\r\n\r\nexport const generateChainCode = chain => {\r\n    const length = chain.length;\r\n    let output = \"\";\r\n    chain.forEach((ani, i) => {\r\n        const { fileName, aniName, faceChanges } = ani;\r\n        if (fileName) {\r\n            if (i === 0) {\r\n                output = output.concat(fileName);\r\n            } else {\r\n                output = output.concat(\r\n                    fileName !== chain[i - 1].fileName ? fileName : \"\"\r\n                );\r\n            }\r\n            output = output.concat(\"+\");\r\n        }\r\n        output = output.concat(aniName);\r\n\r\n        // Add modifiers\r\n        const modCode = generateAniModCode(ani);\r\n        output = output.concat(modCode);\r\n        const faceCode = generateFaceCode(faceChanges);\r\n        output = output.concat(faceCode);\r\n\r\n        if (i < length - 1) {\r\n            output = output.concat(\">\");\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nconst generateAniModCode = ani => {\r\n    let output = \"\";\r\n    Object.keys(aniModList).forEach(modKey => {\r\n        const { key, defaultValue } = aniModList[modKey];\r\n        if (ani[key] !== defaultValue) {\r\n            output = output.concat(`&${modKey}=${ani[key]}`);\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nconst generateFaceCode = faceChanges => {\r\n    if (!faceChanges) return \"\";\r\n    let output = \"\";\r\n    faceChanges.forEach(change => {\r\n        const { time, eyeIdx, mouthIdx } = change;\r\n        if (!time) return;\r\n        if (eyeIdx) {\r\n            output = output.concat(`&e-${time}=${eyeIdx}`);\r\n        }\r\n        if (mouthIdx) {\r\n            output = output.concat(`&m-${time}=${mouthIdx}`);\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const collectFilter = toggleState => {\r\n    let collected = {};\r\n    Object.keys(toggleState).forEach(key => {\r\n        let tmp = [];\r\n        Object.keys(toggleState[key]).forEach(k => {\r\n            if (toggleState[key][k]) {\r\n                tmp.push(k);\r\n            }\r\n        });\r\n        collected[key] = tmp;\r\n    });\r\n    return collected;\r\n};\r\n\r\nexport const multiCondFilter = (input, filters) => {\r\n    const filterKeys = Object.keys(filters);\r\n\r\n    return input.filter(el => {\r\n        return filterKeys.every(key => {\r\n            if (!filters[key].length) return true;\r\n            return filters[key].includes(el[key]);\r\n        });\r\n    });\r\n};\r\n\r\nexport const complementaryColor = color => {\r\n    const hexColor = color.replace(\"#\", \"0x\");\r\n\r\n    return `#${(\"000000\" + (\"0xffffff\" ^ hexColor).toString(16)).slice(-6)}`;\r\n};\r\n\r\nconst hexToRgb = hex => {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n        ? {\r\n              r: parseInt(result[1], 16),\r\n              g: parseInt(result[2], 16),\r\n              b: parseInt(result[3], 16),\r\n          }\r\n        : null;\r\n};\r\n\r\nexport const getBrightness = ({ r, g, b }) =>\r\n    (r * 299 + g * 587 + b * 114) / 1000;\r\n\r\nexport const getTextColor = color => {\r\n    const rgb = hexToRgb(color);\r\n    return getBrightness(rgb) > 128 ? \"#000000\" : \"#ffffff\";\r\n};\r\n\r\nexport const aniButtonsFromObject = (object, handleSelect, groupName) => {\r\n    if (!object) return null;\r\n    const style = { maxWidth: \"13.5rem\" };\r\n    return Object.keys(object).map(key => (\r\n        <Button\r\n            variant=\"contained\"\r\n            key={key}\r\n            data-value={object[key]}\r\n            data-name={`${groupName ? `${groupName} ` : \"\"}${key}`}\r\n            onClick={handleSelect}\r\n            style={style}\r\n        >\r\n            {key}\r\n        </Button>\r\n    ));\r\n};\r\n\r\n// Animation chain code generator\r\nexport const getStandbyCode = (weapon, gender) =>\r\n    `LOB_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_ONT_${GENDER_CODE[gender]}`;\r\n\r\nexport const getVictoryCode = weapon =>\r\n    `WIN_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_WIN_01>+${WEAPON_CODE[weapon]}_WIN_02`;\r\n\r\nexport const getDashAtkCode = weapon => `DAS+${WEAPON_CODE[weapon]}_DAS_02`;\r\n\r\nexport const getRollCode = weapon => `ROL+${WEAPON_CODE[weapon]}_ROL_01`;\r\n\r\nexport const getComboCode = weapon => {\r\n    const comboLength = COMBO_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `CMB_${code}`;\r\n    for (let i = 1; i <= comboLength; i++) {\r\n        result = result.concat(`+${code}_CMB_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Force Strike chain code\r\nexport const getFSCode = weapon => {\r\n    const fsAniLength = FS_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `FS_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= fsAniLength; i++) {\r\n        result = result.concat(`+${code}_CHR_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Join Lobby chain code\r\nexport const getLobbyCode = (weapon, gender) => {\r\n    const code = WEAPON_CODE[weapon];\r\n    if (gender === \"Male\")\r\n        return `LOB_${code}+${code}_ONT_05&ts=-0.5>+${code}_ONT_02>+${code}_ONT_07>+${code}_ONT_08>+${code}_ONT_21`;\r\n    // Female\r\n    return `LOB_${code}+${code}_ONT_06&ts=-0.5>+${code}_ONT_04>+${code}_ONT_09>+${code}_ONT_10>+${code}_ONT_23`;\r\n};\r\n","import { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { fbxSource } from \"./App\";\r\nimport { CAM_PARAMS, DEFAULT_FACE_IDX } from \"./consts\";\r\nimport {\r\n    directSetMatParams,\r\n    matColorParams,\r\n    materialCommonParams,\r\n    materialExtraParams,\r\n    incompatibleModels,\r\n} from \"./consts\";\r\nimport {\r\n    createInvisibleFloor,\r\n    calculateTextureOffset,\r\n    calculateIdxOffset,\r\n    getModelPath,\r\n    analyzeWeaponCode,\r\n    analyzeChainCode,\r\n    loadModel,\r\n    applyEyeTexture,\r\n    applyMouthTexture,\r\n    applyEyeOffset,\r\n    applyMouthOffset,\r\n    disposeItem,\r\n    createOutline,\r\n    applyOutlineSettings,\r\n    changeMaterial,\r\n    createGradientMap,\r\n    getFaceChangesArray,\r\n} from \"./viewerHelpers\";\r\n\r\nimport { isBlade } from \"./helpers\";\r\n\r\nclass ModelViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        window.app = this;\r\n        this.initScene();\r\n        this.props.setIsLoading(true);\r\n\r\n        // Load the models\r\n        const [main, weaponRight, weaponLeft] = await this.initLoad();\r\n\r\n        // save references to models\r\n        this.models = { main, weaponRight, weaponLeft };\r\n\r\n        // basic viewer for incompatible assets\r\n        const modelId = this.props.model.id;\r\n        const isSimpleViewer =\r\n            !modelId.startsWith(\"c\") ||\r\n            modelId.endsWith(\"_h\") ||\r\n            incompatibleModels.has(modelId);\r\n\r\n        if (isSimpleViewer) {\r\n            if (isBlade(modelId)) {\r\n                const { materialType } = this.props.model;\r\n                const { texturePath } = analyzeWeaponCode(`${modelId}n`);\r\n                changeMaterial({ target: main, materialType, texturePath });\r\n            }\r\n            this.basicMainProcessing();\r\n            // loading finished\r\n            this.props.setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        this.initMainModel();\r\n        this.initAllWeapons();\r\n        this.attachAllWeapons();\r\n\r\n        this.applyMaterialSettings();\r\n\r\n        // loading finished\r\n        this.props.setIsLoading(false);\r\n\r\n        // Add animation\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        this.addAnimation(aniCode, timeScale);\r\n    }\r\n\r\n    async componentDidUpdate(prev) {\r\n        const current = this.props;\r\n\r\n        // // print updated props to console\r\n        // console.log(\"Updated\");\r\n        // Object.keys(prev).forEach(key => {\r\n        //     const oldValue = prev[key];\r\n        //     const currentValue = this.props[key];\r\n        //     const subkeys = Object.keys(oldValue);\r\n        //     if (subkeys.length === 0 || typeof oldValue === \"string\") {\r\n        //         if (oldValue !== currentValue) {\r\n        //             console.log(\r\n        //                 `${key}: ${JSON.stringify(\r\n        //                     oldValue\r\n        //                 )} to ${JSON.stringify(currentValue)}`\r\n        //             );\r\n        //         }\r\n        //     } else {\r\n        //         subkeys.forEach(subkey => {\r\n        //             if (oldValue[subkey] !== currentValue[subkey]) {\r\n        //                 console.log(\r\n        //                     `${key}.${subkey}: ${JSON.stringify(\r\n        //                         oldValue[subkey]\r\n        //                     )} to ${JSON.stringify(currentValue[subkey])}`\r\n        //                 );\r\n        //             }\r\n        //         });\r\n        //     }\r\n        // });\r\n\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n\r\n        this.updateModel(prev.model, current.model);\r\n\r\n        this.updateAnimation(prev.animation, current.animation);\r\n\r\n        this.updateOutline(prev.outline, current.outline);\r\n\r\n        this.updateMaterial(prev, current);\r\n\r\n        this.updateLights(prev.lights, current.lights);\r\n\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n\r\n        // Update background color\r\n        if (prev.bgColor !== current.bgColor) {\r\n            this.bgColor = current.bgColor;\r\n        }\r\n\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n\r\n        // Update Anti Aliasinng\r\n        this.AA = current.antiAliasing;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixer = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n\r\n    // set up initial scene\r\n    initScene = () => {\r\n        this.models = {};\r\n        this.modelInfo = {\r\n            main: this.props.model.id,\r\n            weaponLeft: analyzeWeaponCode(this.props.model.weaponLeft),\r\n            weaponRight: analyzeWeaponCode(this.props.model.weaponRight),\r\n        };\r\n        this.materials = [];\r\n\r\n        // save reference and specifications for outlines\r\n        this.outlines = {};\r\n        this.outlineParams = { ...this.props.outline };\r\n\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.bgColor = this.props.bgColor;\r\n\r\n        // Floor for auto rotate\r\n        this.floor = createInvisibleFloor();\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addLights(lights);\r\n\r\n        // effects\r\n        this.fxConstructors = new Map();\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        const AAEnabled = this.props.antiAliasing;\r\n        this._AA = AAEnabled;\r\n\r\n        this.renderer = AAEnabled ? this.rendererAA : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        this.canvas = this.finalRenderer.domElement;\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n        this.mount.appendChild(this.canvas);\r\n\r\n        this.animate();\r\n    };\r\n\r\n    set AA(enabled) {\r\n        if (enabled === this._AA) return;\r\n        this._AA = enabled;\r\n\r\n        const currentSize = new THREE.Vector2();\r\n        this.renderer.getSize(currentSize);\r\n        // switch renderer\r\n        this.renderer = enabled ? this.rendererAA : this.rendererNoAA;\r\n        this.renderer.setSize(currentSize.x, currentSize.y);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const { canvas } = this;\r\n        const newCanvas = this.renderer.domElement;\r\n        this.replaceCanvas(canvas, newCanvas);\r\n        this.canvas = newCanvas;\r\n    }\r\n\r\n    addLights = lights => {\r\n        this.lights = [];\r\n        lights.forEach(({ enable, type, color, intensity, ...params }) => {\r\n            if (!enable) return;\r\n            const constructor = `${type}Light`;\r\n            const light = new THREE[constructor](color, intensity);\r\n\r\n            for (const [key, value] of Object.entries(params)) {\r\n                switch (key) {\r\n                    case \"position\":\r\n                        const setValue = value.map(v => v || 0);\r\n                        light.position.set(...setValue);\r\n                        break;\r\n                    default:\r\n                        light[key] = value;\r\n                }\r\n            }\r\n            this.scene.add(light);\r\n            this.lights.push(light);\r\n        });\r\n    };\r\n\r\n    removeLights = () => this.lights.forEach(light => this.scene.remove(light));\r\n\r\n    // Promise to load all models at initialize\r\n    initLoad = () => {\r\n        const modelId = this.modelInfo.main;\r\n        const modelPath = getModelPath(modelId);\r\n        const loadMain = loadModel(modelPath);\r\n\r\n        const weaponRight = this.modelInfo.weaponRight?.modelPath;\r\n        const loadWeaponR = loadModel(weaponRight);\r\n\r\n        const weaponLeft = this.modelInfo.weaponLeft?.modelPath;\r\n        const loadWeaponL = loadModel(weaponLeft);\r\n\r\n        return Promise.all([loadMain, loadWeaponR, loadWeaponL]);\r\n    };\r\n\r\n    addToScene = model => this.floor.add(model);\r\n\r\n    basicMainProcessing = () => {\r\n        const model = this.models.main;\r\n        // Add outline\r\n        this.outlines.main = createOutline(model, this.outlineParams);\r\n        // change material type\r\n        const { materialType } = this.props.model;\r\n        changeMaterial({ target: model, materialType });\r\n\r\n        this.addToScene(model);\r\n    };\r\n\r\n    initMainModel = () => {\r\n        const model = this.models.main;\r\n        // Basic processing\r\n        this.basicMainProcessing();\r\n        this.initFace();\r\n        // Save initial position and rotation\r\n        model.initPos = model.position.clone();\r\n        model.initRot = model.rotation.clone();\r\n    };\r\n\r\n    initFace = () => {\r\n        const modelId = this.props.model.id;\r\n        this._eyeIdx = this._mouthIdx = DEFAULT_FACE_IDX;\r\n        const defaultFaceParams = {\r\n            mouthTexture: modelId,\r\n            mouthIdx: DEFAULT_FACE_IDX,\r\n            eyeTexture: modelId,\r\n            eyeIdx: DEFAULT_FACE_IDX,\r\n        };\r\n        this.updateFace(defaultFaceParams, this.props.model);\r\n    };\r\n\r\n    initAllWeapons = () => {\r\n        const { materialType } = this.props.model;\r\n        [\"Right\", \"Left\"].forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weaponModel = this.models[key];\r\n            if (!weaponModel) return;\r\n\r\n            const weaponInfo = this.modelInfo[key];\r\n            const { texturePath, flipped } = weaponInfo;\r\n            changeMaterial({\r\n                target: weaponModel,\r\n                materialType,\r\n                texturePath,\r\n            });\r\n            // flip weapon if needed\r\n            if (flipped) weaponModel.rotation.y += Math.PI;\r\n            // add outline\r\n            this.outlines[key] = createOutline(weaponModel, this.outlineParams);\r\n        });\r\n    };\r\n\r\n    attachWeapon = (weapon, side) => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name === boneName && child.children.length === 0) {\r\n                child.add(weapon);\r\n            }\r\n        });\r\n    };\r\n\r\n    attachAllWeapons = () => {\r\n        [\"Right\", \"Left\"].forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weapon = this.models[key];\r\n            if (!weapon) return;\r\n\r\n            this.attachWeapon(weapon, side);\r\n        });\r\n    };\r\n\r\n    detachWeapon = side => {\r\n        const key = `weapon${side}`;\r\n        const model = this.models[key];\r\n        if (!model) return;\r\n        model.parent.remove(model);\r\n    };\r\n\r\n    detachAllWeapons = () =>\r\n        [\"Right\", \"Left\"].forEach(side => this.detachWeapon(side));\r\n\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    addAnimation = async (aniCode, timeScale) => {\r\n        if (!aniCode) return;\r\n\r\n        const model = this.models.main;\r\n        const [fileList, animationList] = analyzeChainCode(aniCode);\r\n        this.nAni = animationList.length;\r\n\r\n        this.props.setIsLoading(true);\r\n\r\n        model.mixer = new THREE.AnimationMixer(model);\r\n        this.mixer = model.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        model.mixer.timeScale = timeScale; // Global timeScale\r\n        model.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = animationList.map(ani => ({\r\n            timeScale: ani.timeScale,\r\n            repetitions: ani.repetitions,\r\n            faceChanges: ani.faceChanges,\r\n        }));\r\n\r\n        const batchLoader = fileList.map(file => {\r\n            const path = `${fbxSource}/fbx/${file}.fbx`;\r\n            return loadModel(path);\r\n        });\r\n\r\n        // load all animation files\r\n        const animFiles = await Promise.all(batchLoader);\r\n\r\n        this.animations = [];\r\n        animationList.forEach(anim => {\r\n            const { fileIdx, aniName } = anim;\r\n            const animation = aniName\r\n                ? animFiles[fileIdx].animations.find(\r\n                      ani => ani.name === aniName\r\n                  )\r\n                : animFiles[fileIdx].animations[0];\r\n            this.animations.push(animation);\r\n        });\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.props.setIsLoading(false);\r\n    };\r\n\r\n    // this.aniIdx = n => play animation with index n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n        const { mixer } = this;\r\n        const anim = this.animations[newIdx];\r\n        mixer.stopAllAction();\r\n        const action = mixer.clipAction(anim);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n        this.faceChanges = getFaceChangesArray(faceChanges, repetitions);\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        mixer.setTime(0);\r\n        this.currentClipDuration = anim.duration;\r\n        action.play();\r\n    }\r\n\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: this.props.capture.codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.props.setIsLoading(false);\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                var url = URL.createObjectURL(superBuffer);\r\n                var a = document.createElement(\"a\");\r\n                document.body.appendChild(a);\r\n                a.style = \"display: none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n            };\r\n        }\r\n        // disable user input\r\n        this.props.setIsLoading(true);\r\n        // Reset facial expression\r\n        this.eyeIdx = this.props.model.eyeIdx;\r\n        this.mouthIdx = this.props.model.mouthIdx;\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    updateEyeTexture = (prev, current) => {\r\n        const currentTexture = current.eyeTexture;\r\n        const prevTexture = prev.eyeTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const { materialType } = current;\r\n        applyEyeTexture({\r\n            target: this.models.main,\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyEyeOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n        return true;\r\n    };\r\n\r\n    set eyeIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._eyeIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyEyeOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n        this._eyeIdx = newIdx;\r\n    }\r\n\r\n    updateMouthTexture = (prev, current) => {\r\n        const currentTexture = current.mouthTexture;\r\n        const prevTexture = prev.mouthTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const { materialType } = current;\r\n        applyMouthTexture({\r\n            target: this.models.main,\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyMouthOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n        return true;\r\n    };\r\n\r\n    set mouthIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._mouthIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyMouthOffset({\r\n            target: this.models.main,\r\n            offset,\r\n        });\r\n        this._mouthIdx = newIdx;\r\n    }\r\n\r\n    updateFaceTexture = (prev, current) => {\r\n        const eyeUpdate = this.updateEyeTexture(prev, current);\r\n        const mouthUpdate = this.updateMouthTexture(prev, current);\r\n        if (eyeUpdate || mouthUpdate) {\r\n            this.applyMaterialSettings();\r\n        }\r\n    };\r\n\r\n    updateFaceOffset = current => {\r\n        this.eyeIdx = current.eyeIdx;\r\n        this.mouthIdx = current.mouthIdx;\r\n    };\r\n\r\n    updateFace = (prev, current) => {\r\n        this.updateFaceTexture(prev, current);\r\n        this.updateFaceOffset(current);\r\n    };\r\n\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        if (prev.id !== modelId) {\r\n            this.props.setIsLoading(true);\r\n            const modelPath = getModelPath(modelId);\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n\r\n            this.detachAllWeapons();\r\n\r\n            // remove and dispose old model\r\n            this.floor.remove(this.models.main);\r\n            disposeItem(this.models.main);\r\n\r\n            this.models.main = model;\r\n\r\n            this.initMainModel();\r\n\r\n            this.attachAllWeapons();\r\n\r\n            this.applyMaterialSettings();\r\n\r\n            // Add animation to new model\r\n            const { code: aniCode, timeScale } = this.props.animation;\r\n            this.addAnimation(aniCode, timeScale);\r\n\r\n            this.props.setIsLoading(false);\r\n            return;\r\n        }\r\n        // Update face when main model not changed\r\n        this.updateFace(prev, current);\r\n    };\r\n\r\n    updateWeapons = async (prev, current) => {\r\n        [\"Right\", \"Left\"].forEach(async side => {\r\n            const key = `weapon${side}`;\r\n            // if not changed, return\r\n            if (prev[key] === current[key]) return;\r\n            // Update weapon\r\n            this.detachWeapon(side); // remove old weapon\r\n            disposeItem(this.models[key]); // dispose old weapon\r\n            // if current weapon is empty (weapon removed)\r\n            if (!current[key]) {\r\n                this.models[key] = null;\r\n                this.modelInfo[key] = \"\";\r\n                // remove reference to outline\r\n                this.outlines[key] = null;\r\n                return;\r\n            }\r\n            // load new weapon\r\n            this.props.setIsLoading(true);\r\n\r\n            this.modelInfo[key] = analyzeWeaponCode(this.props.model[key]);\r\n            const { modelPath, texturePath } = this.modelInfo[key];\r\n\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            this.models[key] = model;\r\n\r\n            // process new weapon\r\n            const { materialType } = current;\r\n            changeMaterial({\r\n                target: this.models[key],\r\n                materialType,\r\n                texturePath,\r\n            });\r\n\r\n            if (this.modelInfo[key].flipped) {\r\n                this.models[key].rotation.y = Math.PI;\r\n            }\r\n            // add outline to new weapon\r\n            this.outlines[key] = createOutline(model, this.outlineParams);\r\n            // attach new weapon to main model\r\n            this.attachWeapon(model, side);\r\n\r\n            this.applyMaterialSettings();\r\n\r\n            this.props.setIsLoading(false);\r\n        });\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        await this.updateMainModel(prev, current);\r\n        this.updateWeapons(prev, current);\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            const mainModel = this.models.main;\r\n            if (prev.code) {\r\n                mainModel.mixer.stopAllAction();\r\n\r\n                // Reset position and rotation to initial value\r\n                const { initPos, initRot } = mainModel;\r\n                mainModel.position.copy(initPos);\r\n                mainModel.rotation.copy(initRot);\r\n\r\n                // Reset facial expression\r\n                this.eyeIdx = this.props.model.eyeIdx;\r\n                this.mouthIdx = this.props.model.mouthIdx;\r\n\r\n                this.mixer = null;\r\n                this.animations = [];\r\n            }\r\n            // Add new animation\r\n            this.addAnimation(code, timeScale);\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    updateOutlineParams = update => {\r\n        const keys = Object.keys(this.outlines).filter(\r\n            key => this.outlines[key]\r\n        );\r\n        const outlines = keys.map(key => this.outlines[key]).flat();\r\n        outlines.forEach(outline => {\r\n            applyOutlineSettings(outline, update);\r\n        });\r\n    };\r\n\r\n    updateOutline = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        this.outlineParams = current;\r\n        const updatedKeys = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedKeys.length === 0) return;\r\n\r\n        const update = new Map(updatedKeys.map(key => [key, current[key]]));\r\n        this.updateOutlineParams(update);\r\n    };\r\n\r\n    saveMaterialReference = () => {\r\n        this.materials = [];\r\n        const mainModel = this.models.main;\r\n        mainModel.traverse(child => {\r\n            if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n            const { material } = child;\r\n\r\n            if (Array.isArray(material)) {\r\n                this.materials = this.materials.concat(material);\r\n                return;\r\n            }\r\n            this.materials.push(material);\r\n        });\r\n    };\r\n\r\n    applyMaterialParams = () => {\r\n        const { materialType } = this.props.model;\r\n        const current = this.props.materialParams;\r\n        const { materials } = this;\r\n        const paramsList = [\r\n            ...materialCommonParams,\r\n            ...materialExtraParams[materialType],\r\n        ];\r\n\r\n        materials.forEach(mat => {\r\n            directSetMatParams.forEach(param => {\r\n                if (!paramsList.includes(param)) return;\r\n                mat[param] = current[param];\r\n            });\r\n\r\n            matColorParams.forEach(param => {\r\n                if (!paramsList.includes(param)) return;\r\n                const currentColor = current[param];\r\n                const matColor = new THREE.Color(currentColor);\r\n                mat[param] = matColor;\r\n            });\r\n\r\n            if (!current.useTexture) {\r\n                if (mat.map) mat.backupMap = mat.map;\r\n                mat.map = null;\r\n            }\r\n\r\n            if (current.flatShading) {\r\n                mat.flatShading = current.flatShading;\r\n                mat.needsUpdate = true;\r\n            }\r\n\r\n            if (materialType === \"Toon\" && current.gradientMap !== \"none\") {\r\n                let newMap = null;\r\n                const nTones = parseInt(current.gradientMap);\r\n                newMap = createGradientMap(nTones);\r\n\r\n                materials.forEach(mat => {\r\n                    mat.gradientMap = newMap;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    applyMaterialSettings = () => {\r\n        this.saveMaterialReference();\r\n        this.applyMaterialParams();\r\n    };\r\n\r\n    updateMaterialParams = (prev, current) => {\r\n        const { materialType } = this.props.model;\r\n        const { useTexture, flatShading, gradientMap } = current;\r\n        const { materials } = this;\r\n        const paramsList = [\r\n            ...materialCommonParams,\r\n            ...materialExtraParams[materialType],\r\n        ];\r\n\r\n        directSetMatParams.forEach(param => {\r\n            if (!paramsList.includes(param) || prev[param] === current[param])\r\n                return;\r\n            materials.forEach(mat => (mat[param] = current[param]));\r\n        });\r\n\r\n        matColorParams.forEach(param => {\r\n            if (!paramsList.includes(param) || prev[param] === current[param])\r\n                return;\r\n            const currentColor = current[param];\r\n            const matColor = new THREE.Color(currentColor);\r\n            materials.forEach(mat => (mat[param] = matColor));\r\n        });\r\n\r\n        if (prev.useTexture !== useTexture) {\r\n            if (!useTexture) {\r\n                materials.forEach(mat => {\r\n                    mat.backupMap = mat.map;\r\n                    mat.map = null;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            } else {\r\n                materials.forEach(mat => {\r\n                    mat.map = mat.backupMap;\r\n                    delete mat.backupMap;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            }\r\n        }\r\n\r\n        if (prev.flatShading !== flatShading) {\r\n            materials.forEach(mat => {\r\n                mat.flatShading = flatShading;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n\r\n        if (prev.gradientMap !== gradientMap) {\r\n            let newMap = null;\r\n            if (gradientMap !== \"none\") {\r\n                const nTones = parseInt(gradientMap);\r\n                newMap = createGradientMap(nTones);\r\n            }\r\n\r\n            materials.forEach(mat => {\r\n                mat.gradientMap = newMap;\r\n                mat.needsUpdate = true;\r\n            });\r\n        }\r\n    };\r\n\r\n    updateMaterial = (prev, current) => {\r\n        // update material type\r\n        if (prev.model.materialType !== current.model.materialType) {\r\n            const { materialType } = current.model;\r\n            changeMaterial({ target: this.models.main, materialType });\r\n\r\n            this.applyMaterialSettings();\r\n            return;\r\n        }\r\n\r\n        this.updateMaterialParams(prev.materialParams, current.materialParams);\r\n    };\r\n\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeLights();\r\n            this.addLights(current);\r\n        }\r\n    };\r\n\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n            const { canvas } = this;\r\n            const newCanvas = this.renderer.domElement;\r\n            this.replaceCanvas(canvas, newCanvas);\r\n            this.canvas = newCanvas;\r\n            return;\r\n        }\r\n\r\n        if (!this.fxConstructors.has(\"ascii\")) {\r\n            const { AsciiEffect } = await import(\r\n                \"three/examples/jsm/effects/AsciiEffect\"\r\n            );\r\n            this.fxConstructors.set(\"ascii\", AsciiEffect);\r\n            this.showAscii();\r\n        } else this.showAscii();\r\n\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n    };\r\n\r\n    showAscii = () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const AsciiEffect = this.fxConstructors.get(\"ascii\");\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n        this.effect.setSize(this.viewport.width, this.viewport.height);\r\n\r\n        const newCanvas = this.effect.domElement;\r\n        const currentCanvas = this.canvas;\r\n        newCanvas.style.color = color;\r\n        newCanvas.style.background = bgColor;\r\n\r\n        this.replaceCanvas(currentCanvas, newCanvas);\r\n        this.canvas = newCanvas;\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    set bgColor(color) {\r\n        this.scene.background =\r\n            color !== \"transparent\" ? new THREE.Color(color) : null;\r\n    }\r\n\r\n    replaceCanvas = (oldCanvas, newCanvas) => {\r\n        this.mount.removeChild(oldCanvas);\r\n        this.mount.appendChild(newCanvas);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n        const dt = this.clock.getDelta();\r\n        // Rotate the floor\r\n        const { rotateSpeed } = this.props;\r\n        if (rotateSpeed) this.floor.rotateY((rotateSpeed * dt * Math.PI) / 2);\r\n\r\n        if (this.mixer) this.mixer.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length > 0) {\r\n            const elapsedTime = this.mixer.time;\r\n            const nextFaceChangeTime =\r\n                (this.faceChanges[0].time * this.currentClipDuration) / 100;\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                const currentFaceChange = this.faceChanges.shift();\r\n                const { eyeIdx, mouthIdx } = currentFaceChange;\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModelViewer;\r\n","import { lazy, Suspense, useContext, useCallback } from \"react\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"./context/SettingsContext\";\r\nimport ModelViewer from \"./ModelViewer\";\r\nimport \"./styles/Display.css\";\r\n\r\nimport { getTextColor } from \"./helpers\";\r\nimport { cameraPositions, controlsPositions } from \"./consts\";\r\n\r\nconst AniControl = lazy(() => import(\"./AniControl\"));\r\n\r\nfunction Display(props) {\r\n    const { viewport } = props;\r\n\r\n    const settings = useContext(SettingsContext);\r\n    const {\r\n        model: { id: modelId },\r\n        scene: { rotateSpeed, background: bgColor, initCameraPosition, lights },\r\n        app: { showAniControl, antiAliasing },\r\n    } = settings;\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n    const toggleCapture = useCallback(() => {\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"capture\",\r\n            value: \"enable\",\r\n        };\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const type = modelId[0];\r\n\r\n    const defaultCameraPosition =\r\n        cameraPositions[modelId] || cameraPositions[type];\r\n\r\n    const cameraPosition = initCameraPosition\r\n        ? initCameraPosition.map((n, i) =>\r\n              isNaN(n) ? defaultCameraPosition[i] : n\r\n          )\r\n        : defaultCameraPosition;\r\n\r\n    const controlsPosition =\r\n        controlsPositions[modelId] || controlsPositions[type];\r\n\r\n    return (\r\n        <div className=\"Display\">\r\n            {showAniControl && (\r\n                <div\r\n                    className=\"Display-AniControl\"\r\n                    style={{ color: getTextColor(bgColor) }}\r\n                >\r\n                    <Suspense fallback={null}>\r\n                        <AniControl value={settings.animation.timeScale} />\r\n                    </Suspense>\r\n                </div>\r\n            )}\r\n            <ModelViewer\r\n                setIsLoading={props.setIsLoading}\r\n                capture={settings.capture}\r\n                toggleCapture={toggleCapture}\r\n                viewport={viewport}\r\n                cameraPosition={cameraPosition}\r\n                controlsPosition={controlsPosition}\r\n                model={settings.model}\r\n                materialParams={settings.materialParams}\r\n                outline={settings.outline}\r\n                animation={settings.animation}\r\n                rotateSpeed={rotateSpeed}\r\n                lights={lights}\r\n                bgColor={bgColor}\r\n                antiAliasing={antiAliasing}\r\n                ascii={settings.ascii}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n","import { lazy, Suspense, useState, useRef, useEffect, useContext } from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\n\r\nimport Menu from \"@material-ui/icons/Menu\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport useStyles from \"./styles/MainPageStyles\";\r\n\r\nimport Display from \"./Display\";\r\nimport { SettingsContext } from \"./context/SettingsContext\";\r\nimport { setInitialSettings } from \"./helpers\";\r\n\r\nconst ControlPanel = lazy(() => import(\"./ControlPanel\"));\r\nconst SideBar = lazy(() => import(\"./SideBar\"));\r\n\r\nfunction MainPage({ location }) {\r\n    const classes = useStyles();\r\n\r\n    const [currentMode, setCurrentMode] = useState(\"model\");\r\n    const [sidebarOpen, toggleSidebarOpen] = useToggleState(true);\r\n    const [controlOpen, toggleControlOpen] = useToggleState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [initLoadDone, setInitLoadDone] = useState(false);\r\n    // const [handleSelect, setHandleSelect] = useState(null);\r\n    const handleSelect = useRef(null);\r\n    const {\r\n        app: { showSettings },\r\n    } = useContext(SettingsContext);\r\n\r\n    const viewerRef = useRef();\r\n    const [viewport, setViewport] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const params = location.pathname.split(\"/\");\r\n        setInitialSettings(params);\r\n        setInitLoadDone(true);\r\n\r\n        window.addEventListener(\"resize\", updateViewportSize);\r\n\r\n        return function () {\r\n            window.removeEventListener(\"resize\", updateViewportSize);\r\n        };\r\n    }, [location.pathname]);\r\n\r\n    const updateViewportSize = () => {\r\n        const height = viewerRef.current.clientHeight;\r\n        const width = viewerRef.current.clientWidth;\r\n        setViewport({ width, height });\r\n    };\r\n\r\n    const openControl = (mode, handler) => {\r\n        setCurrentMode(mode);\r\n        handleSelect.current = handler;\r\n        toggleControlOpen();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <div className={classes.loadingMsg}>Loading...</div>}\r\n            <div className={classes.root}>\r\n                <Suspense fallback={null}>\r\n                    <CssBaseline />\r\n                    <ControlPanel\r\n                        mode={currentMode}\r\n                        handleSelect={handleSelect.current}\r\n                        open={controlOpen}\r\n                        toggleControlOpen={toggleControlOpen}\r\n                    />\r\n                    {initLoadDone && showSettings && (\r\n                        <>\r\n                            <button\r\n                                onClick={toggleSidebarOpen}\r\n                                className={classes.openSidebarButton}\r\n                            >\r\n                                <Menu />\r\n                            </button>\r\n\r\n                            <SideBar\r\n                                toggleSidebarOpen={toggleSidebarOpen}\r\n                                open={sidebarOpen}\r\n                                openControl={openControl}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </Suspense>\r\n                {initLoadDone && (\r\n                    <main ref={viewerRef} className={classes.content}>\r\n                        <Display\r\n                            setIsLoading={setIsLoading}\r\n                            viewport={viewport}\r\n                        />\r\n                    </main>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import { SettingsProvider } from \"./context/SettingsContext\";\r\n\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\nimport MainPage from \"./MainPage\";\r\n\r\nimport \"./styles/App.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <SettingsProvider>\r\n            <HashRouter>\r\n                <Route render={routeProps => <MainPage {...routeProps} />} />\r\n            </HashRouter>\r\n        </SettingsProvider>\r\n    );\r\n}\r\n\r\nexport const fbxSource = process.env.PUBLIC_URL;\r\n\r\nexport default App;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nfunction useToggleState(initVal = false) {\r\n    const [state, setState] = useState(initVal);\r\n    const toggleState = useCallback(() => {\r\n        setState(state => !state);\r\n    }, [setState]);\r\n    return [state, toggleState];\r\n}\r\n\r\nexport default useToggleState;\r\n","const faceOffset = {\r\n    c110350_02: { x: 0.043, y: -0.0625 }, // Formal Joachim\r\n    c110340_02: { x: 0.043, y: -0.0625 }, // Formal Noelle\r\n    c110018_02: { x: 0.043, y: -0.0625 }, // Opera Karina\r\n    c110370_01: { x: 0.043, y: -0.0625 }, // Lapis\r\n    c100015_04: { x: 0.05, y: -0.08 }, // Chelle\r\n    c110267_01: { x: 0.08, y: -0.03 }, // Hawk\r\n    c110050_02: { x: 0.07, y: 0.13 }, // HBerserker\r\n    c110291_01: { x: 0.07, y: 0.14 }, // Marth\r\n    c110354_01: { x: 0.07, y: 0.01 }, // Mega Man\r\n    c110345_01: { x: 0.08, y: -0.13 }, // Mitsuhide\r\n    c110266_01: { x: 0.01, y: 0.03 }, // Naveed\r\n    c110365_01: { x: 0.043, y: -0.0625 }, // Nevin\r\n    c110346_01: { x: 0.07, y: 0.08 }, // Nobunaga\r\n    c110366_01: { x: 0.043, y: -0.0625 }, // Pinon\r\n    c110299_02: { x: 0.07, y: 0.08 }, // RXZ\r\n    c110360_01: { x: 0.07, y: 0.14 }, // Tiki\r\n    c110307_01: { x: 0.08, y: -0.03 }, // Victor\r\n    c110322_01: { x: 0.043, y: 0.08 }, // Zhu Bajie\r\n    c110356_01: { x: 0.07, y: 0.08 }, // Gauld\r\n    c110300_01: { x: 0.07, y: -0.1 }, // Pipple\r\n    c110344_01: { x: 0.07, y: -0.02 }, // Yuya\r\n    c110053_03: { x: 0.043, y: -0.0625 }, // INefi\r\n    c110368_01: { x: 0.043, y: -0.0625 }, // Meene\r\n    c110367_01: { x: 0.043, y: -0.0625 }, // Ilia\r\n    c110003_02: { x: 0.043, y: -0.0625 }, // Gun Joe\r\n    c110270_02: { x: 0.043, y: -0.0625 }, // HMelsa\r\n    c110341_03: { x: 0.043, y: -0.0625 }, // Hakasha\r\n};\r\nexport default faceOffset;\r\n","export const DRAWER_WIDTH = \"16rem\";\r\nexport const DRAWER_BGCOLOR = \"#330000\";\r\n\r\nexport const DEFAULT_FACE_IDX = \"2\";\r\n\r\nexport const baseUrl = \"https://dgk3593.github.io/dl-model/#/\";\r\n\r\nconst defaultAni = \"MWM_CMN+CMN_MWM_03\";\r\n\r\nexport const matParamsDetails = {\r\n    wireframe: {\r\n        name: \"Wireframe\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    useTexture: {\r\n        name: \"Texture\",\r\n        type: \"boolean\",\r\n        default: true,\r\n    },\r\n    transparent: {\r\n        name: \"Transparent\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    flatShading: {\r\n        name: \"Flat Shading\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    color: {\r\n        name: \"Color\",\r\n        type: \"color\",\r\n        default: \"#ffffff\",\r\n    },\r\n    emissive: {\r\n        name: \"Emissive\",\r\n        type: \"color\",\r\n        default: \"#000000\",\r\n    },\r\n    opacity: {\r\n        name: \"Opacity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    emissiveIntensity: {\r\n        name: \"Emissive Intensity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    specular: {\r\n        name: \"Specular\",\r\n        type: \"color\",\r\n        default: \"#111111\",\r\n    },\r\n    metalness: {\r\n        name: \"Metalness\",\r\n        type: \"percentage\",\r\n        default: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    roughness: {\r\n        name: \"Roughness\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    shininess: {\r\n        name: \"Shininess\",\r\n        type: \"number\",\r\n        default: 30,\r\n        min: 1,\r\n        max: 100,\r\n        step: 1,\r\n    },\r\n    gradientMap: {\r\n        name: \"Gradient Map\",\r\n        type: \"select\",\r\n        default: \"none\",\r\n        options: [\"none\", \"2 Tones\", \"3 Tones\", \"4 Tones\", \"5 Tones\"],\r\n    },\r\n};\r\n\r\nexport const directSetMatParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"emissiveIntensity\",\r\n    \"metalness\",\r\n    \"roughness\",\r\n    \"shininess\",\r\n];\r\n\r\nexport const matColorParams = [\"color\", \"emissive\", \"specular\"];\r\n\r\nconst defaultMatParams = {};\r\nObject.keys(matParamsDetails).forEach(key => {\r\n    defaultMatParams[key] = matParamsDetails[key].default;\r\n});\r\n\r\nconst defaultLights = [\r\n    {\r\n        lightId: \"0\",\r\n        type: \"Ambient\",\r\n        color: \"#444444\",\r\n        enable: true,\r\n        intensity: 1,\r\n    },\r\n    {\r\n        lightId: \"1\",\r\n        type: \"Directional\",\r\n        color: \"#ffffff\",\r\n        enable: true,\r\n        position: [50, 0, 100],\r\n        intensity: 0.8,\r\n    },\r\n];\r\n\r\nexport const asciiSet = [\r\n    \" .:-=+*#%@\",\r\n    \" .'`^\\\",:;Il!i~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$\",\r\n];\r\n\r\nexport const defaultSettings = {\r\n    model: {\r\n        materialType: \"Basic\",\r\n        id: \"c100001_01\",\r\n        texture: \"c100001_01\",\r\n        eyeTexture: \"c100001_01\",\r\n        eyeIdx: \"2\",\r\n        mouthTexture: \"c100001_01\",\r\n        mouthIdx: \"2\",\r\n        weaponRight: \"\",\r\n        weaponLeft: \"\",\r\n    },\r\n    materialParams: { ...defaultMatParams },\r\n    scene: {\r\n        rotateSpeed: 0,\r\n        background: \"#cccccc\",\r\n        initCameraPosition: null,\r\n        lights: defaultLights,\r\n    },\r\n    animation: {\r\n        code: defaultAni,\r\n        timeScale: 1,\r\n    },\r\n    app: {\r\n        sideContent: \"settings\",\r\n        showSettings: true,\r\n        showAniControl: true,\r\n        antiAliasing: false,\r\n    },\r\n    outline: {\r\n        enable: true,\r\n        size: 5, // 1 -> 10\r\n        color: \"#000000\",\r\n        opacity: 1, // 0.1 -> 10%, 1-> 100%\r\n    },\r\n    capture: {\r\n        enable: false,\r\n        supportedCodecs: [],\r\n        codec: \"\",\r\n    },\r\n    ascii: {\r\n        enable: false,\r\n        charSet: asciiSet[1],\r\n        invert: false,\r\n        color: \"#00ff00\",\r\n        bgColor: \"#000000\",\r\n    },\r\n};\r\n\r\nexport const initKey = {\r\n    id: { group: \"model\", key: \"id\" },\r\n    et: { group: \"model\", key: \"eyeTexture\" },\r\n    ei: { group: \"model\", key: \"eyeIdx\" },\r\n    mt: { group: \"model\", key: \"mouthTexture\" },\r\n    mi: { group: \"model\", key: \"mouthIdx\" },\r\n    wr: { group: \"model\", key: \"weaponRight\" },\r\n    wl: { group: \"model\", key: \"weaponLeft\" },\r\n    bg: { group: \"scene\", key: \"background\" },\r\n    cam: { group: \"scene\", key: \"initCameraPosition\" },\r\n    ts: { group: \"animation\", key: \"timeScale\" },\r\n    showAC: { group: \"app\", key: \"showAniControl\" },\r\n    showSettings: { group: \"app\", key: \"showSettings\" },\r\n    showOutline: { group: \"outline\", key: \"enable\" },\r\n    AA: { group: \"app\", key: \"antiAliasing\" },\r\n    rot: { group: \"scene\", key: \"rotateSpeed\" },\r\n    cc: { group: \"animation\", key: \"code\" },\r\n};\r\n\r\nexport const MATERIALS = [\"Basic\", \"Toon\", \"Lambert\", \"Phong\", \"Standard\"];\r\n\r\nexport const materialCommonParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"useTexture\",\r\n    \"color\",\r\n];\r\n\r\nexport const materialExtraParams = {\r\n    Basic: [],\r\n    Toon: [\"emissive\", \"emissiveIntensity\", \"gradientMap\"],\r\n    Lambert: [\"emissive\", \"emissiveIntensity\"],\r\n    Phong: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"specular\",\r\n        \"shininess\",\r\n        \"flatShading\",\r\n    ],\r\n    Standard: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"metalness\",\r\n        \"roughness\",\r\n        \"flatShading\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_CODE = {\r\n    Sword: \"SWD\",\r\n    Blade: \"KAT\",\r\n    Dagger: \"DAG\",\r\n    Axe: \"AXE\",\r\n    Lance: \"LAN\",\r\n    Bow: \"BOW\",\r\n    Wand: \"ROD\",\r\n    Staff: \"CAN\",\r\n    Manacaster: \"GUN\",\r\n};\r\n\r\nexport const WEAPON_LIST = [\r\n    \"Sword\",\r\n    \"Blade\",\r\n    \"Dagger\",\r\n    \"Axe\",\r\n    \"Lance\",\r\n    \"Bow\",\r\n    \"Wand\",\r\n    \"Staff\",\r\n    \"Manacaster\",\r\n];\r\n\r\nexport const GENDER_CODE = {\r\n    Male: 21,\r\n    Female: 23,\r\n};\r\n\r\nexport const COMBO_LENGTH = {\r\n    Axe: 5,\r\n    Bow: 6,\r\n    Staff: 5,\r\n    Dagger: 6,\r\n    Blade: 5,\r\n    Lance: 5,\r\n    Wand: 5,\r\n    Sword: 5,\r\n};\r\n\r\nexport const FS_LENGTH = {\r\n    Axe: 3,\r\n    Bow: 3,\r\n    Staff: 5,\r\n    Dagger: 3,\r\n    Blade: 3,\r\n    Lance: 4,\r\n    Wand: 3,\r\n    Sword: 3,\r\n};\r\n\r\nexport const FILTERS = {\r\n    rarity: [\"3\", \"4\", \"5\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_FILTERS = {\r\n    rarity: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\", \"None\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const spFaceTextures = {\r\n    c110300_01: \"ec110300_01\",\r\n};\r\n\r\nexport const incompatibleModels = new Set([\r\n    \"c100007_01\",\r\n    \"c100007_05\",\r\n    \"c100007_09\",\r\n    \"c100034_01\",\r\n    \"c100036_01\",\r\n    \"c100037_01\",\r\n    \"c100041_01\",\r\n]);\r\n\r\nexport const commonBG = {\r\n    green: \"#00ff00\",\r\n    black: \"#000000\",\r\n    grey: \"#cccccc\",\r\n    white: \"#ffffff\",\r\n};\r\n\r\nexport const CAM_PARAMS = {\r\n    angle: 45,\r\n    far: 300,\r\n    near: 0.01,\r\n};\r\n\r\nexport const cameraPositions = {\r\n    c: [0, 0.5, 1.5],\r\n    d: [3, 0.5, 6],\r\n    w: [2, 0, 0],\r\n    b: [1, 0.5, 6],\r\n    e: [1, 1, 4],\r\n    h: [1, 0.5, 3],\r\n    o: [0, 0.5, 8],\r\n    r: [3, 3, 20],\r\n\r\n    c100034_01: [0, 0.5, 1.75],\r\n    d210078_01: [3, 3, 20],\r\n    d210114_01: [3, 3, 20],\r\n    h0010001: [6, 0.5, 8],\r\n    h0010001_02: [2, 0, 0],\r\n    h0040101: [1, 0.5, 4],\r\n    r0070401: [30, 30, 100],\r\n    r0080401: [1, 2, 5],\r\n\r\n    smith: [1, 1, 2],\r\n};\r\n\r\nexport const controlsPositions = {\r\n    c: [0, 0.5, 0],\r\n    d: [0, 1, 0],\r\n    w: [0, 0, 0],\r\n    b: [0, 1, 0],\r\n    e: [0, 0.5, 0],\r\n    h: [0, 1, 0],\r\n    o: [0, 0, 0],\r\n    r: [0, 3, 0],\r\n\r\n    d210078_01: [0, 3, 0],\r\n    d210114_01: [0, 3, 0],\r\n    h0010001_02: [0, 3, 0],\r\n    r0070401: [0, 20, 0],\r\n    r0080401: [0, 2, 0],\r\n\r\n    smith: [0, 0.5, 0],\r\n};\r\n\r\nexport const idxOffsets = {\r\n    face1: { x: 2, y: 1 },\r\n    face2: { x: 0, y: 0 },\r\n    face3: { x: 1, y: 0 },\r\n    face4: { x: 2, y: 0 },\r\n    face5: { x: 3, y: 0 },\r\n    face6: { x: 0, y: -1 },\r\n    face7: { x: 1, y: -1 },\r\n    face8: { x: 2, y: -1 },\r\n    face9: { x: 3, y: -1 },\r\n};\r\n\r\nexport const aniModList = {\r\n    ts: { key: \"timeScale\", defaultValue: 1 },\r\n    r: { key: \"repetitions\", defaultValue: 1 },\r\n};\r\n\r\nexport const videoCodecs = [\r\n    \"video/webm;codecs=h264\",\r\n    \"video/webm;codecs=vp9\",\r\n    \"video/webm;codecs=vp8\",\r\n    \"video/webm\",\r\n];\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_WIDTH, DRAWER_BGCOLOR } from \"../consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst drawerWidth = DRAWER_WIDTH;\r\nconst drawerBG = DRAWER_BGCOLOR;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"block\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        overflowY: \"scroll\",\r\n    },\r\n    drawerPaper: {\r\n        alignItems: \"center\",\r\n        backgroundColor: drawerBG,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        width: drawerWidth,\r\n        \"& button\": {\r\n            marginBottom: \"0.2rem\",\r\n        },\r\n    },\r\n    content: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        padding: 0,\r\n    },\r\n    openSidebarButton: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        margin: \"2rem\",\r\n        opacity: \"0.5\",\r\n        borderRadius: \"0.25rem\",\r\n        transition: \"0.5s all ease-in-out\",\r\n        backgroundColor: \"#cccccc\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            opacity: \"1\",\r\n        },\r\n    },\r\n    loadingMsg: {\r\n        position: \"absolute\",\r\n        zIndex: \"9999\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"white\",\r\n        fontSize: \"x-large\",\r\n        backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","export default __webpack_public_path__ + \"static/media/Rose-Petals.bc11ecc7.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}