{"version":3,"sources":["ColorSettings.js"],"names":["ChromePicker","lazy","then","module","default","titles","background","outlineColor","ColorSettings","initColor","toggleControlOpen","mode","dispatch","useContext","DispatchContext","settings","SettingsContext","title","commonColor","commonBG","scene","outline","color","split","key","subkey","lights","find","lightId","useState","setColor","setNewColor","event","value","currentTarget","commonBGBtn","Object","keys","map","onClick","style","backgroundColor","getTextColor","onClose","dividers","className","colorToSet","action","type","newLights","light","fallback","onChangeComplete","hex"],"mappings":"4NAUMA,G,OAAeC,gBAAK,kBACtB,+BAAsBC,MAAK,SAAAC,GAAM,MAAK,CAAEC,QAASD,EAAOH,qBAGtDK,EAAS,CACXC,WAAY,sBACZC,aAAc,iBAsHHC,UAnHf,YAAqD,IAI7CC,EAJiBC,EAA2B,EAA3BA,kBAAmBC,EAAQ,EAARA,KAClCC,EAAWC,qBAAWC,KACtBC,EAAWF,qBAAWG,KACtBC,EAAQZ,EAAOM,IAAS,eAE1BO,EAAcC,IAClB,OAAQR,GACJ,IAAK,aACDF,EAAYM,EAASK,MAAMd,WAC3B,MACJ,IAAK,eACDG,EAAYM,EAASM,QAAQC,MAC7BJ,EAAc,GACd,MACJ,QAAQ,IAAR,EAC0BP,EAAKY,MAAM,KADrC,mBACWC,EADX,KACgBC,EADhB,KAEI,GAAY,WAARD,EAAkB,CAIlBf,EAHqBM,EAASK,MAAMM,OAAOC,MACvC,qBAAGC,UAA0BH,KAERH,MACzB,MAEJb,EAAYM,EAASS,GAAKC,GAvBc,MAyBtBI,mBAASpB,GAzBa,mBAyBzCa,EAzByC,KAyBlCQ,EAzBkC,KAkE1CC,EAAc,SAAAC,GAChB,IAAMC,EAAQD,EAAME,cAAcD,MAClCH,EAASG,IAGPE,EAAcC,OAAOC,KAAKnB,GAAaoB,KAAI,SAAAhB,GAAK,OAClD,cAAC,IAAD,CACIiB,QAASR,EACTS,MAAO,CACHC,gBAAiBtB,IAASG,GAC1BA,MAAOoB,YAAavB,IAASG,KAEjCW,MAAOd,IAASG,GANpB,SASKA,GAFIA,MAMb,OACI,qCACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAaqB,QAASjC,EAAtB,SAA0CO,MAE9C,eAAC,IAAD,CAAe2B,UAAQ,EAACC,UAAU,gBAAlC,UACI,sBAAKA,UAAU,oBAAf,UACI,cAAC,IAAD,CACIN,QA9DD,SAAAP,GACf,IAAMC,EAAQD,EAAME,cAAcD,MAC5Ba,EAAuB,WAAVb,EAAqBX,EAAQW,EAC5Cc,EAAS,CAAEC,KAAM,UACrB,OAAQrC,GACJ,IAAK,aACDoC,EAAOvB,IAAM,QACbuB,EAAOd,MAAQ,CAAE3B,WAAYwC,GAC7B,MACJ,IAAK,eACDC,EAAOvB,IAAM,UACbuB,EAAOd,MAAQ,CAAEX,MAAOwB,GACxB,MACJ,QAAQ,IAAR,EAC0BnC,EAAKY,MAAM,KADrC,mBACWC,EADX,KACgBC,EADhB,KAEI,GAAY,WAARD,EAAkB,CAAC,IAEbyB,EADalC,EAASK,MAApBM,OACiBY,KAAI,SAAAY,GACzB,OAAIA,EAAMtB,UAAYH,EACX,2BAAKyB,GAAZ,IAAmB5B,MAAOwB,IAEvBI,KAGXH,EAAOvB,IAAM,QACbuB,EAAOd,MAAQ,CAAEP,OAAQuB,GACzB,MAEJF,EAAOvB,IAAMA,EACbuB,EAAOd,MAAP,eAAkBR,EAASqB,GAEnClC,EAASmC,GACTrC,KA+BgB8B,MAAO,CACHC,gBAAiBnB,EACjBA,MAAOoB,YAAapB,IAExBW,MAAM,SANV,mBAUA,qBAAKY,UAAU,uBAAf,SAAuCV,OAE3C,cAAC,WAAD,CAAUgB,SAAU,KAApB,SACI,cAACnD,EAAD,CACIsB,MAAOA,EACP8B,iBAhFS,SAAA9B,GACzBQ,EAASR,EAAM+B","file":"static/js/38.f8872f61.chunk.js","sourcesContent":["import { lazy, Suspense, useState, useContext } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { DialogContent, DialogTitle, DialogTop } from \"./CustomDialog\";\r\nimport { getTextColor } from \"./helpers\";\r\nimport { commonBG } from \"./consts\";\r\nimport { DispatchContext, SettingsContext } from \"./context/SettingsContext\";\r\n\r\nimport \"./styles/ColorSettings.css\";\r\n\r\nconst ChromePicker = lazy(() =>\r\n    import(\"react-color\").then(module => ({ default: module.ChromePicker }))\r\n);\r\n\r\nconst titles = {\r\n    background: \"Background Settings\",\r\n    outlineColor: \"Outline Color\",\r\n};\r\n\r\nfunction ColorSettings({ toggleControlOpen, mode }) {\r\n    const dispatch = useContext(DispatchContext);\r\n    const settings = useContext(SettingsContext);\r\n    const title = titles[mode] || \"Pick a Color\";\r\n    let initColor,\r\n        commonColor = commonBG;\r\n    switch (mode) {\r\n        case \"background\":\r\n            initColor = settings.scene.background;\r\n            break;\r\n        case \"outlineColor\":\r\n            initColor = settings.outline.color;\r\n            commonColor = {};\r\n            break;\r\n        default:\r\n            const [key, subkey] = mode.split(\"-\");\r\n            if (key === \"Lights\") {\r\n                const currentLight = settings.scene.lights.find(\r\n                    ({ lightId }) => lightId === subkey\r\n                );\r\n                initColor = currentLight.color;\r\n                break;\r\n            }\r\n            initColor = settings[key][subkey];\r\n    }\r\n    const [color, setColor] = useState(initColor);\r\n\r\n    const handleChangeComplete = color => {\r\n        setColor(color.hex);\r\n    };\r\n\r\n    const applyColor = event => {\r\n        const value = event.currentTarget.value;\r\n        const colorToSet = value === \"picker\" ? color : value;\r\n        let action = { type: \"update\" };\r\n        switch (mode) {\r\n            case \"background\":\r\n                action.key = \"scene\";\r\n                action.value = { background: colorToSet };\r\n                break;\r\n            case \"outlineColor\":\r\n                action.key = \"outline\";\r\n                action.value = { color: colorToSet };\r\n                break;\r\n            default:\r\n                const [key, subkey] = mode.split(\"-\");\r\n                if (key === \"Lights\") {\r\n                    const { lights } = settings.scene;\r\n                    const newLights = lights.map(light => {\r\n                        if (light.lightId === subkey) {\r\n                            return { ...light, color: colorToSet };\r\n                        }\r\n                        return light;\r\n                    });\r\n\r\n                    action.key = \"scene\";\r\n                    action.value = { lights: newLights };\r\n                    break;\r\n                }\r\n                action.key = key;\r\n                action.value = { [subkey]: colorToSet };\r\n        }\r\n        dispatch(action);\r\n        toggleControlOpen();\r\n    };\r\n\r\n    const setNewColor = event => {\r\n        const value = event.currentTarget.value;\r\n        setColor(value);\r\n    };\r\n\r\n    const commonBGBtn = Object.keys(commonColor).map(color => (\r\n        <Button\r\n            onClick={setNewColor}\r\n            style={{\r\n                backgroundColor: commonBG[color],\r\n                color: getTextColor(commonBG[color]),\r\n            }}\r\n            value={commonBG[color]}\r\n            key={color}\r\n        >\r\n            {color}\r\n        </Button>\r\n    ));\r\n\r\n    return (\r\n        <>\r\n            <DialogTop>\r\n                <DialogTitle onClose={toggleControlOpen}>{title}</DialogTitle>\r\n            </DialogTop>\r\n            <DialogContent dividers className=\"ColorSettings\">\r\n                <div className=\"ColorSettings-btn\">\r\n                    <Button\r\n                        onClick={applyColor}\r\n                        style={{\r\n                            backgroundColor: color,\r\n                            color: getTextColor(color),\r\n                        }}\r\n                        value=\"picker\"\r\n                    >\r\n                        Apply\r\n                    </Button>\r\n                    <div className=\"ColorSettings-common\">{commonBGBtn}</div>\r\n                </div>\r\n                <Suspense fallback={null}>\r\n                    <ChromePicker\r\n                        color={color}\r\n                        onChangeComplete={handleChangeComplete}\r\n                    />\r\n                </Suspense>\r\n            </DialogContent>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ColorSettings;\r\n"],"sourceRoot":""}