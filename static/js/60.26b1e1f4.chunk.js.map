{"version":3,"sources":["helpers/downloadBlob.js","components/viewers/AniViewer.js","components/viewers/DragonViewer.js"],"names":["downloadBlob","blob","fileName","url","URL","createObjectURL","a","document","createElement","style","display","href","download","body","appendChild","click","window","revokeObjectURL","removeChild","AniViewer","afterMainModelLoad","saveMainModelInitState","addAnimation","afterMainModelUpdate","updateModel","prev","current","updateMainModel","model","updateAnimation","animation","otherUpdate","capture","enable","captureAnimation","models","main","userData","initPos","position","clone","initRot","rotation","resetFace","props","eyeIdx","mouthIdx","beforeAddAni","aniCode","code","timeScale","disableInput","mainModel","aniList","analyzeChainCode","nAni","length","mixer","THREE","_aniIdx","addEventListener","playNextAni","aniSettings","loadAnimations","animations","aniIdx","enableInput","removeAnimation","stopAllAction","copy","mediaRecorder","stop","toggleCapture","newIdx","chunks","videoStream","canvas","captureStream","codec","MediaRecorder","mimeType","ondataavailable","event","push","data","onstop","format","superBuffer","Blob","type","beforeCaptureAnimation","start","updateScene","dt","update","faceChanges","time","faceChangeTime","shift","this","ani","action","clipAction","currentAniSettings","repetitions","currentClipDuration","duration","setLoop","getFaceChangesQueue","map","change","setTime","play","BasicViewer","DragonViewer","initNewModel","initFace","updateFace","eyes","getDragonEye","mouths","getDragonMouth","_eyeIdx","_mouthIdx","oldIdx","regex","forEach","mesh","name","id","exec","visible","parseInt"],"mappings":"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","file":"static/js/60.26b1e1f4.chunk.js","sourcesContent":["/**\r\n * download a blob as the given file name\r\n * @param {Blob} blob\r\n * @param {string} fileName\r\n */\r\nexport default function downloadBlob(blob, fileName) {\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.style.display = \"none\";\r\n    a.href = url;\r\n    a.download = fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n\r\n    window.URL.revokeObjectURL(url);\r\n    document.body.removeChild(a);\r\n}\r\n","import BasicViewer from \"./BasicViewer\";\r\n\r\nimport * as THREE from \"three\";\r\nimport {\r\n    analyzeChainCode,\r\n    loadAnimations,\r\n    getFaceChangesQueue,\r\n} from \"helpers/viewerHelpers\";\r\n\r\nimport downloadBlob from \"helpers/downloadBlob\";\r\n\r\n/**\r\n *  Extension of Base Viewer that adds:\r\n *    - Animation\r\n *    - Recording Animation\r\n */\r\nexport class AniViewer extends BasicViewer {\r\n    afterMainModelLoad = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    /**\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateModel = async (prev, current) => {\r\n        await this.updateMainModel(prev.model, current.model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    /**\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    otherUpdate = (prev, current) => {\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * save main model's initial position and rotation\r\n     */\r\n    saveMainModelInitState = () => {\r\n        const model = this.models.main;\r\n        model.userData.initPos = model.position.clone();\r\n        model.userData.initRot = model.rotation.clone();\r\n    };\r\n\r\n    /**\r\n     * play animation stored in this.animations[newIdx]\r\n     * @param {number} newIdx\r\n     */\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n\r\n        const { mixer } = this;\r\n        mixer.stopAllAction();\r\n\r\n        const ani = this.animations[newIdx];\r\n        const action = mixer.clipAction(ani);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n        const currentClipDuration = ani.duration;\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        this.faceChanges = getFaceChangesQueue(faceChanges, repetitions);\r\n        this.faceChangeTime = this.faceChanges.map(\r\n            change => (currentClipDuration * change.time) / 100\r\n        );\r\n\r\n        mixer.setTime(0);\r\n        action.play();\r\n    }\r\n\r\n    /**\r\n     * reset model's face to the ones specified in model setting\r\n     */\r\n    resetFace = () => {\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    /**\r\n     * @param {number} newIdx\r\n     */\r\n    set eyeIdx(newIdx) {}\r\n\r\n    /**\r\n     * @param {number} newIdx\r\n     */\r\n    set mouthIdx(newIdx) {}\r\n\r\n    /**\r\n     * called before animation is attached\r\n     */\r\n    beforeAddAni = () => {\r\n        this.resetFace();\r\n    };\r\n\r\n    /**\r\n     * load and attach animations\r\n     */\r\n    addAnimation = async () => {\r\n        this.beforeAddAni();\r\n\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        if (!aniCode) return;\r\n\r\n        this.disableInput();\r\n\r\n        const mainModel = this.models.main;\r\n        const aniList = analyzeChainCode(aniCode);\r\n        /**\r\n         * number of currently loaded animations\r\n         */\r\n        this.nAni = aniList.length;\r\n\r\n        mainModel.mixer = new THREE.AnimationMixer(mainModel);\r\n        /**\r\n         * @type {THREE.AnimationMixer}\r\n         */\r\n        this.mixer = mainModel.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        mainModel.mixer.timeScale = timeScale; // Global timeScale\r\n        mainModel.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = aniList;\r\n\r\n        /**\r\n         * @type {THREE.AnimationClip[]}\r\n         */\r\n        this.animations = await loadAnimations(aniList);\r\n\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * remove all loaded animation\r\n     */\r\n    removeAnimation = () => {\r\n        const mainModel = this.models.main;\r\n        mainModel.mixer?.stopAllAction?.();\r\n\r\n        // Reset position and rotation to initial value\r\n        const { initPos, initRot } = mainModel.userData;\r\n        mainModel.position.copy(initPos);\r\n        mainModel.rotation.copy(initRot);\r\n\r\n        this.mixer = null;\r\n        this.animations = [];\r\n        this.aniSettings = [];\r\n    };\r\n\r\n    /**\r\n     * play the next animation stored in this.animations\r\n     */\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    /**\r\n     * update animation and global time scale\r\n     * @param {ViewerProps[\"animation\"]} prev\r\n     * @param {ViewerProps[\"animation\"]} current\r\n     */\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            this.removeAnimation();\r\n            this.addAnimation();\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * capture current animation and save as video\r\n     */\r\n    captureAnimation = () => {\r\n        /**\r\n         * @type {Blob[]}\r\n         */\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            const { codec } = this.props.capture;\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.enableInput();\r\n\r\n                const { format } = this.props.capture;\r\n\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: `video/${format}`,\r\n                });\r\n                downloadBlob(superBuffer, `animation.${format}`);\r\n            };\r\n        }\r\n        this.disableInput(\"Recording\");\r\n        this.beforeCaptureAnimation();\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    /**\r\n     * called before animation capture\r\n     */\r\n    beforeCaptureAnimation = () => void 0;\r\n\r\n    updateScene = dt => {\r\n        this.mixer?.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length) {\r\n            const elapsedTime = this.mixer.time;\r\n            const nextFaceChangeTime = this.faceChangeTime[0];\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                this.faceChangeTime.shift();\r\n                const { eyeIdx, mouthIdx } = this.faceChanges.shift();\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default AniViewer;\r\n","import AniViewer from \"./AniViewer\";\r\n\r\nimport { getDragonEye, getDragonMouth } from \"helpers/viewerHelpers\";\r\n\r\n/**\r\n * Extension of Ani Viewer for dragons that adds:\r\n *   - Eyes and Mouth\r\n */\r\nexport class DragonViewer extends AniViewer {\r\n    /**\r\n     * @param {ViewerProps} props\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this._eyeIdx = this._mouthIdx = 0;\r\n    }\r\n\r\n    initNewModel = () => {\r\n        this.saveMainModelInitState();\r\n        this.initFace();\r\n        this.addAnimation();\r\n    };\r\n\r\n    afterMainModelLoad = () => {\r\n        this.initNewModel();\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        await this.updateMainModel(prev.model, current.model);\r\n        this.updateFace(current.model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    updateFace = ({ eyeIdx, mouthIdx }) => {\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.initNewModel();\r\n    };\r\n\r\n    initFace = () => {\r\n        const mainModel = this.models.main;\r\n        this.eyes = getDragonEye(mainModel);\r\n\r\n        this.mouths = getDragonMouth(mainModel);\r\n\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    /**\r\n     * @param {number} newIdx\r\n     */\r\n    set eyeIdx(newIdx) {\r\n        const oldIdx = this._eyeIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        this._eyeIdx = newIdx;\r\n        const regex = /[0-9]{2}/;\r\n        this.eyes.forEach(mesh => {\r\n            const { name } = mesh;\r\n            const id = regex.exec(name)[0];\r\n            mesh.visible = parseInt(id) === newIdx;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {number} newIdx\r\n     */\r\n    set mouthIdx(newIdx) {\r\n        const oldIdx = this._mouthIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        this._mouthIdx = newIdx;\r\n        const regex = /[0-9]{2}/;\r\n        this.mouths.forEach(mesh => {\r\n            const { name } = mesh;\r\n            const id = regex.exec(name)[0];\r\n            mesh.visible = parseInt(id) === newIdx;\r\n        });\r\n    }\r\n}\r\n\r\nexport default DragonViewer;\r\n"],"sourceRoot":""}