{"version":3,"sources":["BaseViewer.js","AniViewer.js","CharaViewer.js"],"names":["BaseViewer","disableInput","props","setIsLoading","enableInput","initialize","a","initScene","materials","outlines","models","modelInfo","loadMainModel","afterMainModelLoad","viewport","width","window","innerWidth","height","innerHeight","clock","THREE","scene","bgColor","floor","createInvisibleFloor","add","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","target","update","lights","addLights","loadedFX","Map","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","AAEnabled","antiAliasing","_AA","renderer","finalRenderer","setSize","canvas","domElement","animate","modelId","model","id","main","modelPath","getModelPath","loadModel","basicMainProcessing","forEach","enable","type","color","intensity","params","constructor","light","Object","entries","key","value","setValue","map","v","push","removeLights","remove","addToScene","removeEffects","materialType","isBlade","texturePath","analyzeWeaponCode","changeMaterial","forced","applyNewModelMat","outlineParams","outline","createOutline","updateViewer","prev","current","updateEnvironment","updateModel","otherUpdate","updateViewport","updateOutline","updateMaterial","updateLights","updateAscii","ascii","AA","updateMainModel","aspect","disposeMainModel","mainModel","disposeItem","replaceMainModel","beforeMainModelUpdate","afterMainModelUpdate","updateOutlineParams","values","flat","applyOutlineSettings","updatedKeys","keys","filter","length","saveMaterialReference","getMaterial","matParams","updateMatParams","prevParams","useTexture","materialParams","some","newCanvas","has","AsciiEffect","showAscii","charSet","invert","get","effect","style","background","rotateFloor","dt","rotateSpeed","Math","PI","rotateY","everyAnimate","getDelta","frameId","requestAnimationFrame","render","app","this","finishedInit","console","log","getUpdated","oldValue","subkeys","JSON","stringify","subkey","cancelAnimationFrame","mixer","renderLists","dispose","ref","el","enabled","allParams","paramList","getParamsList","filterObject","oldCanvas","_canvas","removeChild","appendChild","PureComponent","AniViewer","saveMainModelInitState","addAnimation","updateAnimation","animation","capture","captureAnimation","initPos","clone","initRot","rotation","resetFace","eyeIdx","mouthIdx","beforeAddAni","aniCode","code","timeScale","analyzeChainCode","fileList","animationList","nAni","_aniIdx","addEventListener","playNextAni","aniSettings","ani","repetitions","faceChanges","batchLoader","file","path","aniSource","Promise","all","animFiles","animations","anim","fileIdx","aniName","find","name","aniIdx","removeAnimation","stopAllAction","copy","mediaRecorder","stop","toggleCapture","newIdx","chunks","videoStream","captureStream","codec","MediaRecorder","mimeType","ondataavailable","event","data","onstop","superBuffer","Blob","url","URL","createObjectURL","document","createElement","href","download","body","click","revokeObjectURL","beforeCaptureAnimation","start","time","faceChangeTime","shift","fbxSource","action","clipAction","currentAniSettings","setLoop","clampWhenFinished","getFaceChangesArray","change","currentClipDuration","setTime","duration","play","SIDES","CharaViewer","initFace","addWeapons","detachAllWeapons","attachAllWeapons","prevModel","updateFace","updateWeapons","defaultFaceParams","mouthTexture","DEFAULT_FACE_IDX","eyeTexture","getWeaponInfo","initWeaponLoad","weaponRight","weaponLeft","assign","initAllWeapons","newInfo","loadWeaponR","loadWeaponL","side","weapon","weaponInfo","flipped","y","attachWeapon","boneName","traverse","child","includes","children","detachWeapon","parent","updateEyeTexture","currentTexture","prevTexture","applyEyeTexture","textureId","offset","calculateTextureOffset","applyEyeOffset","updateMouthTexture","applyMouthTexture","applyMouthOffset","updateFaceTexture","eyeUpdated","mouthUpdated","updateFaceOffset","_eyeIdx","_mouthIdx","oldIdx","calculateIdxOffset"],"mappings":"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","file":"static/js/33.2492a035.chunk.js","sourcesContent":["/* \r\n################################################\r\n# Base Viewer that supports adding / updating:\r\n#    - 1 main model\r\n#    - auto rotate\r\n#    - viewport\r\n#    - material\r\n#    - background color\r\n#    - lighting\r\n#    - anti aliasing\r\n#    - ASCII mode\r\n################################################\r\n*/\r\n\r\nimport { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { CAM_PARAMS } from \"./consts\";\r\nimport { isBlade } from \"./helpers\";\r\nimport {\r\n    createInvisibleFloor,\r\n    analyzeWeaponCode,\r\n    getUpdated,\r\n    filterObject,\r\n    getModelPath,\r\n    loadModel,\r\n    getMaterial,\r\n    disposeItem,\r\n    createOutline,\r\n    applyOutlineSettings,\r\n    getParamsList,\r\n    changeMaterial,\r\n    updateMatParams,\r\n    removeEffects,\r\n} from \"./viewerHelpers\";\r\n\r\nclass BaseViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        window.app = this;\r\n        await this.initialize();\r\n        this.finishedInit = true;\r\n    }\r\n\r\n    componentDidUpdate(prev) {\r\n        if (!this.finishedInit) return;\r\n        const current = this.props;\r\n\r\n        // print updated props to console\r\n        console.log(\"Updated\");\r\n        const updated = getUpdated(prev, current);\r\n        updated.forEach(([key, value]) => {\r\n            const oldValue = prev[key];\r\n            const subkeys = Object.keys(value);\r\n            if (subkeys.length === 0 || typeof value === \"string\") {\r\n                console.log(\r\n                    `${key}: ${JSON.stringify(oldValue)} to ${JSON.stringify(\r\n                        value\r\n                    )}`\r\n                );\r\n            } else {\r\n                subkeys.forEach(subkey => {\r\n                    if (oldValue[subkey] !== value[subkey]) {\r\n                        console.log(\r\n                            `${key}.${subkey}: ${JSON.stringify(\r\n                                oldValue[subkey]\r\n                            )} to ${JSON.stringify(value[subkey])}`\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n        this.updateViewer(prev, current);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixer = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n\r\n    disableInput = () => this.props.setIsLoading(true);\r\n\r\n    enableInput = () => this.props.setIsLoading(false);\r\n\r\n    initialize = async () => {\r\n        this.disableInput();\r\n\r\n        this.initScene();\r\n\r\n        this.materials = [];\r\n        this.outlines = {};\r\n        this.models = {};\r\n        this.modelInfo = {};\r\n        await this.loadMainModel();\r\n        await this.afterMainModelLoad?.();\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    initScene = () => {\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.bgColor = this.props.bgColor;\r\n\r\n        // Floor for auto rotate\r\n        this.floor = createInvisibleFloor();\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addLights(lights);\r\n\r\n        // effects\r\n        this.loadedFX = new Map();\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        const AAEnabled = this.props.antiAliasing;\r\n        this._AA = AAEnabled;\r\n\r\n        this.renderer = AAEnabled ? this.rendererAA : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        const { width, height } = this.props.viewport;\r\n        this.finalRenderer.setSize(width, height);\r\n\r\n        const canvas = this.finalRenderer.domElement;\r\n        this.canvas = canvas;\r\n\r\n        this.animate();\r\n    };\r\n\r\n    loadMainModel = async () => {\r\n        const modelId = this.props.model.id;\r\n        this.modelInfo.main = modelId;\r\n\r\n        const modelPath = getModelPath(modelId);\r\n        const model = await loadModel(modelPath);\r\n        this.models.main = model;\r\n\r\n        this.basicMainProcessing(model);\r\n        return;\r\n    };\r\n\r\n    set AA(enabled) {\r\n        if (enabled === this._AA) return;\r\n\r\n        this._AA = enabled;\r\n        this.renderer = enabled ? this.rendererAA : this.rendererNoAA;\r\n        const { width, height } = this.viewport;\r\n        this.renderer.setSize(width, height);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const newCanvas = this.renderer.domElement;\r\n        this.canvas = newCanvas;\r\n    }\r\n\r\n    addLights = lights => {\r\n        this.lights = [];\r\n        lights.forEach(({ enable, type, color, intensity, ...params }) => {\r\n            if (!enable) return;\r\n            const constructor = `${type}Light`;\r\n            const light = new THREE[constructor](color, intensity);\r\n\r\n            for (const [key, value] of Object.entries(params)) {\r\n                switch (key) {\r\n                    case \"position\":\r\n                        const setValue = value.map(v => v || 0);\r\n                        light.position.set(...setValue);\r\n                        break;\r\n                    default:\r\n                        light[key] = value;\r\n                }\r\n            }\r\n            this.scene.add(light);\r\n            this.lights.push(light);\r\n        });\r\n    };\r\n\r\n    removeLights = () => this.lights.forEach(light => this.scene.remove(light));\r\n\r\n    addToScene = model => this.floor.add(model);\r\n\r\n    basicMainProcessing = () => {\r\n        const model = this.models.main;\r\n\r\n        removeEffects(model);\r\n        const { materialType } = this.props.model;\r\n        const modelId = this.props.model.id;\r\n        if (isBlade(modelId)) {\r\n            const { texturePath } = analyzeWeaponCode(`${modelId}n`);\r\n            changeMaterial(model, { materialType, texturePath });\r\n        } else {\r\n            changeMaterial(model, { materialType, forced: true });\r\n        }\r\n\r\n        this.applyNewModelMat(model);\r\n\r\n        const outlineParams = this.props.outline;\r\n        this.outlines.main = createOutline(model, outlineParams);\r\n\r\n        this.addToScene(model);\r\n    };\r\n\r\n    updateViewer = (prev, current) => {\r\n        this.updateEnvironment(prev, current);\r\n        this.updateModel(prev, current);\r\n        this.otherUpdate?.(prev, current);\r\n    };\r\n\r\n    updateEnvironment = (prev, current) => {\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n        this.updateOutline(prev.outline, current.outline);\r\n        this.updateMaterial(prev, current);\r\n        this.updateLights(prev.lights, current.lights);\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n\r\n        // Update background color\r\n        if (prev.bgColor !== current.bgColor) {\r\n            this.bgColor = current.bgColor;\r\n        }\r\n\r\n        this.AA = current.antiAliasing;\r\n    };\r\n\r\n    updateModel = (prev, current) => {\r\n        this.updateMainModel(prev.model, current.model);\r\n    };\r\n\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.viewport.width = width;\r\n        this.viewport.height = height;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    disposeMainModel = () => {\r\n        const mainModel = this.models.main;\r\n        this.floor.remove(mainModel);\r\n        disposeItem(mainModel);\r\n    };\r\n\r\n    replaceMainModel = async () => {\r\n        this.disableInput();\r\n\r\n        this.disposeMainModel();\r\n        await this.loadMainModel();\r\n        this.applyNewModelMat(this.models.main);\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        const mainUpdated = prev.id !== modelId;\r\n        if (!mainUpdated) return;\r\n\r\n        this.beforeMainModelUpdate?.();\r\n        await this.replaceMainModel();\r\n        this.afterMainModelUpdate?.();\r\n    };\r\n\r\n    updateOutlineParams = update => {\r\n        const outlines = Object.values(this.outlines).flat();\r\n        outlines.forEach(outline => {\r\n            applyOutlineSettings(outline, update);\r\n        });\r\n    };\r\n\r\n    updateOutline = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const updatedKeys = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedKeys.length === 0) return;\r\n\r\n        const update = new Map(updatedKeys.map(key => [key, current[key]]));\r\n        this.updateOutlineParams(update);\r\n    };\r\n\r\n    saveMaterialReference = () => {\r\n        const mainModel = this.models.main;\r\n        this.materials = getMaterial(mainModel);\r\n    };\r\n\r\n    get matParams() {\r\n        const allParams = this.props.materialParams;\r\n        const { materialType } = this.props.model;\r\n        const paramList = getParamsList(materialType);\r\n        return filterObject(allParams, paramList);\r\n    }\r\n\r\n    applyNewModelMat = model => {\r\n        const params = this.matParams;\r\n        const defaultParams = { useTexture: true };\r\n        updateMatParams(model, { prevParams: defaultParams, params });\r\n    };\r\n\r\n    updateMaterial = (prev, current) => {\r\n        if (prev === current) return;\r\n        // update material type\r\n        const { materialType } = current.model;\r\n        const mainModel = this.models.main;\r\n        const prevParams = prev.materialParams;\r\n        if (prev.model.materialType !== materialType) {\r\n            changeMaterial(this.models.main, { materialType });\r\n        }\r\n        const params = this.matParams;\r\n        updateMatParams(mainModel, { prevParams, params });\r\n    };\r\n\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeLights();\r\n            this.addLights(current);\r\n        }\r\n    };\r\n\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n            const newCanvas = this.renderer.domElement;\r\n            this.canvas = newCanvas;\r\n            return;\r\n        }\r\n\r\n        if (!this.loadedFX.has(\"ascii\")) {\r\n            const { AsciiEffect } = await import(\r\n                \"three/examples/jsm/effects/AsciiEffect\"\r\n            );\r\n            this.loadedFX.set(\"ascii\", AsciiEffect);\r\n            this.showAscii();\r\n        } else this.showAscii();\r\n\r\n        this.finalRenderer.setSize(this.viewport.width, this.viewport.height);\r\n    };\r\n\r\n    showAscii = () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const AsciiEffect = this.loadedFX.get(\"ascii\");\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n\r\n        const { width, height } = this.viewport;\r\n        this.effect.setSize(width, height);\r\n\r\n        const newCanvas = this.effect.domElement;\r\n        newCanvas.style.color = color;\r\n        newCanvas.style.background = bgColor;\r\n        this.canvas = newCanvas;\r\n\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    set bgColor(color) {\r\n        this.scene.background =\r\n            color !== \"transparent\" ? new THREE.Color(color) : null;\r\n    }\r\n\r\n    set canvas(canvas) {\r\n        const oldCanvas = this._canvas;\r\n        oldCanvas && this.mount.removeChild(oldCanvas);\r\n        this.mount.appendChild(canvas);\r\n        this._canvas = canvas;\r\n    }\r\n\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    rotateFloor = dt => {\r\n        const { rotateSpeed } = this.props;\r\n        if (!rotateSpeed) return;\r\n\r\n        const angle = (rotateSpeed * dt * Math.PI) / 2;\r\n        this.floor.rotateY(angle);\r\n    };\r\n\r\n    everyAnimate = () => {\r\n        const dt = this.clock.getDelta();\r\n        this.rotateFloor(dt);\r\n    };\r\n\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n\r\n        this.everyAnimate();\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default BaseViewer;\r\n","/* \r\n################################################\r\n# Extension of Base Viewer that adds:\r\n#    - Animation\r\n#    - Recording Animation\r\n################################################  \r\n*/\r\n\r\nimport BaseViewer from \"./BaseViewer\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { fbxSource } from \"./App\";\r\nimport {\r\n    analyzeChainCode,\r\n    loadModel,\r\n    getFaceChangesArray,\r\n} from \"./viewerHelpers\";\r\n\r\nexport class AniViewer extends BaseViewer {\r\n    constructor() {\r\n        super();\r\n        this.aniSource = `${fbxSource}/fbx`;\r\n    }\r\n\r\n    afterMainModelLoad = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        await this.updateMainModel(prev.model, current.model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    otherUpdate = (prev, current) => {\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n    };\r\n\r\n    saveMainModelInitState = () => {\r\n        const model = this.models.main;\r\n        model.initPos = model.position.clone();\r\n        model.initRot = model.rotation.clone();\r\n    };\r\n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n\r\n        const { mixer } = this;\r\n        mixer.stopAllAction();\r\n\r\n        const anim = this.animations[newIdx];\r\n        const action = mixer.clipAction(anim);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        this.faceChanges = getFaceChangesArray(faceChanges, repetitions);\r\n        this.faceChangeTime = this.faceChanges.map(\r\n            change => (this.currentClipDuration * change.time) / 100\r\n        );\r\n\r\n        mixer.setTime(0);\r\n        this.currentClipDuration = anim.duration;\r\n        action.play();\r\n    }\r\n\r\n    resetFace = () => {\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    beforeAddAni = () => {\r\n        this.resetFace();\r\n    };\r\n\r\n    addAnimation = async () => {\r\n        this.beforeAddAni?.();\r\n\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        if (!aniCode) return;\r\n\r\n        this.disableInput();\r\n\r\n        const mainModel = this.models.main;\r\n        const [fileList, animationList] = analyzeChainCode(aniCode);\r\n        this.nAni = animationList.length;\r\n\r\n        mainModel.mixer = new THREE.AnimationMixer(mainModel);\r\n        this.mixer = mainModel.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        mainModel.mixer.timeScale = timeScale; // Global timeScale\r\n        mainModel.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = animationList.map(ani => ({\r\n            timeScale: ani.timeScale,\r\n            repetitions: ani.repetitions,\r\n            faceChanges: ani.faceChanges,\r\n        }));\r\n\r\n        // load all animation files\r\n        const batchLoader = fileList.map(file => {\r\n            const path = `${this.aniSource}/${file}.fbx`;\r\n            return loadModel(path);\r\n        });\r\n        const animFiles = await Promise.all(batchLoader);\r\n\r\n        this.animations = [];\r\n        animationList.forEach(anim => {\r\n            const { fileIdx, aniName } = anim;\r\n            const animation = aniName\r\n                ? animFiles[fileIdx].animations.find(\r\n                      ani => ani.name === aniName\r\n                  )\r\n                : animFiles[fileIdx].animations[0];\r\n            this.animations.push(animation);\r\n        });\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.enableInput();\r\n    };\r\n\r\n    removeAnimation = () => {\r\n        const mainModel = this.models.main;\r\n        mainModel.mixer?.stopAllAction?.();\r\n\r\n        // Reset position and rotation to initial value\r\n        const { initPos, initRot } = mainModel;\r\n        mainModel.position.copy(initPos);\r\n        mainModel.rotation.copy(initRot);\r\n\r\n        this.mixer = null;\r\n        this.animations = [];\r\n        this.aniSettings = [];\r\n    };\r\n\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            this.removeAnimation();\r\n            this.addAnimation();\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    captureAnimation = () => {\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            const { codec } = this.props.capture;\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.enableInput();\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: \"video/webm\",\r\n                });\r\n                const url = URL.createObjectURL(superBuffer);\r\n                const a = document.createElement(\"a\");\r\n                a.style = \"display: none\";\r\n                a.href = url;\r\n                a.download = \"animation.webm\";\r\n                document.body.appendChild(a);\r\n                a.click();\r\n                window.URL.revokeObjectURL(url);\r\n                document.body.removeChild(a);\r\n            };\r\n        }\r\n        this.disableInput();\r\n        this.beforeCaptureAnimation?.();\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    everyAnimate = () => {\r\n        const dt = this.clock.getDelta();\r\n        this.rotateFloor(dt);\r\n        this.mixer?.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length) {\r\n            const elapsedTime = this.mixer.time;\r\n            const nextFaceChangeTime = this.faceChangeTime[0];\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                this.faceChangeTime.shift();\r\n                const { eyeIdx, mouthIdx } = this.faceChanges.shift();\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default AniViewer;\r\n","/* \r\n################################################\r\n# Extension of Ani Viewer that adds:\r\n#    - Weapons\r\n#    - Face Texture\r\n#    - Face offset\r\n################################################  \r\n*/\r\n\r\nimport AniViewer from \"./AniViewer\";\r\n\r\nimport { fbxSource } from \"./App\";\r\nimport { DEFAULT_FACE_IDX } from \"./consts\";\r\nimport {\r\n    calculateTextureOffset,\r\n    calculateIdxOffset,\r\n    analyzeWeaponCode,\r\n    loadModel,\r\n    applyEyeTexture,\r\n    applyMouthTexture,\r\n    applyEyeOffset,\r\n    applyMouthOffset,\r\n    disposeItem,\r\n    createOutline,\r\n    changeMaterial,\r\n} from \"./viewerHelpers\";\r\n\r\nconst SIDES = [\"Right\", \"Left\"];\r\n\r\nexport class CharaViewer extends AniViewer {\r\n    constructor() {\r\n        super();\r\n        this.aniSource = `${fbxSource}/fbx`;\r\n        this._eyeIdx = this._mouthIdx = DEFAULT_FACE_IDX;\r\n    }\r\n\r\n    afterMainModelLoad = () => {\r\n        this.saveMainModelInitState();\r\n        this.initFace();\r\n        this.addWeapons();\r\n        this.addAnimation();\r\n    };\r\n\r\n    beforeMainModelUpdate = () => {\r\n        this.detachAllWeapons();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.saveMainModelInitState();\r\n        this.initFace();\r\n        this.attachAllWeapons();\r\n        this.addAnimation();\r\n    };\r\n\r\n    updateModel = async (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const prevModel = prev.model;\r\n        const { model } = current;\r\n        if (prevModel.id !== model.id) {\r\n            await this.updateMainModel(prevModel, model);\r\n        } else {\r\n            this.updateFace(prevModel, model);\r\n        }\r\n        this.updateWeapons(prevModel, model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    initFace = () => {\r\n        const modelId = this.props.model.id;\r\n        const defaultFaceParams = {\r\n            mouthTexture: modelId,\r\n            mouthIdx: DEFAULT_FACE_IDX,\r\n            eyeTexture: modelId,\r\n            eyeIdx: DEFAULT_FACE_IDX,\r\n        };\r\n        this.updateFace(defaultFaceParams, this.props.model);\r\n    };\r\n\r\n    addWeapons = async () => {\r\n        this.getWeaponInfo();\r\n\r\n        const [weaponRight, weaponLeft] = await this.initWeaponLoad();\r\n        this.models = Object.assign(this.models, { weaponRight, weaponLeft });\r\n\r\n        await this.initAllWeapons();\r\n        this.attachAllWeapons();\r\n    };\r\n\r\n    getWeaponInfo = () => {\r\n        const { weaponRight, weaponLeft } = this.props.model;\r\n        const newInfo = {\r\n            weaponRight: analyzeWeaponCode(weaponRight),\r\n            weaponLeft: analyzeWeaponCode(weaponLeft),\r\n        };\r\n        this.modelInfo = Object.assign(this.modelInfo, newInfo);\r\n    };\r\n\r\n    initWeaponLoad = () => {\r\n        const weaponRight = this.modelInfo.weaponRight?.modelPath;\r\n        const loadWeaponR = loadModel(weaponRight);\r\n\r\n        const weaponLeft = this.modelInfo.weaponLeft?.modelPath;\r\n        const loadWeaponL = loadModel(weaponLeft);\r\n\r\n        return Promise.all([loadWeaponR, loadWeaponL]);\r\n    };\r\n\r\n    initAllWeapons = async () => {\r\n        const { materialType } = this.props.model;\r\n        SIDES.forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weapon = this.models[key];\r\n            if (!weapon) return;\r\n\r\n            const weaponInfo = this.modelInfo[key];\r\n            const { texturePath, flipped } = weaponInfo;\r\n            changeMaterial(weapon, { materialType, texturePath });\r\n            if (flipped) weapon.rotation.y += Math.PI;\r\n\r\n            const outlineParams = this.props.outline;\r\n            this.outlines[key] = createOutline(weapon, outlineParams);\r\n        });\r\n    };\r\n\r\n    attachWeapon = (weapon, side) => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name.includes(boneName) && child.children.length === 0) {\r\n                child.add(weapon);\r\n            }\r\n        });\r\n    };\r\n\r\n    attachAllWeapons = () => {\r\n        SIDES.forEach(side => {\r\n            const key = `weapon${side}`;\r\n            const weapon = this.models[key];\r\n            if (!weapon) return;\r\n\r\n            this.attachWeapon(weapon, side);\r\n        });\r\n    };\r\n\r\n    detachWeapon = side => {\r\n        const key = `weapon${side}`;\r\n        const model = this.models[key];\r\n        if (!model) return;\r\n\r\n        model.parent.remove(model);\r\n    };\r\n\r\n    detachAllWeapons = () => SIDES.forEach(side => this.detachWeapon(side));\r\n\r\n    updateEyeTexture = (prev, current) => {\r\n        const currentTexture = current.eyeTexture;\r\n        const prevTexture = prev.eyeTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const { materialType } = current;\r\n        applyEyeTexture(this.models.main, {\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyEyeOffset(this.models.main, offset);\r\n\r\n        return true;\r\n    };\r\n\r\n    set eyeIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._eyeIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyEyeOffset(this.models.main, offset);\r\n\r\n        this._eyeIdx = newIdx;\r\n    }\r\n\r\n    updateMouthTexture = (prev, current) => {\r\n        const currentTexture = current.mouthTexture;\r\n        const prevTexture = prev.mouthTexture;\r\n\r\n        if (currentTexture === prevTexture) return false;\r\n\r\n        const { materialType } = current;\r\n        applyMouthTexture(this.models.main, {\r\n            materialType,\r\n            textureId: currentTexture,\r\n        });\r\n        const offset = calculateTextureOffset(currentTexture, prevTexture);\r\n        applyMouthOffset(this.models.main, offset);\r\n\r\n        return true;\r\n    };\r\n\r\n    set mouthIdx(newIdx) {\r\n        if (!newIdx) return;\r\n\r\n        const oldIdx = this._mouthIdx;\r\n        if (newIdx === oldIdx) return;\r\n\r\n        const offset = calculateIdxOffset(newIdx, oldIdx);\r\n        applyMouthOffset(this.models.main, offset);\r\n\r\n        this._mouthIdx = newIdx;\r\n    }\r\n\r\n    updateFaceTexture = (prev, current) => {\r\n        const eyeUpdated = this.updateEyeTexture(prev, current);\r\n        const mouthUpdated = this.updateMouthTexture(prev, current);\r\n        if (eyeUpdated || mouthUpdated) {\r\n            const mainModel = this.models.main;\r\n            this.applyNewModelMat(mainModel);\r\n        }\r\n    };\r\n\r\n    updateFaceOffset = ({ eyeIdx, mouthIdx }) => {\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    updateFace = (prev, current) => {\r\n        this.updateFaceTexture(prev, current);\r\n        this.updateFaceOffset(current);\r\n    };\r\n\r\n    updateWeapons = async (prev, current) => {\r\n        this.disableInput();\r\n        SIDES.forEach(async side => {\r\n            const key = `weapon${side}`;\r\n            if (prev[key] === current[key]) return;\r\n\r\n            // remove old weapon\r\n            this.detachWeapon(side);\r\n            disposeItem(this.models[key]); // dispose old weapon\r\n\r\n            // if current weapon is empty (weapon removed)\r\n            if (!current[key]) {\r\n                this.models[key] = null;\r\n                this.modelInfo[key] = \"\";\r\n                // remove reference to outline\r\n                this.outlines[key] = null;\r\n                return;\r\n            }\r\n\r\n            // load new weapon\r\n            this.modelInfo[key] = analyzeWeaponCode(current[key]);\r\n            const { modelPath, texturePath, flipped } = this.modelInfo[key];\r\n\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            this.models[key] = model;\r\n\r\n            // process new weapon\r\n            const { materialType } = current;\r\n            changeMaterial(model, { materialType, texturePath });\r\n            // this.applyNewMatParams(model);\r\n\r\n            if (flipped) {\r\n                model.rotation.y += Math.PI;\r\n            }\r\n\r\n            const outlineParams = this.props.outline;\r\n            this.outlines[key] = createOutline(model, outlineParams);\r\n\r\n            this.attachWeapon(model, side);\r\n        });\r\n        this.enableInput();\r\n    };\r\n}\r\n\r\nexport default CharaViewer;\r\n"],"sourceRoot":""}