{"version":3,"sources":["../node_modules/three/examples/jsm/exporters/USDZExporter.js"],"names":["USDZExporter","scene","a","files","modelFileName","output","materials","textures","traverseVisible","object","isMesh","material","isMeshStandardMaterial","geometry","geometryFileName","id","meshObject","buildMeshObject","buildUSDFileAsString","uuid","buildXform","buildMaterials","fflate","texture","color","split","imgToU8","image","filename","offset","file","headerSize","length","offsetMod64","padding","Uint8Array","extra","12345","level","HTMLImageElement","HTMLCanvasElement","OffscreenCanvas","ImageBitmap","scale","Math","max","width","height","canvas","document","createElement","min","context","getContext","drawImage","undefined","globalCompositeOperation","fillStyle","fillRect","Promise","resolve","toBlob","blob","arrayBuffer","dataToInsert","name","transform","matrix","array","elements","buildMatrixRow","buildMatrix","matrixWorld","mesh","attributes","count","position","index","Array","fill","join","buildMeshVertexCount","i","push","buildMeshVertexIndices","buildVector3Array","normal","attribute","console","warn","data","toPrecision","buildVector2Array","uv","buildMesh","buildMaterial","pad","inputs","samplers","buildTexture","mapType","getHexString","buildVector2","repeat","map","buildColor","emissiveMap","emissive","getHex","normalMap","aoMap","roughnessMap","roughness","metalnessMap","metalness","opacity","r","g","b","vector","x","y"],"mappings":"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","file":"static/js/77.06d76a19.chunk.js","sourcesContent":["import * as fflate from '../libs/fflate.module.js';\n\nclass USDZExporter {\n\n\tasync parse( scene ) {\n\n\t\tconst files = {};\n\t\tconst modelFileName = 'model.usda';\n\n\t\t// model file should be first in USDZ archive so we init it here\n\t\tfiles[ modelFileName ] = null;\n\n\t\tlet output = buildHeader();\n\n\t\tconst materials = {};\n\t\tconst textures = {};\n\n\t\tscene.traverseVisible( ( object ) => {\n\n\t\t\tif ( object.isMesh && object.material.isMeshStandardMaterial ) {\n\n\t\t\t\tconst geometry = object.geometry;\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tconst geometryFileName = 'geometries/Geometry_' + geometry.id + '.usd';\n\n\t\t\t\tif ( ! ( geometryFileName in files ) ) {\n\n\t\t\t\t\tconst meshObject = buildMeshObject( geometry );\n\t\t\t\t\tfiles[ geometryFileName ] = buildUSDFileAsString( meshObject );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( material.uuid in materials ) ) {\n\n\t\t\t\t\tmaterials[ material.uuid ] = material;\n\n\t\t\t\t}\n\n\t\t\t\toutput += buildXform( object, geometry, material );\n\n\t\t\t}\n\n\t\t} );\n\n\t\toutput += buildMaterials( materials, textures );\n\n\t\tfiles[ modelFileName ] = fflate.strToU8( output );\n\t\toutput = null;\n\n\t\tfor ( const id in textures ) {\n\n\t\t\tconst texture = textures[ id ];\n\t\t\tconst color = id.split( '_' )[ 1 ];\n\n\t\t\tfiles[ 'textures/Texture_' + id + '.jpg' ] = await imgToU8( texture.image, color );\n\n\t\t}\n\n\t\t// 64 byte alignment\n\t\t// https://github.com/101arrowz/fflate/issues/39#issuecomment-777263109\n\n\t\tlet offset = 0;\n\n\t\tfor ( const filename in files ) {\n\n\t\t\tconst file = files[ filename ];\n\t\t\tconst headerSize = 34 + filename.length;\n\n\t\t\toffset += headerSize;\n\n\t\t\tconst offsetMod64 = offset & 63;\n\n\t\t\tif ( offsetMod64 !== 4 ) {\n\n\t\t\t\tconst padLength = 64 - offsetMod64;\n\t\t\t\tconst padding = new Uint8Array( padLength );\n\n\t\t\t\tfiles[ filename ] = [ file, { extra: { 12345: padding } } ];\n\n\t\t\t}\n\n\t\t\toffset = file.length;\n\n\t\t}\n\n\t\treturn fflate.zipSync( files, { level: 0 } );\n\n\t}\n\n}\n\nasync function imgToU8( image, color ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof OffscreenCanvas !== 'undefined' && image instanceof OffscreenCanvas ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\tconst scale = 1024 / Math.max( image.width, image.height );\n\n\t\tconst canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width * Math.min( 1, scale );\n\t\tcanvas.height = image.height * Math.min( 1, scale );\n\n\t\tconst context = canvas.getContext( '2d' );\n\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\n\n\t\tif ( color !== undefined ) {\n\n\t\t\tcontext.globalCompositeOperation = 'multiply';\n\t\t\tcontext.fillStyle = `#${ color }`;\n\t\t\tcontext.fillRect( 0, 0, canvas.width, canvas.height );\n\n\t\t}\n\n\t\tconst blob = await new Promise( resolve => canvas.toBlob( resolve, 'image/jpeg', 1 ) );\n\t\treturn new Uint8Array( await blob.arrayBuffer() );\n\n\t}\n\n}\n\n//\n\nconst PRECISION = 7;\n\nfunction buildHeader() {\n\n\treturn `#usda 1.0\n(\n    customLayerData = {\n        string creator = \"Three.js USDZExporter\"\n    }\n    metersPerUnit = 1\n    upAxis = \"Y\"\n)\n\n`;\n\n}\n\nfunction buildUSDFileAsString( dataToInsert ) {\n\n\tlet output = buildHeader();\n\toutput += dataToInsert;\n\treturn fflate.strToU8( output );\n\n}\n\n// Xform\n\nfunction buildXform( object, geometry, material ) {\n\n\tconst name = 'Object_' + object.id;\n\tconst transform = buildMatrix( object.matrixWorld );\n\n\treturn `def Xform \"${ name }\" (\n    prepend references = @./geometries/Geometry_${ geometry.id }.usd@</Geometry>\n)\n{\n    matrix4d xformOp:transform = ${ transform }\n    uniform token[] xformOpOrder = [\"xformOp:transform\"]\n\n    rel material:binding = </Materials/Material_${ material.id }>\n}\n\n`;\n\n}\n\nfunction buildMatrix( matrix ) {\n\n\tconst array = matrix.elements;\n\n\treturn `( ${ buildMatrixRow( array, 0 ) }, ${ buildMatrixRow( array, 4 ) }, ${ buildMatrixRow( array, 8 ) }, ${ buildMatrixRow( array, 12 ) } )`;\n\n}\n\nfunction buildMatrixRow( array, offset ) {\n\n\treturn `(${ array[ offset + 0 ] }, ${ array[ offset + 1 ] }, ${ array[ offset + 2 ] }, ${ array[ offset + 3 ] })`;\n\n}\n\n// Mesh\n\nfunction buildMeshObject( geometry ) {\n\n\tconst mesh = buildMesh( geometry );\n\treturn `\ndef \"Geometry\"\n{\n  ${mesh}\n}\n`;\n\n}\n\nfunction buildMesh( geometry ) {\n\n\tconst name = 'Geometry';\n\tconst attributes = geometry.attributes;\n\tconst count = attributes.position.count;\n\n\treturn `\n    def Mesh \"${ name }\"\n    {\n        int[] faceVertexCounts = [${ buildMeshVertexCount( geometry ) }]\n        int[] faceVertexIndices = [${ buildMeshVertexIndices( geometry ) }]\n        normal3f[] normals = [${ buildVector3Array( attributes.normal, count )}] (\n            interpolation = \"vertex\"\n        )\n        point3f[] points = [${ buildVector3Array( attributes.position, count )}]\n        float2[] primvars:st = [${ buildVector2Array( attributes.uv, count )}] (\n            interpolation = \"vertex\"\n        )\n        uniform token subdivisionScheme = \"none\"\n    }\n`;\n\n}\n\nfunction buildMeshVertexCount( geometry ) {\n\n\tconst count = geometry.index !== null ? geometry.index.array.length : geometry.attributes.position.count;\n\n\treturn Array( count / 3 ).fill( 3 ).join( ', ' );\n\n}\n\nfunction buildMeshVertexIndices( geometry ) {\n\n\tif ( geometry.index !== null ) {\n\n\t\treturn geometry.index.array.join( ', ' );\n\n\t}\n\n\tconst array = [];\n\tconst length = geometry.attributes.position.count;\n\n\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\tarray.push( i );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector3Array( attribute, count ) {\n\n\tif ( attribute === undefined ) {\n\n\t\tconsole.warn( 'USDZExporter: Normals missing.' );\n\t\treturn Array( count ).fill( '(0, 0, 0)' ).join( ', ' );\n\n\t}\n\n\tconst array = [];\n\tconst data = attribute.array;\n\n\tfor ( let i = 0; i < data.length; i += 3 ) {\n\n\t\tarray.push( `(${ data[ i + 0 ].toPrecision( PRECISION ) }, ${ data[ i + 1 ].toPrecision( PRECISION ) }, ${ data[ i + 2 ].toPrecision( PRECISION ) })` );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\nfunction buildVector2Array( attribute, count ) {\n\n\tif ( attribute === undefined ) {\n\n\t\tconsole.warn( 'USDZExporter: UVs missing.' );\n\t\treturn Array( count ).fill( '(0, 0)' ).join( ', ' );\n\n\t}\n\n\tconst array = [];\n\tconst data = attribute.array;\n\n\tfor ( let i = 0; i < data.length; i += 2 ) {\n\n\t\tarray.push( `(${ data[ i + 0 ].toPrecision( PRECISION ) }, ${ 1 - data[ i + 1 ].toPrecision( PRECISION ) })` );\n\n\t}\n\n\treturn array.join( ', ' );\n\n}\n\n// Materials\n\nfunction buildMaterials( materials, textures ) {\n\n\tconst array = [];\n\n\tfor ( const uuid in materials ) {\n\n\t\tconst material = materials[ uuid ];\n\n\t\tarray.push( buildMaterial( material, textures ) );\n\n\t}\n\n\treturn `def \"Materials\"\n{\n${ array.join( '' ) }\n}\n\n`;\n\n}\n\nfunction buildMaterial( material, textures ) {\n\n\t// https://graphics.pixar.com/usd/docs/UsdPreviewSurface-Proposal.html\n\n\tconst pad = '            ';\n\tconst inputs = [];\n\tconst samplers = [];\n\n\tfunction buildTexture( texture, mapType, color ) {\n\n\t\tconst id = texture.id + ( color ? '_' + color.getHexString() : '' );\n\n\t\ttextures[ id ] = texture;\n\n\t\treturn `\n        def Shader \"Transform2d_${ mapType }\" (\n            sdrMetadata = {\n                string role = \"math\"\n            }\n        )\n        {\n            uniform token info:id = \"UsdTransform2d\"\n            float2 inputs:in.connect = </Materials/Material_${ material.id }/uvReader_st.outputs:result>\n            float2 inputs:scale = ${ buildVector2( texture.repeat ) }\n            float2 inputs:translation = ${ buildVector2( texture.offset ) }\n            float2 outputs:result\n        }\n\n        def Shader \"Texture_${ texture.id }_${ mapType }\"\n        {\n            uniform token info:id = \"UsdUVTexture\"\n            asset inputs:file = @textures/Texture_${ id }.jpg@\n            float2 inputs:st.connect = </Materials/Material_${ material.id }/Transform2d_${ mapType }.outputs:result>\n            token inputs:wrapS = \"repeat\"\n            token inputs:wrapT = \"repeat\"\n            float outputs:r\n            float outputs:g\n            float outputs:b\n            float3 outputs:rgb\n        }`;\n\n\t}\n\n\tif ( material.map !== null ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:diffuseColor.connect = </Materials/Material_${ material.id }/Texture_${ material.map.id }_diffuse.outputs:rgb>` );\n\n\t\tsamplers.push( buildTexture( material.map, 'diffuse', material.color ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }color3f inputs:diffuseColor = ${ buildColor( material.color ) }` );\n\n\t}\n\n\tif ( material.emissiveMap !== null ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:emissiveColor.connect = </Materials/Material_${ material.id }/Texture_${ material.emissiveMap.id }_emissive.outputs:rgb>` );\n\n\t\tsamplers.push( buildTexture( material.emissiveMap, 'emissive' ) );\n\n\t} else if ( material.emissive.getHex() > 0 ) {\n\n\t\tinputs.push( `${ pad }color3f inputs:emissiveColor = ${ buildColor( material.emissive ) }` );\n\n\t}\n\n\tif ( material.normalMap !== null ) {\n\n\t\tinputs.push( `${ pad }normal3f inputs:normal.connect = </Materials/Material_${ material.id }/Texture_${ material.normalMap.id }_normal.outputs:rgb>` );\n\n\t\tsamplers.push( buildTexture( material.normalMap, 'normal' ) );\n\n\t}\n\n\tif ( material.aoMap !== null ) {\n\n\t\tinputs.push( `${ pad }float inputs:occlusion.connect = </Materials/Material_${ material.id }/Texture_${ material.aoMap.id }_occlusion.outputs:r>` );\n\n\t\tsamplers.push( buildTexture( material.aoMap, 'occlusion' ) );\n\n\t}\n\n\tif ( material.roughnessMap !== null ) {\n\n\t\tinputs.push( `${ pad }float inputs:roughness.connect = </Materials/Material_${ material.id }/Texture_${ material.roughnessMap.id }_roughness.outputs:g>` );\n\n\t\tsamplers.push( buildTexture( material.roughnessMap, 'roughness' ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }float inputs:roughness = ${ material.roughness }` );\n\n\t}\n\n\tif ( material.metalnessMap !== null ) {\n\n\t\tinputs.push( `${ pad }float inputs:metallic.connect = </Materials/Material_${ material.id }/Texture_${ material.metalnessMap.id }_metallic.outputs:b>` );\n\n\t\tsamplers.push( buildTexture( material.metalnessMap, 'metallic' ) );\n\n\t} else {\n\n\t\tinputs.push( `${ pad }float inputs:metallic = ${ material.metalness }` );\n\n\t}\n\n\tinputs.push( `${ pad }float inputs:opacity = ${ material.opacity }` );\n\n\treturn `\n    def Material \"Material_${ material.id }\"\n    {\n        def Shader \"PreviewSurface\"\n        {\n            uniform token info:id = \"UsdPreviewSurface\"\n${ inputs.join( '\\n' ) }\n            int inputs:useSpecularWorkflow = 0\n            token outputs:surface\n        }\n\n        token outputs:surface.connect = </Materials/Material_${ material.id }/PreviewSurface.outputs:surface>\n        token inputs:frame:stPrimvarName = \"st\"\n\n        def Shader \"uvReader_st\"\n        {\n            uniform token info:id = \"UsdPrimvarReader_float2\"\n            token inputs:varname.connect = </Materials/Material_${ material.id }.inputs:frame:stPrimvarName>\n            float2 inputs:fallback = (0.0, 0.0)\n            float2 outputs:result\n        }\n\n${ samplers.join( '\\n' ) }\n\n    }\n`;\n\n}\n\nfunction buildColor( color ) {\n\n\treturn `(${ color.r }, ${ color.g }, ${ color.b })`;\n\n}\n\nfunction buildVector2( vector ) {\n\n\treturn `(${ vector.x }, ${ vector.y })`;\n\n}\n\nexport { USDZExporter };\n"],"sourceRoot":""}