{"version":3,"sources":["MaterialParamsSetting.js"],"names":["MaterialParamsSetting","matType","materialType","openControl","settings","useContext","SettingsContext","dispatch","DispatchContext","currentSettings","materialParams","paramsList","commonParams","extraParams","updateMatParam","name","value","action","type","key","toggleSetting","event","paramName","currentTarget","handleColorBtnClick","e","dataset","generateControl","paramsDetails","currentValue","fullWidth","variant","onClick","createToggleButton","min","max","step","className","onChange","_","newValue","createSlider","color","style","backgroundColor","getTextColor","data-value","createColorButton","selectOptions","options","map","option","target","createSelectBox","generateParamText","param","settingsList"],"mappings":"iNA0KeA,UA1Jf,YAAwE,IAAzBC,EAAwB,EAAtCC,aAAuBC,EAAe,EAAfA,YAC9CC,EAAWC,qBAAWC,KACtBC,EAAWF,qBAAWG,KAEtBC,EAAkBL,EAASM,eAE3BC,EAAU,sBAAOC,KAAP,YAAwBC,IAAYZ,KAE9Ca,EAAiB,SAACC,EAAMC,GAC1B,IAAMC,EAAS,CACXC,KAAM,SACNC,IAAK,iBACLH,MAAM,eAAID,EAAOC,IAErBT,EAASU,IAGPG,EAAgB,SAAAC,GAClB,IAAMC,EAAYD,EAAME,cAAcP,MAMtCT,EALe,CACXW,KAAM,SACNC,IAAK,iBACLH,MAAOM,KASTE,EAAsB,SAAAC,GACxBtB,EAAYsB,EAAEF,cAAcG,QAAQV,QA6ElCW,EAAkB,SAAAL,GAEpB,OADaM,IAAcN,GAAWJ,MAElC,IAAK,UACD,OA1Ee,SAAAH,GACvB,IAAMc,EAAepB,EAAgBM,GACrC,OACI,8BACI,cAAC,IAAD,CACIC,MAAOD,EACPe,WAAS,EACTC,QAAQ,YACRC,QAASZ,EAJb,SAMKS,EAAe,KAAO,UAgEpBI,CAAmBX,GAC9B,IAAK,SACL,IAAK,aACD,OA5CS,SAAAP,GACjB,IA9CuBI,EA8CjBU,EAAepB,EAAgBM,GADZ,EAEEa,IAAcb,GAAjCmB,EAFiB,EAEjBA,IAAKC,EAFY,EAEZA,IAAKC,EAFO,EAEPA,KAClB,OACI,qBAAKC,UAAU,+BAAf,SACI,cAAC,IAAD,CACIrB,MAAOa,EACPK,IAAKA,EACLC,IAAKA,EACLC,KAAMA,EACNE,UAvDWnB,EAuDkBJ,EAvDX,SAACwB,EAAGC,GAClC1B,EAAeK,EAAKqB,SAwFLC,CAAanB,GACxB,IAAK,QACD,OA/Dc,SAAAP,GACtB,IAAM2B,EAAQjC,EAAgBM,GAC9B,OACI,cAAC,IAAD,CACIe,WAAS,EACTa,MAAO,CACHC,gBAAiBF,EACjBA,MAAOG,YAAaH,IAExBI,aAAA,yBAA8B/B,GAC9BiB,QAASR,EAPb,SASKkB,IAmDMK,CAAkBzB,GAC7B,IAAK,SACD,OAhCY,SAAAP,GACpB,IAtDuBI,EAsDjBU,EAAepB,EAAgBM,GAE/BiC,EADcpB,IAAcb,GAA1BkC,QACsBC,KAAI,SAAAC,GAAM,OACpC,cAAC,IAAD,CAAUnC,MAAOmC,EAAjB,SACKA,GADyBA,MAIlC,OACI,8BACI,cAAC,IAAD,CACIrB,WAAS,EACTd,MAAOa,EACPS,UAlEWnB,EAkEkBJ,EAlEX,SAAAU,GAC9BX,EAAeK,EAAKM,EAAE2B,OAAOpC,SA8DrB,SAKKgC,MAiBEK,CAAgB/B,GAC3B,QACI,OAAOb,EAAgBa,KAI7BgC,EAAoB,SAAAC,GAEtB,OADa3B,IAAc2B,GAAOrC,MAE9B,IAAK,SACD,MAAM,GAAN,OAAUU,IAAc2B,GAAOxC,KAA/B,aAAwCN,EAAgB8C,IAC5D,IAAK,aACD,MAAM,GAAN,OAAU3B,IAAc2B,GAAOxC,KAA/B,gBAC6B,IAAzBN,EAAgB8C,IADpB,KAGJ,QACI,OAAO3B,IAAc2B,GAAOxC,OAIlCyC,EAAe7C,EAAWuC,KAAI,SAAAK,GAChC,OACI,eAAC,WAAD,WACI,qBAAKlB,UAAU,mCAAf,SACKiB,EAAkBC,KAEvB,mCAAG5B,EAAgB4B,OAJRA,MASvB,OAAO,mCAAGC","file":"static/js/41.f062c10d.chunk.js","sourcesContent":["import { Fragment, useContext } from \"react\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\nimport {\r\n    matCommonParams as commonParams,\r\n    matExtraParams as extraParams,\r\n    matParamsDetails as paramsDetails,\r\n} from \"./consts\";\r\nimport { getTextColor } from \"./helpers\";\r\n\r\nimport { DispatchContext, SettingsContext } from \"./context/SettingsContext\";\r\n\r\nfunction MaterialParamsSetting({ materialType: matType, openControl }) {\r\n    const settings = useContext(SettingsContext);\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    const currentSettings = settings.materialParams;\r\n\r\n    const paramsList = [...commonParams, ...extraParams[matType]];\r\n\r\n    const updateMatParam = (name, value) => {\r\n        const action = {\r\n            type: \"update\",\r\n            key: \"materialParams\",\r\n            value: { [name]: value },\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const toggleSetting = event => {\r\n        const paramName = event.currentTarget.value;\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"materialParams\",\r\n            value: paramName,\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const handleSliderChange = key => (_, newValue) => {\r\n        updateMatParam(key, newValue);\r\n    };\r\n\r\n    const handleColorBtnClick = e => {\r\n        openControl(e.currentTarget.dataset.value);\r\n    };\r\n\r\n    const handleSelectChange = key => e => {\r\n        updateMatParam(key, e.target.value);\r\n    };\r\n\r\n    const createToggleButton = name => {\r\n        const currentValue = currentSettings[name];\r\n        return (\r\n            <div>\r\n                <Button\r\n                    value={name}\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    onClick={toggleSetting}\r\n                >\r\n                    {currentValue ? \"ON\" : \"OFF\"}\r\n                </Button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const createColorButton = name => {\r\n        const color = currentSettings[name];\r\n        return (\r\n            <Button\r\n                fullWidth\r\n                style={{\r\n                    backgroundColor: color,\r\n                    color: getTextColor(color),\r\n                }}\r\n                data-value={`materialParams-${name}`}\r\n                onClick={handleColorBtnClick}\r\n            >\r\n                {color}\r\n            </Button>\r\n        );\r\n    };\r\n\r\n    const createSlider = name => {\r\n        const currentValue = currentSettings[name];\r\n        const { min, max, step } = paramsDetails[name];\r\n        return (\r\n            <div className=\"AdvancedSettingsGroup-slider\">\r\n                <Slider\r\n                    value={currentValue}\r\n                    min={min}\r\n                    max={max}\r\n                    step={step}\r\n                    onChange={handleSliderChange(name)}\r\n                />\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const createSelectBox = name => {\r\n        const currentValue = currentSettings[name];\r\n        const { options } = paramsDetails[name];\r\n        const selectOptions = options.map(option => (\r\n            <MenuItem value={option} key={option}>\r\n                {option}\r\n            </MenuItem>\r\n        ));\r\n        return (\r\n            <div>\r\n                <Select\r\n                    fullWidth\r\n                    value={currentValue}\r\n                    onChange={handleSelectChange(name)}\r\n                >\r\n                    {selectOptions}\r\n                </Select>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const generateControl = paramName => {\r\n        const type = paramsDetails[paramName].type;\r\n        switch (type) {\r\n            case \"boolean\":\r\n                return createToggleButton(paramName);\r\n            case \"number\":\r\n            case \"percentage\":\r\n                return createSlider(paramName);\r\n            case \"color\":\r\n                return createColorButton(paramName);\r\n            case \"select\":\r\n                return createSelectBox(paramName);\r\n            default:\r\n                return currentSettings[paramName];\r\n        }\r\n    };\r\n\r\n    const generateParamText = param => {\r\n        const type = paramsDetails[param].type;\r\n        switch (type) {\r\n            case \"number\":\r\n                return `${paramsDetails[param].name}: ${currentSettings[param]}`;\r\n            case \"percentage\":\r\n                return `${paramsDetails[param].name}: ${~~(\r\n                    currentSettings[param] * 100\r\n                )}%`;\r\n            default:\r\n                return paramsDetails[param].name;\r\n        }\r\n    };\r\n\r\n    const settingsList = paramsList.map(param => {\r\n        return (\r\n            <Fragment key={param}>\r\n                <div className=\"AdvancedSettingsGroup-optionName\">\r\n                    {generateParamText(param)}\r\n                </div>\r\n                <>{generateControl(param)}</>\r\n            </Fragment>\r\n        );\r\n    });\r\n\r\n    return <>{settingsList}</>;\r\n}\r\n\r\nexport default MaterialParamsSetting;\r\n"],"sourceRoot":""}