{"version":3,"sources":["helpers/downloadBlob.js","components/viewers/BasicViewer.js","components/viewers/AniViewer.js"],"names":["downloadBlob","blob","fileName","url","URL","createObjectURL","a","document","createElement","style","display","href","download","body","appendChild","click","window","revokeObjectURL","removeChild","BasicViewer","addFullScreenListener","fscreen","fullscreenEnabled","toggleFullScreen","fullscreenElement","exitFullscreen","requestFullscreen","mount","addEventListener","removeFullScreenListener","removeEventListener","disableInput","msg","props","setLoadingMsg","enableInput","initialize","initScene","outlines","models","modelInfo","loadMainModel","afterMainModelLoad","viewport","width","innerWidth","height","innerHeight","clock","THREE","scene","background","floor","createInvisibleFloor","add","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","lights","addAllLights","pixelRatio","rendererAA","antialias","alpha","outputEncoding","setPixelRatio","rendererNoAA","AAEnabled","antiAliasing","_AA","renderer","finalRenderer","setSize","canvas","domElement","controls","OrbitControls","controlsPosition","target","update","animate","modelId","model","id","main","modelPath","getModelPath","loadModel","basicMainProcessing","addLight","light","enable","params","newLight","createLight","push","forEach","removeLight","remove","removeAllLights","addToScene","initTexture","texture","defaultTexture","getDefaultTexture","split","source","name","textureSource","textureName","texturePath","fbxSource","mainModel","replaceTexture","oldTexture","applyModelMod","modCode","mod","applyMod","removeEffects","disableFrustumCulling","materialType","matType","isBlade","analyzeWeaponCode","changeMaterial","forced","applyNewModelMat","outlineParams","outline","createOutline","updateViewer","prev","current","updateExport","export","updateCommon","updateModel","otherUpdate","updateViewport","updateOutline","updateMaterial","material","updateLights","updateAscii","ascii","updateCamera","updateControl","updatePixelRatio","AA","updateMainModel","aspect","setVideoBackgroundSize","disposeMainModel","dispose3dObject","replaceMainModel","idChanged","beforeMainModelUpdate","afterMainModelUpdate","updateOutlineParams","Object","values","flat","applyOutlineSettings","updatedKeys","keys","filter","key","length","Map","map","matParams","updateMatParams","prevParams","useTexture","matTypeChanged","type","some","showAscii","charSet","color","bgColor","invert","AsciiEffect","effect","exportModel","onExportFinish","cameraStream","screenWidth","screenAspectRatio","getVideoTracks","getSettings","camWidth","camAspectRatio","aspectRatio","videoWidth","videoHeight","video","useCameraAsBackground","navigator","mediaDevices","getUserMedia","audio","facingMode","rearCameraStream","assign","srcObject","autoplay","playsinline","videoTexture","minFilter","rotateFloor","dt","rotateSpeed","Math","PI","rotateY","updateScene","frameId","requestAnimationFrame","getDelta","visibilityState","render","this","finishedInit","console","log","logUpdate","stop","cancelAnimationFrame","renderLists","dispose","mixer","enabled","newCanvas","allParams","paramList","getParamsList","filterObject","bg","_canvas","oldCanvas","ref","el","PureComponent","AniViewer","saveMainModelInitState","addAnimation","updateAnimation","animation","capture","captureAnimation","userData","initPos","clone","initRot","rotation","resetFace","eyeIdx","mouthIdx","beforeAddAni","aniCode","code","timeScale","aniList","analyzeChainCode","nAni","_aniIdx","playNextAni","aniSettings","loadAnimations","animations","aniIdx","removeAnimation","stopAllAction","copy","mediaRecorder","onCaptureFinish","newIdx","chunks","videoStream","captureStream","codec","MediaRecorder","mimeType","ondataavailable","event","data","onstop","format","superBuffer","Blob","date","Date","dateStr","toDateString","replace","timeStr","toLocaleTimeString","beforeCaptureAnimation","start","faceChanges","time","faceChangeTime","shift","ani","action","clipAction","currentAniSettings","repetitions","currentClipDuration","duration","setLoop","getFaceChangesQueue","change","setTime","play"],"mappings":"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","file":"static/js/6.379af8ff.chunk.js","sourcesContent":["/**\r\n * download a blob as the given file name\r\n * @param {Blob} blob\r\n * @param {string} fileName\r\n */\r\nexport default function downloadBlob(blob, fileName) {\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.style.display = \"none\";\r\n    a.href = url;\r\n    a.download = fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n\r\n    window.URL.revokeObjectURL(url);\r\n    document.body.removeChild(a);\r\n}\r\n","import { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { CAM_PARAMS } from \"helpers/consts\";\r\nimport { isBlade, filterObject, getDefaultTexture } from \"helpers/helpers\";\r\nimport {\r\n    createInvisibleFloor,\r\n    createLight,\r\n    analyzeWeaponCode,\r\n    getModelPath,\r\n    loadModel,\r\n    dispose3dObject,\r\n    createOutline,\r\n    applyOutlineSettings,\r\n    getParamsList,\r\n    changeMaterial,\r\n    updateMatParams,\r\n    removeEffects,\r\n    disableFrustumCulling,\r\n    replaceTexture,\r\n    applyMod,\r\n    logUpdate,\r\n} from \"helpers/viewerHelpers\";\r\nimport fscreen from \"fscreen\";\r\n\r\nimport { fbxSource } from \"App\";\r\n\r\n/**\r\n * Basic Viewer that supports adding / updating:\r\n *   - 1 main model\r\n *   - auto rotate\r\n *   - viewport\r\n *   - material\r\n *   - background color\r\n *   - lighting\r\n *   - anti aliasing\r\n *   - ASCII mode\r\n * @typedef {ViewerProps} Props\r\n * @extends PureComponent<Props>\r\n */\r\nclass BasicViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        // window.app = this;\r\n\r\n        // const { fbx2json } = await import(\"helpers/fbx2json\");\r\n        // await fbx2json();\r\n\r\n        await this.initialize();\r\n        this.finishedInit = true;\r\n\r\n        this.addFullScreenListener();\r\n    }\r\n\r\n    /**\r\n     * @param {ViewerProps} prev\r\n     */\r\n    componentDidUpdate(prev) {\r\n        if (!this.finishedInit) return;\r\n        /**\r\n         * @type {ViewerProps}\r\n         */\r\n        const current = this.props;\r\n\r\n        // print updated props to console\r\n        console.log(\"Updated\");\r\n        logUpdate(prev, current);\r\n\r\n        this.updateViewer(prev, current);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.cameraStream?.getVideoTracks()[0].stop();\r\n        this.removeFullScreenListener?.();\r\n        cancelAnimationFrame(this.frameId);\r\n        dispose3dObject(this.scene);\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists?.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists?.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n        this.mixer = null;\r\n        this.clock = null;\r\n        this.scene = null;\r\n    }\r\n\r\n    addFullScreenListener = () => {\r\n        if (!fscreen.fullscreenEnabled) return;\r\n\r\n        const toggleFullScreen = () => {\r\n            if (!fscreen.fullscreenElement) {\r\n                fscreen.requestFullscreen(this.mount);\r\n                return;\r\n            }\r\n\r\n            fscreen.exitFullscreen();\r\n        };\r\n        this.mount?.addEventListener(\"dblclick\", () => toggleFullScreen());\r\n        this.removeFullScreenListener = () =>\r\n            this.mount?.removeEventListener(\"dblclick\", () =>\r\n                toggleFullScreen()\r\n            );\r\n    };\r\n\r\n    /**\r\n     * disable input and display a message, default is \"Loading...\"\r\n     * @param {string} [msg]\r\n     */\r\n    disableInput = msg => this.props.setLoadingMsg(msg || \"Loading...\");\r\n\r\n    /**\r\n     * remove loading message\r\n     */\r\n    enableInput = () => this.props.setLoadingMsg(\"\");\r\n\r\n    /**\r\n     * called when viewer is mounted to initialize the scene\r\n     */\r\n    initialize = async () => {\r\n        this.disableInput();\r\n\r\n        this.initScene();\r\n\r\n        this.outlines = {};\r\n        this.models = {};\r\n        this.modelInfo = {};\r\n        await this.loadMainModel();\r\n        await this.afterMainModelLoad();\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * Called after main model is loaded and added to scene\r\n     */\r\n    afterMainModelLoad = () => void 0;\r\n\r\n    /**\r\n     * initialize scene, display size, floor, clock, light, camera, controls, and renderers\r\n     */\r\n    initScene = () => {\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.background = this.props.background;\r\n\r\n        // Floor for auto rotate\r\n        this.floor = createInvisibleFloor();\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        /**\r\n         * @type {xyzCoordinate}\r\n         */\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addAllLights(lights);\r\n\r\n        // Renderer\r\n        const { pixelRatio } = this.props;\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n            // logarithmicDepthBuffer: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n        this.rendererAA.setPixelRatio(pixelRatio);\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n            // logarithmicDepthBuffer: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n        this.rendererNoAA.setPixelRatio(pixelRatio);\r\n\r\n        const AAEnabled = this.props.antiAliasing;\r\n        this._AA = AAEnabled;\r\n\r\n        this.renderer = AAEnabled ? this.rendererAA : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        const { width, height } = this.props.viewport;\r\n        this.finalRenderer.setSize(width, height);\r\n\r\n        const canvas = this.finalRenderer.domElement;\r\n        this.canvas = canvas;\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        /**\r\n         * @type {xyzCoordinate}\r\n         */\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        this.animate();\r\n    };\r\n\r\n    /**\r\n     * load, and perform basic processing on main model\r\n     */\r\n    loadMainModel = async () => {\r\n        const modelId = this.props.model.id;\r\n        this.modelInfo.main = modelId;\r\n\r\n        const modelPath = getModelPath(modelId);\r\n        const model = await loadModel(modelPath);\r\n        this.models.main = model;\r\n\r\n        await this.basicMainProcessing();\r\n        return;\r\n    };\r\n\r\n    /**\r\n     * enable / disable Anti Aliasing\r\n     * @param {Boolean} enabled\r\n     */\r\n    set AA(enabled) {\r\n        if (enabled === this._AA) return;\r\n\r\n        this._AA = enabled;\r\n        this.renderer = enabled ? this.rendererAA : this.rendererNoAA;\r\n        const { width, height } = this.viewport;\r\n        this.renderer.setSize(width, height);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const newCanvas = this.renderer.domElement;\r\n        this.canvas = newCanvas;\r\n    }\r\n\r\n    /**\r\n     * add light to scene\r\n     * @param {LightParam} light\r\n     */\r\n    addLight = light => {\r\n        const { id, enable, ...params } = light;\r\n        if (!enable) return;\r\n\r\n        const newLight = createLight(params);\r\n\r\n        this.scene.add(newLight);\r\n        this.lights.push(newLight);\r\n    };\r\n\r\n    /**\r\n     * add lights to scene\r\n     * @param {LightParam[]} lights\r\n     */\r\n    addAllLights = lights => {\r\n        /**\r\n         * @type {THREE.Light[]}\r\n         */\r\n        this.lights = [];\r\n        lights.forEach(this.addLight);\r\n    };\r\n\r\n    /**\r\n     * remove light from scene\r\n     * @param {THREE.Light} light\r\n     */\r\n    removeLight = light => this.scene.remove(light);\r\n\r\n    /**\r\n     * remove all lights in the scene\r\n     */\r\n    removeAllLights = () => this.lights.forEach(this.removeLight);\r\n\r\n    /**\r\n     * add model to scene\r\n     * @param {THREE.Object3D} model\r\n     */\r\n    addToScene = model => this.floor.add(model);\r\n\r\n    /**\r\n     * change main model's texture if specified\r\n     */\r\n    initTexture = async () => {\r\n        const { id: modelId, texture } = this.props.model;\r\n        if (!texture || texture === \">\") return;\r\n\r\n        const defaultTexture = getDefaultTexture(modelId);\r\n        const [source, name] = texture.split(\">\");\r\n        const textureSource = source || modelId;\r\n        const textureName = name || getDefaultTexture(textureSource);\r\n\r\n        const texturePath = `${fbxSource}/fbx/${textureSource}/${textureName}.png`;\r\n        const mainModel = this.models.main;\r\n        await replaceTexture(mainModel, {\r\n            oldTexture: defaultTexture,\r\n            texturePath,\r\n        });\r\n    };\r\n\r\n    /**\r\n     * apply modifier code to main model\r\n     */\r\n    applyModelMod = () => {\r\n        const modCode = this.props.model.mod;\r\n        modCode && applyMod(this.models.main, modCode);\r\n    };\r\n\r\n    /**\r\n     * main model basic processing:\r\n     * remove effects, change material, change texture, add outline, then add to scene\r\n     */\r\n    basicMainProcessing = async () => {\r\n        const model = this.models.main;\r\n\r\n        removeEffects(model);\r\n        disableFrustumCulling(model);\r\n\r\n        const materialType = this.matType;\r\n        const modelId = this.props.model.id;\r\n        if (isBlade(modelId)) {\r\n            const { texturePath } = analyzeWeaponCode(`${modelId}n`);\r\n            changeMaterial(model, { materialType, texturePath });\r\n        } else {\r\n            changeMaterial(model, { materialType, forced: true });\r\n        }\r\n\r\n        await this.initTexture();\r\n        this.applyModelMod();\r\n\r\n        this.applyNewModelMat(model);\r\n\r\n        const outlineParams = this.props.outline;\r\n        this.outlines.main = await createOutline(model, outlineParams);\r\n\r\n        this.addToScene(model);\r\n    };\r\n\r\n    /**\r\n     * update viewer's display\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateViewer = async (prev, current) => {\r\n        await this.updateExport(prev.export, current.export);\r\n        this.updateCommon(prev, current);\r\n        this.updateModel(prev, current);\r\n        this.otherUpdate(prev, current);\r\n    };\r\n\r\n    /**\r\n     * update settings other than model and environment\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    otherUpdate = (prev, current) => void 0;\r\n\r\n    /**\r\n     * update viewport, outline, material, lighting, ASCII,\r\n     * camera, control, background, and Anti Aliasing\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateCommon = (prev, current) => {\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n        this.updateOutline(prev.outline, current.outline);\r\n        this.updateMaterial(prev.material, current.material);\r\n        this.updateLights(prev.lights, current.lights);\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n        this.updateCamera(prev.cameraPosition, current.cameraPosition);\r\n        this.updateControl(prev.controlsPosition, current.controlsPosition);\r\n        this.updatePixelRatio(prev.pixelRatio, current.pixelRatio);\r\n\r\n        // Update background color\r\n        if (prev.background !== current.background) {\r\n            this.background = current.background;\r\n        }\r\n\r\n        this.AA = current.antiAliasing;\r\n    };\r\n\r\n    /**\r\n     * update model settings\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateModel = (prev, current) => {\r\n        this.updateMainModel(prev.model, current.model);\r\n    };\r\n\r\n    /**\r\n     * update viewport\r\n     * @param {ViewerProps[\"viewport\"]} prev\r\n     * @param {ViewerProps[\"viewport\"]} current\r\n     */\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.viewport.width = width;\r\n        this.viewport.height = height;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this.props.background === \"camera\" && this.setVideoBackgroundSize();\r\n    };\r\n\r\n    /**\r\n     * remove from scene and dispose main model\r\n     */\r\n    disposeMainModel = () => {\r\n        const mainModel = this.models.main;\r\n        this.floor.remove(mainModel);\r\n        dispose3dObject(mainModel);\r\n    };\r\n\r\n    /**\r\n     * replace main model\r\n     */\r\n    replaceMainModel = async () => {\r\n        this.disableInput();\r\n\r\n        this.disposeMainModel();\r\n        await this.loadMainModel();\r\n        this.applyNewModelMat(this.models.main);\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * update main model\r\n     * @param {ViewerProps[\"model\"]} prev\r\n     * @param {ViewerProps[\"model\"]} current\r\n     */\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        const idChanged = prev.id !== modelId;\r\n        const modChanged = prev.mod !== current.mod;\r\n\r\n        modChanged && this.applyModelMod();\r\n\r\n        if (!idChanged) return;\r\n\r\n        this.beforeMainModelUpdate();\r\n        await this.replaceMainModel();\r\n        this.afterMainModelUpdate();\r\n    };\r\n\r\n    /**\r\n     * called before main model is updated\r\n     */\r\n    beforeMainModelUpdate = () => void 0;\r\n\r\n    /**\r\n     * called after main model is updated\r\n     */\r\n    afterMainModelUpdate = () => void 0;\r\n\r\n    /**\r\n     * update outline parameters\r\n     * @param {Map<string, *>} update\r\n     */\r\n    updateOutlineParams = update => {\r\n        const outlines = Object.values(this.outlines).flat();\r\n        outlines.forEach(outline => {\r\n            applyOutlineSettings(outline, update);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * update outline settings\r\n     * @param {AppOutlineState} prev - previous settings\r\n     * @param {AppOutlineState} current - current settings\r\n     */\r\n    updateOutline = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const updatedKeys = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedKeys.length === 0) return;\r\n\r\n        const update = new Map(updatedKeys.map(key => [key, current[key]]));\r\n        this.updateOutlineParams(update);\r\n    };\r\n\r\n    /**\r\n     * get relevant parameters for the current material type\r\n     */\r\n    get matParams() {\r\n        const { type: materialType, ...allParams } = this.props.material;\r\n        const paramList = getParamsList(materialType);\r\n        return filterObject(allParams, paramList);\r\n    }\r\n\r\n    /**\r\n     * get the current material type\r\n     */\r\n    get matType() {\r\n        return this.props.material.type;\r\n    }\r\n\r\n    /**\r\n     * apply material setting to a newly loaded model\r\n     */\r\n    applyNewModelMat = model => {\r\n        const params = this.matParams;\r\n        const defaultParams = { useTexture: true };\r\n        updateMatParams(model, { prevParams: defaultParams, params });\r\n    };\r\n\r\n    /**\r\n     * update material settings\r\n     */\r\n    updateMaterial = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const materialType = this.matType;\r\n        const mainModel = this.models.main;\r\n\r\n        const matTypeChanged = prev.type !== materialType;\r\n        if (matTypeChanged) {\r\n            changeMaterial(this.models.main, { materialType });\r\n        }\r\n\r\n        const prevParams = matTypeChanged\r\n            ? { useTexture: prev.useTexture }\r\n            : prev;\r\n        const params = this.matParams;\r\n        updateMatParams(mainModel, { prevParams, params });\r\n    };\r\n\r\n    /**\r\n     * update lighting\r\n     * @param {LightParam[]} prev\r\n     * @param {LightParam[]} current\r\n     */\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeAllLights();\r\n            this.addAllLights(current);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update ASCII settings\r\n     * @param {ViewerProps[\"ascii\"]} prev\r\n     * @param {ViewerProps[\"ascii\"]} current\r\n     */\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n\r\n            const { width, height } = this.viewport;\r\n            this.renderer.setSize(width, height);\r\n\r\n            const canvas = this.renderer.domElement;\r\n            this.canvas = canvas;\r\n\r\n            return;\r\n        }\r\n\r\n        this.showAscii();\r\n    };\r\n\r\n    /**\r\n     * render scene as ASCII\r\n     */\r\n    showAscii = async () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const { AsciiEffect } = await import(\r\n            /* webpackChunkName: \"AsciiEffect\" */\r\n            \"three/examples/jsm/effects/AsciiEffect\"\r\n        );\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n\r\n        const { width, height } = this.viewport;\r\n        this.effect.setSize(width, height);\r\n\r\n        const canvas = this.effect.domElement;\r\n        canvas.style.color = color;\r\n        canvas.style.background = bgColor;\r\n        this.canvas = canvas;\r\n\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    /**\r\n     * @param {xyzCoordinate} prev\r\n     * @param {xyzCoordinate} current\r\n     */\r\n    updateCamera = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        this.camera.position.set(...current);\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    /**\r\n     * @param {xyzCoordinate} prev\r\n     * @param {xyzCoordinate} current\r\n     */\r\n    updateControl = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        this.controls.target.set(...current);\r\n        this.controls.update();\r\n    };\r\n\r\n    /**\r\n     * update renderer's pixel ratio\r\n     * @param {number} prev\r\n     * @param {number} current\r\n     */\r\n    updatePixelRatio = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        this.rendererAA.setPixelRatio(current);\r\n        this.rendererNoAA.setPixelRatio(current);\r\n    };\r\n\r\n    /**\r\n     * @param {ViewerProps[\"export\"]} prev\r\n     * @param {ViewerProps[\"export\"]} current\r\n     */\r\n    updateExport = async (prev, current) => {\r\n        if (!current.enable || prev.enable) return;\r\n        this.disableInput(\"Exporting\");\r\n\r\n        const { exportModel } = await import(\r\n            /* webpackChunkName: \"exporter\" */ \"helpers/exportModel\"\r\n        );\r\n        await exportModel(this.models.main, current);\r\n        this.props.onExportFinish();\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * @param {ColorCode | 'transparent' | 'camera'} bg\r\n     */\r\n    set background(bg) {\r\n        switch (bg) {\r\n            case \"transparent\":\r\n                this.scene.background = null;\r\n                return;\r\n            case \"camera\":\r\n                this.useCameraAsBackground();\r\n                return;\r\n            default:\r\n                this.cameraStream?.getVideoTracks()[0].stop();\r\n                this.scene.background = new THREE.Color(bg);\r\n        }\r\n    }\r\n\r\n    setVideoBackgroundSize = () => {\r\n        if (!this.cameraStream) return;\r\n\r\n        const { width: screenWidth, height: screenHeight } = this.viewport;\r\n        const screenAspectRatio = screenWidth / screenHeight;\r\n\r\n        const {\r\n            width: camWidth,\r\n            aspectRatio: camAspectRatio,\r\n        } = this.cameraStream.getVideoTracks()[0].getSettings();\r\n\r\n        const videoWidth =\r\n            camAspectRatio > screenAspectRatio ? screenWidth : camWidth;\r\n        const videoAspectRatio =\r\n            camAspectRatio > screenAspectRatio\r\n                ? screenAspectRatio\r\n                : camAspectRatio;\r\n        const videoHeight = videoWidth / videoAspectRatio;\r\n\r\n        this.video.width = videoWidth;\r\n        this.video.height = videoHeight;\r\n    };\r\n\r\n    /**\r\n     * use hardware camera as background, rear facing is prioritized\r\n     */\r\n    useCameraAsBackground = async () => {\r\n        if (!navigator.mediaDevices?.getUserMedia) return;\r\n\r\n        const rearCameraStream = await navigator.mediaDevices?.getUserMedia({\r\n            audio: false,\r\n            video: { facingMode: \"environment\" },\r\n        });\r\n\r\n        this.cameraStream =\r\n            rearCameraStream ||\r\n            (await navigator.mediaDevices?.getUserMedia({\r\n                audio: false,\r\n                video: { facingMode: \"user\" },\r\n            }));\r\n\r\n        if (!this.cameraStream) return;\r\n\r\n        this.video = document.createElement(\"video\");\r\n\r\n        Object.assign(this.video, {\r\n            srcObject: this.cameraStream,\r\n            autoplay: true,\r\n            playsinline: true,\r\n        });\r\n\r\n        const videoTexture = new THREE.VideoTexture(this.video);\r\n        videoTexture.minFilter = THREE.LinearFilter;\r\n        this.scene.background = videoTexture;\r\n\r\n        // this.setVideoBackgroundSize();\r\n    };\r\n\r\n    /**\r\n     * set display canvas\r\n     */\r\n    set canvas(canvas) {\r\n        const oldCanvas = this._canvas;\r\n        oldCanvas && this.mount.removeChild(oldCanvas);\r\n        this.mount.appendChild(canvas);\r\n        this._canvas = canvas;\r\n    }\r\n\r\n    /**\r\n     * get currently displayed canvas\r\n     */\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    /**\r\n     * rotate the floor\r\n     * @param {number} dt - time difference\r\n     */\r\n    rotateFloor = dt => {\r\n        const { rotateSpeed } = this.props;\r\n        if (!rotateSpeed) return;\r\n\r\n        const angle = (rotateSpeed * dt * Math.PI) / 2;\r\n        this.floor.rotateY(angle);\r\n    };\r\n\r\n    /**\r\n     * called during every animation frame\r\n     * @param {number} dt - time difference since last call\r\n     */\r\n    updateScene = dt => void 0;\r\n\r\n    /**\r\n     * render loop\r\n     */\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n\r\n        const dt = this.clock.getDelta();\r\n        if (document.visibilityState === \"hidden\") return;\r\n\r\n        this.rotateFloor(dt);\r\n\r\n        this.updateScene(dt);\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default BasicViewer;\r\n","import BasicViewer from \"./BasicViewer\";\r\n\r\nimport * as THREE from \"three\";\r\nimport {\r\n    analyzeChainCode,\r\n    loadAnimations,\r\n    getFaceChangesQueue,\r\n} from \"helpers/viewerHelpers\";\r\n\r\nimport downloadBlob from \"helpers/downloadBlob\";\r\n\r\n/**\r\n *  Extension of Base Viewer that adds:\r\n *    - Animation\r\n *    - Recording Animation\r\n */\r\nexport class AniViewer extends BasicViewer {\r\n    afterMainModelLoad = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    /**\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateModel = async (prev, current) => {\r\n        await this.updateMainModel(prev.model, current.model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    /**\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    otherUpdate = (prev, current) => {\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * save main model's initial position and rotation\r\n     */\r\n    saveMainModelInitState = () => {\r\n        const model = this.models.main;\r\n        model.userData.initPos = model.position.clone();\r\n        model.userData.initRot = model.rotation.clone();\r\n    };\r\n\r\n    /**\r\n     * play animation stored in this.animations[newIdx]\r\n     * @param {number} newIdx\r\n     */\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n\r\n        const { mixer } = this;\r\n        mixer.stopAllAction();\r\n\r\n        const ani = this.animations[newIdx];\r\n        const action = mixer.clipAction(ani);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n        const currentClipDuration = ani.duration;\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        this.faceChanges = getFaceChangesQueue(faceChanges, repetitions);\r\n        this.faceChangeTime = this.faceChanges.map(\r\n            change => (currentClipDuration * change.time) / 100\r\n        );\r\n\r\n        mixer.setTime(0);\r\n        action.play();\r\n    }\r\n\r\n    /**\r\n     * reset model's face to the ones specified in model setting\r\n     */\r\n    resetFace = () => {\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    /**\r\n     * @param {number} newIdx\r\n     */\r\n    set eyeIdx(newIdx) {}\r\n\r\n    /**\r\n     * @param {number} newIdx\r\n     */\r\n    set mouthIdx(newIdx) {}\r\n\r\n    /**\r\n     * called before animation is attached\r\n     */\r\n    beforeAddAni = () => {\r\n        this.resetFace();\r\n    };\r\n\r\n    /**\r\n     * load and attach animations\r\n     */\r\n    addAnimation = async () => {\r\n        this.beforeAddAni();\r\n\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        if (!aniCode) return;\r\n\r\n        this.disableInput();\r\n\r\n        const mainModel = this.models.main;\r\n        const aniList = analyzeChainCode(aniCode);\r\n        /**\r\n         * number of currently loaded animations\r\n         */\r\n        this.nAni = aniList.length;\r\n\r\n        mainModel.mixer = new THREE.AnimationMixer(mainModel);\r\n        /**\r\n         * @type {THREE.AnimationMixer}\r\n         */\r\n        this.mixer = mainModel.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        mainModel.mixer.timeScale = timeScale; // Global timeScale\r\n        mainModel.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = aniList;\r\n\r\n        /**\r\n         * @type {THREE.AnimationClip[]}\r\n         */\r\n        this.animations = await loadAnimations(aniList);\r\n\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * remove all loaded animation\r\n     */\r\n    removeAnimation = () => {\r\n        const mainModel = this.models.main;\r\n        mainModel.mixer?.stopAllAction?.();\r\n\r\n        // Reset position and rotation to initial value\r\n        const { initPos, initRot } = mainModel.userData;\r\n        mainModel.position.copy(initPos);\r\n        mainModel.rotation.copy(initRot);\r\n\r\n        this.mixer = null;\r\n        this.animations = [];\r\n        this.aniSettings = [];\r\n    };\r\n\r\n    /**\r\n     * play the next animation stored in this.animations\r\n     */\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.onCaptureFinish();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    /**\r\n     * update animation and global time scale\r\n     * @param {ViewerProps[\"animation\"]} prev\r\n     * @param {ViewerProps[\"animation\"]} current\r\n     */\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            this.removeAnimation();\r\n            this.addAnimation();\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * capture current animation and save as video\r\n     */\r\n    captureAnimation = () => {\r\n        /**\r\n         * @type {Blob[]}\r\n         */\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            const { codec } = this.props.capture;\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.enableInput();\r\n\r\n                const { format } = this.props.capture;\r\n\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: `video/${format}`,\r\n                });\r\n\r\n                const date = new Date();\r\n                const dateStr = date.toDateString().replace(/ /g, \"_\");\r\n                const timeStr = date\r\n                    .toLocaleTimeString()\r\n                    .replace(/:/g, \"-\")\r\n                    .replace(/ /g, \"\");\r\n                const fileName = `ani_${dateStr}_${timeStr}.${format}`;\r\n\r\n                downloadBlob(superBuffer, fileName);\r\n            };\r\n        }\r\n        this.disableInput(\"Recording\");\r\n        this.beforeCaptureAnimation();\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    /**\r\n     * called before animation capture\r\n     */\r\n    beforeCaptureAnimation = () => void 0;\r\n\r\n    updateScene = dt => {\r\n        this.mixer?.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length) {\r\n            const elapsedTime = this.mixer.time;\r\n            const nextFaceChangeTime = this.faceChangeTime[0];\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                this.faceChangeTime.shift();\r\n                const { eyeIdx, mouthIdx } = this.faceChanges.shift();\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default AniViewer;\r\n"],"sourceRoot":""}