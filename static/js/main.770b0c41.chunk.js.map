{"version":3,"sources":["serviceWorker.js","index.js","helpers/consts.js","helpers/helpers.js","reducer/settingsReducer.js","context/SettingsContext.js","MainPage/MainPageStyles.js","data/controlsPositions.js","MainPage/Display/Display.js","helpers/async/setParamsFromPath.js","MainPage/MainPage.js","App.js","data/face_offset.js","helpers/async/getModelMod.js","data/matcapList.js","helpers/viewerHelpers.js","shader/outlineFragShader.js","shader/outlineVertShader.js","helpers/async/getDefaultAni.js","data/cameraPositions.js","hooks/useToggleState.js","helpers/getTextColor.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","DRAWER_WIDTH","DRAWER_BGCOLOR","DEFAULT_MODEL_ID","DEFAULT_FACE_IDX","baseUrl","matcapDir","process","DEFAULT_ADV_ANI","WEAPON_LIST","matParamsDetails","wireframe","name","type","default","useTexture","transparent","flatShading","color","emissive","opacity","min","max","step","emissiveIntensity","specular","metalness","roughness","shininess","gradientMap","options","matcap","matcapList","map","matColorParams","matParamsEntries","Object","entries","defaultMatParams","fromEntries","needsUpdateParams","defaultLights","id","enable","intensity","position","asciiSet","defaultSettings","model","texture","eyeTexture","eyeIdx","NaN","mouthTexture","mouthIdx","weaponRight","weaponLeft","material","scene","rotateSpeed","background","initCameraPosition","lights","animation","code","timeScale","chainMaker","chain","app","sidebarContent","showSettings","showAniControl","antiAliasing","pixelRatio","viewerType","outline","size","capture","supportedCodecs","codec","format","export","binary","ascii","charSet","invert","bgColor","initKeyMap","group","key","modName","tx","et","ei","mt","mi","wr","wl","bg","cam","showAC","showOutline","AA","rot","ts","cc","commonInitKeys","aniInitKeys","initKeys","adv","dragon","ani","basic","MATERIALS","NO_LIGHT_MATERIALS","matCommonParams","matExtraParams","Basic","Toon","Lambert","Phong","Standard","Matcap","spFaceTextures","c110300_01","incompatibleModels","Set","commonColors","green","black","grey","white","CAM_PARAMS","angle","far","near","aniModList","defaultValue","r","videoCodecs","capitalize","first","rest","toUpperCase","join","getDefaultTexture","filterObject","object","keys","filtered","filter","includes","getUpdated","prev","current","isBlade","modelId","startsWith","isCharaWithAni","endsWith","has","isDragon","getViewerType","getDefaultFace","callbackOnEach","list","callback","Array","isArray","forEach","child","generateChainCode","aniToCode","aniName","faceChanges","modCode","generateAniModCode","faceCode","generateFaceCode","modCodes","modKey","push","faceCodes","change","time","collectFilter","filterState","groupName","groupData","length","multiCondFilter","input","filterConditions","el","every","propName","listToAniButtons","handleSelect","style","maxWidth","variant","data-value","data-name","onClick","settingsReducer","state","action","value","currentValue","defaultSetting","changes","SettingsContext","createContext","DispatchContext","initSettings","SettingsProvider","props","useReducer","settings","dispatch","Provider","children","light","useStyles","makeStyles","theme","root","display","width","height","content","padding","openSidebarButton","top","left","margin","borderRadius","transition","backgroundColor","cursor","loadingMsg","zIndex","justifyContent","alignItems","fontSize","controlsPosition","c","d","w","b","e","h","o","d200017_01","d210001_01","d210002_01","d210003_01","d210004_01","d210005_01","d210020_01","d210038_01","d210039_01","d210040_01","d210041_01","d210042_01","d210048_01","d210052_01","d210054_01","d210072_01","d210076_01","d210077_01","d210078_01","d210079_01","d210081_01","d210082_01","d210087_01","d210093_01","d210094_01","d210095_01","d210102_01","d210103_01","d210104_01","d210109_01","d210111_01","d210112_01","d210113_01","d210114_01","d210115_01","d210116_01","d210117_01","d210118_01","d210123_01","d210125_01","d210126_01","d210127_01","d210128_01","d210133_01","d210136_01","h0010001_02","r0070401","r0070501","r0080401","smith","AniControl","lazy","viewers","Display","viewport","useContext","toggleSetting","useCallback","toggleCapture","toggleExport","modelType","defaultCameraPosition","cameraPositions","cameraPosition","n","i","isNaN","controlPosition","ModelViewer","className","getTextColor","fallback","setLoadingMsg","str2bool","str","str2xyz","split","parseFloat","str2bg","convertParamValue","xyz","float","int","parseInt","boolean","getParamsFromPath","path","reduce","output","paramText","keycode","valueParts","extractParam","filterParamsByGroup","params","setModelParams","a","modelParams","part","setModelMod","modelData","getDefaultModelMod","defaultMod","updateValue","getModelModByName","mod","setAniParams","aniParams","find","getDefaultAni","aniCode","chainCodeToList","setOtherParams","paramList","setParamsFromPath","definedGroups","delete","groups","groupSetPromise","Promise","all","Sidebar","Dock","MainPage","classes","useToggleState","sidebar","toggleSidebar","useState","initLoadDone","setInitLoadDone","innerWidth","innerHeight","setViewport","dockMode","setDockMode","dockHandle","useRef","viewerRef","currentId","updateViewportSize","clientWidth","clientHeight","updateSetings","useEffect","pathname","setParams","newViewerType","viewerChanged","viewerChangedToAdv","needResetAni","resetAni","modelMod","addEventListener","removeEventListener","CssBaseline","open","setDock","mode","ref","close","fbxSource","routeProps","textureOffsets","c110384_01","c110383_01","c110382_01","c110381_01","c110342_03","c110377_01","c110378_01","c110379_01","c110380_01","c100015_05","c100006_11","c110376_01","c110375_01","c110374_01","c110307_02","c110252_02","c110296_02","c100004_17","c110371_01","c110350_02","c110340_02","c110018_02","c110370_01","c100015_04","c110342_01","c110267_01","c110050_02","c110291_01","c110354_01","c110345_01","c110266_01","c110365_01","c110346_01","c110366_01","c110299_02","c110360_01","c110307_01","c110322_01","c110356_01","c110344_01","c110053_03","c110368_01","c110367_01","c110003_02","c110270_02","c110341_03","idxOffsets","face1","face2","face3","face4","face5","face6","face7","face8","face9","result","replace","loadModel","url","resolve","FBXLoader","load","loadTexture","THREE","loadMatcap","getMatcapPath","loadSingleAni","fetch","response","json","parse","loadAnimations","aniList","createInvisibleFloor","floorGeometry","rotateX","Math","PI","floorMaterial","visible","getMeshes","getOutline","meshes","traverse","isMesh","unshift","getMaterial","flatMap","mesh","getModelPath","getTexturePath","analyzeWeaponCode","flipped","weaponCode","substring","modelPath","texturePath","dispose3dObject","disposedList","needToDispose","uuid","notDisposed","dispose","add","disposeObject","mat","userData","backupMap","disposeMaterial","geometry","getParamsList","matType","getDragonEye","eyes","nameRegex","test","getDragonMouth","mouths","removeEffects","disableFrustumCulling","frustumCulled","createNewMaterial","materialType","changeMaterial","target","forced","materials","flat","matIsArray","checkParam","some","encoding","newMaterial","skinning","createOutline","outlines","skipList","word","clone","createOutlineMaterial","replaceMaterial","isSkinnedMesh","bind","skeleton","bindMatrix","uniforms","tyle","side","fragmentShader","vertexShader","applyOutlineSettings","fill","calculateTextureOffset","currentTexture","prevTexture","offset","x","y","prevOffsetX","prevOffsetY","currentOffsetX","currentOffsetY","calculateIdxOffset","currentIdx","prevIdx","applyOffset","offsetX","offsetY","targetGroup","materialIndex","start","end","count","uv","attributes","u","getX","v","getY","setXY","needsUpdate","applyEyeOffset","applyMouthOffset","applyTexture","textureId","oldMaterial","applyEyeTexture","applyMouthTexture","getAniData","modifiers","modList","repetitions","faceMod","processFaceChanges","getAniModifiers","analyzeChainCode","sorted","sort","timeStamps","nanoid","simplified","assign","getFaceChangesQueue","_","others","concat","applyMaterialParam","param","handler","nTones","newMap","colors","Uint8Array","minFilter","magFilter","generateMipmaps","createGradientMap","matcapPromise","isColor","updateMatParams","prevParams","update","createLight","constructor","setValue","set","replaceTexture","oldTexture","newTexture","textureName","applyMod","trim","cmd","opcode","outArgs","analyzeModelModCode","show","hide","logUpdate","oldValue","subkeys","log","JSON","stringify","subkey","getDefaultDragonAni","getDefaultEnemyAni","dragonAni","enemyAni","c100034_01","d210142_01","h0010001","h0040101","h0080501","h0090501","initVal","setState","toggleState","rgb","hex","exec","g","hexToRgb"],"mappings":"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","file":"static/js/main.770b0c41.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import ReactDOM from \"react-dom\";\r\nimport \"styles/index.css\";\r\nimport App from \"App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import matcapList from \"data/matcapList\";\r\n\r\nexport const DRAWER_WIDTH = \"16rem\";\r\nexport const DRAWER_BGCOLOR = \"#330000\";\r\n\r\nexport const DEFAULT_MODEL_ID = \"c100001_01\";\r\nexport const DEFAULT_FACE_IDX = 2;\r\nexport const DEFAULT_DRAGON_FACE_IDX = 1;\r\n\r\nexport const baseUrl = \"https://dgk3593.github.io/dl-model/#\";\r\nexport const matcapDir = `${process.env.PUBLIC_URL}/img/matcap`;\r\n\r\nexport const DEFAULT_ADV_ANI = \"CMN_MWM_03\";\r\n\r\n/**\r\n * @type WeaponType[]\r\n */\r\nexport const WEAPON_LIST = [\r\n    \"Sword\",\r\n    \"Blade\",\r\n    \"Dagger\",\r\n    \"Axe\",\r\n    \"Lance\",\r\n    \"Bow\",\r\n    \"Wand\",\r\n    \"Staff\",\r\n    \"Manacaster\",\r\n];\r\n\r\n/**\r\n * @type {{ [paramName: string]: MatParamDetails }}\r\n */\r\nexport const matParamsDetails = {\r\n    wireframe: {\r\n        name: \"Wireframe\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    useTexture: {\r\n        name: \"Texture\",\r\n        type: \"boolean\",\r\n        default: true,\r\n    },\r\n    transparent: {\r\n        name: \"Transparent\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    flatShading: {\r\n        name: \"Flat Shading\",\r\n        type: \"boolean\",\r\n        default: false,\r\n    },\r\n    color: {\r\n        name: \"Color\",\r\n        type: \"color\",\r\n        default: \"#ffffff\",\r\n    },\r\n    emissive: {\r\n        name: \"Emissive\",\r\n        type: \"color\",\r\n        default: \"#000000\",\r\n    },\r\n    opacity: {\r\n        name: \"Opacity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    emissiveIntensity: {\r\n        name: \"Emissive Intensity\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    specular: {\r\n        name: \"Specular\",\r\n        type: \"color\",\r\n        default: \"#111111\",\r\n    },\r\n    metalness: {\r\n        name: \"Metalness\",\r\n        type: \"percentage\",\r\n        default: 0,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    roughness: {\r\n        name: \"Roughness\",\r\n        type: \"percentage\",\r\n        default: 1,\r\n        min: 0,\r\n        max: 1,\r\n        step: 0.05,\r\n    },\r\n    shininess: {\r\n        name: \"Shininess\",\r\n        type: \"number\",\r\n        default: 30,\r\n        min: 1,\r\n        max: 100,\r\n        step: 1,\r\n    },\r\n    gradientMap: {\r\n        name: \"Gradient Map\",\r\n        type: \"select\",\r\n        default: \"none\",\r\n        options: [\"none\", \"2 Tones\", \"3 Tones\", \"4 Tones\", \"5 Tones\"],\r\n    },\r\n    matcap: {\r\n        name: \"Matcap\",\r\n        type: \"select\",\r\n        default: matcapList[0].name,\r\n        options: matcapList.map(({ name }) => name),\r\n    },\r\n};\r\n\r\n/**\r\n *  list of parameters that can be set directly\r\n */\r\nexport const matDirectSetParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"emissiveIntensity\",\r\n    \"metalness\",\r\n    \"roughness\",\r\n    \"shininess\",\r\n];\r\n\r\n/**\r\n * list of parameters whose value is a color code\r\n */\r\nexport const matColorParams = [\"color\", \"emissive\", \"specular\"];\r\n\r\n/**\r\n * @type { Array< [paramName: string, details: MatParamDetails] > }\r\n */\r\nconst matParamsEntries = Object.entries(matParamsDetails);\r\n/**\r\n * default values of material parameters\r\n * @type {{ [paramName: string]: * }}\r\n */\r\nconst defaultMatParams = Object.fromEntries(\r\n    matParamsEntries.map(([paramName, details]) => [paramName, details.default])\r\n);\r\n\r\n/**\r\n * list of parameters that need to set needsUpdate = true to be updated\r\n */\r\nexport const needsUpdateParams = [\r\n    \"gradientMap\",\r\n    \"flatShading\",\r\n    \"useTexture\",\r\n    \"matcap\",\r\n];\r\n\r\n/**\r\n * default light setting\r\n * @type { Array <LightParam> }\r\n */\r\nexport const defaultLights = [\r\n    {\r\n        id: \"0\",\r\n        type: \"Ambient\",\r\n        color: \"#444444\",\r\n        enable: true,\r\n        intensity: 1,\r\n    },\r\n    {\r\n        id: \"1\",\r\n        type: \"Directional\",\r\n        color: \"#ffffff\",\r\n        enable: true,\r\n        position: [50, 0, 100],\r\n        intensity: 0.8,\r\n    },\r\n];\r\n\r\n/**\r\n * ASCII sets used to create ASCII art\r\n */\r\nexport const asciiSet = [\r\n    \" .:-=+*#%@\",\r\n    \" .'`^\\\",:;Il!i~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$\",\r\n];\r\n\r\n/**\r\n * used to initialize global state\r\n * @type {ApplicationState}\r\n */\r\nexport const defaultSettings = {\r\n    model: {\r\n        id: \"\",\r\n        texture: \"\",\r\n        eyeTexture: \"\",\r\n        eyeIdx: NaN,\r\n        mouthTexture: \"\",\r\n        mouthIdx: NaN,\r\n        weaponRight: \"\",\r\n        weaponLeft: \"\",\r\n    },\r\n    // @ts-ignore\r\n    material: {\r\n        type: \"Basic\",\r\n        ...defaultMatParams,\r\n    },\r\n    scene: {\r\n        rotateSpeed: 0,\r\n        background: \"#cccccc\",\r\n        initCameraPosition: null,\r\n    },\r\n    lights: defaultLights,\r\n    animation: {\r\n        code: \"\",\r\n        timeScale: 1,\r\n    },\r\n    chainMaker: { chain: null },\r\n    app: {\r\n        sidebarContent: \"settings\",\r\n        showSettings: true,\r\n        showAniControl: true,\r\n        antiAliasing: false,\r\n        pixelRatio: 1,\r\n        viewerType: \"\",\r\n    },\r\n    outline: {\r\n        enable: true,\r\n        size: 5,\r\n        color: \"#000000\",\r\n        opacity: 1,\r\n    },\r\n    capture: {\r\n        enable: false,\r\n        supportedCodecs: [],\r\n        codec: \"\",\r\n        format: \"\",\r\n    },\r\n    export: {\r\n        enable: false,\r\n        format: \"stl\",\r\n        binary: true,\r\n    },\r\n    ascii: {\r\n        enable: false,\r\n        charSet: asciiSet[1],\r\n        invert: false,\r\n        color: \"#00ff00\",\r\n        bgColor: \"#000000\",\r\n    },\r\n};\r\n\r\n/**\r\n * map an init key to corresponding group and key in the global state\r\n * @type {{ [initKey: string]: {group: string, key: string, type: string} }}\r\n */\r\nexport const initKeyMap = {\r\n    id: { group: \"model\", key: \"id\", type: \"string\" },\r\n    modName: { group: \"model\", key: \"modName\", type: \"string\" },\r\n    tx: { group: \"model\", key: \"texture\", type: \"string\" },\r\n    et: { group: \"model\", key: \"eyeTexture\", type: \"string\" },\r\n    ei: { group: \"model\", key: \"eyeIdx\", type: \"int\" },\r\n    mt: { group: \"model\", key: \"mouthTexture\", type: \"string\" },\r\n    mi: { group: \"model\", key: \"mouthIdx\", type: \"int\" },\r\n    wr: { group: \"model\", key: \"weaponRight\", type: \"string\" },\r\n    wl: { group: \"model\", key: \"weaponLeft\", type: \"string\" },\r\n    bg: { group: \"scene\", key: \"background\", type: \"bg\" },\r\n    cam: { group: \"scene\", key: \"initCameraPosition\", type: \"xyz\" },\r\n    showAC: { group: \"app\", key: \"showAniControl\", type: \"boolean\" },\r\n    showSettings: { group: \"app\", key: \"showSettings\", type: \"boolean\" },\r\n    showOutline: { group: \"outline\", key: \"enable\", type: \"boolean\" },\r\n    AA: { group: \"app\", key: \"antiAliasing\", type: \"boolean\" },\r\n    rot: { group: \"scene\", key: \"rotateSpeed\", type: \"float\" },\r\n    ts: { group: \"animation\", key: \"timeScale\", type: \"float\" },\r\n    cc: { group: \"animation\", key: \"code\", type: \"string\" },\r\n};\r\n\r\nconst commonInitKeys = [\r\n    \"id\",\r\n    \"modName\",\r\n    \"bg\",\r\n    \"cam\",\r\n    \"showOutline\",\r\n    \"AA\",\r\n    \"rot\",\r\n];\r\n\r\nconst aniInitKeys = [\"ts\", \"cc\"];\r\n\r\n/**\r\n * list of init keys corresponding to viewer type\r\n * @type {{ [viewerType: string]: Array<string> }}\r\n */\r\nexport const initKeys = {\r\n    adv: [\r\n        \"et\",\r\n        \"ei\",\r\n        \"mt\",\r\n        \"mi\",\r\n        \"wr\",\r\n        \"wl\",\r\n        ...commonInitKeys,\r\n        ...aniInitKeys,\r\n    ],\r\n    dragon: [\"ei\", \"mi\", ...commonInitKeys, ...aniInitKeys],\r\n    ani: [...commonInitKeys, ...aniInitKeys],\r\n    basic: [...commonInitKeys],\r\n};\r\n\r\n/**\r\n * list of supported materials\r\n */\r\nexport const MATERIALS = [\r\n    \"Basic\",\r\n    \"Toon\",\r\n    \"Lambert\",\r\n    \"Phong\",\r\n    \"Standard\",\r\n    \"Matcap\",\r\n];\r\n\r\n/**\r\n * list of supported materials\r\n */\r\nexport const NO_LIGHT_MATERIALS = [\"Basic\", \"Matcap\"];\r\n\r\n/**\r\n * parameters that all material has\r\n */\r\nexport const matCommonParams = [\r\n    \"transparent\",\r\n    \"opacity\",\r\n    \"wireframe\",\r\n    \"useTexture\",\r\n    \"color\",\r\n];\r\n\r\n/**\r\n * parameters specific to each type of materials\r\n * @type {{ [materialName: string]: Array<string> }}\r\n */\r\nexport const matExtraParams = {\r\n    Basic: [],\r\n    Toon: [\"emissive\", \"emissiveIntensity\", \"gradientMap\"],\r\n    Lambert: [\"emissive\", \"emissiveIntensity\"],\r\n    Phong: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"specular\",\r\n        \"shininess\",\r\n        \"flatShading\",\r\n    ],\r\n    Standard: [\r\n        \"emissive\",\r\n        \"emissiveIntensity\",\r\n        \"metalness\",\r\n        \"roughness\",\r\n        \"flatShading\",\r\n    ],\r\n    Matcap: [\"flatShading\", \"matcap\"],\r\n};\r\n\r\nexport const spFaceTextures = {\r\n    c110300_01: \"ec110300_01\",\r\n};\r\n\r\n/**\r\n * Set of ids of models incompatible with AdvViewer\r\n */\r\nexport const incompatibleModels = new Set([\r\n    \"c100007_01\",\r\n    \"c100007_05\",\r\n    \"c100007_09\",\r\n    \"c100034_01\",\r\n    \"c100036_01\",\r\n    \"c100037_01\",\r\n    \"c100041_01\",\r\n]);\r\n\r\n/**\r\n * @type {{[colorName: string]: ColorCode}}\r\n */\r\nexport const commonColors = {\r\n    green: \"#00ff00\",\r\n    black: \"#000000\",\r\n    grey: \"#cccccc\",\r\n    white: \"#ffffff\",\r\n};\r\n\r\nexport const CAM_PARAMS = {\r\n    angle: 45,\r\n    far: 100,\r\n    near: 0.01,\r\n};\r\n\r\nexport const aniModList = {\r\n    ts: { key: \"timeScale\", defaultValue: 1 },\r\n    r: { key: \"repetitions\", defaultValue: 1 },\r\n};\r\n\r\n/**\r\n * list of video codecs to check for\r\n */\r\nexport const videoCodecs = [\r\n    \"video/mp4;codecs=h264\",\r\n    \"video/webm;codecs=h264\",\r\n    \"video/webm;codecs=vp9\",\r\n    \"video/webm;codecs=vp8\",\r\n    \"video/webm\",\r\n];\r\n","import Button from \"@material-ui/core/Button\";\r\n\r\nimport { aniModList, incompatibleModels } from \"./consts\";\r\n\r\n/**\r\n * capitalize first letter of tring\r\n * @param {string} input\r\n */\r\nexport const capitalize = ([first, ...rest]) =>\r\n    `${first.toUpperCase()}${rest.join(\"\")}`;\r\n\r\n/**\r\n * get the default texture file of a model from id\r\n * @param {string} id - model id\r\n */\r\nexport const getDefaultTexture = id =>\r\n    id.match(/_[0-9]{2}/) ? id : `${id}_01`;\r\n\r\n/**\r\n * create a new object whose entries with key listed in keys are copied from the input object\r\n * @param {{ }} object - object to filter\r\n * @param { string[] } keys - list of keys to filter\r\n * @return {{ }}\r\n */\r\nexport const filterObject = (object, keys) => {\r\n    const entries = Object.entries(object);\r\n    const filtered = entries.filter(([key, _]) => keys.includes(key));\r\n    return Object.fromEntries(filtered);\r\n};\r\n\r\n/**\r\n * Get the difference between 2 object\r\n * @param {{ }} prev - previous value\r\n * @param {{ }} current - current value\r\n * @returns { Array<[updatedKey: string, value: *]> } array of updated key and value pairs\r\n */\r\nexport const getUpdated = (prev, current) => {\r\n    const updated = Object.entries(current).filter(\r\n        ([key, value]) => value !== prev[key]\r\n    );\r\n    return updated;\r\n};\r\n\r\n/**\r\n * check if an object is empty\r\n * @param {{}} object\r\n */\r\nexport const isEmpty = object => !Object.keys(object).length;\r\n\r\n/**\r\n * check if an ID is a blade\r\n * @param {string} modelId - id to check\r\n */\r\nexport const isBlade = modelId => modelId.startsWith(\"w302\");\r\n\r\n/**\r\n * check if an ID is a sheath\r\n * @param {string} modelId - id to check\r\n */\r\nexport const isSheath = modelId => isBlade(modelId) && modelId.endsWith(\"02\");\r\n\r\n/**\r\n * check if model is compatible with AdvViewer\r\n * @param {string} modelId\r\n */\r\nexport const isCharaWithAni = modelId =>\r\n    modelId.startsWith(\"c\") &&\r\n    !modelId.endsWith(\"_h\") &&\r\n    !incompatibleModels.has(modelId);\r\n\r\n/**\r\n * check if a model is a dragon\r\n * @param {string} modelId\r\n */\r\nexport const isDragon = modelId =>\r\n    modelId.startsWith(\"d\") || modelId === \"smith\";\r\n\r\n/**\r\n * get the suitable viewer type base on ID\r\n * @param {string} modelId\r\n */\r\nexport const getViewerType = modelId => {\r\n    if (isDragon(modelId)) return \"dragon\";\r\n\r\n    if (modelId.startsWith(\"h\")) return \"ani\";\r\n\r\n    if (isCharaWithAni(modelId)) return \"adv\";\r\n\r\n    return \"basic\";\r\n};\r\n\r\n/**\r\n * get default eye and mouth index\r\n * @param {string} modelId\r\n */\r\nexport const getDefaultFace = modelId => (isDragon(modelId) ? 1 : 2);\r\n\r\n/**\r\n * apply callback on each element of list or on list if list is not an array\r\n * @param {* | Array} list - list of objects to apply callback\r\n * @param {function} callback - callback to apply\r\n */\r\nexport const callbackOnEach = (list, callback) => {\r\n    if (Array.isArray(list)) {\r\n        list.forEach(child => callback(child));\r\n        return;\r\n    }\r\n    callback(list);\r\n};\r\n\r\n/**\r\n * generate animation chain code from AnimationChain\r\n * @param {AnimationChain} chain\r\n */\r\nexport const generateChainCode = chain => {\r\n    const aniCode = chain.map(aniToCode);\r\n    return aniCode.join(\">\");\r\n};\r\n\r\n/**\r\n * convert 1 animation chain item to single animation code\r\n * @param {AniListItem} ani\r\n */\r\nconst aniToCode = ani => {\r\n    const { aniName, faceChanges } = ani;\r\n    const modCode = generateAniModCode(ani);\r\n    const faceCode = generateFaceCode(faceChanges);\r\n    return `${aniName}${modCode}${faceCode}`;\r\n};\r\n\r\n/**\r\n * generate animation modifier code\r\n * @param {AniListItem} ani\r\n */\r\nconst generateAniModCode = ani => {\r\n    const modCodes = [];\r\n    Object.keys(aniModList).forEach(modKey => {\r\n        const { key, defaultValue } = aniModList[modKey];\r\n        if (ani[key] !== defaultValue) {\r\n            modCodes.push(`&${modKey}=${ani[key]}`);\r\n        }\r\n    });\r\n    return modCodes.join(\"\");\r\n};\r\n\r\n/**\r\n * create face change code\r\n * @param {FaceChangeArray} faceChanges\r\n */\r\nconst generateFaceCode = faceChanges => {\r\n    if (!faceChanges) return \"\";\r\n\r\n    const faceCodes = [];\r\n    faceChanges.forEach(change => {\r\n        const { time, eyeIdx, mouthIdx } = change;\r\n        if (!time) return;\r\n\r\n        eyeIdx && faceCodes.push(`&e-${time}=${eyeIdx}`);\r\n\r\n        mouthIdx && faceCodes.push(`&m-${time}=${mouthIdx}`);\r\n    });\r\n    return faceCodes.join(\"\");\r\n};\r\n\r\n/**\r\n * @param {FilterState} filterState\r\n * @return {FilterConditions}\r\n */\r\nexport const collectFilter = filterState => {\r\n    const stateEntries = Object.entries(filterState);\r\n    /**\r\n     * @type {FilterConditions}\r\n     */\r\n    const filterConditions = stateEntries.map(([groupName, groupData]) => [\r\n        groupName,\r\n        Object.keys(groupData).filter(key => groupData[key]),\r\n    ]);\r\n    return filterConditions.filter(([, valueList]) => valueList.length);\r\n};\r\n\r\n/**\r\n * Multiconditional filter\r\n * @param {ModelData[]} input\r\n * @param {FilterConditions} filterConditions\r\n */\r\nexport const multiCondFilter = (input, filterConditions) => {\r\n    return input.filter(el =>\r\n        filterConditions.every(([propName, valueList]) =>\r\n            valueList.includes(el[propName])\r\n        )\r\n    );\r\n};\r\n\r\n/**\r\n * turn a list of animation data to buttons\r\n * @param {AnimationList} list\r\n * @param {*} handleSelect\r\n * @param {string} [groupName]\r\n */\r\nexport const listToAniButtons = (list, handleSelect, groupName = \"\") => {\r\n    if (!list) return;\r\n\r\n    const style = { maxWidth: \"13.5rem\" };\r\n    return list.map(({ name, code }) => (\r\n        <Button\r\n            variant=\"contained\"\r\n            key={name}\r\n            data-value={code}\r\n            data-name={`${groupName ? `${groupName} ` : \"\"}${name}`}\r\n            onClick={handleSelect}\r\n            style={style}\r\n        >\r\n            {name}\r\n        </Button>\r\n    ));\r\n};\r\n","import { defaultSettings } from \"helpers/consts\";\r\nimport { filterObject } from \"helpers/helpers\";\r\n\r\n/**\r\n * reducer for setting reducer\r\n * @param {ApplicationState} state\r\n * @param {ReducerAction} action\r\n * @return {ApplicationState} new state\r\n */\r\nexport const settingsReducer = (state, action) => {\r\n    const { type, key, value } = action;\r\n    switch (type) {\r\n        case \"toggle\":\r\n            const currentValue = state[key][value];\r\n            return {\r\n                ...state,\r\n                [key]: { ...state[key], [value]: !currentValue },\r\n            };\r\n\r\n        case \"reset\":\r\n            // value = array of keys in settings[key] to be reset, null -> reset all\r\n            const defaultSetting = defaultSettings[key];\r\n            const changes = value\r\n                ? filterObject(defaultSetting, value)\r\n                : { ...defaultSetting };\r\n\r\n            return { ...state, [key]: { ...state[key], ...changes } };\r\n\r\n        case \"update\":\r\n            // update state[key] with values from value\r\n            return { ...state, [key]: { ...state[key], ...value } };\r\n\r\n        case \"overwrite\":\r\n            return { ...state, [key]: value };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { createContext, useReducer } from \"react\";\r\nimport { settingsReducer } from \"reducer/settingsReducer\";\r\nimport { defaultSettings } from \"helpers/consts\";\r\n\r\n/**\r\n * @type {React.Context<ApplicationState>}\r\n */\r\nexport const SettingsContext = createContext(null);\r\n/**\r\n * @type {React.Context< React.Dispatch<ReducerAction> >}\r\n */\r\nexport const DispatchContext = createContext(null);\r\n\r\n/**\r\n * used to initialize global state\r\n * @type {ApplicationState}\r\n */\r\nconst initSettings = {};\r\nObject.keys(defaultSettings).forEach(\r\n    key => (initSettings[key] = { ...defaultSettings[key] })\r\n);\r\ninitSettings.lights = defaultSettings.lights.map(light => ({\r\n    ...light,\r\n}));\r\n\r\nexport { initSettings };\r\n\r\nexport function SettingsProvider(props) {\r\n    const [settings, dispatch] = useReducer(settingsReducer, initSettings);\r\n\r\n    return (\r\n        <SettingsContext.Provider value={settings}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                {props.children}\r\n            </DispatchContext.Provider>\r\n        </SettingsContext.Provider>\r\n    );\r\n}\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"block\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n    },\r\n    content: {\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        padding: 0,\r\n    },\r\n    openSidebarButton: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        margin: \"2rem\",\r\n        opacity: \"0.5\",\r\n        borderRadius: \"0.25rem\",\r\n        transition: \"0.5s all ease-in-out\",\r\n        backgroundColor: \"#cccccc\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            opacity: \"1\",\r\n        },\r\n    },\r\n    loadingMsg: {\r\n        position: \"absolute\",\r\n        zIndex: 9999,\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"white\",\r\n        fontSize: \"x-large\",\r\n        backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","/**\r\n * default control coordinates\r\n * @type {{ [key: string]: xyzCoordinate }}\r\n */\r\nexport const controlsPosition = {\r\n    c: [0, 0.5, 0],\r\n    d: [0, 1.5, 0],\r\n    w: [0, 0, 0],\r\n    b: [0, 1, 0],\r\n    e: [0, 0.5, 0],\r\n    h: [0, 2, 0],\r\n    o: [0, 0, 0],\r\n    r: [0, 3, 0],\r\n\r\n    d200017_01: [0, 1, 0],\r\n    d210001_01: [0, 1, 0],\r\n    d210002_01: [0, 1, 0],\r\n    d210003_01: [0, 1, 0],\r\n    d210004_01: [0, 1, 0],\r\n    d210005_01: [0, 1, 0],\r\n    d210020_01: [0, 2.5, 0],\r\n    d210038_01: [0, 1, 0],\r\n    d210039_01: [0, 1, 0],\r\n    d210040_01: [0, 1, 0],\r\n    d210041_01: [0, 1, 0],\r\n    d210042_01: [0, 1, 0],\r\n    d210048_01: [0, 2.5, 0],\r\n    d210052_01: [0, 2.5, 0],\r\n    d210054_01: [0, 2, 0],\r\n    d210072_01: [0, 1, 0],\r\n    d210076_01: [0, 2.5, 0],\r\n    d210077_01: [0, 2.5, 0],\r\n    d210078_01: [0, 6, 0],\r\n    d210079_01: [0, 2.5, 0],\r\n    d210081_01: [0, 2.5, 0],\r\n    d210082_01: [0, 2, 0],\r\n    d210087_01: [0, 2.5, 0],\r\n    d210093_01: [0, 1, 0],\r\n    d210094_01: [0, 2, 0],\r\n    d210095_01: [0, 1, 0],\r\n    d210102_01: [0, 2.5, 0],\r\n    d210103_01: [0, 2.5, 0],\r\n    d210104_01: [0, 1, 0],\r\n    d210109_01: [0, 1, 0],\r\n    d210111_01: [0, 0.5, 0],\r\n    d210112_01: [0, 2.5, 0],\r\n    d210113_01: [0, 1, 0],\r\n    d210114_01: [0, 6, 0],\r\n    d210115_01: [0, 2, 0],\r\n    d210116_01: [0, 2, 0],\r\n    d210117_01: [0, 2, 0],\r\n    d210118_01: [0, 1, 0],\r\n    d210123_01: [0, 3, 0],\r\n    d210125_01: [0, 2, 0],\r\n    d210126_01: [0, 2.5, 0],\r\n    d210127_01: [0, 0.5, 0],\r\n    d210128_01: [0, 0.5, 0], // Puppy\r\n    d210133_01: [0, 0.5, 0],\r\n    d210136_01: [0, 6, 0],\r\n    h0010001_02: [0, 3, 0],\r\n    r0070401: [0, 20, 0],\r\n    r0070501: [0, 20, 0],\r\n    r0080401: [0, 2, 0],\r\n\r\n    smith: [0, 0.5, 0],\r\n};\r\n\r\nexport default controlsPosition;\r\n","import { lazy, Suspense, useContext, useCallback } from \"react\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"context/SettingsContext\";\r\nimport \"./styles/Display.css\";\r\n\r\nimport getTextColor from \"helpers/getTextColor\";\r\nimport cameraPositions from \"data/cameraPositions\";\r\nimport controlsPosition from \"data/controlsPositions\";\r\n\r\nconst AniControl = lazy(() => import(\"./AniControl\"));\r\nconst BasicViewer = lazy(() => import(\"components/viewers/BasicViewer\"));\r\nconst AniViewer = lazy(() => import(\"components/viewers/AniViewer\"));\r\nconst AdvViewer = lazy(() => import(\"components/viewers/AdvViewer\"));\r\nconst DragonViewer = lazy(() => import(\"components/viewers/DragonViewer\"));\r\n\r\nconst viewers = {\r\n    basic: BasicViewer,\r\n    ani: AniViewer,\r\n    adv: AdvViewer,\r\n    dragon: DragonViewer,\r\n};\r\n\r\n/**\r\n * @param {Object} props\r\n * @param {function} props.setLoadingMsg\r\n * @param {{width: number, height: number}} props.viewport\r\n */\r\nfunction Display(props) {\r\n    const { viewport } = props;\r\n\r\n    const settings = useContext(SettingsContext);\r\n    const {\r\n        model: { id: modelId },\r\n        scene: { rotateSpeed, background, initCameraPosition },\r\n        app: { showAniControl, antiAliasing, pixelRatio, viewerType },\r\n    } = settings;\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    const toggleSetting = useCallback(\r\n        (key, value) => dispatch({ type: \"toggle\", key, value }),\r\n        [dispatch]\r\n    );\r\n    const toggleCapture = useCallback(\r\n        () => toggleSetting(\"capture\", \"enable\"),\r\n        [toggleSetting]\r\n    );\r\n    const toggleExport = useCallback(() => toggleSetting(\"export\", \"enable\"), [\r\n        toggleSetting,\r\n    ]);\r\n\r\n    const modelType = modelId[0];\r\n\r\n    const defaultCameraPosition =\r\n        cameraPositions[modelId] || cameraPositions[modelType];\r\n\r\n    const cameraPosition = initCameraPosition\r\n        ? initCameraPosition.map((n, i) =>\r\n              isNaN(n) ? defaultCameraPosition[i] : n\r\n          )\r\n        : defaultCameraPosition;\r\n\r\n    const controlPosition =\r\n        controlsPosition[modelId] || controlsPosition[modelType];\r\n\r\n    const ModelViewer = viewers[viewerType];\r\n\r\n    return (\r\n        <div className=\"Display\">\r\n            {showAniControl && (\r\n                <div\r\n                    className=\"Display-AniControl\"\r\n                    style={{ color: getTextColor(background) }}\r\n                >\r\n                    <Suspense fallback={null}>\r\n                        <AniControl value={settings.animation.timeScale} />\r\n                    </Suspense>\r\n                </div>\r\n            )}\r\n            <Suspense fallback={null}>\r\n                <ModelViewer\r\n                    setLoadingMsg={props.setLoadingMsg}\r\n                    capture={settings.capture}\r\n                    toggleCapture={toggleCapture}\r\n                    export={settings.export}\r\n                    toggleExport={toggleExport}\r\n                    model={settings.model}\r\n                    material={settings.material}\r\n                    outline={settings.outline}\r\n                    animation={settings.animation}\r\n                    lights={settings.lights}\r\n                    ascii={settings.ascii}\r\n                    antiAliasing={antiAliasing}\r\n                    pixelRatio={pixelRatio}\r\n                    background={background}\r\n                    viewport={viewport}\r\n                    cameraPosition={cameraPosition}\r\n                    controlsPosition={controlPosition}\r\n                    rotateSpeed={rotateSpeed}\r\n                />\r\n            </Suspense>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n","import { initKeyMap, DEFAULT_MODEL_ID } from \"../consts\";\r\nimport { chainCodeToList } from \"../viewerHelpers\";\r\nimport { getDefaultFace, getViewerType } from \"../helpers\";\r\nimport { getDefaultModelMod, getModelModByName } from \"./getModelMod\";\r\nimport { getDefaultAni } from \"./getDefaultAni\";\r\n\r\n/**\r\n * turn string to the corresponding boolean if it's \"true\" or \"false\"\r\n * @param {string} str\r\n */\r\nconst str2bool = str => Boolean(str === \"true\");\r\n\r\n/**\r\n * convert string to xyzCoordinate\r\n * @param {string} str\r\n * @return {xyzCoordinate}\r\n */\r\nconst str2xyz = str => {\r\n    const [x, y, z] = str.split(\",\");\r\n    /**\r\n     * @type {array[3]}\r\n     */\r\n    const coordinate = [x, y, z].map(parseFloat);\r\n    return coordinate;\r\n};\r\n\r\n/**\r\n * @param {string} str\r\n * @return {ColorCode | \"transparent\"}\r\n */\r\nconst str2bg = str => {\r\n    switch (str) {\r\n        case \"transparent\":\r\n            return str;\r\n        case \"camera\":\r\n            return \"#cccccc\";\r\n        default:\r\n            // @ts-ignore\r\n            return `#${str}`;\r\n    }\r\n};\r\n\r\n/**\r\n * convert a string to the specified type\r\n * @param {string} str\r\n * @param {string} type\r\n */\r\nconst convertParamValue = (str, type) => {\r\n    if (type === \"string\") return str;\r\n    const converter = {\r\n        bg: str2bg,\r\n        xyz: str2xyz,\r\n        float: parseFloat,\r\n        int: parseInt,\r\n        boolean: str2bool,\r\n    };\r\n\r\n    return converter[type](str);\r\n};\r\n\r\n/**\r\n * turn a string of the form 'keycode=value' to [keycode, value],\r\n * return empty array if empty input, or invalid keycode/value\r\n * @param {string} paramText\r\n * @return {[ [keycode: string, value: *]? ]}\r\n */\r\nconst extractParam = paramText => {\r\n    if (!paramText) return [];\r\n\r\n    const [keycode, ...valueParts] = paramText.split(\"=\");\r\n    if (!initKeyMap[keycode] || !valueParts[0]) return [];\r\n\r\n    const value = valueParts.join(\"=\");\r\n    const { type } = initKeyMap[keycode];\r\n\r\n    return [[keycode, convertParamValue(value, type)]];\r\n};\r\n\r\n/**\r\n * turn a path into an array of keycode and value pair,\r\n * invalid strings will be filtered out\r\n * @param {string} path\r\n * @return {[keycode: string, value: *][]}\r\n */\r\nconst getParamsFromPath = path =>\r\n    path\r\n        .split(\"/\")\r\n        .reduce(\r\n            (output, paramText) => [...output, ...extractParam(paramText)],\r\n            []\r\n        );\r\n\r\n/**\r\n * return a list of key value pairs corresponding to the specified group of the application state\r\n * @param { [keycode: string, value: *][] } params\r\n * @param {string} groupName\r\n * @return { [key: string, value: *][] }\r\n */\r\nconst filterParamsByGroup = (params, groupName) =>\r\n    params.reduce((output, [keycode, value]) => {\r\n        const { group, key } = initKeyMap[keycode];\r\n        if (group !== groupName) return output;\r\n\r\n        return [...output, [key, value]];\r\n    }, []);\r\n\r\n/**\r\n * set model related parameters\r\n * @param {[keycode: string, value: *][]} params\r\n * @param {React.Dispatch<ReducerAction>} dispatch\r\n */\r\nconst setModelParams = async (params, dispatch) => {\r\n    const modelParams = filterParamsByGroup(params, \"model\");\r\n    const model = Object.fromEntries(modelParams);\r\n\r\n    // model.id ??= DEFAULT_MODEL_ID;\r\n    model.id = model.id ?? DEFAULT_MODEL_ID;\r\n    const modelId = model.id;\r\n\r\n    [\"mouth\", \"eye\"].forEach(part => {\r\n        // model[`${part}Texture`] ??= modelId;\r\n        // model[`${part}Idx`] ??= getDefaultFace(modelId);\r\n        model[`${part}Texture`] = model[`${part}Texture`] ?? modelId;\r\n        model[`${part}Idx`] = model[`${part}Idx`] ?? getDefaultFace(modelId);\r\n    });\r\n\r\n    dispatch({ type: \"update\", key: \"model\", value: model });\r\n    dispatch({\r\n        type: \"update\",\r\n        key: \"app\",\r\n        value: { viewerType: getViewerType(modelId) },\r\n    });\r\n\r\n    await setModelMod(model, dispatch);\r\n};\r\n\r\n/**\r\n * set model mod from param init object\r\n * @param {Object} modelData\r\n */\r\nconst setModelMod = async (modelData, dispatch) => {\r\n    const modelId = modelData.id;\r\n\r\n    const defaultMod = await getDefaultModelMod(modelId);\r\n    if (!defaultMod) return;\r\n\r\n    const updateValue = {};\r\n    if (modelData.modName) {\r\n        const mod = await getModelModByName(modelId, modelData.modName);\r\n\r\n        updateValue.mod = mod.code;\r\n        updateValue.modName = mod.name;\r\n    } else {\r\n        updateValue.mod = defaultMod.code;\r\n        updateValue.modName = defaultMod.name;\r\n    }\r\n\r\n    dispatch({\r\n        type: \"update\",\r\n        key: \"model\",\r\n        value: updateValue,\r\n    });\r\n};\r\n\r\n/**\r\n * set animation related parameters\r\n * @param {[keycode: string, value: *][]} params\r\n * @param {React.Dispatch<ReducerAction>} dispatch\r\n */\r\nconst setAniParams = async (params, dispatch) => {\r\n    const aniParams = filterParamsByGroup(params, \"animation\");\r\n\r\n    const animation = Object.fromEntries(aniParams);\r\n\r\n    const modelId =\r\n        params.find(([keycode]) => keycode === \"id\")?.[1] || DEFAULT_MODEL_ID;\r\n    // newValue.code ??= getDefaultAni(modelId);\r\n    animation.code = animation.code ?? (await getDefaultAni(modelId));\r\n    dispatch({ type: \"update\", key: \"animation\", value: animation });\r\n\r\n    const aniCode = animation.code;\r\n    dispatch({\r\n        type: \"update\",\r\n        key: \"chainMaker\",\r\n        value: { chain: chainCodeToList(aniCode, \"init\") },\r\n    });\r\n};\r\n\r\n/**\r\n * set other parameters\r\n * @param {[keycode: string, value: *][]} params\r\n * @param {React.Dispatch<ReducerAction>} dispatch\r\n * @param {string} group - name of the parameter group\r\n */\r\nconst setOtherParams = (params, dispatch, group) => {\r\n    const paramList = filterParamsByGroup(params, group);\r\n    const newValue = Object.fromEntries(paramList);\r\n\r\n    dispatch({\r\n        type: \"update\",\r\n        key: group,\r\n        value: newValue,\r\n    });\r\n};\r\n\r\n/**\r\n * update application state base on information from the URL\r\n * @param {string} path\r\n * @param {React.Dispatch<ReducerAction>} dispatch\r\n */\r\nexport const setParamsFromPath = async (path, dispatch) => {\r\n    const params = getParamsFromPath(path);\r\n\r\n    const definedGroups = new Set(\r\n        params.map(([keycode]) => initKeyMap[keycode].group)\r\n    );\r\n\r\n    definedGroups.delete(\"model\");\r\n    definedGroups.delete(\"animation\");\r\n\r\n    await setModelParams(params, dispatch);\r\n\r\n    const groups = [...definedGroups];\r\n    const groupSetPromise = groups.map(group =>\r\n        setOtherParams(params, dispatch, group)\r\n    );\r\n\r\n    await Promise.all([setAniParams(params, dispatch), ...groupSetPromise]);\r\n};\r\n\r\nexport default setParamsFromPath;\r\n","import {\r\n    lazy,\r\n    Suspense,\r\n    useState,\r\n    useRef,\r\n    useEffect,\r\n    useContext,\r\n    useCallback,\r\n} from \"react\";\r\n\r\nimport useToggleState from \"hooks/useToggleState\";\r\n\r\nimport Menu from \"@material-ui/icons/Menu\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport useStyles from \"./MainPageStyles\";\r\n\r\nimport Display from \"./Display\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"context/SettingsContext\";\r\nimport { getViewerType } from \"helpers/helpers\";\r\nimport { getDefaultAni } from \"helpers/async/getDefaultAni\";\r\n\r\nimport setParamsFromPath from \"helpers/async/setParamsFromPath\";\r\nimport { getDefaultModelMod } from \"helpers/async/getModelMod\";\r\n\r\nimport { chainCodeToList } from \"helpers/viewerHelpers\";\r\n\r\nconst Sidebar = lazy(() =>\r\n    import(/* webpackChunkName: \"Sidebar\" */ \"./Sidebar\")\r\n);\r\nconst Dock = lazy(() => import(/* webpackChunkName: \"Dock\" */ \"./Dock\"));\r\n\r\nfunction MainPage({ location }) {\r\n    const classes = useStyles();\r\n\r\n    const [sidebar, toggleSidebar] = useToggleState(true);\r\n    const [loadingMsg, setLoadingMsg] = useState(\"Loading...\");\r\n    const [initLoadDone, setInitLoadDone] = useState(false);\r\n    const [viewport, setViewport] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n    });\r\n\r\n    const [dockMode, setDockMode] = useState(\"\");\r\n    const dockHandle = useRef();\r\n\r\n    const {\r\n        model,\r\n        app: { showSettings, viewerType },\r\n    } = useContext(SettingsContext);\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    const viewerRef = useRef();\r\n    const currentId = useRef(\"\");\r\n\r\n    const updateViewportSize = () => {\r\n        const width = viewerRef.current.clientWidth;\r\n        const height = viewerRef.current.clientHeight;\r\n        setViewport({ width, height });\r\n    };\r\n\r\n    const setDock = (mode, handleSelect) => {\r\n        setDockMode(mode);\r\n        dockHandle.current = handleSelect;\r\n    };\r\n\r\n    const closeDock = () => setDockMode(\"\");\r\n\r\n    const updateSetings = useCallback(\r\n        key => value => dispatch({ type: \"update\", key, value }),\r\n        [dispatch]\r\n    );\r\n\r\n    // load params from path\r\n    useEffect(() => {\r\n        const setParams = async () => {\r\n            setLoadingMsg(\"Loading...\");\r\n            await setParamsFromPath(location.pathname, dispatch);\r\n            setLoadingMsg(\"\");\r\n            setInitLoadDone(true);\r\n        };\r\n        setParams();\r\n    }, [location.pathname, dispatch]);\r\n\r\n    // update settings when id changed\r\n    useEffect(() => {\r\n        const { id } = model;\r\n        if (!currentId.current) {\r\n            currentId.current = id;\r\n            return;\r\n        }\r\n\r\n        if (id === currentId.current) return;\r\n\r\n        const newViewerType = getViewerType(id);\r\n        const viewerChanged = newViewerType !== viewerType;\r\n        updateSetings(\"app\")({ viewerType: newViewerType });\r\n\r\n        const viewerChangedToAdv = newViewerType === \"adv\" && viewerChanged;\r\n        if (viewerChangedToAdv) {\r\n            updateSetings(\"model\")({ eyeIdx: 2, mouthIdx: 2 });\r\n        }\r\n\r\n        if (viewerChanged && newViewerType === \"dragon\") {\r\n            updateSetings(\"model\")({ eyeIdx: 1, mouthIdx: 1 });\r\n        }\r\n\r\n        const needResetAni =\r\n            [\"dragon\", \"ani\"].includes(newViewerType) || viewerChangedToAdv;\r\n\r\n        const resetAni = async () => {\r\n            const ani = await getDefaultAni(id);\r\n            updateSetings(\"animation\")({ code: ani });\r\n            updateSetings(\"chainMaker\")({\r\n                chain: chainCodeToList(ani, \"init\"),\r\n            });\r\n        };\r\n\r\n        const setModelMod = async () => {\r\n            const modelMod = await getDefaultModelMod(id);\r\n            if (modelMod) {\r\n                updateSetings(\"model\")({\r\n                    mod: modelMod?.code,\r\n                    modName: modelMod?.name,\r\n                });\r\n            }\r\n        };\r\n        Promise.all([setModelMod(), needResetAni && resetAni()]);\r\n\r\n        currentId.current = id;\r\n    }, [model, updateSetings, viewerType]);\r\n\r\n    // update viewport size when resized\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", updateViewportSize);\r\n\r\n        return function () {\r\n            window.removeEventListener(\"resize\", updateViewportSize);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            {loadingMsg && (\r\n                <div className={classes.loadingMsg}>{loadingMsg}</div>\r\n            )}\r\n            {initLoadDone && (\r\n                <div className={classes.root}>\r\n                    {showSettings && (\r\n                        <Suspense fallback={null}>\r\n                            <CssBaseline />\r\n                            <button\r\n                                onClick={toggleSidebar}\r\n                                className={classes.openSidebarButton}\r\n                            >\r\n                                <Menu />\r\n                            </button>\r\n                            <Sidebar\r\n                                toggleSidebar={toggleSidebar}\r\n                                open={sidebar}\r\n                                setDock={setDock}\r\n                            />\r\n                        </Suspense>\r\n                    )}\r\n                    <main ref={viewerRef} className={classes.content}>\r\n                        <Display\r\n                            setLoadingMsg={setLoadingMsg}\r\n                            viewport={viewport}\r\n                        />\r\n                    </main>\r\n                    {dockMode && (\r\n                        <Suspense fallback={null}>\r\n                            <Dock\r\n                                mode={dockMode}\r\n                                handleSelect={dockHandle.current}\r\n                                close={closeDock}\r\n                            />\r\n                        </Suspense>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import { SettingsProvider } from \"context/SettingsContext\";\r\n\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\nimport MainPage from \"MainPage\";\r\n\r\nimport \"styles/App.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <SettingsProvider>\r\n            <HashRouter>\r\n                <Route render={routeProps => <MainPage {...routeProps} />} />\r\n            </HashRouter>\r\n        </SettingsProvider>\r\n    );\r\n}\r\n\r\nexport const fbxSource = process.env.PUBLIC_URL;\r\n\r\nexport default App;\r\n","/**\r\n * @type {{ [id:string]: xyCoordinate }}\r\n */\r\nconst textureOffsets = {\r\n    c110384_01: [0.05, -0.08], // Eirene\r\n    c110383_01: [0.05, -0.08], // Finni\r\n    c110382_01: [0.05, -0.08], // Faris\r\n    c110381_01: [0.05, -0.08], // Ryszarda\r\n    c110342_03: [0.05, -0.08], // Valentine's Chelsea\r\n    c110377_01: [0.043, -0.08], // Joker\r\n    c110378_01: [0.043, -0.08], // Panther\r\n    c110379_01: [0.075, -0.08], // Mona\r\n    c110380_01: [0.043, -0.2], // Sophie\r\n    c100015_05: [0.05, -0.08], // Gala Chelle\r\n    c100006_11: [0.043, -0.0625], // Kimono Luca\r\n    c110376_01: [0.043, -0.0625], // Yoshitsune\r\n    c110375_01: [0.043, -0.0625], // Seimei\r\n    c110374_01: [0.043, -0.0625], // Kuzunoha\r\n    c110307_02: [0.043, 0], // Dragonyule Victor\r\n    c110252_02: [0.043, -0.0625], // Dragonyule Lily\r\n    c110296_02: [0.043, -0.0625], // Forager Mitsuba\r\n    c100004_17: [0.043, -0.0625], // Forager Cleo\r\n    c110371_01: [0.043, -0.0625], // Pecorine\r\n    c110350_02: [0.043, -0.0625], // Formal Joachim\r\n    c110340_02: [0.043, -0.0625], // Formal Noelle\r\n    c110018_02: [0.043, -0.0625], // Opera Karina\r\n    c110370_01: [0.043, -0.0625], // Lapis\r\n    c100015_04: [0.05, -0.08], // Chelle\r\n    c110342_01: [0, -0.02], // Chelsea\r\n    c110267_01: [0.08, -0.03], // Hawk\r\n    c110050_02: [0.07, 0.13], // HBerserker\r\n    c110291_01: [0.07, 0.14], // Marth\r\n    c110354_01: [0.07, 0.01], // Mega Man\r\n    c110345_01: [0.08, 0.15], // Mitsuhide\r\n    c110266_01: [0.01, 0.03], // Naveed\r\n    c110365_01: [0.043, -0.0625], // Nevin\r\n    c110346_01: [0.07, 0.08], // Nobunaga\r\n    c110366_01: [0.043, -0.0625], // Pinon\r\n    c110299_02: [0.07, 0.08], // RXZ\r\n    c110360_01: [0.07, 0.14], // Tiki\r\n    c110307_01: [0.08, -0.03], // Victor\r\n    c110322_01: [0.043, 0.08], // Zhu Bajie\r\n    c110356_01: [0.07, 0.08], // Gauld\r\n    c110300_01: [0.07, -0.1], // Pipple\r\n    c110344_01: [0.07, -0.02], // Yuya\r\n    c110053_03: [0.043, -0.0625], // INefi\r\n    c110368_01: [0.043, -0.0625], // Meene\r\n    c110367_01: [0.043, -0.0625], // Ilia\r\n    c110003_02: [0.043, -0.0625], // Gun Joe\r\n    c110270_02: [0.043, -0.0625], // HMelsa\r\n    c110341_03: [0.043, -0.0625], // Hakasha\r\n};\r\n\r\nexport default textureOffsets;\r\n\r\n/**\r\n * @type {{ [faceNumber: string]: xyCoordinate }}\r\n */\r\nexport const idxOffsets = {\r\n    face1: [2, 1],\r\n    face2: [0, 0],\r\n    face3: [1, 0],\r\n    face4: [2, 0],\r\n    face5: [3, 0],\r\n    face6: [0, -1],\r\n    face7: [1, -1],\r\n    face8: [2, -1],\r\n    face9: [3, -1],\r\n};\r\n","/**\r\n * @param {string} modelId\r\n * @return {Promise<ModelMod | undefined>}\r\n */\r\nexport const getDefaultModelMod = async modelId => {\r\n    const { default: modelMod } = await import(\r\n        /* webpackChunkName: \"ModelMod\" */\r\n        \"data/modelMod\"\r\n    );\r\n    return modelMod[modelId]?.[0];\r\n};\r\n\r\n/**\r\n * @param {string} id\r\n * @param {string} modName\r\n * @return {Promise<ModelMod>}\r\n */\r\nexport const getModelModByName = async (id, modName) => {\r\n    const { default: modelMod } = await import(\r\n        /* webpackChunkName: \"ModelMod\" */\r\n        \"data/modelMod\"\r\n    );\r\n    const result = modelMod[id]?.find(\r\n        ({ name }) => name.replace(\" \", \"\") === modName\r\n    );\r\n\r\n    return result || { name: \"\", code: \"\" };\r\n};\r\n","/**\r\n * @type { Array<{ name: string, path: string }> }\r\n */\r\nconst matcapList = [\r\n    { name: \"Black Stone\", path: \"matcap_black_stone.jpg\" },\r\n    { name: \"Chrome 1\", path: \"matcap_chrome_1.jpg\" },\r\n    { name: \"Chrome 2\", path: \"matcap_chrome_2.jpg\" },\r\n    { name: \"Brown Clay\", path: \"matcap_clay_brown.jpg\" },\r\n    { name: \"Dark Brown Clay\", path: \"matcap_clay_dark_brown.jpg\" },\r\n    { name: \"Flesh Clay\", path: \"matcap_clay_flesh_6.jpg\" },\r\n    { name: \"Gray Clay\", path: \"matcap_clay_gray.jpg\" },\r\n    { name: \"Metal Putty\", path: \"matcap_metal_putty.jpg\" },\r\n    { name: \"Obsidian\", path: \"matcap_obsidian.jpg\" },\r\n    { name: \"Pearl\", path: \"matcap_pearl.jpg\" },\r\n    { name: \"Yellow Plastic\", path: \"matcap_plastic_yellow.jpg\" },\r\n    { name: \"Sci-fi Plastic\", path: \"matcap_scifi_plastic.jpg\" },\r\n    { name: \"Rim Lit\", path: \"matcap_rim_lit.jpg\" },\r\n    { name: \"Slick Mud\", path: \"matcap_slick_mud.jpg\" },\r\n    { name: \"Shiny Metal\", path: \"metal_shiny.jpg\" },\r\n];\r\n\r\nexport default matcapList;\r\n","import * as THREE from \"three\";\r\nimport { fbxSource } from \"App\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nimport textureOffsets, { idxOffsets } from \"data/face_offset\";\r\nimport matcapList from \"data/matcapList\";\r\n\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { callbackOnEach, getUpdated } from \"helpers/helpers\";\r\nimport {\r\n    matCommonParams,\r\n    matExtraParams,\r\n    matColorParams,\r\n    needsUpdateParams,\r\n    matcapDir,\r\n} from \"helpers/consts\";\r\n\r\nimport outlineFragShader from \"shader/outlineFragShader\";\r\nimport outlineVertShader from \"shader/outlineVertShader\";\r\n\r\n/**\r\n * load a 3D model\r\n * @param {string} url\r\n * @return { ?Promise<THREE.Group>}\r\n */\r\nexport const loadModel = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new FBXLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\n/**\r\n * Load a texture\r\n * @param {string} url\r\n * @return {Promise<THREE.Texture>}\r\n */\r\nexport const loadTexture = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new THREE.TextureLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\n/**\r\n * @param {string} name\r\n */\r\nconst getMatcapPath = name => {\r\n    const matcap = matcapList.find(e => e.name === name);\r\n    return matcap?.path ? `${matcapDir}/${matcap.path}` : null;\r\n};\r\n\r\n/**\r\n * @param {string} name\r\n * @return {null | Promise< THREE.Texture >}\r\n */\r\nexport const loadMatcap = name => {\r\n    const path = getMatcapPath(name);\r\n    return path ? loadTexture(path) : null;\r\n};\r\n\r\n/**\r\n * get the path to the animation file\r\n * @param {string} name\r\n */\r\nconst getAniPath = name => `${fbxSource}/animations/${name}.json`;\r\n\r\n/**\r\n * load a single animation\r\n * @param {AniListItem} aniListItem\r\n * @return {Promise<THREE.AnimationClip>}\r\n */\r\nconst loadSingleAni = ({ aniName }) => {\r\n    const path = getAniPath(aniName);\r\n    return new Promise(resolve =>\r\n        fetch(path)\r\n            .then(response => response.json())\r\n            .then(json => THREE.AnimationClip.parse(json))\r\n            .then(resolve)\r\n    );\r\n};\r\n\r\n/**\r\n * Load all animations in a list of animation\r\n * @param {AniList} aniList\r\n */\r\nexport const loadAnimations = aniList =>\r\n    Promise.all(aniList.map(loadSingleAni));\r\n\r\n/**\r\n * create an invisible floor for auto rotate feature\r\n */\r\nexport const createInvisibleFloor = () => {\r\n    const floorGeometry = new THREE.PlaneBufferGeometry(0.1, 0.1);\r\n    floorGeometry.rotateX(Math.PI / 2);\r\n\r\n    const floorMaterial = new THREE.MeshBasicMaterial();\r\n    floorMaterial.visible = false;\r\n\r\n    return new THREE.Mesh(floorGeometry, floorMaterial);\r\n};\r\n\r\n/**\r\n * get all meshes of a 3D object\r\n * @param {THREE.Group} object\r\n * @param {Boolean} getOutline - whether to include outline meshes\r\n * @returns {Array}\r\n */\r\nexport const getMeshes = (object, getOutline = false) => {\r\n    if (!object) return [];\r\n\r\n    const meshes = [];\r\n    object.traverse(child => {\r\n        // @ts-ignore\r\n        if (!child.isMesh) return;\r\n        if (!getOutline && child.name === \"outline\") return;\r\n\r\n        meshes.unshift(child);\r\n    });\r\n    return meshes;\r\n};\r\n\r\n/**\r\n * get all materials of a 3D object\r\n * @param {THREE.Group} object\r\n */\r\nexport const getMaterial = object => {\r\n    if (!object) return [];\r\n\r\n    const meshes = getMeshes(object);\r\n    const materials = meshes.flatMap(mesh => mesh.material);\r\n    return materials;\r\n};\r\n\r\n/**\r\n * get the path to the model's fbx file\r\n * @param {string} id\r\n */\r\nexport const getModelPath = id => `${fbxSource}/fbx/${id}/${id}.fbx`;\r\n\r\n/**\r\n * get the path to the model's texture file\r\n * @param {string} id\r\n */\r\nexport const getTexturePath = id => `${fbxSource}/fbx/${id}/${id}.png`;\r\n\r\n/**\r\n * get weapon data from weapon code\r\n * @param {string} code\r\n * @return {AdvWeaponData}\r\n */\r\nexport const analyzeWeaponCode = code => {\r\n    if (!code) return null;\r\n\r\n    const flipped = code.endsWith(\"b\");\r\n    const weaponCode = code.substring(0, code.length - 1);\r\n    const modelPath = getModelPath(weaponCode);\r\n    const texturePath = getTexturePath(weaponCode);\r\n\r\n    return { modelPath, texturePath, flipped };\r\n};\r\n\r\n/**\r\n * dispose a 3D object\r\n */\r\nexport const dispose3dObject = object => {\r\n    if (!object) return;\r\n\r\n    const disposedList = new Set();\r\n\r\n    const notDisposed = object => !disposedList.has(object.uuid);\r\n\r\n    const needToDispose = object => object && notDisposed(object);\r\n\r\n    const disposeObject = object => {\r\n        disposedList.add(object.uuid);\r\n        object.dispose();\r\n    };\r\n\r\n    const dispose = object => {\r\n        if (needToDispose(object)) disposeObject(object);\r\n    };\r\n\r\n    const disposeMaterial = object => {\r\n        callbackOnEach(object.material, mat => {\r\n            dispose(mat.map);\r\n            dispose(mat.userData.backupMap);\r\n            dispose(mat);\r\n        });\r\n    };\r\n\r\n    const disposeMesh = mesh => {\r\n        disposeMaterial(mesh);\r\n        dispose(mesh.geometry);\r\n    };\r\n\r\n    const meshes = getMeshes(object, true);\r\n    meshes.forEach(disposeMesh);\r\n};\r\n\r\n/**\r\n * get list of parameter names relevant to a material type\r\n * @param {string} matType\r\n */\r\nexport const getParamsList = matType => [\r\n    ...matCommonParams,\r\n    ...matExtraParams[matType],\r\n];\r\n\r\n/**\r\n * Hide all eye and mouth that's not mEye_01 or mMouth_01\r\n */\r\nexport const initDragonFace = model => {\r\n    const nameRegex = /m[A-Z].*_[0-9]/m;\r\n    model.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const { name } = child;\r\n        if (nameRegex.test(name)) {\r\n            child.visible = name.includes(\"01\");\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * get all eye meshes of a dragon model\r\n */\r\nexport const getDragonEye = model => {\r\n    const eyes = [];\r\n    const nameRegex = /mEye_[0-9]/m;\r\n    model.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const { name } = child;\r\n        if (nameRegex.test(name)) {\r\n            eyes.push(child);\r\n        }\r\n    });\r\n    return eyes;\r\n};\r\n\r\n/**\r\n * get all mouth meshes of a dragon model\r\n */\r\nexport const getDragonMouth = model => {\r\n    const mouths = [];\r\n    const nameRegex = /mMouth_[0-9]/m;\r\n    model.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const { name } = child;\r\n        if (nameRegex.test(name)) {\r\n            mouths.push(child);\r\n        }\r\n    });\r\n    return mouths;\r\n};\r\n\r\n/**\r\n * make all effect meshes of the model invisible\r\n * @param {THREE.Group} model\r\n */\r\nexport const removeEffects = model => {\r\n    const meshes = getMeshes(model);\r\n    meshes.forEach(mesh => (mesh.visible = !mesh.name.includes(\"Eff\")));\r\n};\r\n\r\n/**\r\n * set frustumCulled = false for all children of a model\r\n */\r\nexport const disableFrustumCulling = model => {\r\n    model.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        child.frustumCulled = false;\r\n    });\r\n};\r\n\r\n/**\r\n * create a new material\r\n * @param {string} materialType - type of material to create\r\n * @param {Object} params\r\n * @param {THREE.Texture} params.map - texture for new material\r\n * @param {Boolean} params.skinning\r\n * @return {THREE.Material}\r\n */\r\nconst createNewMaterial = (materialType, params) => {\r\n    const matType = `Mesh${materialType}Material`;\r\n    return new THREE[matType](params);\r\n};\r\n\r\n/**\r\n * change material and optionally the texture of a 3D object\r\n * @param {THREE.Group} target - object to apply change to\r\n * @param {object} params - parameters\r\n * @param {string} params.materialType - type of material to change to\r\n * @param {string} [params.texturePath] - path to texture file\r\n * @param {boolean} [params.forced] - force material change\r\n */\r\nexport const changeMaterial = (\r\n    target,\r\n    { materialType, texturePath = \"\", forced = false }\r\n) => {\r\n    if (!target) return;\r\n\r\n    const meshes = getMeshes(target);\r\n    meshes.forEach(mesh => {\r\n        const materials = [mesh.material].flat();\r\n        const matIsArray = Array.isArray(mesh.material);\r\n\r\n        if (!forced && !texturePath) {\r\n            const checkParam = `isMesh${materialType}Material`;\r\n            const needToChange = materials.some(mat => !mat[checkParam]);\r\n            if (!needToChange) return;\r\n        }\r\n\r\n        materials.forEach((mat, i) => {\r\n            /**\r\n             * @type {THREE.Texture}\r\n             */\r\n            const texture = texturePath\r\n                ? new THREE.TextureLoader().load(texturePath)\r\n                : materials[i].map;\r\n\r\n            if (texturePath) texture.encoding = THREE.sRGBEncoding;\r\n\r\n            const initParams = {\r\n                map: texture,\r\n                skinning: true,\r\n            };\r\n            const newMaterial = createNewMaterial(materialType, initParams);\r\n            newMaterial.name = mat.name;\r\n            if (mat.userData.backupMap) {\r\n                newMaterial.userData.backupMap = mat.userData.backupMap;\r\n            }\r\n\r\n            if (texturePath) {\r\n                mat.map?.dispose?.();\r\n                mat.userData.backupMap?.dispose?.();\r\n            }\r\n            mat.dispose();\r\n\r\n            if (matIsArray) {\r\n                mesh.material[i] = newMaterial;\r\n            } else {\r\n                mesh.material = newMaterial;\r\n            }\r\n        });\r\n    });\r\n};\r\n\r\n/**\r\n * Add outline to object and return reference to outlines\r\n * @param {THREE.Group} object\r\n * @param {OutlineParams} params\r\n */\r\nexport const createOutline = (object, params) => {\r\n    if (!object) return;\r\n\r\n    const outlines = [];\r\n\r\n    /**\r\n     * if a mesh's name includes any word in this list, skip\r\n     */\r\n    const skipList = [\"Eff\", \"Extension\"];\r\n    const meshes = getMeshes(object);\r\n    meshes.forEach(mesh => {\r\n        const { name } = mesh;\r\n        if (skipList.some(word => name.includes(word))) return;\r\n\r\n        const outline = mesh.clone();\r\n        outlines.push(outline);\r\n\r\n        const newMaterial = createOutlineMaterial(params);\r\n        replaceMaterial(outline, newMaterial);\r\n        outline.visible = params.enable;\r\n        outline.name = \"outline\";\r\n\r\n        if (mesh.isSkinnedMesh) {\r\n            outline.bind(mesh.skeleton, mesh.bindMatrix);\r\n        }\r\n        mesh.add(outline);\r\n    });\r\n    return outlines;\r\n};\r\n\r\n/**\r\n * create outline material\r\n * @param {OutlineParams} params\r\n */\r\nconst createOutlineMaterial = ({ size, color, opacity }) => {\r\n    const uniforms = {\r\n        size: { type: \"float\", value: size },\r\n        color: { tyle: \"vec3\", value: new THREE.Color(color) },\r\n        opacity: { type: \"float\", value: opacity },\r\n    };\r\n\r\n    return new THREE.ShaderMaterial({\r\n        skinning: true,\r\n        side: THREE.BackSide,\r\n        transparent: true,\r\n        uniforms,\r\n        fragmentShader: outlineFragShader,\r\n        vertexShader: outlineVertShader,\r\n    });\r\n};\r\n\r\n/**\r\n * apply settings to an outline mesh\r\n * @param {THREE.Mesh} outline\r\n * @param {Map<string, *>} settings\r\n */\r\nexport const applyOutlineSettings = (outline, settings) => {\r\n    if (!outline || !settings) return;\r\n\r\n    const { material } = outline;\r\n    settings.forEach((value, key) => {\r\n        switch (key) {\r\n            case \"enable\":\r\n                outline.visible = value;\r\n                break;\r\n            case \"color\":\r\n                callbackOnEach(\r\n                    material,\r\n                    mat => (mat.uniforms.color.value = new THREE.Color(value))\r\n                );\r\n                break;\r\n            default:\r\n                callbackOnEach(\r\n                    material,\r\n                    mat => (mat.uniforms[key].value = value)\r\n                );\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * replace material of an object\r\n */\r\nconst replaceMaterial = (object, newMaterial) => {\r\n    const { material } = object;\r\n    // dispose old material\r\n    callbackOnEach(material, mat => {\r\n        mat.map?.dispose?.();\r\n        mat.userData.backupMap?.dispose?.();\r\n        mat.dispose();\r\n    });\r\n    // apply new material\r\n    const matIsArray = Array.isArray(object.material);\r\n    object.material = matIsArray\r\n        ? new Array(object.material.length).fill(newMaterial)\r\n        : newMaterial;\r\n};\r\n\r\n/**\r\n * calculate the difference between 2 face texture files\r\n * @param {string} currentTexture\r\n * @param {string} prevTexture\r\n * @return {xyCoordinate}\r\n */\r\nexport const calculateTextureOffset = (currentTexture, prevTexture) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentTexture !== prevTexture) {\r\n        const [prevOffsetX, prevOffsetY] = textureOffsets[prevTexture] || [\r\n            0,\r\n            0,\r\n        ];\r\n        const [currentOffsetX, currentOffsetY] = textureOffsets[\r\n            currentTexture\r\n        ] || [0, 0];\r\n\r\n        offset.x = currentOffsetX - prevOffsetX;\r\n        offset.y = currentOffsetY - prevOffsetY;\r\n    }\r\n    return [offset.x, offset.y];\r\n};\r\n\r\n/**\r\n * calculate the difference between 2 face index\r\n * @param {number} currentIdx\r\n * @param {number} prevIdx\r\n * @return {xyCoordinate}\r\n */\r\nexport const calculateIdxOffset = (currentIdx, prevIdx) => {\r\n    const offset = { x: 0, y: 0 };\r\n    if (currentIdx !== prevIdx) {\r\n        const [prevOffsetX, prevOffsetY] = idxOffsets[`face${prevIdx}`];\r\n        const [currentOffsetX, currentOffsetY] = idxOffsets[\r\n            `face${currentIdx}`\r\n        ];\r\n\r\n        offset.x = currentOffsetX - prevOffsetX;\r\n        offset.y = currentOffsetY - prevOffsetY;\r\n    }\r\n    return [offset.x, offset.y];\r\n};\r\n\r\n/**\r\n * generate offset applying functions\r\n * @param {string} part - part to apply offset\r\n */\r\nconst applyOffset = part => (target, offset) => {\r\n    const [offsetX, offsetY] = offset;\r\n    target.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const targetGroup = child.geometry.groups?.find(\r\n            group => child.material[group.materialIndex]?.name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { start, count } = targetGroup;\r\n        const end = start + count;\r\n        const uv = child.geometry.attributes.uv;\r\n        for (let i = start; i < end; i++) {\r\n            const u = uv.getX(i) + 0.25 * offsetX;\r\n            const v = uv.getY(i) + 0.25 * offsetY;\r\n            uv.setXY(i, u, v);\r\n        }\r\n        uv.needsUpdate = true;\r\n    });\r\n};\r\n\r\nexport const applyEyeOffset = applyOffset(\"Eye\");\r\nexport const applyMouthOffset = applyOffset(\"Mouth\");\r\n// export const applyBodyOffset = applyOffset(\"BodyAll\");\r\n\r\n/**\r\n * generate texture applying functions\r\n * @param {string} part - part to apply offset\r\n */\r\nconst applyTexture = part => (target, { materialType, textureId }) => {\r\n    const texturePath = getTexturePath(textureId);\r\n    const texture = new THREE.TextureLoader().load(texturePath);\r\n    texture.encoding = THREE.sRGBEncoding;\r\n\r\n    const materialParams = {\r\n        map: texture,\r\n        skinning: true,\r\n    };\r\n    const newMaterial = createNewMaterial(materialType, materialParams);\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n\r\n        const targetGroup = child.geometry.groups.find(\r\n            group => child.material[group.materialIndex].name === `mt${part}CH`\r\n        );\r\n        if (!targetGroup) return;\r\n\r\n        const { materialIndex } = targetGroup;\r\n        const oldMaterial = child.material[materialIndex];\r\n        newMaterial.name = oldMaterial.name;\r\n\r\n        child.material[materialIndex] = newMaterial;\r\n    });\r\n};\r\n\r\nexport const applyEyeTexture = applyTexture(\"Eye\");\r\nexport const applyMouthTexture = applyTexture(\"Mouth\");\r\n// export const applyBodyTexture = applyTexture(\"BodyAll\");\r\n\r\n/**\r\n * get animation modifiers from a list of modifiers\r\n * @param {Array<string>} modList\r\n * @return {AniModifier} object containing values to modify animation\r\n */\r\nconst getAniModifiers = modList => {\r\n    /**\r\n     * @type {FaceChangeArray}\r\n     */\r\n    const faceChanges = [];\r\n    let timeScale = 1,\r\n        repetitions = 1;\r\n\r\n    modList.forEach(mod => {\r\n        const [key, value] = mod.split(\"=\");\r\n        if (key === \"ts\") {\r\n            timeScale = parseFloat(value);\r\n        }\r\n        if (key === \"r\") {\r\n            repetitions = parseInt(value);\r\n        }\r\n        if (key.includes(\"-\")) {\r\n            const [part, time] = key.split(\"-\");\r\n            const faceMod = { time: parseFloat(time) };\r\n            const indexName = `${part === \"e\" ? \"eye\" : \"mouth\"}Idx`;\r\n            faceMod[indexName] = value;\r\n            faceChanges.push(faceMod);\r\n        }\r\n    });\r\n\r\n    return {\r\n        timeScale,\r\n        repetitions,\r\n        faceChanges: processFaceChanges(faceChanges),\r\n    };\r\n};\r\n\r\n/**\r\n * get animation data from single animation code\r\n * @param {string} code - single animation code\r\n * @return {AniListItem}\r\n */\r\nconst getAniData = code => {\r\n    const [aniName, ...modList] = code.split(\"&\");\r\n    const modifiers = getAniModifiers(modList);\r\n    return { aniName, ...modifiers };\r\n};\r\n\r\n/**\r\n * turn chain animation code to a list of animation name and modifiers\r\n * @param {string} code\r\n * @return {AniList}\r\n */\r\nexport const analyzeChainCode = code => {\r\n    if (!code) return [];\r\n\r\n    const aniCodes = code.split(\">\");\r\n    const aniList = aniCodes.map(getAniData);\r\n\r\n    return aniList;\r\n};\r\n\r\n/**\r\n * simplify and sort a face change array\r\n * @param {FaceChangeArray} faceChanges\r\n * @return {FaceChangeArray} simplified and sorted face change array\r\n */\r\nexport const processFaceChanges = faceChanges => {\r\n    if (!faceChanges.length) return faceChanges;\r\n\r\n    const sorted = faceChanges.sort((a, b) => a.time - b.time);\r\n    const timeStamps = new Set(faceChanges.map(change => change.time));\r\n    if (faceChanges.length === timeStamps.size) {\r\n        sorted.forEach(change => {\r\n            change.id = nanoid();\r\n        });\r\n        return sorted;\r\n    }\r\n\r\n    /**\r\n     * @type {FaceChangeArray}\r\n     */\r\n    const simplified = [];\r\n    timeStamps.forEach(time => {\r\n        let output = { time, id: nanoid(), eyeIdx: NaN, mouthIdx: NaN };\r\n        const changes = sorted.filter(change => change.time === time);\r\n        changes.forEach(change => (output = Object.assign(output, change)));\r\n        simplified.push(output);\r\n    });\r\n    return simplified;\r\n};\r\n\r\n/**\r\n * extend face change array if repetitions > 1\r\n * @param {FaceChangeArray} faceChanges - face change array\r\n * @param {number} repetitions - number of repetitions\r\n * @return {FaceChangeArray} extended face change array\r\n */\r\nexport const getFaceChangesQueue = (faceChanges, repetitions) => {\r\n    if (!faceChanges) return [];\r\n    if (repetitions === 1) return [...faceChanges];\r\n    // [0, 100, 200,...]\r\n    const timeOffset = new Array(repetitions).fill().map((_, i) => i * 100);\r\n\r\n    /**\r\n     * offset the time of the whole face change array\r\n     * @param {number} offset\r\n     * @return {FaceChangeArray} offsetted array\r\n     */\r\n    const offsetFaceChanges = offset =>\r\n        faceChanges.map(({ time, id, ...others }) => ({\r\n            ...others,\r\n            time: time + offset,\r\n        }));\r\n\r\n    return timeOffset.flatMap(offsetFaceChanges);\r\n};\r\n\r\n/**\r\n * convert animation chain code to AnimationChain\r\n * @param {string} code - animation chain code\r\n * @param {string} name - animation name\r\n * @return {AnimationChain}\r\n */\r\nexport const chainCodeToList = (code, name) => {\r\n    const aniList = analyzeChainCode(code);\r\n    const length = aniList.length;\r\n    const output = aniList.map((ani, i) => {\r\n        const { aniName, timeScale, repetitions, faceChanges } = ani;\r\n        const partName = name.concat(length > 1 ? `#${i + 1}` : \"\");\r\n        /**\r\n         * @type {AniChainItem}\r\n         */\r\n        const listItem = {\r\n            name: partName,\r\n            id: nanoid(),\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            faceChanges,\r\n        };\r\n        return listItem;\r\n    });\r\n    return output;\r\n};\r\n\r\n/**\r\n * create gradient map for toon material\r\n * @param {number} nTones - number of tones\r\n */\r\nexport const createGradientMap = nTones => {\r\n    const colors = new Uint8Array(nTones).map((_, i) => (i * 256) / nTones);\r\n    const map = new THREE.DataTexture(colors, nTones, 1, THREE.LuminanceFormat);\r\n    map.minFilter = THREE.NearestFilter;\r\n    map.magFilter = THREE.NearestFilter;\r\n    map.generateMipmaps = false;\r\n\r\n    return map;\r\n};\r\n\r\n/**\r\n * apply a parameter change to all material of input array\r\n * @param {Array} materials - array of materials\r\n * @param {[paramName: string, value:*]} param parameters to apply\r\n */\r\nexport const applyMaterialParam = (materials, param) => {\r\n    const [key, value] = param;\r\n    let handler;\r\n    const needsUpdate = needsUpdateParams.includes(key);\r\n\r\n    switch (key) {\r\n        case \"gradientMap\":\r\n            const nTones = parseInt(value);\r\n            const newMap = nTones ? createGradientMap(nTones) : null;\r\n            handler = mat => (mat.gradientMap = newMap);\r\n            break;\r\n        case \"useTexture\":\r\n            handler = value\r\n                ? mat => {\r\n                      mat.map = mat.userData.backupMap;\r\n                      mat.userData.backupMap = null;\r\n                  }\r\n                : mat => {\r\n                      if (mat.map) mat.userData.backupMap = mat.map;\r\n                      mat.map = null;\r\n                  };\r\n            break;\r\n        case \"matcap\":\r\n            const matcapPromise = loadMatcap(value);\r\n            handler = mat => {\r\n                matcapPromise.then(matcap => {\r\n                    mat.matcap = matcap;\r\n                    mat.needsUpdate = true;\r\n                });\r\n            };\r\n            break;\r\n        default:\r\n            const isColor = matColorParams.includes(key);\r\n            handler = mat =>\r\n                (mat[key] = isColor ? new THREE.Color(value) : value);\r\n    }\r\n\r\n    materials.forEach(mat => {\r\n        handler(mat);\r\n        mat.needsUpdate = needsUpdate;\r\n    });\r\n};\r\n\r\n/**\r\n * update model's material parameters\r\n * @param {THREE.Group} model\r\n * @param {{ prevParams?: {}, params: {} }} data\r\n */\r\nexport const updateMatParams = (model, { prevParams = {}, params }) => {\r\n    const materials = getMaterial(model);\r\n    const updated = getUpdated(prevParams, params);\r\n    updated.forEach(update => applyMaterialParam(materials, update));\r\n};\r\n\r\n/**\r\n * create light from params\r\n * @param {LightParam} params\r\n * @return {THREE.Light}\r\n */\r\nexport const createLight = params => {\r\n    const { type, color, intensity, ...others } = params;\r\n\r\n    const constructor = `${type}Light`;\r\n    const light = new THREE[constructor](color, intensity);\r\n\r\n    for (const [key, value] of Object.entries(others)) {\r\n        if (key === \"position\") {\r\n            const setValue = value.map(v => v || 0);\r\n            light.position.set(...setValue);\r\n            continue;\r\n        }\r\n        light[key] = value;\r\n    }\r\n\r\n    return light;\r\n};\r\n\r\n/**\r\n * replace model's old texture with a new texture from provided path\r\n * @param {THREE.Group} target - object to replace texture\r\n * @param {Object} params\r\n * @param {string} params.oldTexture - name of texture to be replaced\r\n * @param {string} params.texturePath - path to new texture file\r\n */\r\nexport const replaceTexture = async (target, { oldTexture, texturePath }) => {\r\n    const newTexture = await loadTexture(texturePath);\r\n    newTexture.encoding = THREE.sRGBEncoding;\r\n\r\n    const material = getMaterial(target);\r\n    material.forEach(mat => {\r\n        const textureName = mat.map?.name;\r\n        if (textureName?.includes(oldTexture)) {\r\n            mat.map?.dispose?.();\r\n            mat.map = newTexture;\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * @param {string} modCode\r\n */\r\nconst analyzeModelModCode = modCode => {\r\n    const output = {};\r\n    const cmds = modCode.split(\";\").map(str => str.trim());\r\n\r\n    cmds.forEach(cmd => {\r\n        const [opcode, ...args] = cmd.split(\" \");\r\n        const outArgs = args.join(\"\").split(\",\");\r\n        output[opcode] = outArgs;\r\n    });\r\n\r\n    return output;\r\n};\r\n\r\n/**\r\n * apply modifier code to a 3D model\r\n * @param {THREE.Group} target - model to apply\r\n * @param {string} modCode - code to apply\r\n */\r\nexport const applyMod = (target, modCode) => {\r\n    if (!modCode) return;\r\n\r\n    const meshes = getMeshes(target);\r\n    const { show, hide } = analyzeModelModCode(modCode);\r\n\r\n    meshes.forEach(mesh => {\r\n        if (hide?.includes(mesh.name)) mesh.visible = false;\r\n        if (show?.includes(mesh.name)) mesh.visible = true;\r\n    });\r\n};\r\n\r\n/**\r\n * log the updated values to console\r\n * @param {{ }} prev - previous state\r\n * @param {{ }} current - current state\r\n */\r\nexport const logUpdate = (prev, current) => {\r\n    const updated = getUpdated(prev, current);\r\n    updated.forEach(([key, value]) => {\r\n        const oldValue = prev[key];\r\n        const subkeys = Object.keys(value);\r\n\r\n        const isSingleValue = subkeys.length === 0 || typeof value === \"string\";\r\n        if (isSingleValue) {\r\n            console.log(\r\n                `${key}: ${JSON.stringify(oldValue)} to ${JSON.stringify(\r\n                    value\r\n                )}`\r\n            );\r\n            return;\r\n        }\r\n        subkeys.forEach(subkey => {\r\n            if (oldValue[subkey] === value[subkey]) return;\r\n\r\n            console.log(\r\n                `${key}.${subkey}: ${JSON.stringify(\r\n                    oldValue[subkey]\r\n                )} to ${JSON.stringify(value[subkey])}`\r\n            );\r\n        });\r\n    });\r\n};\r\n","const outlineFragShader = `#define OUTLINE\r\nuniform float opacity;\r\nuniform vec3 color;\r\nvoid main() {\r\n\tgl_FragColor = vec4( color, opacity );\r\n}`;\r\n\r\nexport default outlineFragShader;\r\n","const outlineVertShader = `#define OUTLINE\r\nuniform float size;\r\nvarying vec3 vViewPosition;\r\n#include <common>\r\n#include <color_pars_vertex>\r\n#include <skinning_pars_vertex>\r\n#include <clipping_planes_pars_vertex>\r\nvoid main() {\r\n\t#include <color_vertex>\r\n\t#include <beginnormal_vertex>\r\n\t#include <morphnormal_vertex>\r\n\t#include <skinbase_vertex>\r\n\t#include <skinnormal_vertex>\r\n\t#include <defaultnormal_vertex>\r\n\t\r\n    vec3 transformed = position + objectNormal*0.0005*size;\r\n        \r\n\t#include <skinning_vertex>\r\n\t#include <project_vertex>\r\n\t#include <clipping_planes_vertex>\r\n\tvViewPosition = - mvPosition.xyz;\r\n\t#include <worldpos_vertex>\r\n}`;\r\n\r\nexport default outlineVertShader;\r\n","import { isDragon, isCharaWithAni } from \"../helpers\";\r\nimport { DEFAULT_ADV_ANI } from \"../consts\";\r\n\r\n/**\r\n * get the default animation code base on model ID\r\n * @param {string} modelId\r\n * @return {Promise<string | undefined>}\r\n */\r\nexport const getDefaultAni = async modelId => {\r\n    if (isDragon(modelId)) return getDefaultDragonAni(modelId);\r\n\r\n    if (modelId.startsWith(\"h\")) return getDefaultEnemyAni(modelId);\r\n\r\n    if (isCharaWithAni(modelId)) return DEFAULT_ADV_ANI;\r\n\r\n    return \"\";\r\n};\r\n\r\n/**\r\n * @param {string} modelId\r\n * @return {Promise<string | undefined>}\r\n */\r\nconst getDefaultDragonAni = async modelId => {\r\n    const { default: dragonAni } = await import(\r\n        /* webpackChunkName: \"aniDragon\" */\r\n        \"data/aniDragon\"\r\n    );\r\n\r\n    return dragonAni[modelId]?.[0].code;\r\n};\r\n\r\n/**\r\n * @param {string} modelId\r\n * @return {Promise<string | undefined>}\r\n */\r\nconst getDefaultEnemyAni = async modelId => {\r\n    const { default: enemyAni } = await import(\r\n        /* webpackChunkName: \"aniEnemies\" */\r\n        \"data/aniEnemies\"\r\n    );\r\n\r\n    return enemyAni[modelId]?.[0].code;\r\n};\r\n\r\nexport default getDefaultAni;\r\n","/**\r\n * default camera coordinates\r\n * @type {{ [key: string]: xyzCoordinate }}\r\n */\r\nexport const cameraPositions = {\r\n    c: [0, 0.5, 1.5],\r\n    d: [0, 1.5, 6],\r\n    w: [2, 0, 0],\r\n    b: [1, 0.5, 6],\r\n    e: [1, 1, 4],\r\n    h: [1, 0.5, 3],\r\n    o: [0, 0.5, 8],\r\n    r: [3, 3, 20],\r\n\r\n    c100034_01: [0, 0.5, 1.75],\r\n    c110379_01: [0, 0.75, 2],\r\n    d200017_01: [0, 1, 4],\r\n    d210001_01: [0, 1, 4],\r\n    d210002_01: [0, 1, 4],\r\n    d210003_01: [0, 1, 4],\r\n    d210004_01: [0, 1, 4],\r\n    d210005_01: [0, 1, 4],\r\n    d210020_01: [0, 2, 6],\r\n    d210038_01: [0, 1, 4],\r\n    d210039_01: [0, 1, 4],\r\n    d210040_01: [0, 1, 4],\r\n    d210041_01: [0, 1, 4],\r\n    d210042_01: [0, 1, 4],\r\n    d210048_01: [0, 2, 8],\r\n    d210052_01: [0, 2, 8],\r\n    d210054_01: [0, 1.5, 6],\r\n    d210072_01: [0, 1, 4],\r\n    d210076_01: [0, 2, 6],\r\n    d210077_01: [0, 2, 6],\r\n    d210078_01: [0, 6, 20],\r\n    d210079_01: [0, 2, 6],\r\n    d210081_01: [0, 2, 6],\r\n    d210082_01: [0, 1.5, 4],\r\n    d210087_01: [0, 2, 6],\r\n    d210093_01: [0, 1, 3],\r\n    d210094_01: [0, 1.5, 6],\r\n    d210095_01: [0, 1, 4],\r\n    d210102_01: [0, 2, 6],\r\n    d210103_01: [0, 4, 8],\r\n    d210104_01: [0, 1, 4],\r\n    d210109_01: [0, 1, 4],\r\n    d210111_01: [0, 0.5, 1.5],\r\n    d210112_01: [0, 4, 8],\r\n    d210113_01: [0, 1, 4],\r\n    d210114_01: [0, 6, 20],\r\n    d210115_01: [0, 2, 4],\r\n    d210116_01: [0, 2, 6],\r\n    d210117_01: [0, 2, 6],\r\n    d210118_01: [0, 1, 2],\r\n    d210123_01: [0, 3, 9],\r\n    d210125_01: [0, 1.5, 5],\r\n    d210126_01: [0, 2, 8],\r\n    d210127_01: [0, 0.5, 1.5],\r\n    d210128_01: [0, 0.5, 1.5], // Puppy\r\n    d210133_01: [0, 0.5, 1.5],\r\n    d210136_01: [0, 6, 20],\r\n    d210142_01: [0, 2, 4],\r\n    h0010001: [6, 0.5, 8],\r\n    h0010001_02: [2, 0, 0],\r\n    h0040101: [1, 0.5, 4],\r\n    h0080501: [0, 2, 5],\r\n    h0090501: [0, 2, 5],\r\n    r0070401: [30, 30, 100],\r\n    r0070501: [30, 30, 100],\r\n    r0080401: [1, 2, 5],\r\n\r\n    smith: [1, 1, 2],\r\n};\r\n\r\nexport default cameraPositions;\r\n","import { useState, useCallback } from \"react\";\r\n\r\n/**\r\n * custom hook for a boolean state\r\n * @param {Boolean} initVal - initial value, default is false\r\n * @return {[state: Boolean, toggleFunction: Function]}\r\n */\r\nfunction useToggleState(initVal = false) {\r\n    const [state, setState] = useState(initVal);\r\n    const toggleState = useCallback(() => {\r\n        setState(state => !state);\r\n    }, [setState]);\r\n    return [state, toggleState];\r\n}\r\n\r\nexport default useToggleState;\r\n","/**\r\n * convert hex color code to rgb triplet\r\n * @param {ColorCode} hex\r\n * @return {RGBTriplet}\r\n */\r\nconst hexToRgb = hex => {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n        ? {\r\n              r: parseInt(result[1], 16),\r\n              g: parseInt(result[2], 16),\r\n              b: parseInt(result[3], 16),\r\n          }\r\n        : null;\r\n};\r\n\r\n/**\r\n * @param {RGBTriplet} color\r\n */\r\nconst getBrightness = ({ r, g, b }) => (r * 299 + g * 587 + b * 114) / 1000;\r\n\r\n/**\r\n * get the suitable text color for a given background color\r\n * @param {ColorCode | 'camera'} background\r\n */\r\nexport const getTextColor = background => {\r\n    if (background === \"camera\") return \"#ffffff\";\r\n\r\n    const rgb = hexToRgb(background);\r\n    return getBrightness(rgb) > 128 ? \"#000000\" : \"#ffffff\";\r\n};\r\n\r\nexport default getTextColor;\r\n"],"sourceRoot":""}