{"version":3,"sources":["reducer/settingsReducer.js","context/SettingsContext.js","helpers.js","ModelViewer.js","Display.js","MainPage.js","App.js","data/face_offset.js","hooks/useToggleState.js","styles/MainPageStyles.js","styles/Rose-Petals.svg","consts.js","viewerHelpers.js","serviceWorker.js","index.js"],"names":["settingsReducer","state","action","key","value","type","currentValue","defaultSetting","defaultSettings","update","forEach","v","SettingsContext","createContext","DispatchContext","initAniChain","chainCodeToList","animation","code","initSettings","model","materialParams","scene","app","outline","capture","chainMaker","chain","SettingsProvider","props","useReducer","settings","dispatch","Provider","children","isBlade","startsWith","isSheath","endsWith","callbackOnPotentialArray","object","callback","Array","isArray","child","setInitialSettings","params","length","faceTextureDefined","param","split","keycode","setValue","join","chainList","map","n","parseFloat","initKey","group","isBooleanValue","Boolean","generateChainCode","defaultMod","timeScale","repetitions","modList","ts","r","output","ani","i","fileName","aniName","concat","Object","keys","modKey","collectFilter","toggleState","collected","tmp","k","push","multiCondFilter","input","filters","filterKeys","filter","el","every","includes","complementaryColor","color","hexColor","replace","toString","slice","aniButtonsFromObject","handleSelect","groupName","style","maxWidth","variant","data-value","data-name","onClick","getStandbyCode","weapon","gender","WEAPON_CODE","GENDER_CODE","getVictoryCode","getDashAtkCode","getRollCode","getComboCode","comboLength","COMBO_LENGTH","result","getFSCode","fsAniLength","FS_LENGTH","getLobbyCode","ModelViewer","animate","frameId","requestAnimationFrame","dt","clock","getDelta","floor","rotateY","rotateSpeed","Math","PI","mixers","mixer","renderer","render","camera","init","models","modelInfo","main","id","weaponLeft","analyzeWeaponCode","weaponRight","outlines","outlineParams","viewport","width","window","innerWidth","height","innerHeight","THREE","background","bgColor","floorGeometry","rotateX","floorMaterial","visible","add","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","controls","OrbitControls","mount","controlsPosition","target","light","intensity","rendererAA","antialias","alpha","outputEncoding","rendererNoAA","antiAliasing","canvas","domElement","setSize","appendChild","playNextAni","enable","_aniIdx","nAni","mediaRecorder","stop","toggleCapture","newIdx","aniIdx","addAnimationChain","animationChain","a","analyzeChainCode","fileList","animationList","setIsLoading","addEventListener","aniSettings","batchLoader","file","path","fbxSource","loadModel","animations","Promise","all","animFiles","anim","fileIdx","find","name","initLoad","modelId","modelPath","getModelPath","loadMain","loadWeaponR","loadWeaponL","attachWeapon","side","boneName","traverse","detachWeapon","remove","this","createOutline","initPos","clone","initRot","rotation","materialType","changeMaterial","weaponInfo","weaponModel","texturePath","y","flipped","texture","faceTexture","faceOverride","faceNumber","face","faceOffsets","faceOffsetX","x","faceOffsetY","offsetFix","applyFaceTexture","offsetFixBase","faceOffsetFixList","offsetFixOverride","offset","applyFaceOffset","aniCode","prevProps","aspect","chunks","videoStream","captureStream","MediaRecorder","mimeType","codec","ondataavailable","event","data","onstop","superBuffer","Blob","url","URL","createObjectURL","document","createElement","body","href","download","click","revokeObjectURL","start","currentSize","getSize","removeChild","faceOffset","disposeItem","faceTextureChanged","oldFaceNumber","currentOffset","oldOffset","dx","dy","faceOffsetFix","oldFaceOffsetFix","currentFaceOffsetFix","stopAllAction","copy","showOutline","outlineColor","outlineSize","size","outlineOpacity","opacity","changeOutlineSize","changeOpacity","changeOutlineColor","cancelAnimationFrame","renderLists","dispose","ref","clipAction","setLoop","clampWhenFinished","time","play","PureComponent","AniControl","lazy","Display","useContext","initCameraPosition","showAniControl","useCallback","defaultCameraPosition","cameraPositions","isNaN","controlsPositions","className","fallback","ControlPanel","SideBar","MainPage","location","classes","useStyles","useState","currentMode","setCurrentMode","useToggleState","sidebarOpen","toggleSidebarOpen","controlOpen","toggleControlOpen","isLoading","initLoadDone","setInitLoadDone","showSettings","viewerRef","useRef","setViewport","useEffect","pathname","updateViewportSize","removeEventListener","current","clientHeight","clientWidth","loadingMsg","root","CssBaseline","mode","open","openSidebarButton","openControl","content","process","App","routeProps","c100015_04","c110267_01","c110050_02","c110291_01","c110354_01","c110345_01","c110266_01","c110365_01","c110346_01","c110366_01","c110299_02","c110360_01","c110307_01","c110322_01","c110356_01","c110300_01","c110344_01","c110053_03","c110368_01","c110367_01","c110003_02","c110270_02","c110341_03","initVal","setState","drawerWidth","DRAWER_WIDTH","drawerBG","DRAWER_BGCOLOR","makeStyles","theme","display","drawer","overflowY","drawerPaper","alignItems","backgroundColor","backgroundImage","bg","backgroundSize","backgroundPosition","marginBottom","padding","top","left","margin","borderRadius","transition","cursor","zIndex","justifyContent","fontSize","module","exports","baseUrl","sideContent","supportedCodecs","ft","f","wr","wl","cam","showAC","AA","rot","cc","MATERIALS","Sword","Blade","Dagger","Axe","Lance","Bow","Wand","Staff","Manacaster","WEAPON_LIST","Male","Female","FILTERS","rarity","element","WEAPON_FILTERS","spFaceTextures","commonBG","green","black","grey","white","c","d","c100034_01","d210078_01","d210114_01","smith","face1","face2","face3","face4","face5","face6","face7","face8","face9","videoCodecs","resolve","FBXLoader","load","getTexturePath","weaponCode","substring","item","disposedList","Set","needToDispose","has","uuid","notDisposed","disposeObject","isMesh","material","mat","geometry","createNewMaterial","matType","checkParam","changed","encoding","newMaterial","skinning","obj","updateOutlineShader","fog","needsUpdate","onBeforeCompile","shader","customTransform","vertexShader","setTimeout","updated","m","fill","replaceMaterial","transparent","createOutlineMaterial","isSkinnedMesh","bind","skeleton","bindMatrix","parent","groups","faceGroups","count","min","end","max","uv","attributes","u","getX","getY","setXY","faceTexturePath","faceMaterial","materialIndex","aniCodes","currentAni","details","currentParts","Infinity","parseInt","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15b0aca9.chunk.js","sourcesContent":["import { defaultSettings } from \"../consts\";\r\n\r\nexport const settingsReducer = (state, action) => {\r\n    let key, value;\r\n    switch (action.type) {\r\n        case \"toggle\":\r\n            key = action.key;\r\n            value = action.value;\r\n            const currentValue = state[key][value];\r\n            return {\r\n                ...state,\r\n                [key]: { ...state[key], [value]: !currentValue },\r\n            };\r\n        case \"reset\":\r\n            // reset values\r\n            // value = array of keys in settings[key] to be reset, null -> reset all\r\n            key = action.key;\r\n            value = action.value;\r\n            const defaultSetting = defaultSettings[key];\r\n            // no value -> reset all\r\n            if (!value)\r\n                return {\r\n                    ...state,\r\n                    [key]: { ...state[key], ...defaultSetting },\r\n                };\r\n            // if value is defined, reset only the specified keys\r\n            const update = {};\r\n            value.forEach(v => {\r\n                update[v] = defaultSetting[v];\r\n            });\r\n            return { ...state, [key]: { ...state[key], ...update } };\r\n        case \"load\":\r\n            // load preset values\r\n            return;\r\n        case \"update\":\r\n            // update state[key] with values from value\r\n            key = action.key;\r\n            value = action.value;\r\n            return { ...state, [key]: { ...state[key], ...value } };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport { settingsReducer } from \"../reducer/settingsReducer\";\r\nimport { defaultSettings } from \"../consts\";\r\nimport { chainCodeToList } from \"../viewerHelpers\";\r\n\r\nexport const SettingsContext = createContext();\r\nexport const DispatchContext = createContext();\r\n\r\nconst initAniChain = chainCodeToList(defaultSettings.animation.code, \"init\");\r\n\r\nexport const initSettings = {\r\n    model: { ...defaultSettings.model },\r\n    materialParams: { ...defaultSettings.materialParams },\r\n    scene: { ...defaultSettings.scene },\r\n    animation: { ...defaultSettings.animation },\r\n    app: { ...defaultSettings.app },\r\n    outline: { ...defaultSettings.outline },\r\n    capture: { ...defaultSettings.capture },\r\n    chainMaker: { chain: initAniChain },\r\n};\r\n\r\nexport function SettingsProvider(props) {\r\n    const [settings, dispatch] = useReducer(settingsReducer, initSettings);\r\n\r\n    return (\r\n        <SettingsContext.Provider value={settings}>\r\n            <DispatchContext.Provider value={dispatch}>\r\n                {props.children}\r\n            </DispatchContext.Provider>\r\n        </SettingsContext.Provider>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport { initSettings } from \"./context/SettingsContext\";\r\nimport {\r\n    initKey,\r\n    WEAPON_CODE,\r\n    GENDER_CODE,\r\n    COMBO_LENGTH,\r\n    FS_LENGTH,\r\n} from \"./consts\";\r\n\r\nimport { chainCodeToList } from \"./viewerHelpers\";\r\n\r\nexport const isBlade = code => code.startsWith(\"w302\");\r\n\r\nexport const isSheath = code => isBlade(code) && code.endsWith(\"02\");\r\n\r\n// if object is an array, apply callback on each element of object, otherwise, apply call back on the object\r\nexport const callbackOnPotentialArray = (object, callback) => {\r\n    if (Array.isArray(object)) {\r\n        object.forEach(child => callback(child));\r\n        return;\r\n    }\r\n    callback(object);\r\n};\r\n\r\nexport const setInitialSettings = params => {\r\n    if (params.length === 0) return;\r\n    let faceTextureDefined = false;\r\n    params.forEach(param => {\r\n        if (!param) return;\r\n\r\n        const [keycode, ...value] = param.split(\"=\"); // animation code can have \"=\" inside\r\n        // if no value given, skip\r\n        if (!value[0]) return;\r\n\r\n        let setValue = value.length === 1 ? value[0] : value.join(\"=\");\r\n\r\n        switch (keycode) {\r\n            case \"ft\":\r\n                faceTextureDefined = true;\r\n                break;\r\n            case \"cc\":\r\n                // initialize chain maker chain\r\n                const chainList = chainCodeToList(setValue, \"Animation\");\r\n                initSettings[\"chainMaker\"][\"chain\"] = chainList;\r\n                break;\r\n            case \"bg\":\r\n                if (setValue !== \"transparent\") {\r\n                    setValue = `#${setValue}`;\r\n                }\r\n                break;\r\n            case \"cam\": // parameters in form x, y, z\r\n                setValue = setValue.split(\",\").map(n => parseFloat(n));\r\n                break;\r\n            default:\r\n        }\r\n        const { group, key } = initKey[keycode];\r\n\r\n        const isBooleanValue = setValue === \"true\" || setValue === \"false\";\r\n\r\n        initSettings[group][key] = isBooleanValue\r\n            ? Boolean(setValue === \"true\")\r\n            : setValue;\r\n    });\r\n\r\n    initSettings[\"model\"][\"texture\"] = initSettings[\"model\"][\"id\"];\r\n\r\n    if (!faceTextureDefined) {\r\n        initSettings[\"model\"][\"faceTexture\"] = initSettings[\"model\"][\"id\"];\r\n    }\r\n};\r\n\r\nexport const generateChainCode = chain => {\r\n    const defaultMod = {\r\n        timeScale: 1,\r\n        repetitions: 1,\r\n    };\r\n    const modList = {\r\n        ts: \"timeScale\",\r\n        r: \"repetitions\",\r\n    };\r\n    const length = chain.length;\r\n    let output = \"\";\r\n    chain.forEach((ani, i) => {\r\n        const { fileName, aniName } = ani;\r\n        if (fileName) {\r\n            if (i === 0) {\r\n                output = output.concat(fileName);\r\n            } else {\r\n                output = output.concat(\r\n                    fileName !== chain[i - 1].fileName ? fileName : \"\"\r\n                );\r\n            }\r\n            output = output.concat(\"+\");\r\n        }\r\n        output = output.concat(aniName);\r\n        // Add modifiers\r\n        Object.keys(modList).forEach(modKey => {\r\n            const key = modList[modKey];\r\n            if (ani[key] !== defaultMod[key]) {\r\n                output = output.concat(`&${modKey}=${ani[key]}`);\r\n            }\r\n        });\r\n        if (i < length - 1) {\r\n            output = output.concat(\">\");\r\n        }\r\n    });\r\n    return output;\r\n};\r\n\r\nexport const collectFilter = toggleState => {\r\n    let collected = {};\r\n    Object.keys(toggleState).forEach(key => {\r\n        let tmp = [];\r\n        Object.keys(toggleState[key]).forEach(k => {\r\n            if (toggleState[key][k]) {\r\n                tmp.push(k);\r\n            }\r\n        });\r\n        collected[key] = tmp;\r\n    });\r\n    return collected;\r\n};\r\n\r\nexport const multiCondFilter = (input, filters) => {\r\n    const filterKeys = Object.keys(filters);\r\n\r\n    return input.filter(el => {\r\n        return filterKeys.every(key => {\r\n            if (!filters[key].length) return true;\r\n            return filters[key].includes(el[key]);\r\n        });\r\n    });\r\n};\r\n\r\nexport const complementaryColor = color => {\r\n    const hexColor = color.replace(\"#\", \"0x\");\r\n\r\n    return `#${(\"000000\" + (\"0xffffff\" ^ hexColor).toString(16)).slice(-6)}`;\r\n};\r\n\r\nexport const aniButtonsFromObject = (object, handleSelect, groupName) => {\r\n    if (!object) return null;\r\n    const style = { maxWidth: \"13.5rem\" };\r\n    return Object.keys(object).map(key => (\r\n        <Button\r\n            variant=\"contained\"\r\n            key={key}\r\n            data-value={object[key]}\r\n            data-name={`${groupName ? `${groupName} ` : \"\"}${key}`}\r\n            onClick={handleSelect}\r\n            style={style}\r\n        >\r\n            {key}\r\n        </Button>\r\n    ));\r\n};\r\n\r\n// Animation chain code generator\r\nexport const getStandbyCode = (weapon, gender) =>\r\n    `LOB_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_ONT_${GENDER_CODE[gender]}`;\r\n\r\nexport const getVictoryCode = weapon =>\r\n    `WIN_${WEAPON_CODE[weapon]}+${WEAPON_CODE[weapon]}_WIN_01>+${WEAPON_CODE[weapon]}_WIN_02`;\r\n\r\nexport const getDashAtkCode = weapon => `DAS+${WEAPON_CODE[weapon]}_DAS_02`;\r\n\r\nexport const getRollCode = weapon => `ROL+${WEAPON_CODE[weapon]}_ROL_01`;\r\n\r\nexport const getComboCode = weapon => {\r\n    const comboLength = COMBO_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `CMB_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= comboLength; i++) {\r\n        result = result.concat(`+${code}_CMB_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Force Strike chain code\r\nexport const getFSCode = weapon => {\r\n    const fsAniLength = FS_LENGTH[weapon];\r\n    const code = WEAPON_CODE[weapon];\r\n    let result = `FS_${code}`;\r\n    // Weapon combo has 5 animations each\r\n    for (let i = 1; i <= fsAniLength; i++) {\r\n        result = result.concat(`+${code}_CHR_0${i}>`);\r\n    }\r\n    result = result.slice(0, -1); // Remove last '>' character\r\n    return result;\r\n};\r\n\r\n// Join Lobby chain code\r\nexport const getLobbyCode = (weapon, gender) => {\r\n    const code = WEAPON_CODE[weapon];\r\n    if (gender === \"Male\")\r\n        return `LOB_${code}+${code}_ONT_05&ts=-0.5>+${code}_ONT_02>+${code}_ONT_07>+${code}_ONT_08>+${code}_ONT_21`;\r\n    // Female\r\n    return `LOB_${code}+${code}_ONT_06&ts=-0.5>+${code}_ONT_04>+${code}_ONT_09>+${code}_ONT_10>+${code}_ONT_23`;\r\n};\r\n","import React, { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { fbxSource } from \"./App\";\r\nimport { CAM_PARAMS, faceOffsets } from \"./consts\";\r\nimport faceOffsetFixList from \"./data/face_offset\";\r\nimport {\r\n    getModelPath,\r\n    analyzeWeaponCode,\r\n    analyzeChainCode,\r\n    loadModel,\r\n    applyFaceTexture,\r\n    applyFaceOffset,\r\n    disposeItem,\r\n    createOutline,\r\n    changeMaterial,\r\n    changeOpacity,\r\n    changeOutlineSize,\r\n    changeOutlineColor,\r\n} from \"./viewerHelpers\";\r\n\r\nclass ModelViewer extends PureComponent {\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n        const dt = this.clock.getDelta();\r\n        // Rotate the floor\r\n        this.floor.rotateY((this.props.rotateSpeed * dt * Math.PI) / 2);\r\n\r\n        if (this.mixers.length > 0) {\r\n            this.mixers.forEach(mixer => mixer.update(dt));\r\n        }\r\n        this.renderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    // set up initial scene\r\n    init = () => {\r\n        this.models = {};\r\n        this.modelInfo = {\r\n            main: this.props.model.id,\r\n            weaponLeft: this.props.model.weaponLeft\r\n                ? analyzeWeaponCode(this.props.model.weaponLeft)\r\n                : \"\",\r\n            weaponRight: this.props.model.weaponRight\r\n                ? analyzeWeaponCode(this.props.model.weaponRight)\r\n                : \"\",\r\n        };\r\n\r\n        // save reference and specifications for outlines\r\n        this.outlines = {};\r\n        this.outlineParams = { ...this.props.outline };\r\n\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // mixers\r\n        this.mixers = [];\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.scene.background =\r\n            this.props.bgColor !== \"transparent\"\r\n                ? new THREE.Color(this.props.bgColor)\r\n                : null;\r\n\r\n        // Create an invisible floor to add the models on (for auto rotate)\r\n        const floorGeometry = new THREE.PlaneBufferGeometry(0.1, 0.1);\r\n        floorGeometry.rotateX(Math.PI / 2);\r\n        const floorMaterial = new THREE.MeshBasicMaterial();\r\n        floorMaterial.visible = false;\r\n        this.floor = new THREE.Mesh(floorGeometry, floorMaterial);\r\n        this.scene.add(this.floor);\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        // Light\r\n        let light = new THREE.DirectionalLight(0xffffff);\r\n        light.position.set(0, 200, 100);\r\n        light.intensity = 0.5;\r\n        this.scene.add(light);\r\n        light = new THREE.AmbientLight(0xaaaaaa);\r\n        this.scene.add(light);\r\n\r\n        // Renderer\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n\r\n        this.renderer = this.props.antiAliasing\r\n            ? this.rendererAA\r\n            : this.rendererNoAA;\r\n        this.canvas = this.renderer.domElement;\r\n        this.renderer.setSize(this.viewport.width, this.viewport.height);\r\n        this.mount.appendChild(this.canvas);\r\n\r\n        this.animate();\r\n    };\r\n\r\n    playNextAni = () => {\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        if (this.props.capture.enable && this._aniIdx === this.nAni - 1) {\r\n            this.mediaRecorder.stop();\r\n            this.props.toggleCapture();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % this.nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    // add Animation Chain\r\n    addAnimationChain = async (object, animationChain, timeScale) => {\r\n        if (!animationChain) return; // If no Animation, return\r\n\r\n        const [fileList, animationList] = analyzeChainCode(animationChain);\r\n        this.nAni = animationList.length;\r\n\r\n        this.props.setIsLoading(true);\r\n\r\n        object.mixer = new THREE.AnimationMixer(object);\r\n        this.mixers.push(object.mixer);\r\n\r\n        this._aniIdx = 0;\r\n        object.mixer.timeScale = timeScale; // Global timeScale\r\n        object.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = animationList.map(ani => {\r\n            return {\r\n                timeScale: ani.timeScale,\r\n                repetitions: ani.repetitions,\r\n            };\r\n        });\r\n        const batchLoader = fileList.map(file => {\r\n            const path = `${fbxSource}/fbx/${file}.fbx`;\r\n            return loadModel(path);\r\n        });\r\n\r\n        const animations = [];\r\n        // load all animation files\r\n        const animFiles = await Promise.all(batchLoader);\r\n\r\n        animationList.forEach(anim => {\r\n            const { fileIdx, aniName } = anim;\r\n            const animation = aniName\r\n                ? animFiles[fileIdx].animations.find(\r\n                      ani => ani.name === aniName\r\n                  )\r\n                : animFiles[fileIdx].animations[0];\r\n            animations.push(animation);\r\n        });\r\n        this.animations = animations;\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.props.setIsLoading(false);\r\n    };\r\n\r\n    // this.aniIdx = n => play animation with index n\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n        const anim = this.animations[newIdx];\r\n        const mixer = this.models.main.mixer;\r\n        mixer.stopAllAction();\r\n        const action = mixer.clipAction(anim);\r\n        const { timeScale, repetitions } = this.aniSettings[newIdx];\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.clampWhenFinished = true;\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n        action.play();\r\n    }\r\n\r\n    // Promise to load all models at initialize\r\n    initLoad = () => {\r\n        const modelId = this.modelInfo.main;\r\n        const modelPath = getModelPath(modelId);\r\n        const loadMain = loadModel(modelPath);\r\n\r\n        const weaponRight = this.props.model.weaponRight\r\n            ? this.modelInfo.weaponRight.modelPath\r\n            : \"\";\r\n        const loadWeaponR = loadModel(weaponRight);\r\n\r\n        const weaponLeft = this.props.model.weaponLeft\r\n            ? this.modelInfo.weaponLeft.modelPath\r\n            : \"\";\r\n        const loadWeaponL = loadModel(weaponLeft);\r\n\r\n        return Promise.all([loadMain, loadWeaponR, loadWeaponL]);\r\n    };\r\n\r\n    attachWeapon = (weapon, side) => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.name === boneName && child.children.length === 0) {\r\n                child.add(weapon);\r\n            }\r\n        });\r\n    };\r\n\r\n    detachWeapon = side => {\r\n        const boneName = `jWeapon${side[0]}`;\r\n        this.models.main.traverse(child => {\r\n            if (child.children.length === 1 && child.name === boneName) {\r\n                if (child.children[0].type === \"Group\") {\r\n                    child.remove(this.models[`weapon${side}`]);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    async componentDidMount() {\r\n        this.init();\r\n        this.props.setIsLoading(true);\r\n\r\n        // Load the models\r\n        const [main, weaponRight, weaponLeft] = await this.initLoad();\r\n\r\n        // save references\r\n        this.models = {\r\n            main,\r\n            weaponRight,\r\n            weaponLeft,\r\n        };\r\n        // add outline to main model and save reference\r\n        this.outlines.main = createOutline(main, this.outlineParams);\r\n\r\n        // Save initial position and rotation\r\n        main.initPos = main.position.clone();\r\n        main.initRot = main.rotation.clone();\r\n\r\n        // change the material\r\n        const { materialType } = this.props.model;\r\n        changeMaterial({ target: main, materialType });\r\n\r\n        // process weapons\r\n        [\"Right\", \"Left\"].forEach(side => {\r\n            const key = `weapon${side}`;\r\n            // if weapon not specified, return\r\n            if (!this.props.model[key]) return;\r\n            // add weapon\r\n            const weaponInfo = this.modelInfo[key];\r\n            const weaponModel = this.models[key];\r\n            const { texturePath } = weaponInfo;\r\n            changeMaterial({\r\n                target: weaponModel,\r\n                materialType,\r\n                texturePath,\r\n            });\r\n            // flip weapon if needed\r\n            weaponModel.rotation.y += weaponInfo.flipped ? Math.PI : 0;\r\n            // add outline to weapon and save reference\r\n            this.outlines[key] = createOutline(weaponModel, this.outlineParams);\r\n            // add weapon to main body\r\n            this.attachWeapon(this.models[`weapon${side}`], side);\r\n        });\r\n\r\n        // Apply face settings\r\n        const { texture, faceTexture } = this.props.model;\r\n        const faceOverride = texture !== faceTexture;\r\n        const faceNumber = `face${this.props.model.face}`;\r\n        const { x: faceOffsetX, y: faceOffsetY } = faceOffsets[faceNumber];\r\n        if (faceOffsetX !== 0 || faceOffsetY !== 0) {\r\n            let offsetFix = { x: 0, y: 0 };\r\n            if (faceOverride) {\r\n                applyFaceTexture({ target: main, materialType, faceTexture });\r\n\r\n                const offsetFixBase = faceOffsetFixList[texture] || {\r\n                    x: 0,\r\n                    y: 0,\r\n                };\r\n                const offsetFixOverride = faceOffsetFixList[faceTexture] || {\r\n                    x: 0,\r\n                    y: 0,\r\n                };\r\n                offsetFix = {\r\n                    x: offsetFixOverride.x - offsetFixBase.x,\r\n                    y: offsetFixOverride.y - offsetFixBase.y,\r\n                };\r\n            }\r\n            const offset = {\r\n                x: faceOffsetX + offsetFix.x,\r\n                y: faceOffsetY + offsetFix.y,\r\n            };\r\n            applyFaceOffset({ target: main, offset });\r\n        }\r\n\r\n        // Add character to scene\r\n        this.floor.add(main);\r\n        // main model loading finished\r\n        this.props.setIsLoading(false);\r\n\r\n        // Add animation\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        this.addAnimationChain(main, aniCode, timeScale);\r\n    }\r\n\r\n    async componentDidUpdate(prevProps) {\r\n        // console.log(\"component did update\");\r\n\r\n        // // print updated props to console\r\n        // Object.keys(prevProps).forEach(key => {\r\n        //     const oldValue = prevProps[key];\r\n        //     const currentValue = this.props[key];\r\n        //     const subkeys = Object.keys(oldValue);\r\n        //     if (subkeys.length === 0 || typeof oldValue === \"string\") {\r\n        //         if (oldValue !== currentValue) {\r\n        //             console.log(\r\n        //                 `${key}: ${JSON.stringify(\r\n        //                     oldValue\r\n        //                 )} to ${JSON.stringify(currentValue)}`\r\n        //             );\r\n        //         }\r\n        //     } else {\r\n        //         subkeys.forEach(subkey => {\r\n        //             if (oldValue[subkey] !== currentValue[subkey]) {\r\n        //                 console.log(\r\n        //                     `${key}.${subkey}: ${JSON.stringify(\r\n        //                         oldValue[subkey]\r\n        //                     )} to ${JSON.stringify(currentValue[subkey])}`\r\n        //                 );\r\n        //             }\r\n        //         });\r\n        //     }\r\n        // });\r\n\r\n        // Update viewport\r\n        const viewport = this.props.viewport;\r\n        if (\r\n            prevProps.viewport.width !== viewport.width ||\r\n            prevProps.viewport.height !== viewport.height\r\n        ) {\r\n            const { width, height } = viewport;\r\n            this.renderer.setSize(width, height);\r\n            this.camera.aspect = width / height;\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n\r\n        // Capture\r\n        if (\r\n            this.props.capture.enable &&\r\n            prevProps.capture.enable !== this.props.capture.enable\r\n        ) {\r\n            this.chunks = [];\r\n            this.videoStream = this.canvas.captureStream(30);\r\n            if (!this.mediaRecorder) {\r\n                this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                    mimeType: this.props.capture.codec,\r\n                });\r\n                this.mediaRecorder.ondataavailable = event =>\r\n                    this.chunks.push(event.data);\r\n                this.mediaRecorder.onstop = () => {\r\n                    this.props.setIsLoading(false);\r\n                    const superBuffer = new Blob(this.chunks, {\r\n                        type: \"video/webm\",\r\n                    });\r\n                    var url = URL.createObjectURL(superBuffer);\r\n                    var a = document.createElement(\"a\");\r\n                    document.body.appendChild(a);\r\n                    a.style = \"display: none\";\r\n                    a.href = url;\r\n                    a.download = \"animation.webm\";\r\n                    a.click();\r\n                    window.URL.revokeObjectURL(url);\r\n                };\r\n            }\r\n            // disable user input\r\n            this.props.setIsLoading(true);\r\n            // play first animation and start capturing\r\n            this.aniIdx = 0;\r\n            this.mediaRecorder.start();\r\n        }\r\n\r\n        // update anti aliasing setting\r\n        if (prevProps.antiAliasing !== this.props.antiAliasing) {\r\n            // get current viewport size\r\n            const currentSize = new THREE.Vector2();\r\n            this.renderer.getSize(currentSize);\r\n            // switch renderer\r\n            this.renderer = this.props.antiAliasing\r\n                ? this.rendererAA\r\n                : this.rendererNoAA;\r\n            this.renderer.setSize(currentSize.x, currentSize.y);\r\n            // remove old canvas\r\n            this.mount.removeChild(this.canvas);\r\n            // Add new canvas\r\n            this.canvas = this.renderer.domElement;\r\n            this.mount.appendChild(this.canvas);\r\n        }\r\n\r\n        // Update main model\r\n        const { texture, faceTexture } = this.props.model;\r\n        const faceNumber = `face${this.props.model.face}`;\r\n        const faceOffset = faceOffsets[faceNumber];\r\n        if (prevProps.model.id !== this.props.model.id) {\r\n            this.props.setIsLoading(true);\r\n            const modelPath = getModelPath(this.props.model.id);\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            const { materialType } = this.props.model;\r\n            changeMaterial({ target: model, materialType });\r\n            // add outline\r\n            this.outlines.main = createOutline(model, this.outlineParams);\r\n\r\n            // remove weapons from old model if they exist\r\n            [\"Right\", \"Left\"].forEach(side => {\r\n                const key = `weapon${side}`;\r\n                if (prevProps.model[key]) {\r\n                    this.detachWeapon(side);\r\n                }\r\n            });\r\n            // remove and dispose old model\r\n            this.floor.remove(this.models.main);\r\n            disposeItem(this.models.main);\r\n            // add reference\r\n            this.models.main = model;\r\n\r\n            // Save initial position and rotation\r\n            model.initPos = model.position.clone();\r\n            model.initRot = model.rotation.clone();\r\n\r\n            // Add new model to scene\r\n            this.floor.add(model);\r\n\r\n            // Apply face to new model\r\n            if (texture !== faceTexture) {\r\n                applyFaceTexture({ target: model, materialType, faceTexture });\r\n            }\r\n\r\n            if (faceOffset.x !== 0 || faceOffset.y !== 0) {\r\n                applyFaceOffset({ target: model, offset: faceOffset });\r\n            }\r\n\r\n            // Add weapons to new model\r\n            [\"Right\", \"Left\"].forEach(side => {\r\n                const key = `weapon${side}`;\r\n                const weaponModel = this.models[key];\r\n                // if no weapon, return\r\n                if (!weaponModel) return;\r\n\r\n                this.attachWeapon(weaponModel, side);\r\n                // add outline if not exist\r\n                if (!this.outlines[key]) {\r\n                    this.outlines[key] = createOutline(\r\n                        weaponModel,\r\n                        this.outlineParams\r\n                    );\r\n                }\r\n            });\r\n\r\n            // Add animation to new model\r\n            const { code: aniCode, timeScale } = this.props.animation;\r\n            this.addAnimationChain(model, aniCode, timeScale);\r\n\r\n            this.props.setIsLoading(false);\r\n        } else {\r\n            // Update face when main model not changed\r\n            const faceTextureChanged =\r\n                prevProps.model.faceTexture !== faceTexture;\r\n            const faceChanged = prevProps.model.face !== this.props.model.face;\r\n            if (faceChanged || faceTextureChanged) {\r\n                const oldFaceNumber = `face${prevProps.model.face}`;\r\n                const faceNumber = `face${this.props.model.face}`;\r\n\r\n                const currentOffset = faceOffsets[faceNumber];\r\n                const oldOffset = faceOffsets[oldFaceNumber];\r\n\r\n                const dx = currentOffset.x - oldOffset.x;\r\n                const dy = currentOffset.y - oldOffset.y;\r\n\r\n                let faceOffsetFix = { x: 0, y: 0 };\r\n                if (faceTextureChanged) {\r\n                    const { materialType } = this.props.model;\r\n                    applyFaceTexture({\r\n                        target: this.models.main,\r\n                        materialType,\r\n                        faceTexture,\r\n                    });\r\n                    const oldFaceOffsetFix = faceOffsetFixList[\r\n                        prevProps.model.faceTexture\r\n                    ] || { x: 0, y: 0 };\r\n\r\n                    const currentFaceOffsetFix = faceOffsetFixList[\r\n                        faceTexture\r\n                    ] || { x: 0, y: 0 };\r\n\r\n                    faceOffsetFix = {\r\n                        x: currentFaceOffsetFix.x - oldFaceOffsetFix.x,\r\n                        y: currentFaceOffsetFix.y - oldFaceOffsetFix.y,\r\n                    };\r\n                }\r\n                const offset = {\r\n                    x: dx + faceOffsetFix.x,\r\n                    y: dy + faceOffsetFix.y,\r\n                };\r\n\r\n                applyFaceOffset({ target: this.models.main, offset });\r\n            }\r\n        }\r\n\r\n        // Update Weapons\r\n        [\"Right\", \"Left\"].forEach(async side => {\r\n            const key = `weapon${side}`;\r\n            // if not changed, return\r\n            if (prevProps.model[key] === this.props.model[key]) return;\r\n            // Update weapon\r\n            this.detachWeapon(side); // remove old weapon\r\n            disposeItem(this.models[key]); // dispose old weapon\r\n            // if current weapon is empty (weapon removed)\r\n            if (!this.props.model[key]) {\r\n                this.models[key] = null;\r\n                this.modelInfo[key] = \"\";\r\n                // remove reference to outline\r\n                this.outlines[key] = null;\r\n                return;\r\n            }\r\n            // load new weapon\r\n            this.props.setIsLoading(true);\r\n\r\n            this.modelInfo[key] = analyzeWeaponCode(this.props.model[key]);\r\n            const { modelPath, texturePath } = this.modelInfo[key];\r\n\r\n            // load new model\r\n            const model = await loadModel(modelPath);\r\n            this.models[key] = model;\r\n\r\n            // process new weapon\r\n            const { materialType } = this.props.model;\r\n            changeMaterial({\r\n                target: this.models[key],\r\n                materialType,\r\n                texturePath,\r\n            });\r\n\r\n            if (this.modelInfo[key].flipped) {\r\n                this.models[key].rotation.y = Math.PI;\r\n            }\r\n            // add outline to new weapon\r\n            this.outlines[key] = createOutline(model, this.outlineParams);\r\n            // add new weapon to main model\r\n            this.attachWeapon(model, side);\r\n\r\n            this.props.setIsLoading(false);\r\n        });\r\n\r\n        // Update material\r\n        if (prevProps.model.materialType !== this.props.model.materialType) {\r\n            const { materialType } = this.props.model;\r\n            changeMaterial({ target: this.models.main, materialType });\r\n        }\r\n\r\n        // Update animation\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        if (prevProps.animation.code !== aniCode) {\r\n            if (prevProps.animation.code) {\r\n                this.models.main.mixer.stopAllAction();\r\n\r\n                // Reset position and rotation to initial value\r\n                const { initPos, initRot } = this.models.main;\r\n                this.models.main.position.copy(initPos);\r\n                this.models.main.rotation.copy(initRot);\r\n\r\n                this.mixers = [];\r\n                this.animations = [];\r\n            }\r\n            // Add new animation\r\n            this.addAnimationChain(this.models.main, aniCode, timeScale);\r\n        }\r\n        //Update timeScale\r\n        else if (prevProps.animation.timeScale !== timeScale) {\r\n            if (this.mixers.length > 0) {\r\n                this.mixers.forEach(mixer => (mixer.timeScale = timeScale));\r\n            }\r\n        }\r\n\r\n        // Update background color\r\n        if (prevProps.bgColor !== this.props.bgColor) {\r\n            this.scene.background =\r\n                this.props.bgColor !== \"transparent\"\r\n                    ? new THREE.Color(this.props.bgColor)\r\n                    : null;\r\n        }\r\n\r\n        // Update outline\r\n        const {\r\n            enable: showOutline,\r\n            color: outlineColor,\r\n            size: outlineSize,\r\n            opacity: outlineOpacity,\r\n        } = this.props.outline;\r\n        // Update outline visibility\r\n        if (prevProps.outline.enable !== showOutline) {\r\n            this.outlineParams.enable = showOutline;\r\n\r\n            Object.keys(this.outlines).forEach(key => {\r\n                if (!this.outlines[key]) return;\r\n                this.outlines[key].forEach(\r\n                    outline => (outline.visible = showOutline)\r\n                );\r\n            });\r\n        }\r\n\r\n        // Update outline size\r\n        if (prevProps.outline.size !== outlineSize) {\r\n            this.outlineParams.size = outlineSize;\r\n\r\n            Object.keys(this.outlines).forEach(key => {\r\n                if (!this.outlines[key]) return;\r\n                this.outlines[key].forEach(outline =>\r\n                    changeOutlineSize(outline, outlineSize)\r\n                );\r\n            });\r\n        }\r\n\r\n        // Update outline opacity\r\n        if (prevProps.outline.opacity !== outlineOpacity) {\r\n            this.outlineParams.opacity = outlineOpacity;\r\n\r\n            Object.keys(this.outlines).forEach(key => {\r\n                if (!this.outlines[key]) return;\r\n                this.outlines[key].forEach(outline =>\r\n                    changeOpacity(outline, outlineOpacity)\r\n                );\r\n            });\r\n        }\r\n\r\n        // Update outline color\r\n        if (prevProps.outline.color !== outlineColor) {\r\n            this.outlineParams.color = outlineColor;\r\n            Object.keys(this.outlines).forEach(key => {\r\n                if (!this.outlines[key]) return;\r\n                this.outlines[key].forEach(outline =>\r\n                    changeOutlineColor(outline, outlineColor)\r\n                );\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.frameId);\r\n        disposeItem(this.scene);\r\n        this.mixers = null;\r\n        this.clock = null;\r\n        this.camera = null;\r\n        this.controls = null;\r\n        this.scene = null;\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n    }\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModelViewer;\r\n","import React, { lazy, Suspense, useContext, useCallback } from \"react\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"./context/SettingsContext\";\r\nimport ModelViewer from \"./ModelViewer\";\r\nimport \"./styles/Display.css\";\r\n\r\nimport { cameraPositions, controlsPositions } from \"./consts\";\r\n\r\nconst AniControl = lazy(() => import(\"./AniControl\"));\r\n\r\nfunction Display(props) {\r\n    const { viewport } = props;\r\n\r\n    const settings = useContext(SettingsContext);\r\n    const {\r\n        model: { id: modelId },\r\n        scene: { rotateSpeed, background: bgColor, initCameraPosition },\r\n        app: { showAniControl, antiAliasing },\r\n    } = settings;\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n    const toggleCapture = useCallback(() => {\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"capture\",\r\n            value: \"enable\",\r\n        };\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const type = modelId[0];\r\n\r\n    const defaultCameraPosition = cameraPositions[modelId]\r\n        ? cameraPositions[modelId]\r\n        : cameraPositions[type];\r\n\r\n    const cameraPosition = initCameraPosition\r\n        ? initCameraPosition.map((n, i) =>\r\n              isNaN(n) ? defaultCameraPosition[i] : n\r\n          )\r\n        : defaultCameraPosition;\r\n\r\n    const controlsPosition = controlsPositions[modelId]\r\n        ? controlsPositions[modelId]\r\n        : controlsPositions[type];\r\n\r\n    return (\r\n        <div className=\"Display\">\r\n            {showAniControl && (\r\n                <div className=\"Display-AniControl\">\r\n                    <Suspense fallback={null}>\r\n                        <AniControl value={settings.animation.timeScale} />\r\n                    </Suspense>\r\n                </div>\r\n            )}\r\n            <ModelViewer\r\n                setIsLoading={props.setIsLoading}\r\n                capture={settings.capture}\r\n                toggleCapture={toggleCapture}\r\n                viewport={viewport}\r\n                cameraPosition={cameraPosition}\r\n                controlsPosition={controlsPosition}\r\n                model={settings.model}\r\n                outline={settings.outline}\r\n                animation={settings.animation}\r\n                rotateSpeed={rotateSpeed}\r\n                bgColor={bgColor}\r\n                antiAliasing={antiAliasing}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Display;\r\n","import React, {\r\n    lazy,\r\n    Suspense,\r\n    useState,\r\n    useRef,\r\n    useEffect,\r\n    useContext,\r\n} from \"react\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\n\r\nimport Menu from \"@material-ui/icons/Menu\";\r\n\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport useStyles from \"./styles/MainPageStyles\";\r\n\r\nimport Display from \"./Display\";\r\nimport { SettingsContext } from \"./context/SettingsContext\";\r\nimport { setInitialSettings } from \"./helpers\";\r\n\r\nconst ControlPanel = lazy(() => import(\"./ControlPanel\"));\r\nconst SideBar = lazy(() => import(\"./SideBar\"));\r\n\r\nfunction MainPage({ location }) {\r\n    const classes = useStyles();\r\n\r\n    const [currentMode, setCurrentMode] = useState(\"model\");\r\n    const [sidebarOpen, toggleSidebarOpen] = useToggleState(true);\r\n    const [controlOpen, toggleControlOpen] = useToggleState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [initLoadDone, setInitLoadDone] = useState(false);\r\n    const {\r\n        app: { showSettings },\r\n    } = useContext(SettingsContext);\r\n\r\n    const viewerRef = useRef();\r\n    const [viewport, setViewport] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n    });\r\n\r\n    useEffect(() => {\r\n        const params = location.pathname.split(\"/\");\r\n        setInitialSettings(params);\r\n        setInitLoadDone(true);\r\n\r\n        window.addEventListener(\"resize\", updateViewportSize);\r\n\r\n        return function () {\r\n            window.removeEventListener(\"resize\", updateViewportSize);\r\n        };\r\n    }, [location.pathname]);\r\n\r\n    const updateViewportSize = () => {\r\n        const height = viewerRef.current.clientHeight;\r\n        const width = viewerRef.current.clientWidth;\r\n        setViewport({ width, height });\r\n    };\r\n\r\n    const openControl = mode => {\r\n        toggleControlOpen();\r\n        setCurrentMode(mode);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isLoading && <div className={classes.loadingMsg}>Loading...</div>}\r\n            <div className={classes.root}>\r\n                <Suspense fallback={null}>\r\n                    <CssBaseline />\r\n                    <ControlPanel\r\n                        mode={currentMode}\r\n                        open={controlOpen}\r\n                        toggleControlOpen={toggleControlOpen}\r\n                    />\r\n                    {initLoadDone && showSettings && (\r\n                        <>\r\n                            <button\r\n                                onClick={toggleSidebarOpen}\r\n                                className={classes.openSidebarButton}\r\n                            >\r\n                                <Menu />\r\n                            </button>\r\n\r\n                            <SideBar\r\n                                toggleSidebarOpen={toggleSidebarOpen}\r\n                                open={sidebarOpen}\r\n                                openControl={openControl}\r\n                            />\r\n                        </>\r\n                    )}\r\n                </Suspense>\r\n                {initLoadDone && (\r\n                    <main ref={viewerRef} className={classes.content}>\r\n                        <Display\r\n                            setIsLoading={setIsLoading}\r\n                            viewport={viewport}\r\n                        />\r\n                    </main>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\r\n\r\nimport { SettingsProvider } from \"./context/SettingsContext\";\r\n\r\nimport { Route, HashRouter } from \"react-router-dom\";\r\nimport MainPage from \"./MainPage\";\r\n\r\nimport \"./styles/App.css\";\r\n\r\nfunction App() {\r\n    return (\r\n        <SettingsProvider>\r\n            <HashRouter>\r\n                <Route render={routeProps => <MainPage {...routeProps} />} />\r\n            </HashRouter>\r\n        </SettingsProvider>\r\n    );\r\n}\r\n\r\nexport const fbxSource = process.env.PUBLIC_URL;\r\n\r\nexport default App;\r\n","const faceOffset = {\r\n    c100015_04: { x: 0.05, y: -0.08 }, // Chelle\r\n    c110267_01: { x: 0.08, y: -0.03 }, // Hawk\r\n    c110050_02: { x: 0.07, y: 0.13 }, // HBerserker\r\n    c110291_01: { x: 0.07, y: 0.14 }, // Marth\r\n    c110354_01: { x: 0.07, y: 0.01 }, // Mega Man\r\n    c110345_01: { x: 0.08, y: -0.13 }, // Mitsuhide\r\n    c110266_01: { x: 0.01, y: 0.03 }, // Naveed\r\n    c110365_01: { x: 0.043, y: -0.0625 }, // Nevin\r\n    c110346_01: { x: 0.07, y: 0.08 }, // Nobunaga\r\n    c110366_01: { x: 0.043, y: -0.0625 }, // Pinon\r\n    c110299_02: { x: 0.07, y: 0.08 }, // RXZ\r\n    c110360_01: { x: 0.07, y: 0.14 }, // Tiki\r\n    c110307_01: { x: 0.08, y: -0.03 }, // Victor\r\n    c110322_01: { x: 0.043, y: 0.08 }, // Zhu Bajie\r\n    c110356_01: { x: 0.07, y: 0.08 }, // Gauld\r\n    c110300_01: { x: 0.07, y: -0.1 }, // Pipple\r\n    c110344_01: { x: 0.07, y: -0.02 }, // Yuya\r\n    c110053_03: { x: 0.043, y: -0.0625 }, // INefi\r\n    c110368_01: { x: 0.043, y: -0.0625 }, // Meene\r\n    c110367_01: { x: 0.043, y: -0.0625 }, // Ilia\r\n    c110003_02: { x: 0.043, y: -0.0625 }, // Gun Joe\r\n    c110270_02: { x: 0.043, y: -0.0625 }, // HMelsa\r\n    c110341_03: { x: 0.043, y: -0.0625 }, // Hakasha\r\n};\r\nexport default faceOffset;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nfunction useToggleState(initVal = false) {\r\n    const [state, setState] = useState(initVal);\r\n    const toggleState = useCallback(() => {\r\n        setState(state => !state);\r\n    }, [setState]);\r\n    return [state, toggleState];\r\n}\r\n\r\nexport default useToggleState;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_WIDTH, DRAWER_BGCOLOR } from \"../consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst drawerWidth = DRAWER_WIDTH;\r\nconst drawerBG = DRAWER_BGCOLOR;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: \"block\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        overflowY: \"scroll\",\r\n    },\r\n    drawerPaper: {\r\n        alignItems: \"center\",\r\n        backgroundColor: drawerBG,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        width: drawerWidth,\r\n        \"& button\": {\r\n            marginBottom: \"0.2rem\",\r\n        },\r\n    },\r\n    content: {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        padding: 0,\r\n    },\r\n    openSidebarButton: {\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        margin: \"2rem\",\r\n        opacity: \"0.5\",\r\n        borderRadius: \"0.25rem\",\r\n        transition: \"0.5s all ease-in-out\",\r\n        cursor: \"pointer\",\r\n        \"&:hover\": {\r\n            opacity: \"1\",\r\n        },\r\n    },\r\n    loadingMsg: {\r\n        position: \"absolute\",\r\n        zIndex: \"9999\",\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        color: \"white\",\r\n        fontSize: \"x-large\",\r\n        backgroundColor: \"rgba(0,0,0,0.5)\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","module.exports = __webpack_public_path__ + \"static/media/Rose-Petals.1911e778.svg\";","export const DRAWER_WIDTH = \"15rem\";\r\nexport const DRAWER_BGCOLOR = \"#330000\";\r\n\r\nexport const baseUrl = \"https://dgk3593.github.io/dl-model/#/\";\r\n\r\nconst defaultAni = \"MWM_CMN+CMN_MWM_03\";\r\n\r\nexport const defaultSettings = {\r\n    model: {\r\n        materialType: \"Basic\",\r\n        id: \"c100001_01\",\r\n        texture: \"c100001_01\",\r\n        faceTexture: \"c100001_01\",\r\n        face: 2,\r\n        weaponRight: \"\",\r\n        weaponLeft: \"\",\r\n    },\r\n    materialParams: {},\r\n    scene: {\r\n        rotateSpeed: 0,\r\n        background: \"#cccccc\",\r\n        initCameraPosition: null,\r\n    },\r\n    animation: {\r\n        code: defaultAni,\r\n        timeScale: 1,\r\n    },\r\n    app: {\r\n        sideContent: \"settings\",\r\n        showSettings: true,\r\n        showAniControl: true,\r\n        antiAliasing: false,\r\n        capture: false,\r\n    },\r\n    outline: {\r\n        enable: true,\r\n        size: 5, // 1 -> 10\r\n        color: \"#000000\",\r\n        opacity: 1, // 0.1 -> 10%, 1-> 100%\r\n    },\r\n    capture: {\r\n        enable: false,\r\n        supportedCodecs: [],\r\n        codec: \"\",\r\n    },\r\n};\r\n\r\nexport const initKey = {\r\n    id: { group: \"model\", key: \"id\" },\r\n    ft: { group: \"model\", key: \"faceTexture\" },\r\n    f: { group: \"model\", key: \"face\" },\r\n    wr: { group: \"model\", key: \"weaponRight\" },\r\n    wl: { group: \"model\", key: \"weaponLeft\" },\r\n    bg: { group: \"scene\", key: \"background\" },\r\n    cam: { group: \"scene\", key: \"initCameraPosition\" },\r\n    ts: { group: \"animation\", key: \"timeScale\" },\r\n    showAC: { group: \"app\", key: \"showAniControl\" },\r\n    showSettings: { group: \"app\", key: \"showSettings\" },\r\n    showOutline: { group: \"outline\", key: \"enable\" },\r\n    AA: { group: \"app\", key: \"antiAliasing\" },\r\n    rot: { group: \"scene\", key: \"rotateSpeed\" },\r\n    cc: { group: \"animation\", key: \"code\" },\r\n};\r\n\r\nexport const MATERIALS = [\"Basic\", \"Toon\", \"Lambert\", \"Phong\"];\r\n\r\nexport const WEAPON_CODE = {\r\n    Sword: \"SWD\",\r\n    Blade: \"KAT\",\r\n    Dagger: \"DAG\",\r\n    Axe: \"AXE\",\r\n    Lance: \"LAN\",\r\n    Bow: \"BOW\",\r\n    Wand: \"ROD\",\r\n    Staff: \"CAN\",\r\n    Manacaster: \"GUN\",\r\n};\r\n\r\nexport const WEAPON_LIST = [\r\n    \"Sword\",\r\n    \"Blade\",\r\n    \"Dagger\",\r\n    \"Axe\",\r\n    \"Lance\",\r\n    \"Bow\",\r\n    \"Wand\",\r\n    \"Staff\",\r\n    \"Manacaster\",\r\n];\r\n\r\nexport const GENDER_CODE = {\r\n    Male: 21,\r\n    Female: 23,\r\n};\r\n\r\nexport const COMBO_LENGTH = {\r\n    Axe: 5,\r\n    Bow: 6,\r\n    Staff: 5,\r\n    Dagger: 6,\r\n    Blade: 5,\r\n    Lance: 5,\r\n    Wand: 5,\r\n    Sword: 5,\r\n};\r\n\r\nexport const FS_LENGTH = {\r\n    Axe: 3,\r\n    Bow: 3,\r\n    Staff: 5,\r\n    Dagger: 3,\r\n    Blade: 3,\r\n    Lance: 4,\r\n    Wand: 3,\r\n    Sword: 3,\r\n};\r\n\r\nexport const FILTERS = {\r\n    rarity: [\"3\", \"4\", \"5\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const WEAPON_FILTERS = {\r\n    rarity: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\r\n    element: [\"Flame\", \"Water\", \"Wind\", \"Light\", \"Shadow\", \"None\"],\r\n    weapon: [\r\n        \"Sword\",\r\n        \"Blade\",\r\n        \"Dagger\",\r\n        \"Axe\",\r\n        \"Lance\",\r\n        \"Bow\",\r\n        \"Wand\",\r\n        \"Staff\",\r\n        \"Manacaster\",\r\n    ],\r\n};\r\n\r\nexport const spFaceTextures = {\r\n    c110300_01: \"ec110300_01\",\r\n};\r\n\r\nexport const commonBG = {\r\n    green: \"#00ff00\",\r\n    black: \"#000000\",\r\n    grey: \"#cccccc\",\r\n    white: \"#ffffff\",\r\n};\r\n\r\nexport const CAM_PARAMS = {\r\n    angle: 45,\r\n    far: 300,\r\n    near: 0.01,\r\n};\r\n\r\nexport const cameraPositions = {\r\n    c: [0, 0.5, 1.5],\r\n    d: [3, 0.5, 6],\r\n\r\n    c100034_01: [0, 0.5, 1.75],\r\n    d210078_01: [3, 3, 20],\r\n    d210114_01: [3, 3, 20],\r\n\r\n    smith: [1, 1, 2],\r\n};\r\n\r\nexport const controlsPositions = {\r\n    c: [0, 0.5, 0],\r\n    d: [0, 1, 0],\r\n\r\n    d210078_01: [0, 3, 0],\r\n    d210114_01: [0, 3, 0],\r\n\r\n    smith: [0, 0.5, 0],\r\n};\r\n\r\nexport const faceOffsets = {\r\n    face1: { x: 2, y: 1 },\r\n    face2: { x: 0, y: 0 },\r\n    face3: { x: 1, y: 0 },\r\n    face4: { x: 2, y: 0 },\r\n    face5: { x: 3, y: 0 },\r\n    face6: { x: 0, y: -1 },\r\n    face7: { x: 1, y: -1 },\r\n    face8: { x: 2, y: -1 },\r\n    face9: { x: 3, y: -1 },\r\n};\r\n\r\nexport const videoCodecs = [\r\n    \"video/webm;codecs=h264\",\r\n    \"video/webm;codecs=vp9\",\r\n    \"video/webm;codecs=vp8\",\r\n    \"video/webm\",\r\n];\r\n\r\nexport const asciiSet = [\r\n    \" .:-=+*#%@\",\r\n    \" .'`^\\\",:;Il!i~+_-?][}{1)(|/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$\",\r\n];\r\n","import * as THREE from \"three\";\r\nimport { fbxSource } from \"./App\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader\";\r\nimport { callbackOnPotentialArray, isSheath } from \"./helpers\";\r\n\r\nexport const loadModel = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new FBXLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const loadTexture = url => {\r\n    return (\r\n        url &&\r\n        new Promise(resolve => {\r\n            new THREE.TextureLoader().load(url, resolve);\r\n        })\r\n    );\r\n};\r\n\r\nexport const getModelPath = id => `${fbxSource}/fbx/${id}/${id}.fbx`;\r\n\r\nexport const getTexturePath = id => `${fbxSource}/fbx/${id}/${id}.png`;\r\n\r\nexport const analyzeWeaponCode = code => {\r\n    const flipped = code.endsWith(\"b\");\r\n    const weaponCode = code.substring(0, code.length - 1);\r\n    const modelPath = getModelPath(weaponCode);\r\n    const texturePath = getTexturePath(weaponCode);\r\n\r\n    return {\r\n        modelPath,\r\n        texturePath,\r\n        flipped,\r\n        isSheath: isSheath(weaponCode),\r\n    };\r\n};\r\n\r\nexport const disposeItem = item => {\r\n    if (!item) return;\r\n\r\n    const disposedList = new Set();\r\n\r\n    const notDisposed = object => !disposedList.has(object.uuid);\r\n\r\n    const needToDispose = object => object && notDisposed(object);\r\n\r\n    const disposeObject = object => {\r\n        disposedList.add(object.uuid);\r\n        object.dispose();\r\n    };\r\n\r\n    const dispose = object => {\r\n        if (needToDispose(object)) disposeObject(object);\r\n    };\r\n\r\n    item.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        // dispose material\r\n        callbackOnPotentialArray(child.material, mat => {\r\n            if (mat.map) dispose(mat.map);\r\n            dispose(mat);\r\n        });\r\n        // dispose geometry\r\n        dispose(child.geometry);\r\n    });\r\n};\r\n\r\nconst createNewMaterial = (materialType, params) => {\r\n    const matType = `Mesh${materialType}Material`;\r\n    return new THREE[matType](params);\r\n};\r\n\r\nexport const changeMaterial = ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    texturePath,\r\n}) => {\r\n    if (!target) return;\r\n    target.traverse(child => {\r\n        if (!child.isMesh || child.name === \"outline\") return;\r\n\r\n        const checkParam = `isMesh${materialType}Material`;\r\n        const material = child.material;\r\n\r\n        if (Array.isArray(material)) {\r\n            if (material.every(mat => mat[checkParam]) && !texturePath) return;\r\n            const changed = new Set();\r\n\r\n            material.forEach((mat, i) => {\r\n                if (changed.has(mat.uuid)) return;\r\n\r\n                const texture = texturePath\r\n                    ? new THREE.TextureLoader().load(texturePath)\r\n                    : material[i].map;\r\n\r\n                texture.encoding = THREE.sRGBEncoding;\r\n                const materialParams = {\r\n                    map: texture,\r\n                    skinning: true,\r\n                };\r\n                const newMaterial = createNewMaterial(\r\n                    materialType,\r\n                    materialParams\r\n                );\r\n                if (texturePath && material[i].map) {\r\n                    material.map.dispose();\r\n                }\r\n                material[i].dispose();\r\n                child.material[i] = newMaterial;\r\n\r\n                changed.add(mat.uuid);\r\n            });\r\n        } else {\r\n            if (material[checkParam] && !texturePath) return;\r\n            const texture = texturePath\r\n                ? new THREE.TextureLoader().load(texturePath)\r\n                : material.map;\r\n\r\n            texture.encoding = THREE.sRGBEncoding;\r\n            const materialParams = {\r\n                map: texture,\r\n                skinning: true,\r\n            };\r\n            const newMaterial = createNewMaterial(materialType, materialParams);\r\n\r\n            if (texturePath && material.map) {\r\n                material.map.dispose();\r\n            }\r\n            material.dispose();\r\n\r\n            child.material = newMaterial;\r\n        }\r\n    });\r\n};\r\n\r\nconst createOutlineMaterial = ({ size, color, opacity }) => {\r\n    const newMaterial = new THREE.MeshToonMaterial({\r\n        color,\r\n        opacity,\r\n        side: THREE.BackSide,\r\n        transparent: true,\r\n        skinning: true,\r\n    });\r\n    newMaterial.onBeforeCompile = shader => {\r\n        const token = \"#include <begin_vertex>\";\r\n        const customTransform = `\r\n            vec3 transformed = position + objectNormal*${size * 0.0005};\r\n        `;\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            token,\r\n            customTransform\r\n        );\r\n    };\r\n    return newMaterial;\r\n};\r\n\r\n// replace material of an object\r\nconst replaceMaterial = (object, newMaterial) => {\r\n    // dispose old material\r\n    callbackOnPotentialArray(object.material, obj => {\r\n        if (obj.map) obj.map.dispose();\r\n        obj.dispose();\r\n    });\r\n    // apply new material\r\n    if (Array.isArray(object.material)) {\r\n        object.material = new Array(object.material.length).fill(newMaterial);\r\n    } else {\r\n        object.material = newMaterial;\r\n    }\r\n};\r\n\r\n// change opacity of an object\r\nexport const changeOpacity = ({ material }, opacity) => {\r\n    callbackOnPotentialArray(material, obj => {\r\n        obj.opacity = opacity;\r\n    });\r\n};\r\n\r\n// update outline shader to change size\r\nconst updateOutlineShader = (material, size) => {\r\n    // Hacky way to force shader recompilation, needs fixing !!!!!!!!!!!!!!!!!!\r\n    material.fog = !material.fog;\r\n    material.needsUpdate = true;\r\n\r\n    material.onBeforeCompile = shader => {\r\n        const token = \"#include <begin_vertex>\";\r\n        const customTransform = `\r\n                vec3 transformed = position + objectNormal*${size * 0.0005};\r\n            `;\r\n        shader.vertexShader = shader.vertexShader.replace(\r\n            token,\r\n            customTransform\r\n        );\r\n    };\r\n    setTimeout(() => {\r\n        material.fog = !material.fog;\r\n        material.needsUpdate = true;\r\n    }, 100); // Sometimes doesn't work with 0 delay\r\n};\r\n\r\n// change size of outline\r\nexport const changeOutlineSize = ({ material }, size) => {\r\n    if (Array.isArray(material)) {\r\n        const updated = new Set();\r\n        material.forEach(m => {\r\n            if (updated.has(m.uuid)) return;\r\n\r\n            updateOutlineShader(m, size);\r\n            updated.add(m.uuid);\r\n        });\r\n    } else {\r\n        updateOutlineShader(material, size);\r\n    }\r\n};\r\n\r\n// Change color of outline\r\nexport const changeOutlineColor = ({ material }, color) => {\r\n    if (Array.isArray(material)) {\r\n        const updated = new Set();\r\n        material.forEach(m => {\r\n            if (updated.has(m.uuid)) return;\r\n\r\n            m.color = new THREE.Color(color);\r\n            updated.add(m.uuid);\r\n        });\r\n    } else {\r\n        material.color = new THREE.Color(color);\r\n    }\r\n};\r\n\r\n// Add outline to object and return reference to outlines\r\nexport const createOutline = (object, params) => {\r\n    if (!object) return;\r\n    const outlines = []; // return value\r\n    object.traverse(child => {\r\n        if (!child.isMesh) return;\r\n\r\n        const outline = child.clone();\r\n        outline.name = \"outline\";\r\n        outline.visible = params.enable;\r\n\r\n        outlines.push(outline);\r\n        const newMaterial = createOutlineMaterial(params);\r\n        replaceMaterial(outline, newMaterial);\r\n\r\n        if (child.isSkinnedMesh) {\r\n            outline.bind(child.skeleton, child.bindMatrix);\r\n        }\r\n        child.parent.add(outline);\r\n    });\r\n    return outlines;\r\n};\r\n\r\nexport const applyFaceOffset = ({ target, offset }) => {\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n\r\n        const faceGroups = child.geometry.groups.filter(k => k.count < 1000);\r\n        if (faceGroups.length !== 2) return;\r\n\r\n        if (offset.x !== 0 || offset.y !== 0) {\r\n            const start = Math.min(faceGroups[0].start, faceGroups[1].start);\r\n            const end = Math.max(\r\n                faceGroups[0].start + faceGroups[0].count,\r\n                faceGroups[1].start + faceGroups[1].count\r\n            );\r\n\r\n            const uv = child.geometry.attributes.uv;\r\n            for (let i = start; i < end; i++) {\r\n                const u = uv.getX(i) + 0.25 * offset.x;\r\n                const v = uv.getY(i) + 0.25 * offset.y;\r\n                uv.setXY(i, u, v);\r\n            }\r\n            uv.needsUpdate = true;\r\n        }\r\n    });\r\n};\r\n\r\nexport const applyFaceTexture = ({\r\n    target,\r\n    materialType = \"Basic\",\r\n    faceTexture,\r\n}) => {\r\n    const faceTexturePath = getTexturePath(faceTexture);\r\n    const texture = new THREE.TextureLoader().load(faceTexturePath);\r\n    texture.encoding = THREE.sRGBEncoding;\r\n    const materialParams = {\r\n        map: texture,\r\n        skinning: true,\r\n    };\r\n    const faceMaterial = createNewMaterial(materialType, materialParams);\r\n    target.traverse(child => {\r\n        if (child.name !== \"mBodyAll\" || child.geometry.groups.length !== 3)\r\n            return;\r\n\r\n        const faceGroups = child.geometry.groups.filter(k => k.count < 1000);\r\n        if (faceGroups.length !== 2) return;\r\n\r\n        const materialIndexes = faceGroups.map(group => group.materialIndex);\r\n        materialIndexes.forEach(i => (child.material[i] = faceMaterial));\r\n    });\r\n};\r\n\r\n// Chain Code is invalid if starts with the character \"+\"\r\nexport const analyzeChainCode = code => {\r\n    if (!code) return [\"\", \"\"];\r\n    const aniCodes = code.split(\">\");\r\n    const nAni = aniCodes.length;\r\n    const fileList = [];\r\n    const animationList = [];\r\n    for (let i = 0; i < nAni; i++) {\r\n        let timeScale = 1,\r\n            repetitions = 1,\r\n            fileIdx = null,\r\n            aniName = null,\r\n            fileName = null,\r\n            details,\r\n            currentAni = {};\r\n        const currentParts = aniCodes[i].split(\"+\");\r\n        const fromModelFile = currentParts.length === 1;\r\n        if (fromModelFile) {\r\n            details = currentParts[0];\r\n        } else {\r\n            [fileName, details] = currentParts;\r\n            fileIdx = fileList.length - 1;\r\n        }\r\n        if (fileName) {\r\n            fileIdx = fileList.length;\r\n            fileList.push(fileName);\r\n        }\r\n        if (details.includes(\"&\")) {\r\n            const [name, ...settings] = details.split(\"&\");\r\n            aniName = name;\r\n            for (let setting of settings) {\r\n                const [key, value] = setting.split(\"=\");\r\n                if (key === \"ts\") {\r\n                    timeScale = parseFloat(value);\r\n                }\r\n                if (key === \"r\") {\r\n                    repetitions = value === \"inf\" ? Infinity : parseInt(value);\r\n                }\r\n            }\r\n        } else {\r\n            aniName = details;\r\n        }\r\n        currentAni = {\r\n            fileIdx,\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n        };\r\n        animationList.push(currentAni);\r\n    }\r\n    return [fileList, animationList];\r\n};\r\n\r\nexport const chainCodeToList = (code, name) => {\r\n    const [fileList, animationList] = analyzeChainCode(code);\r\n    const length = animationList.length;\r\n    const output = animationList.map((ani, i) => {\r\n        const { fileIdx, aniName, timeScale, repetitions } = ani;\r\n        const partName = name.concat(length > 1 ? `#${i + 1}` : \"\");\r\n        return {\r\n            name: partName,\r\n            fileName: fileList[fileIdx],\r\n            aniName,\r\n            timeScale,\r\n            repetitions,\r\n            id: uuid(),\r\n        };\r\n    });\r\n    return output;\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}