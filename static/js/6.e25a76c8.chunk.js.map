{"version":3,"sources":["helpers/downloadURI.js","helpers/downloadBlob.js","components/viewers/BasicViewer.js","components/viewers/AniViewer.js"],"names":["downloadURI","uri","fileName","a","document","createElement","style","display","href","download","body","appendChild","click","removeChild","downloadBlob","blob","url","URL","createObjectURL","window","revokeObjectURL","BasicViewer","addFullScreenListener","fscreen","fullscreenEnabled","toggleFullScreen","fullscreenElement","exitFullscreen","requestFullscreen","mount","addEventListener","removeFullScreenListener","removeEventListener","disableInput","msg","props","setLoadingMsg","enableInput","initialize","initScene","outlines","models","modelInfo","loadMainModel","afterMainModelLoad","viewport","width","innerWidth","height","innerHeight","clock","THREE","scene","background","camera","CAM_PARAMS","angle","near","far","cameraPosition","position","set","updateProjectionMatrix","lights","addAllLights","pixelRatio","rendererAA","antialias","alpha","outputEncoding","setPixelRatio","rendererNoAA","AAEnabled","antiAliasing","_AA","renderer","finalRenderer","setSize","canvas","domElement","controls","OrbitControls","controlsPosition","target","update","animate","modelId","model","id","main","modelPath","getModelPath","loadModel","basicMainProcessing","addLight","light","enable","params","newLight","createLight","add","push","forEach","removeLight","remove","removeAllLights","addToScene","initTexture","texture","defaultTexture","getDefaultTexture","split","source","name","textureSource","textureName","texturePath","fbxSource","mainModel","replaceTexture","oldTexture","applyModelMod","modCode","mod","applyMod","removeEffects","disableFrustumCulling","materialType","matType","isBlade","analyzeWeaponCode","changeMaterial","forced","applyNewModelMat","outlineParams","outline","createOutline","updateViewer","prev","current","updateExport","export","updateCommon","updateModel","otherUpdate","updateViewport","updateOutline","updateMaterial","material","updateLights","updateAscii","ascii","updateCamera","updateControl","updatePixelRatio","AA","updateMainModel","aspect","setVideoBackgroundSize","disposeMainModel","dispose3dObject","replaceMainModel","idChanged","beforeMainModelUpdate","afterMainModelUpdate","updateOutlineParams","Object","values","flat","applyOutlineSettings","updatedKeys","keys","filter","key","length","Map","map","matParams","updateMatParams","prevParams","useTexture","matTypeChanged","type","some","showAscii","charSet","color","bgColor","invert","AsciiEffect","effect","exportModel","onExportFinish","cameraStream","screenWidth","screenAspectRatio","getVideoTracks","getSettings","camWidth","camAspectRatio","aspectRatio","videoWidth","videoHeight","video","useCameraAsBackground","navigator","mediaDevices","getUserMedia","audio","facingMode","rearCameraStream","assign","srcObject","autoplay","playsinline","videoTexture","minFilter","rotateModel","dt","rotateSpeed","Math","PI","rotateY","updateScene","getScreenshot","screenshot","querySelector","toDataURL","getDateTimeString","frameId","requestAnimationFrame","getDelta","visibilityState","render","tmp","this","finishedInit","console","log","logUpdate","stop","cancelAnimationFrame","renderLists","dispose","mixer","enabled","newCanvas","allParams","paramList","getParamsList","filterObject","bg","_canvas","oldCanvas","ref","el","PureComponent","AniViewer","saveMainModelInitState","addAnimation","updateAnimation","animation","capture","captureAnimation","userData","initPos","clone","initRot","rotation","resetFace","eyeIdx","mouthIdx","beforeAddAni","aniCode","code","timeScale","aniList","analyzeChainCode","nAni","_aniIdx","playNextAni","aniSettings","loadAnimations","animations","aniIdx","removeAnimation","stopAllAction","copy","mediaRecorder","onCaptureFinish","newIdx","chunks","videoStream","captureStream","codec","MediaRecorder","mimeType","ondataavailable","event","data","onstop","format","superBuffer","Blob","beforeCaptureAnimation","start","faceChanges","time","faceChangeTime","shift","ani","action","clipAction","currentAniSettings","repetitions","currentClipDuration","duration","setLoop","getFaceChangesQueue","change","setTime","play"],"mappings":"+GAKe,SAASA,EAAYC,EAAKC,GACrC,IAAMC,EAAIC,SAASC,cAAc,KACjCF,EAAEG,MAAMC,QAAU,OAClBJ,EAAEK,KAAOP,EACTE,EAAEM,SAAWP,EAEbE,SAASM,KAAKC,YAAYR,GAC1BA,EAAES,QAEFR,SAASM,KAAKG,YAAYV,GAd9B,mC,iCCKe,SAASW,EAAaC,EAAMb,GACvC,IAAMc,EAAMC,IAAIC,gBAAgBH,GAE1BZ,EAAIC,SAASC,cAAc,KACjCF,EAAEG,MAAMC,QAAU,OAClBJ,EAAEK,KAAOQ,EACTb,EAAEM,SAAWP,EACbE,SAASM,KAAKC,YAAYR,GAC1BA,EAAES,QAEFO,OAAOF,IAAIG,gBAAgBJ,GAC3BZ,SAASM,KAAKG,YAAYV,GAhB9B,mC,yMC4CMkB,E,4MA+CFC,sBAAwB,WAAO,IAAD,EAC1B,GAAKC,IAAQC,kBAAb,CAEA,IAAMC,EAAmB,WAChBF,IAAQG,kBAKbH,IAAQI,iBAJJJ,IAAQK,kBAAkB,EAAKC,QAMvC,YAAKA,aAAL,SAAYC,iBAAiB,YAAY,kBAAML,OAC/C,EAAKM,yBAA2B,kCAC5B,EAAKF,aADuB,aAC5B,EAAYG,oBAAoB,YAAY,kBACxCP,U,EAQZQ,aAAe,SAAAC,GAAG,OAAI,EAAKC,MAAMC,cAAcF,GAAO,e,EAKtDG,YAAc,kBAAM,EAAKF,MAAMC,cAAc,K,EAK7CE,W,sBAAa,sBAAAnC,EAAA,6DACT,EAAK8B,eAEL,EAAKM,YAEL,EAAKC,SAAW,GAChB,EAAKC,OAAS,GACd,EAAKC,UAAY,GAPR,SAQH,EAAKC,gBARF,uBASH,EAAKC,qBATF,OAWT,EAAKP,cAXI,4C,EAiBbO,mBAAqB,a,EAKrBL,UAAY,WAAO,IAAD,IAEd,EAAKM,SAAW,EAAKV,MAAMU,UAAY,CACnCC,MAAO3B,OAAO4B,WACdC,OAAQ7B,OAAO8B,aAInB,EAAKC,MAAQ,IAAIC,QAGjB,EAAKC,MAAQ,IAAID,QACjB,EAAKE,WAAa,EAAKlB,MAAMkB,WAG7B,EAAKC,OAAS,IAAIH,oBACdI,IAAWC,MACX,EAAKX,SAASC,MAAQ,EAAKD,SAASG,OACpCO,IAAWE,KACXF,IAAWG,KAKf,EAAKC,eAAiB,EAAKxB,MAAMwB,gBAAkB,CAAC,EAAG,EAAG,KAC1D,IAAKL,OAAOM,UAASC,IAArB,oBAA4B,EAAKF,iBACjC,EAAKL,OAAOQ,yBAGZ,IAAQC,EAAW,EAAK5B,MAAhB4B,OACR,EAAKC,aAAaD,GAGlB,IAAQE,EAAe,EAAK9B,MAApB8B,WACR,EAAKC,WAAa,IAAIf,gBAAoB,CACtCgB,WAAW,EACXC,OAAO,IAGX,EAAKF,WAAWG,eAAiBlB,eACjC,EAAKe,WAAWI,cAAcL,GAE9B,EAAKM,aAAe,IAAIpB,gBAAoB,CACxCgB,WAAW,EACXC,OAAO,IAGX,EAAKG,aAAaF,eAAiBlB,eACnC,EAAKoB,aAAaD,cAAcL,GAEhC,IAAMO,EAAY,EAAKrC,MAAMsC,aAC7B,EAAKC,IAAMF,EAEX,EAAKG,SAAWH,EAAY,EAAKN,WAAa,EAAKK,aAEnD,EAAKK,cAAgB,EAAKD,SAC1B,MAA0B,EAAKxC,MAAMU,SAA7BC,EAAR,EAAQA,MAAOE,EAAf,EAAeA,OACf,EAAK4B,cAAcC,QAAQ/B,EAAOE,GAElC,IAAM8B,EAAS,EAAKF,cAAcG,WAClC,EAAKD,OAASA,EAGd,EAAKE,SAAW,IAAIC,IAAc,EAAK3B,OAAQ,EAAKzB,OAIpD,EAAKqD,iBAAmB,EAAK/C,MAAM+C,kBAAoB,CAAC,EAAG,EAAG,IAC9D,IAAKF,SAASG,QAAOtB,IAArB,oBAA4B,EAAKqB,mBACjC,EAAKF,SAASI,SAEd,EAAKC,W,EAMT1C,c,sBAAgB,gCAAAxC,EAAA,6DACNmF,EAAU,EAAKnD,MAAMoD,MAAMC,GACjC,EAAK9C,UAAU+C,KAAOH,EAEhBI,EAAYC,YAAaL,GAJnB,SAKQM,YAAUF,GALlB,cAKNH,EALM,OAMZ,EAAK9C,OAAOgD,KAAOF,EANP,SAQN,EAAKM,sBARC,6E,EAoChBC,SAAW,SAAAC,GAC2BA,EAA1BP,GAAR,IAAYQ,EAAsBD,EAAtBC,OAAWC,EAAvB,YAAkCF,EAAlC,iBACA,GAAKC,EAAL,CAEA,IAAME,EAAWC,YAAYF,GAE7B,EAAK7C,MAAMgD,IAAIF,GACf,EAAKnC,OAAOsC,KAAKH,K,EAOrBlC,aAAe,SAAAD,GAIX,EAAKA,OAAS,GACdA,EAAOuC,QAAQ,EAAKR,W,EAOxBS,YAAc,SAAAR,GAAK,OAAI,EAAK3C,MAAMoD,OAAOT,I,EAKzCU,gBAAkB,kBAAM,EAAK1C,OAAOuC,QAAQ,EAAKC,c,EAMjDG,WAAa,SAAAnB,GAAK,uBAAI,EAAKnC,aAAT,aAAI,EAAYgD,IAAIb,I,EAKtCoB,Y,sBAAc,kDAAAxG,EAAA,2DACuB,EAAKgC,MAAMoD,MAAhCD,EADF,EACFE,IAAaoB,EADX,EACWA,UACO,MAAZA,EAFN,wDAIJC,EAAiBC,YAAkBxB,GAJ/B,EAKasB,EAAQG,MAAM,KAL3B,mBAKHC,EALG,KAKKC,EALL,KAMJC,EAAgBF,GAAU1B,EAC1B6B,EAAcF,GAAQH,YAAkBI,GAExCE,EATI,UASaC,IATb,gBAS8BH,EAT9B,YAS+CC,EAT/C,QAUJG,EAAY,EAAK7E,OAAOgD,KAVpB,UAWJ8B,YAAeD,EAAW,CAC5BE,WAAYX,EACZO,gBAbM,4C,EAoBdK,cAAgB,WACZ,IAAMC,EAAU,EAAKvF,MAAMoD,MAAMoC,IACjCD,GAAWE,YAAS,EAAKnF,OAAOgD,KAAMiC,I,EAO1C7B,oB,sBAAsB,sCAAA1F,EAAA,6DACZoF,EAAQ,EAAK9C,OAAOgD,KAE1BoC,YAActC,GACduC,YAAsBvC,GAEhBwC,EAAe,EAAKC,QACpB1C,EAAU,EAAKnD,MAAMoD,MAAMC,GAC7ByC,YAAQ3C,IAAW,EACK4C,YAAkB,GAAD,OAAI5C,EAAJ,MAAjC8B,EADU,EACVA,YACRe,YAAe5C,EAAO,CAAEwC,eAAcX,iBAEtCe,YAAe5C,EAAO,CAAEwC,eAAcK,QAAQ,IAZhC,SAeZ,EAAKzB,cAfO,cAgBlB,EAAKc,gBAEL,EAAKY,iBAAiB9C,GAEhB+C,EAAgB,EAAKnG,MAAMoG,QApBf,UAqBSC,YAAcjD,EAAO+C,GArB9B,QAqBlB,EAAK9F,SAASiD,KArBI,OAuBlB,EAAKiB,WAAWnB,GAvBE,4C,EA+BtBkD,a,uCAAe,WAAOC,EAAMC,GAAb,SAAAxI,EAAA,sEACL,EAAKyI,aAAaF,EAAKG,OAAQF,EAAQE,QADlC,OAEX,EAAKC,aAAaJ,EAAMC,GACxB,EAAKI,YAAYL,EAAMC,GACvB,EAAKK,YAAYN,EAAMC,GAJZ,2C,0DAYfK,YAAc,SAACN,EAAMC,K,EAQrBG,aAAe,SAACJ,EAAMC,GAClB,EAAKM,eAAeP,EAAK7F,SAAU8F,EAAQ9F,UAC3C,EAAKqG,cAAcR,EAAKH,QAASI,EAAQJ,SACzC,EAAKY,eAAeT,EAAKU,SAAUT,EAAQS,UAC3C,EAAKC,aAAaX,EAAK3E,OAAQ4E,EAAQ5E,QACvC,EAAKuF,YAAYZ,EAAKa,MAAOZ,EAAQY,OACrC,EAAKC,aAAad,EAAK/E,eAAgBgF,EAAQhF,gBAC/C,EAAK8F,cAAcf,EAAKxD,iBAAkByD,EAAQzD,kBAClD,EAAKwE,iBAAiBhB,EAAKzE,WAAY0E,EAAQ1E,YAG3CyE,EAAKrF,aAAesF,EAAQtF,aAC5B,EAAKA,WAAasF,EAAQtF,YAG9B,EAAKsG,GAAKhB,EAAQlE,c,EAQtBsE,YAAc,SAACL,EAAMC,GACjB,EAAKiB,gBAAgBlB,EAAKnD,MAAOoD,EAAQpD,Q,EAQ7C0D,eAAiB,SAACP,EAAMC,GACpB,IAAQ7F,EAAkB6F,EAAlB7F,MAAOE,EAAW2F,EAAX3F,OACX0F,EAAK5F,QAAUA,GAAS4F,EAAK1F,SAAWA,IAE5C,EAAKH,SAASC,MAAQA,EACtB,EAAKD,SAASG,OAASA,EAEvB,EAAK4B,cAAcC,QAAQ/B,EAAOE,GAClC,EAAKM,OAAOuG,OAAS/G,EAAQE,EAC7B,EAAKM,OAAOQ,yBAEc,WAA1B,EAAK3B,MAAMkB,YAA2B,EAAKyG,2B,EAM/CC,iBAAmB,WAAO,IAAD,EACfzC,EAAY,EAAK7E,OAAOgD,KAC9B,YAAKrC,aAAL,SAAYoD,OAAOc,GACnB0C,YAAgB1C,I,EAMpB2C,iB,sBAAmB,sBAAA9J,EAAA,6DACf,EAAK8B,eAEL,EAAK8H,mBAHU,SAIT,EAAKpH,gBAJI,OAKf,EAAK0F,iBAAiB,EAAK5F,OAAOgD,MAElC,EAAKpD,cAPU,2C,EAenBuH,gB,uCAAkB,WAAOlB,EAAMC,GAAb,iBAAAxI,EAAA,yDACRmF,EAAUqD,EAAQnD,GAClB0E,EAAYxB,EAAKlD,KAAOF,EACXoD,EAAKf,MAAQgB,EAAQhB,KAE1B,EAAKF,gBAEdyC,EAPS,wDASd,EAAKC,wBATS,SAUR,EAAKF,mBAVG,OAWd,EAAKG,uBAXS,4C,0DAiBlBD,sBAAwB,a,EAKxBC,qBAAuB,a,EAMvBC,oBAAsB,SAAAjF,GACDkF,OAAOC,OAAO,EAAK/H,UAAUgI,OACrClE,SAAQ,SAAAiC,GACbkC,YAAqBlC,EAASnD,O,EAStC8D,cAAgB,SAACR,EAAMC,GACnB,GAAID,IAASC,EAAb,CAEA,IAAM+B,EAAcJ,OAAOK,KAAKhC,GAASiC,QACrC,SAAAC,GAAG,OAAInC,EAAKmC,KAASlC,EAAQkC,MAEjC,GAA2B,IAAvBH,EAAYI,OAAhB,CAEA,IAAM1F,EAAS,IAAI2F,IAAIL,EAAYM,KAAI,SAAAH,GAAG,MAAI,CAACA,EAAKlC,EAAQkC,QAC5D,EAAKR,oBAAoBjF,M,EAsB7BiD,iBAAmB,SAAA9C,GACf,IAAMU,EAAS,EAAKgF,UAEpBC,YAAgB3F,EAAO,CAAE4F,WADH,CAAEC,YAAY,GACgBnF,Y,EAMxDkD,eAAiB,SAACT,EAAMC,GACpB,GAAID,IAASC,EAAb,CAEA,IAAMZ,EAAe,EAAKC,QACpBV,EAAY,EAAK7E,OAAOgD,KAExB4F,EAAiB3C,EAAK4C,OAASvD,EACjCsD,GACAlD,YAAe,EAAK1F,OAAOgD,KAAM,CAAEsC,iBAGvC,IAAMoD,EAAaE,EACb,CAAED,WAAY1C,EAAK0C,YACnB1C,EACAzC,EAAS,EAAKgF,UACpBC,YAAgB5D,EAAW,CAAE6D,aAAYlF,a,EAQ7CoD,aAAe,SAACX,EAAMC,GACdD,IAASC,IACT,EAAKlC,kBACL,EAAKzC,aAAa2E,K,EAS1BW,Y,uCAAc,WAAOZ,EAAMC,GAAb,qBAAAxI,EAAA,yDACMmK,OAAOK,KAAKjC,GAAM6C,MAC9B,SAAAV,GAAG,OAAInC,EAAKmC,KAASlC,EAAQkC,MAFvB,oDAMSlC,EAAX3C,OANE,wBAQN,EAAKpB,cAAgB,EAAKD,SARpB,EAUoB,EAAK9B,SAAvBC,EAVF,EAUEA,MAAOE,EAVT,EAUSA,OACf,EAAK2B,SAASE,QAAQ/B,EAAOE,GAEvB8B,EAAS,EAAKH,SAASI,WAC7B,EAAKD,OAASA,EAdR,2BAmBV,EAAK0G,YAnBK,4C,0DAyBdA,U,sBAAY,gDAAArL,EAAA,+DACoC,EAAKgC,MAAMoH,MAA/CkC,EADA,EACAA,QAASC,EADT,EACSA,MAAOC,EADhB,EACgBA,QAASC,EADzB,EACyBA,OADzB,SAEsB,+BAFtB,gBAEAC,EAFA,EAEAA,YAKR,EAAKC,OAAS,IAAID,EAAY,EAAKlH,SAAU8G,EAAS,CAAEG,WAPhD,EASkB,EAAK/I,SAAvBC,EATA,EASAA,MAAOE,EATP,EASOA,OACf,EAAK8I,OAAOjH,QAAQ/B,EAAOE,IAErB8B,EAAS,EAAKgH,OAAO/G,YACpBzE,MAAMoL,MAAQA,EACrB5G,EAAOxE,MAAM+C,WAAasI,EAC1B,EAAK7G,OAASA,EAEd,EAAKF,cAAgB,EAAKkH,OAjBlB,4C,EAwBZtC,aAAe,SAACd,EAAMC,GAAa,IAAD,EAC1BD,IAASC,KAEb,IAAKrF,OAAOM,UAASC,IAArB,oBAA4B8E,IAC5B,EAAKrF,OAAOQ,2B,EAOhB2F,cAAgB,SAACf,EAAMC,GAAa,IAAD,EAC3BD,IAASC,KAEb,IAAK3D,SAASG,QAAOtB,IAArB,oBAA4B8E,IAC5B,EAAK3D,SAASI,W,EAQlBsE,iBAAmB,SAAChB,EAAMC,GAClBD,IAASC,IAEb,EAAKzE,WAAWI,cAAcqE,GAC9B,EAAKpE,aAAaD,cAAcqE,K,EAOpCC,a,uCAAe,WAAOF,EAAMC,GAAb,iBAAAxI,EAAA,yDACNwI,EAAQ3C,SAAU0C,EAAK1C,OADjB,wDAEX,EAAK/D,aAAa,aAFP,SAImB,+BAJnB,uBAIH8J,EAJG,EAIHA,YAJG,SAOLA,EAAY,EAAKtJ,OAAOgD,KAAMkD,GAPzB,OAQX,EAAKxG,MAAM6J,iBAEX,EAAK3J,cAVM,4C,0DA8BfyH,uBAAyB,WACrB,GAAK,EAAKmC,aAAV,CAEA,MAAqD,EAAKpJ,SAA3CqJ,EAAf,EAAQpJ,MACFqJ,EAAoBD,EAD1B,EAA4BlJ,OAG5B,EAGI,EAAKiJ,aAAaG,iBAAiB,GAAGC,cAF/BC,EADX,EACIxJ,MACayJ,EAFjB,EAEIC,YAGEC,EACFF,EAAiBJ,EAAoBD,EAAcI,EAKjDI,EAAcD,GAHhBF,EAAiBJ,EACXA,EACAI,GAGV,EAAKI,MAAM7J,MAAQ2J,EACnB,EAAKE,MAAM3J,OAAS0J,I,EAMxBE,sB,sBAAwB,oCAAAzM,EAAA,mEACf0M,UAAUC,oBADK,aACf,EAAwBC,aADT,2EAGWF,UAAUC,oBAHrB,aAGW,EAAwBC,aAAa,CAChEC,OAAO,EACPL,MAAO,CAAEM,WAAY,iBALL,UAGdC,EAHc,YAShBA,EATgB,gDAUTL,UAAUC,oBAVD,aAUT,EAAwBC,aAAa,CACxCC,OAAO,EACPL,MAAO,CAAEM,WAAY,UAZT,8BAQpB,EAAKhB,aARe,KAef,EAAKA,aAfU,mDAiBpB,EAAKU,MAAQvM,SAASC,cAAc,SAEpCiK,OAAO6C,OAAO,EAAKR,MAAO,CACtBS,UAAW,EAAKnB,aAChBoB,UAAU,EACVC,aAAa,KAGXC,EAAe,IAAIpK,eAAmB,EAAKwJ,QACpCa,UAAYrK,eACzB,EAAKC,MAAMC,WAAakK,EA3BJ,4C,EAqDxBE,YAAc,SAAAC,GACV,IAAQC,EAAgB,EAAKxL,MAArBwL,YACR,GAAKA,EAAL,CAEA,IAAMnK,EAASmK,EAAcD,EAAKE,KAAKC,GAAM,EAC7C,EAAKpL,OAAOgD,KAAKqI,QAAQtK,K,EAO7BuK,YAAc,SAAAL,K,EAEdM,cAAgB,WACZ,IACMC,EADS7N,SAAS8N,cAAc,UACZC,UAAU,aAEpCnO,YAAYiO,EAAD,qBAA2BG,cAA3B,U,EAMf/I,QAAU,WACN,EAAKgJ,QAAUC,sBAAsB,EAAKjJ,SAE1C,IAAMqI,EAAK,EAAKxK,MAAMqL,WACtB,GAAiC,WAA7BnO,SAASoO,gBAAb,CAOA,GALA,EAAKf,YAAYC,GAEjB,EAAKK,YAAYL,GAEjB,EAAK9I,cAAc6J,OAAO,EAAKrL,MAAO,EAAKE,QACvCnC,OAAO6M,cAAe,CACtB,IAAMU,EAAM,EAAKtL,MAAMC,WAQvB,OAPA,EAAKD,MAAMC,WAAa,KAExB,EAAKuB,cAAc6J,OAAO,EAAKrL,MAAO,EAAKE,QAC3C,EAAK0K,gBAEL,EAAK5K,MAAMC,WAAaqL,OACxBvN,OAAO6M,eAAgB,GAI3B,EAAKpJ,cAAc6J,OAAO,EAAKrL,MAAO,EAAKE,U,8FA1vB/C,sBAAAnD,EAAA,sEAMUwO,KAAKrM,aANf,OAOIqM,KAAKC,cAAe,EAEpBD,KAAKrN,wBATT,gD,sFAeA,SAAmBoH,GACf,GAAKiG,KAAKC,aAAV,CAIA,IAAMjG,EAAUgG,KAAKxM,MAGrB0M,QAAQC,IAAI,WACZC,YAAUrG,EAAMC,GAEhBgG,KAAKlG,aAAaC,EAAMC,M,kCAG5B,WAAwB,IAAD,QACnB,UAAAgG,KAAK1C,oBAAL,SAAmBG,iBAAiB,GAAG4C,OACvC,UAAAL,KAAK5M,gCAAL,cAAA4M,MACAM,qBAAqBN,KAAKN,SAC1BrE,YAAgB2E,KAAKvL,OACrBuL,KAAKhK,SAAW,KAChB,UAAAgK,KAAKzK,WAAWgL,mBAAhB,SAA6BC,UAC7BR,KAAKzK,WAAWiL,UAChBR,KAAKzK,WAAa,KAClB,UAAAyK,KAAKpK,aAAa2K,mBAAlB,SAA+BC,UAC/BR,KAAKpK,aAAa4K,UAClBR,KAAKpK,aAAe,KACpBoK,KAAKS,MAAQ,KACbT,KAAKzL,MAAQ,KACbyL,KAAKvL,MAAQ,O,cAsJjB,SAAOiM,GACH,GAAIA,IAAYV,KAAKjK,IAArB,CAEAiK,KAAKjK,IAAM2K,EACXV,KAAKhK,SAAW0K,EAAUV,KAAKzK,WAAayK,KAAKpK,aACjD,MAA0BoK,KAAK9L,SAAvBC,EAAR,EAAQA,MAAOE,EAAf,EAAeA,OAGf,GAFA2L,KAAKhK,SAASE,QAAQ/B,EAAOE,IAEzB2L,KAAKxM,MAAMoH,MAAMvD,OAArB,CAEA2I,KAAK/J,cAAgB+J,KAAKhK,SAE1B,IAAM2K,EAAYX,KAAKhK,SAASI,WAChC4J,KAAK7J,OAASwK,M,qBAiQlB,WACI,MAA6CX,KAAKxM,MAAMiH,SAA1CrB,EAAd,EAAQuD,KAAuBiE,EAA/B,wBACMC,EAAYC,YAAc1H,GAChC,OAAO2H,YAAaH,EAAWC,K,mBAMnC,WACI,OAAOb,KAAKxM,MAAMiH,SAASkC,O,sBAqJ/B,SAAeqE,GAAK,IAAD,EACf,OAAQA,GACJ,IAAK,cAED,YADAhB,KAAKvL,MAAMC,WAAa,MAE5B,IAAK,SAED,YADAsL,KAAK/B,wBAET,QACI,UAAA+B,KAAK1C,oBAAL,SAAmBG,iBAAiB,GAAG4C,OACvCL,KAAKvL,MAAMC,WAAa,IAAIF,QAAYwM,M,kBA2EpD,WACI,OAAOhB,KAAKiB,S,IAXhB,SAAW9K,GACP,IAAM+K,EAAYlB,KAAKiB,QACvBC,GAAalB,KAAK9M,MAAMhB,YAAYgP,GACpClB,KAAK9M,MAAMlB,YAAYmE,GACvB6J,KAAKiB,QAAU9K,I,oBAgEnB,WAAU,IAAD,OACL,OACI,qBACIgL,IAAK,SAAAC,GACD,EAAKlO,MAAQkO,S,GAlwBPC,iBAywBX3O,a,2LCnyBF4O,EAAb,4MACIrN,mBAAqB,WACjB,EAAKsN,yBACL,EAAKC,gBAHb,EAMI/F,qBAAuB,WACnB,EAAK8F,yBACL,EAAKC,gBARb,EAeIpH,YAfJ,uCAekB,WAAOL,EAAMC,GAAb,SAAAxI,EAAA,sEACJ,EAAKyJ,gBAAgBlB,EAAKnD,MAAOoD,EAAQpD,OADrC,OAEV,EAAK6K,gBAAgB1H,EAAK2H,UAAW1H,EAAQ0H,WAFnC,2CAflB,0DAwBIrH,YAAc,SAACN,EAAMC,GAEbA,EAAQ2H,QAAQtK,SAAW0C,EAAK4H,QAAQtK,QACxC,EAAKuK,oBA3BjB,EAkCIL,uBAAyB,WACrB,IAAM3K,EAAQ,EAAK9C,OAAOgD,KAC1BF,EAAMiL,SAASC,QAAUlL,EAAM3B,SAAS8M,QACxCnL,EAAMiL,SAASG,QAAUpL,EAAMqL,SAASF,SArChD,EAwEIG,UAAY,WACR,MAA6B,EAAK1O,MAAMoD,MAAhCuL,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SAChB,EAAKD,OAASA,EACd,EAAKC,SAAWA,GA3ExB,EA2FIC,aAAe,WACX,EAAKH,aA5Fb,EAkGIV,aAlGJ,sBAkGmB,oCAAAhQ,EAAA,yDACX,EAAK6Q,eADM,EAG0B,EAAK7O,MAAMkO,UAAlCY,EAHH,EAGHC,KAAeC,EAHZ,EAGYA,UAClBF,EAJM,wDAMX,EAAKhP,eAECqF,EAAY,EAAK7E,OAAOgD,KACxB2L,EAAUC,YAAiBJ,GAIjC,EAAKK,KAAOF,EAAQtG,OAEpBxD,EAAU8H,MAAQ,IAAIjM,iBAAqBmE,GAI3C,EAAK8H,MAAQ9H,EAAU8H,MAEvB,EAAKmC,QAAU,EACfjK,EAAU8H,MAAM+B,UAAYA,EAC5B7J,EAAU8H,MAAMtN,iBAAiB,WAAY,EAAK0P,aAClD,EAAKC,YAAcL,EAxBR,UA6BaM,YAAeN,GA7B5B,QA6BX,EAAKO,WA7BM,OAgCX,EAAKC,OAAS,EACd,EAAKvP,cAjCM,4CAlGnB,EAyIIwP,gBAAkB,WAAO,IAAD,IACdvK,EAAY,EAAK7E,OAAOgD,KAC9B,UAAA6B,EAAU8H,aAAV,mBAAiB0C,qBAAjB,iBAGA,MAA6BxK,EAAUkJ,SAA/BC,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,QACjBrJ,EAAU1D,SAASmO,KAAKtB,GACxBnJ,EAAUsJ,SAASmB,KAAKpB,GAExB,EAAKvB,MAAQ,KACb,EAAKuC,WAAa,GAClB,EAAKF,YAAc,IApJ3B,EA0JID,YAAc,WACV,IAAQF,EAAR,eAAQA,KAGJ,EAAKnP,MAAMmO,QAAQtK,QAAU,EAAKuL,UAAYD,EAAO,IAErD,EAAKU,cAAchD,OACnB,EAAK7M,MAAM8P,mBAEf,IAAMC,GAAU,EAAKX,QAAU,GAAKD,EACpC,EAAKM,OAASM,GApKtB,EA4KI9B,gBAAkB,SAAC1H,EAAMC,GACrB,IAAQuI,EAAoBvI,EAApBuI,KAAMC,EAAcxI,EAAdwI,UACd,GAAIzI,EAAKwI,OAASA,EAGd,OAFA,EAAKW,uBACL,EAAK1B,eAILzH,EAAKyI,YAAcA,IACnB,EAAK/B,MAAM+B,UAAYA,IArLnC,EA4LIZ,iBAAmB,WAOf,GAHA,EAAK4B,OAAS,GACd,EAAKC,YAAc,EAAKtN,OAAOuN,cAAc,KAExC,EAAKL,cAAe,CACrB,IAAQM,EAAU,EAAKnQ,MAAMmO,QAArBgC,MACR,EAAKN,cAAgB,IAAIO,cAAc,EAAKH,YAAa,CACrDI,SAAUF,IAEd,EAAKN,cAAcS,gBAAkB,SAAAC,GAAK,OACtC,EAAKP,OAAO9L,KAAKqM,EAAMC,OAC3B,EAAKX,cAAcY,OAAS,WACxB,EAAKvQ,cAEL,IAAQwQ,EAAW,EAAK1Q,MAAMmO,QAAtBuC,OAEFC,EAAc,IAAIC,KAAK,EAAKZ,OAAQ,CACtC7G,KAAK,SAAD,OAAWuH,KAGb3S,EAAQ,cAAUkO,cAAV,YAAiCyE,GAE/C/R,YAAagS,EAAa5S,IAGlC,EAAK+B,aAAa,aAClB,EAAK+Q,yBAEL,EAAKpB,OAAS,EACd,EAAKI,cAAciB,SA5N3B,EAkOID,uBAAyB,aAlO7B,EAoOIjF,YAAc,SAAAL,GAAO,IAAD,EAGhB,IAFA,YAAK0B,aAAL,SAAYhK,OAAOsI,GAEf,EAAKwF,aAAe,EAAKA,YAAYpI,SACjB,EAAKsE,MAAM+D,MACJ,EAAKC,eAAe,GACR,CACnC,EAAKA,eAAeC,QACpB,MAA6B,EAAKH,YAAYG,QAAtCvC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SAChB,EAAKD,OAASA,EACd,EAAKC,SAAWA,IA9OhC,0CA4CI,SAAWmB,GACPvD,KAAK4C,QAAUW,EAEf,IAAQ9C,EAAUT,KAAVS,MACRA,EAAM0C,gBAEN,IAAMwB,EAAM3E,KAAKgD,WAAWO,GACtBqB,EAASnE,EAAMoE,WAAWF,GAC1BG,EAAqB9E,KAAK8C,YAAYS,GACpCf,EAAwCsC,EAAxCtC,UAAWuC,EAA6BD,EAA7BC,YAAaR,EAAgBO,EAAhBP,YAC1BS,EAAsBL,EAAIM,SAEhCL,EAAOM,QAAQ1Q,aAAkBuQ,GACjCH,EAAOpC,UAAYA,EACnBoC,EAAOJ,KAAO,EAEdxE,KAAKuE,YAAcY,YAAoBZ,EAAaQ,GACpD/E,KAAKyE,eAAiBzE,KAAKuE,YAAYlI,KACnC,SAAA+I,GAAM,OAAKJ,EAAsBI,EAAOZ,KAAQ,OAGpD/D,EAAM4E,QAAQ,GACdT,EAAOU,SAlEf,kBAiFI,SAAW/B,MAjFf,oBAsFI,SAAaA,QAtFjB,GAA+B7Q,WAoPhB4O","file":"static/js/6.e25a76c8.chunk.js","sourcesContent":["/**\r\n * download data URI as the given file name\r\n * @param {string} uri - data URI\r\n * @param {string} fileName\r\n */\r\nexport default function downloadURI(uri, fileName) {\r\n    const a = document.createElement(\"a\");\r\n    a.style.display = \"none\";\r\n    a.href = uri;\r\n    a.download = fileName;\r\n\r\n    document.body.appendChild(a);\r\n    a.click();\r\n\r\n    document.body.removeChild(a);\r\n}\r\n","/**\r\n * download a blob as the given file name\r\n * @param {Blob} blob\r\n * @param {string} fileName\r\n */\r\nexport default function downloadBlob(blob, fileName) {\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const a = document.createElement(\"a\");\r\n    a.style.display = \"none\";\r\n    a.href = url;\r\n    a.download = fileName;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n\r\n    window.URL.revokeObjectURL(url);\r\n    document.body.removeChild(a);\r\n}\r\n","import { PureComponent } from \"react\";\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport { CAM_PARAMS } from \"helpers/consts\";\r\nimport { isBlade, filterObject, getDefaultTexture } from \"helpers/helpers\";\r\nimport {\r\n    createLight,\r\n    analyzeWeaponCode,\r\n    getModelPath,\r\n    loadModel,\r\n    dispose3dObject,\r\n    createOutline,\r\n    applyOutlineSettings,\r\n    getParamsList,\r\n    changeMaterial,\r\n    updateMatParams,\r\n    removeEffects,\r\n    disableFrustumCulling,\r\n    replaceTexture,\r\n    applyMod,\r\n    logUpdate,\r\n} from \"helpers/viewerHelpers\";\r\n\r\nimport downloadURI from \"helpers/downloadURI\";\r\nimport { getDateTimeString } from \"helpers/helpers\";\r\nimport fscreen from \"fscreen\";\r\n\r\nimport { fbxSource } from \"App\";\r\n\r\n/**\r\n * Basic Viewer that supports adding / updating:\r\n *   - 1 main model\r\n *   - auto rotate\r\n *   - viewport\r\n *   - material\r\n *   - background color\r\n *   - lighting\r\n *   - anti aliasing\r\n *   - ASCII mode\r\n * @typedef {ViewerProps} Props\r\n * @extends PureComponent<Props>\r\n */\r\nclass BasicViewer extends PureComponent {\r\n    async componentDidMount() {\r\n        // window.app = this;\r\n\r\n        // const { fbx2json } = await import(\"helpers/fbx2json\");\r\n        // await fbx2json();\r\n\r\n        await this.initialize();\r\n        this.finishedInit = true;\r\n\r\n        this.addFullScreenListener();\r\n    }\r\n\r\n    /**\r\n     * @param {ViewerProps} prev\r\n     */\r\n    componentDidUpdate(prev) {\r\n        if (!this.finishedInit) return;\r\n        /**\r\n         * @type {ViewerProps}\r\n         */\r\n        const current = this.props;\r\n\r\n        // print updated props to console\r\n        console.log(\"Updated\");\r\n        logUpdate(prev, current);\r\n\r\n        this.updateViewer(prev, current);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.cameraStream?.getVideoTracks()[0].stop();\r\n        this.removeFullScreenListener?.();\r\n        cancelAnimationFrame(this.frameId);\r\n        dispose3dObject(this.scene);\r\n        this.renderer = null;\r\n        this.rendererAA.renderLists?.dispose();\r\n        this.rendererAA.dispose();\r\n        this.rendererAA = null;\r\n        this.rendererNoAA.renderLists?.dispose();\r\n        this.rendererNoAA.dispose();\r\n        this.rendererNoAA = null;\r\n        this.mixer = null;\r\n        this.clock = null;\r\n        this.scene = null;\r\n    }\r\n\r\n    addFullScreenListener = () => {\r\n        if (!fscreen.fullscreenEnabled) return;\r\n\r\n        const toggleFullScreen = () => {\r\n            if (!fscreen.fullscreenElement) {\r\n                fscreen.requestFullscreen(this.mount);\r\n                return;\r\n            }\r\n\r\n            fscreen.exitFullscreen();\r\n        };\r\n        this.mount?.addEventListener(\"dblclick\", () => toggleFullScreen());\r\n        this.removeFullScreenListener = () =>\r\n            this.mount?.removeEventListener(\"dblclick\", () =>\r\n                toggleFullScreen()\r\n            );\r\n    };\r\n\r\n    /**\r\n     * disable input and display a message, default is \"Loading...\"\r\n     * @param {string} [msg]\r\n     */\r\n    disableInput = msg => this.props.setLoadingMsg(msg || \"Loading...\");\r\n\r\n    /**\r\n     * remove loading message\r\n     */\r\n    enableInput = () => this.props.setLoadingMsg(\"\");\r\n\r\n    /**\r\n     * called when viewer is mounted to initialize the scene\r\n     */\r\n    initialize = async () => {\r\n        this.disableInput();\r\n\r\n        this.initScene();\r\n\r\n        this.outlines = {};\r\n        this.models = {};\r\n        this.modelInfo = {};\r\n        await this.loadMainModel();\r\n        await this.afterMainModelLoad();\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * Called after main model is loaded and added to scene\r\n     */\r\n    afterMainModelLoad = () => void 0;\r\n\r\n    /**\r\n     * initialize scene, display size, floor, clock, light, camera, controls, and renderers\r\n     */\r\n    initScene = () => {\r\n        // viewport\r\n        this.viewport = this.props.viewport || {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        };\r\n\r\n        // clock\r\n        this.clock = new THREE.Clock();\r\n\r\n        // Scene\r\n        this.scene = new THREE.Scene();\r\n        this.background = this.props.background;\r\n\r\n        // Camera\r\n        this.camera = new THREE.PerspectiveCamera(\r\n            CAM_PARAMS.angle,\r\n            this.viewport.width / this.viewport.height,\r\n            CAM_PARAMS.near,\r\n            CAM_PARAMS.far\r\n        );\r\n        /**\r\n         * @type {xyzCoordinate}\r\n         */\r\n        this.cameraPosition = this.props.cameraPosition || [2, 0, 10];\r\n        this.camera.position.set(...this.cameraPosition);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Light\r\n        const { lights } = this.props;\r\n        this.addAllLights(lights);\r\n\r\n        // Renderer\r\n        const { pixelRatio } = this.props;\r\n        this.rendererAA = new THREE.WebGLRenderer({\r\n            antialias: true,\r\n            alpha: true,\r\n            // logarithmicDepthBuffer: true,\r\n        });\r\n        this.rendererAA.outputEncoding = THREE.sRGBEncoding;\r\n        this.rendererAA.setPixelRatio(pixelRatio);\r\n\r\n        this.rendererNoAA = new THREE.WebGLRenderer({\r\n            antialias: false,\r\n            alpha: true,\r\n            // logarithmicDepthBuffer: true,\r\n        });\r\n        this.rendererNoAA.outputEncoding = THREE.sRGBEncoding;\r\n        this.rendererNoAA.setPixelRatio(pixelRatio);\r\n\r\n        const AAEnabled = this.props.antiAliasing;\r\n        this._AA = AAEnabled;\r\n\r\n        this.renderer = AAEnabled ? this.rendererAA : this.rendererNoAA;\r\n\r\n        this.finalRenderer = this.renderer;\r\n        const { width, height } = this.props.viewport;\r\n        this.finalRenderer.setSize(width, height);\r\n\r\n        const canvas = this.finalRenderer.domElement;\r\n        this.canvas = canvas;\r\n\r\n        // Controls\r\n        this.controls = new OrbitControls(this.camera, this.mount);\r\n        /**\r\n         * @type {xyzCoordinate}\r\n         */\r\n        this.controlsPosition = this.props.controlsPosition || [0, 0, 0];\r\n        this.controls.target.set(...this.controlsPosition);\r\n        this.controls.update();\r\n\r\n        this.animate();\r\n    };\r\n\r\n    /**\r\n     * load, and perform basic processing on main model\r\n     */\r\n    loadMainModel = async () => {\r\n        const modelId = this.props.model.id;\r\n        this.modelInfo.main = modelId;\r\n\r\n        const modelPath = getModelPath(modelId);\r\n        const model = await loadModel(modelPath);\r\n        this.models.main = model;\r\n\r\n        await this.basicMainProcessing();\r\n        return;\r\n    };\r\n\r\n    /**\r\n     * enable / disable Anti Aliasing\r\n     * @param {Boolean} enabled\r\n     */\r\n    set AA(enabled) {\r\n        if (enabled === this._AA) return;\r\n\r\n        this._AA = enabled;\r\n        this.renderer = enabled ? this.rendererAA : this.rendererNoAA;\r\n        const { width, height } = this.viewport;\r\n        this.renderer.setSize(width, height);\r\n\r\n        if (this.props.ascii.enable) return;\r\n\r\n        this.finalRenderer = this.renderer;\r\n\r\n        const newCanvas = this.renderer.domElement;\r\n        this.canvas = newCanvas;\r\n    }\r\n\r\n    /**\r\n     * add light to scene\r\n     * @param {LightParam} light\r\n     */\r\n    addLight = light => {\r\n        const { id, enable, ...params } = light;\r\n        if (!enable) return;\r\n\r\n        const newLight = createLight(params);\r\n\r\n        this.scene.add(newLight);\r\n        this.lights.push(newLight);\r\n    };\r\n\r\n    /**\r\n     * add lights to scene\r\n     * @param {LightParam[]} lights\r\n     */\r\n    addAllLights = lights => {\r\n        /**\r\n         * @type {THREE.Light[]}\r\n         */\r\n        this.lights = [];\r\n        lights.forEach(this.addLight);\r\n    };\r\n\r\n    /**\r\n     * remove light from scene\r\n     * @param {THREE.Light} light\r\n     */\r\n    removeLight = light => this.scene.remove(light);\r\n\r\n    /**\r\n     * remove all lights in the scene\r\n     */\r\n    removeAllLights = () => this.lights.forEach(this.removeLight);\r\n\r\n    /**\r\n     * add model to scene\r\n     * @param {THREE.Object3D} model\r\n     */\r\n    addToScene = model => this.scene?.add(model);\r\n\r\n    /**\r\n     * change main model's texture if specified\r\n     */\r\n    initTexture = async () => {\r\n        const { id: modelId, texture } = this.props.model;\r\n        if (!texture || texture === \">\") return;\r\n\r\n        const defaultTexture = getDefaultTexture(modelId);\r\n        const [source, name] = texture.split(\">\");\r\n        const textureSource = source || modelId;\r\n        const textureName = name || getDefaultTexture(textureSource);\r\n\r\n        const texturePath = `${fbxSource}/fbx/${textureSource}/${textureName}.png`;\r\n        const mainModel = this.models.main;\r\n        await replaceTexture(mainModel, {\r\n            oldTexture: defaultTexture,\r\n            texturePath,\r\n        });\r\n    };\r\n\r\n    /**\r\n     * apply modifier code to main model\r\n     */\r\n    applyModelMod = () => {\r\n        const modCode = this.props.model.mod;\r\n        modCode && applyMod(this.models.main, modCode);\r\n    };\r\n\r\n    /**\r\n     * main model basic processing:\r\n     * remove effects, change material, change texture, add outline, then add to scene\r\n     */\r\n    basicMainProcessing = async () => {\r\n        const model = this.models.main;\r\n\r\n        removeEffects(model);\r\n        disableFrustumCulling(model);\r\n\r\n        const materialType = this.matType;\r\n        const modelId = this.props.model.id;\r\n        if (isBlade(modelId)) {\r\n            const { texturePath } = analyzeWeaponCode(`${modelId}n`);\r\n            changeMaterial(model, { materialType, texturePath });\r\n        } else {\r\n            changeMaterial(model, { materialType, forced: true });\r\n        }\r\n\r\n        await this.initTexture();\r\n        this.applyModelMod();\r\n\r\n        this.applyNewModelMat(model);\r\n\r\n        const outlineParams = this.props.outline;\r\n        this.outlines.main = await createOutline(model, outlineParams);\r\n\r\n        this.addToScene(model);\r\n    };\r\n\r\n    /**\r\n     * update viewer's display\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateViewer = async (prev, current) => {\r\n        await this.updateExport(prev.export, current.export);\r\n        this.updateCommon(prev, current);\r\n        this.updateModel(prev, current);\r\n        this.otherUpdate(prev, current);\r\n    };\r\n\r\n    /**\r\n     * update settings other than model and environment\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    otherUpdate = (prev, current) => void 0;\r\n\r\n    /**\r\n     * update viewport, outline, material, lighting, ASCII,\r\n     * camera, control, background, and Anti Aliasing\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateCommon = (prev, current) => {\r\n        this.updateViewport(prev.viewport, current.viewport);\r\n        this.updateOutline(prev.outline, current.outline);\r\n        this.updateMaterial(prev.material, current.material);\r\n        this.updateLights(prev.lights, current.lights);\r\n        this.updateAscii(prev.ascii, current.ascii);\r\n        this.updateCamera(prev.cameraPosition, current.cameraPosition);\r\n        this.updateControl(prev.controlsPosition, current.controlsPosition);\r\n        this.updatePixelRatio(prev.pixelRatio, current.pixelRatio);\r\n\r\n        // Update background color\r\n        if (prev.background !== current.background) {\r\n            this.background = current.background;\r\n        }\r\n\r\n        this.AA = current.antiAliasing;\r\n    };\r\n\r\n    /**\r\n     * update model settings\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateModel = (prev, current) => {\r\n        this.updateMainModel(prev.model, current.model);\r\n    };\r\n\r\n    /**\r\n     * update viewport\r\n     * @param {ViewerProps[\"viewport\"]} prev\r\n     * @param {ViewerProps[\"viewport\"]} current\r\n     */\r\n    updateViewport = (prev, current) => {\r\n        const { width, height } = current;\r\n        if (prev.width === width && prev.height === height) return;\r\n\r\n        this.viewport.width = width;\r\n        this.viewport.height = height;\r\n\r\n        this.finalRenderer.setSize(width, height);\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        this.props.background === \"camera\" && this.setVideoBackgroundSize();\r\n    };\r\n\r\n    /**\r\n     * remove from scene and dispose main model\r\n     */\r\n    disposeMainModel = () => {\r\n        const mainModel = this.models.main;\r\n        this.scene?.remove(mainModel);\r\n        dispose3dObject(mainModel);\r\n    };\r\n\r\n    /**\r\n     * replace main model\r\n     */\r\n    replaceMainModel = async () => {\r\n        this.disableInput();\r\n\r\n        this.disposeMainModel();\r\n        await this.loadMainModel();\r\n        this.applyNewModelMat(this.models.main);\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * update main model\r\n     * @param {ViewerProps[\"model\"]} prev\r\n     * @param {ViewerProps[\"model\"]} current\r\n     */\r\n    updateMainModel = async (prev, current) => {\r\n        const modelId = current.id;\r\n        const idChanged = prev.id !== modelId;\r\n        const modChanged = prev.mod !== current.mod;\r\n\r\n        modChanged && this.applyModelMod();\r\n\r\n        if (!idChanged) return;\r\n\r\n        this.beforeMainModelUpdate();\r\n        await this.replaceMainModel();\r\n        this.afterMainModelUpdate();\r\n    };\r\n\r\n    /**\r\n     * called before main model is updated\r\n     */\r\n    beforeMainModelUpdate = () => void 0;\r\n\r\n    /**\r\n     * called after main model is updated\r\n     */\r\n    afterMainModelUpdate = () => void 0;\r\n\r\n    /**\r\n     * update outline parameters\r\n     * @param {Map<string, *>} update\r\n     */\r\n    updateOutlineParams = update => {\r\n        const outlines = Object.values(this.outlines).flat();\r\n        outlines.forEach(outline => {\r\n            applyOutlineSettings(outline, update);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * update outline settings\r\n     * @param {AppOutlineState} prev - previous settings\r\n     * @param {AppOutlineState} current - current settings\r\n     */\r\n    updateOutline = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const updatedKeys = Object.keys(current).filter(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (updatedKeys.length === 0) return;\r\n\r\n        const update = new Map(updatedKeys.map(key => [key, current[key]]));\r\n        this.updateOutlineParams(update);\r\n    };\r\n\r\n    /**\r\n     * get relevant parameters for the current material type\r\n     */\r\n    get matParams() {\r\n        const { type: materialType, ...allParams } = this.props.material;\r\n        const paramList = getParamsList(materialType);\r\n        return filterObject(allParams, paramList);\r\n    }\r\n\r\n    /**\r\n     * get the current material type\r\n     */\r\n    get matType() {\r\n        return this.props.material.type;\r\n    }\r\n\r\n    /**\r\n     * apply material setting to a newly loaded model\r\n     */\r\n    applyNewModelMat = model => {\r\n        const params = this.matParams;\r\n        const defaultParams = { useTexture: true };\r\n        updateMatParams(model, { prevParams: defaultParams, params });\r\n    };\r\n\r\n    /**\r\n     * update material settings\r\n     */\r\n    updateMaterial = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        const materialType = this.matType;\r\n        const mainModel = this.models.main;\r\n\r\n        const matTypeChanged = prev.type !== materialType;\r\n        if (matTypeChanged) {\r\n            changeMaterial(this.models.main, { materialType });\r\n        }\r\n\r\n        const prevParams = matTypeChanged\r\n            ? { useTexture: prev.useTexture }\r\n            : prev;\r\n        const params = this.matParams;\r\n        updateMatParams(mainModel, { prevParams, params });\r\n    };\r\n\r\n    /**\r\n     * update lighting\r\n     * @param {LightParam[]} prev\r\n     * @param {LightParam[]} current\r\n     */\r\n    updateLights = (prev, current) => {\r\n        if (prev !== current) {\r\n            this.removeAllLights();\r\n            this.addAllLights(current);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Update ASCII settings\r\n     * @param {ViewerProps[\"ascii\"]} prev\r\n     * @param {ViewerProps[\"ascii\"]} current\r\n     */\r\n    updateAscii = async (prev, current) => {\r\n        const updated = Object.keys(prev).some(\r\n            key => prev[key] !== current[key]\r\n        );\r\n        if (!updated) return;\r\n\r\n        const { enable } = current;\r\n        if (!enable) {\r\n            this.finalRenderer = this.renderer;\r\n\r\n            const { width, height } = this.viewport;\r\n            this.renderer.setSize(width, height);\r\n\r\n            const canvas = this.renderer.domElement;\r\n            this.canvas = canvas;\r\n\r\n            return;\r\n        }\r\n\r\n        this.showAscii();\r\n    };\r\n\r\n    /**\r\n     * render scene as ASCII\r\n     */\r\n    showAscii = async () => {\r\n        const { charSet, color, bgColor, invert } = this.props.ascii;\r\n        const { AsciiEffect } = await import(\r\n            /* webpackChunkName: \"AsciiEffect\" */\r\n            \"three/examples/jsm/effects/AsciiEffect\"\r\n        );\r\n\r\n        this.effect = new AsciiEffect(this.renderer, charSet, { invert });\r\n\r\n        const { width, height } = this.viewport;\r\n        this.effect.setSize(width, height);\r\n\r\n        const canvas = this.effect.domElement;\r\n        canvas.style.color = color;\r\n        canvas.style.background = bgColor;\r\n        this.canvas = canvas;\r\n\r\n        this.finalRenderer = this.effect;\r\n    };\r\n\r\n    /**\r\n     * @param {xyzCoordinate} prev\r\n     * @param {xyzCoordinate} current\r\n     */\r\n    updateCamera = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        this.camera.position.set(...current);\r\n        this.camera.updateProjectionMatrix();\r\n    };\r\n\r\n    /**\r\n     * @param {xyzCoordinate} prev\r\n     * @param {xyzCoordinate} current\r\n     */\r\n    updateControl = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        this.controls.target.set(...current);\r\n        this.controls.update();\r\n    };\r\n\r\n    /**\r\n     * update renderer's pixel ratio\r\n     * @param {number} prev\r\n     * @param {number} current\r\n     */\r\n    updatePixelRatio = (prev, current) => {\r\n        if (prev === current) return;\r\n\r\n        this.rendererAA.setPixelRatio(current);\r\n        this.rendererNoAA.setPixelRatio(current);\r\n    };\r\n\r\n    /**\r\n     * @param {ViewerProps[\"export\"]} prev\r\n     * @param {ViewerProps[\"export\"]} current\r\n     */\r\n    updateExport = async (prev, current) => {\r\n        if (!current.enable || prev.enable) return;\r\n        this.disableInput(\"Exporting\");\r\n\r\n        const { exportModel } = await import(\r\n            /* webpackChunkName: \"exporter\" */ \"helpers/exportModel\"\r\n        );\r\n        await exportModel(this.models.main, current);\r\n        this.props.onExportFinish();\r\n\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * @param {ColorCode | 'transparent' | 'camera'} bg\r\n     */\r\n    set background(bg) {\r\n        switch (bg) {\r\n            case \"transparent\":\r\n                this.scene.background = null;\r\n                return;\r\n            case \"camera\":\r\n                this.useCameraAsBackground();\r\n                return;\r\n            default:\r\n                this.cameraStream?.getVideoTracks()[0].stop();\r\n                this.scene.background = new THREE.Color(bg);\r\n        }\r\n    }\r\n\r\n    setVideoBackgroundSize = () => {\r\n        if (!this.cameraStream) return;\r\n\r\n        const { width: screenWidth, height: screenHeight } = this.viewport;\r\n        const screenAspectRatio = screenWidth / screenHeight;\r\n\r\n        const {\r\n            width: camWidth,\r\n            aspectRatio: camAspectRatio,\r\n        } = this.cameraStream.getVideoTracks()[0].getSettings();\r\n\r\n        const videoWidth =\r\n            camAspectRatio > screenAspectRatio ? screenWidth : camWidth;\r\n        const videoAspectRatio =\r\n            camAspectRatio > screenAspectRatio\r\n                ? screenAspectRatio\r\n                : camAspectRatio;\r\n        const videoHeight = videoWidth / videoAspectRatio;\r\n\r\n        this.video.width = videoWidth;\r\n        this.video.height = videoHeight;\r\n    };\r\n\r\n    /**\r\n     * use hardware camera as background, rear facing is prioritized\r\n     */\r\n    useCameraAsBackground = async () => {\r\n        if (!navigator.mediaDevices?.getUserMedia) return;\r\n\r\n        const rearCameraStream = await navigator.mediaDevices?.getUserMedia({\r\n            audio: false,\r\n            video: { facingMode: \"environment\" },\r\n        });\r\n\r\n        this.cameraStream =\r\n            rearCameraStream ||\r\n            (await navigator.mediaDevices?.getUserMedia({\r\n                audio: false,\r\n                video: { facingMode: \"user\" },\r\n            }));\r\n\r\n        if (!this.cameraStream) return;\r\n\r\n        this.video = document.createElement(\"video\");\r\n\r\n        Object.assign(this.video, {\r\n            srcObject: this.cameraStream,\r\n            autoplay: true,\r\n            playsinline: true,\r\n        });\r\n\r\n        const videoTexture = new THREE.VideoTexture(this.video);\r\n        videoTexture.minFilter = THREE.LinearFilter;\r\n        this.scene.background = videoTexture;\r\n\r\n        // this.setVideoBackgroundSize();\r\n    };\r\n\r\n    /**\r\n     * set display canvas\r\n     */\r\n    set canvas(canvas) {\r\n        const oldCanvas = this._canvas;\r\n        oldCanvas && this.mount.removeChild(oldCanvas);\r\n        this.mount.appendChild(canvas);\r\n        this._canvas = canvas;\r\n    }\r\n\r\n    /**\r\n     * get currently displayed canvas\r\n     */\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n\r\n    /**\r\n     * rotate the floor\r\n     * @param {number} dt - time difference\r\n     */\r\n    rotateModel = dt => {\r\n        const { rotateSpeed } = this.props;\r\n        if (!rotateSpeed) return;\r\n\r\n        const angle = (rotateSpeed * dt * Math.PI) / 2;\r\n        this.models.main.rotateY(angle);\r\n    };\r\n\r\n    /**\r\n     * called during every animation frame\r\n     * @param {number} dt - time difference since last call\r\n     */\r\n    updateScene = dt => void 0;\r\n\r\n    getScreenshot = () => {\r\n        const canvas = document.querySelector(\"canvas\");\r\n        const screenshot = canvas.toDataURL(\"image/png\");\r\n\r\n        downloadURI(screenshot, `screenshot_${getDateTimeString()}.png`);\r\n    };\r\n\r\n    /**\r\n     * render loop\r\n     */\r\n    animate = () => {\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n\r\n        const dt = this.clock.getDelta();\r\n        if (document.visibilityState === \"hidden\") return;\r\n\r\n        this.rotateModel(dt);\r\n\r\n        this.updateScene(dt);\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n        if (window.getScreenshot) {\r\n            const tmp = this.scene.background;\r\n            this.scene.background = null;\r\n\r\n            this.finalRenderer.render(this.scene, this.camera);\r\n            this.getScreenshot();\r\n\r\n            this.scene.background = tmp;\r\n            window.getScreenshot = false;\r\n            return;\r\n        }\r\n\r\n        this.finalRenderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                ref={el => {\r\n                    this.mount = el;\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default BasicViewer;\r\n","import BasicViewer from \"./BasicViewer\";\r\n\r\nimport * as THREE from \"three\";\r\nimport {\r\n    analyzeChainCode,\r\n    loadAnimations,\r\n    getFaceChangesQueue,\r\n} from \"helpers/viewerHelpers\";\r\n\r\nimport { getDateTimeString } from \"helpers/helpers\";\r\n\r\nimport downloadBlob from \"helpers/downloadBlob\";\r\n\r\n/**\r\n *  Extension of Base Viewer that adds:\r\n *    - Animation\r\n *    - Recording Animation\r\n */\r\nexport class AniViewer extends BasicViewer {\r\n    afterMainModelLoad = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    afterMainModelUpdate = () => {\r\n        this.saveMainModelInitState();\r\n        this.addAnimation();\r\n    };\r\n\r\n    /**\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    updateModel = async (prev, current) => {\r\n        await this.updateMainModel(prev.model, current.model);\r\n        this.updateAnimation(prev.animation, current.animation);\r\n    };\r\n\r\n    /**\r\n     * @param {ViewerProps} prev\r\n     * @param {ViewerProps} current\r\n     */\r\n    otherUpdate = (prev, current) => {\r\n        // Capture\r\n        if (current.capture.enable && !prev.capture.enable) {\r\n            this.captureAnimation();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * save main model's initial position and rotation\r\n     */\r\n    saveMainModelInitState = () => {\r\n        const model = this.models.main;\r\n        model.userData.initPos = model.position.clone();\r\n        model.userData.initRot = model.rotation.clone();\r\n    };\r\n\r\n    /**\r\n     * play animation stored in this.animations[newIdx]\r\n     * @param {number} newIdx\r\n     */\r\n    set aniIdx(newIdx) {\r\n        this._aniIdx = newIdx;\r\n\r\n        const { mixer } = this;\r\n        mixer.stopAllAction();\r\n\r\n        const ani = this.animations[newIdx];\r\n        const action = mixer.clipAction(ani);\r\n        const currentAniSettings = this.aniSettings[newIdx];\r\n        const { timeScale, repetitions, faceChanges } = currentAniSettings;\r\n        const currentClipDuration = ani.duration;\r\n\r\n        action.setLoop(THREE.LoopRepeat, repetitions);\r\n        action.timeScale = timeScale;\r\n        action.time = 0;\r\n\r\n        this.faceChanges = getFaceChangesQueue(faceChanges, repetitions);\r\n        this.faceChangeTime = this.faceChanges.map(\r\n            change => (currentClipDuration * change.time) / 100\r\n        );\r\n\r\n        mixer.setTime(0);\r\n        action.play();\r\n    }\r\n\r\n    /**\r\n     * reset model's face to the ones specified in model setting\r\n     */\r\n    resetFace = () => {\r\n        const { eyeIdx, mouthIdx } = this.props.model;\r\n        this.eyeIdx = eyeIdx;\r\n        this.mouthIdx = mouthIdx;\r\n    };\r\n\r\n    /**\r\n     * @param {number} newIdx\r\n     */\r\n    set eyeIdx(newIdx) {}\r\n\r\n    /**\r\n     * @param {number} newIdx\r\n     */\r\n    set mouthIdx(newIdx) {}\r\n\r\n    /**\r\n     * called before animation is attached\r\n     */\r\n    beforeAddAni = () => {\r\n        this.resetFace();\r\n    };\r\n\r\n    /**\r\n     * load and attach animations\r\n     */\r\n    addAnimation = async () => {\r\n        this.beforeAddAni();\r\n\r\n        const { code: aniCode, timeScale } = this.props.animation;\r\n        if (!aniCode) return;\r\n\r\n        this.disableInput();\r\n\r\n        const mainModel = this.models.main;\r\n        const aniList = analyzeChainCode(aniCode);\r\n        /**\r\n         * number of currently loaded animations\r\n         */\r\n        this.nAni = aniList.length;\r\n\r\n        mainModel.mixer = new THREE.AnimationMixer(mainModel);\r\n        /**\r\n         * @type {THREE.AnimationMixer}\r\n         */\r\n        this.mixer = mainModel.mixer;\r\n\r\n        this._aniIdx = 0;\r\n        mainModel.mixer.timeScale = timeScale; // Global timeScale\r\n        mainModel.mixer.addEventListener(\"finished\", this.playNextAni);\r\n        this.aniSettings = aniList;\r\n\r\n        /**\r\n         * @type {THREE.AnimationClip[]}\r\n         */\r\n        this.animations = await loadAnimations(aniList);\r\n\r\n        // play first animation\r\n        this.aniIdx = 0;\r\n        this.enableInput();\r\n    };\r\n\r\n    /**\r\n     * remove all loaded animation\r\n     */\r\n    removeAnimation = () => {\r\n        const mainModel = this.models.main;\r\n        mainModel.mixer?.stopAllAction?.();\r\n\r\n        // Reset position and rotation to initial value\r\n        const { initPos, initRot } = mainModel.userData;\r\n        mainModel.position.copy(initPos);\r\n        mainModel.rotation.copy(initRot);\r\n\r\n        this.mixer = null;\r\n        this.animations = [];\r\n        this.aniSettings = [];\r\n    };\r\n\r\n    /**\r\n     * play the next animation stored in this.animations\r\n     */\r\n    playNextAni = () => {\r\n        const { nAni } = this;\r\n        // if capturing and finished recording current chain, stop capturing and set capture flag back to false\r\n        const finishedRecording =\r\n            this.props.capture.enable && this._aniIdx === nAni - 1;\r\n        if (finishedRecording) {\r\n            this.mediaRecorder.stop();\r\n            this.props.onCaptureFinish();\r\n        }\r\n        const newIdx = (this._aniIdx + 1) % nAni;\r\n        this.aniIdx = newIdx;\r\n    };\r\n\r\n    /**\r\n     * update animation and global time scale\r\n     * @param {ViewerProps[\"animation\"]} prev\r\n     * @param {ViewerProps[\"animation\"]} current\r\n     */\r\n    updateAnimation = (prev, current) => {\r\n        const { code, timeScale } = current;\r\n        if (prev.code !== code) {\r\n            this.removeAnimation();\r\n            this.addAnimation();\r\n            return;\r\n        }\r\n        // Update timeScale if animation not changed\r\n        if (prev.timeScale !== timeScale) {\r\n            this.mixer.timeScale = timeScale;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * capture current animation and save as video\r\n     */\r\n    captureAnimation = () => {\r\n        /**\r\n         * @type {Blob[]}\r\n         */\r\n        this.chunks = [];\r\n        this.videoStream = this.canvas.captureStream(30);\r\n\r\n        if (!this.mediaRecorder) {\r\n            const { codec } = this.props.capture;\r\n            this.mediaRecorder = new MediaRecorder(this.videoStream, {\r\n                mimeType: codec,\r\n            });\r\n            this.mediaRecorder.ondataavailable = event =>\r\n                this.chunks.push(event.data);\r\n            this.mediaRecorder.onstop = () => {\r\n                this.enableInput();\r\n\r\n                const { format } = this.props.capture;\r\n\r\n                const superBuffer = new Blob(this.chunks, {\r\n                    type: `video/${format}`,\r\n                });\r\n\r\n                const fileName = `ani_${getDateTimeString()}.${format}`;\r\n\r\n                downloadBlob(superBuffer, fileName);\r\n            };\r\n        }\r\n        this.disableInput(\"Recording\");\r\n        this.beforeCaptureAnimation();\r\n        // play first animation and start capturing\r\n        this.aniIdx = 0;\r\n        this.mediaRecorder.start();\r\n    };\r\n\r\n    /**\r\n     * called before animation capture\r\n     */\r\n    beforeCaptureAnimation = () => void 0;\r\n\r\n    updateScene = dt => {\r\n        this.mixer?.update(dt);\r\n\r\n        if (this.faceChanges && this.faceChanges.length) {\r\n            const elapsedTime = this.mixer.time;\r\n            const nextFaceChangeTime = this.faceChangeTime[0];\r\n            if (elapsedTime >= nextFaceChangeTime) {\r\n                this.faceChangeTime.shift();\r\n                const { eyeIdx, mouthIdx } = this.faceChanges.shift();\r\n                this.eyeIdx = eyeIdx;\r\n                this.mouthIdx = mouthIdx;\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default AniViewer;\r\n"],"sourceRoot":""}