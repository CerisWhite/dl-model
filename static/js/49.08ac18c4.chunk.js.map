{"version":3,"sources":["MainPage/Sidebar/styles/Rose-Petals.svg","MainPage/Sidebar/styles/SidebarHeaderStyles.js","MainPage/Sidebar/SidebarHeader.js","MainPage/Sidebar/SidebarBody/SidebarBody.js","MainPage/Sidebar/Modal/ModalBody.js","MainPage/Sidebar/Modal/Modal.js","MainPage/Sidebar/styles/SidebarStyles.js","MainPage/Sidebar/Sidebar.js"],"names":["drawerBG","DRAWER_BGCOLOR","useStyles","makeStyles","theme","downloadButton","color","display","alignItems","justifyContent","width","height","borderRadius","position","left","top","margin","cursor","backgroundColor","closeDrawerButton","right","root","minHeight","fontSize","zIndex","backgroundImage","bg","backgroundSize","backgroundPosition","marginBottom","DrawerHeader","toggleSidebar","classes","dispatch","useContext","DispatchContext","SettingsContext","currentCodec","capture","codec","asciiOn","ascii","enable","useEffect","supportedCodecs","videoCodecs","filter","MediaRecorder","isTypeSupported","action","type","key","value","err","console","log","className","onClick","Tooltip","title","placement","contentMap","settings","lazy","chainMaker","advanced","SidebarBody","openModal","sidebarContent","app","Body","fallback","CharaSelect","FaceSelect","WeaponSelect","AnimationSelect","ColorSelect","Share","ModalBody","mode","closeModal","handleSelect","includes","Modal","createPortal","Dialog","maxWidth","onClose","open","scroll","PaperProps","document","getElementById","drawer","DRAWER_WIDTH","overflowY","drawerPaper","Sidebar","useState","modalMode","setModalMode","handler","useRef","Drawer","variant","anchor","paper","SidebarHeader","current"],"mappings":"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","file":"static/js/49.08ac18c4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Rose-Petals.bc11ecc7.svg\";","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_BGCOLOR } from \"helpers/consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst drawerBG = DRAWER_BGCOLOR;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    downloadButton: {\r\n        color: \"black\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        width: \"2rem\",\r\n        height: \"2rem\",\r\n        borderRadius: \"50%\",\r\n        position: \"absolute\",\r\n        left: \"0\",\r\n        top: \"0\",\r\n        margin: \"1rem\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"rgba(255,255,255,0.5)\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgba(255,255,255,0.8)\",\r\n        },\r\n    },\r\n    closeDrawerButton: {\r\n        color: \"black\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        width: \"2rem\",\r\n        height: \"2rem\",\r\n        borderRadius: \"50%\",\r\n        position: \"absolute\",\r\n        right: \"0\",\r\n        top: \"0\",\r\n        margin: \"1rem\",\r\n        cursor: \"pointer\",\r\n        backgroundColor: \"rgba(255,255,255,0.5)\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgba(255,255,255,0.8)\",\r\n        },\r\n    },\r\n    root: {\r\n        height: \"4rem\",\r\n        minHeight: \"4rem\",\r\n        width: \"100%\",\r\n        fontSize: \"1.5rem\",\r\n        display: \"flex\",\r\n        position: \"sticky\",\r\n        top: 0,\r\n        zIndex: 5,\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        backgroundColor: drawerBG,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"auto 100vh\",\r\n        backgroundPosition: \"center\",\r\n        color: \"white\",\r\n        marginBottom: \"0.5rem\",\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { useContext, useEffect } from \"react\";\r\n\r\nimport { SettingsContext, DispatchContext } from \"context/SettingsContext\";\r\n\r\nimport ArrowLeft from \"@material-ui/icons/ArrowLeft\";\r\nimport SaveIcon from \"@material-ui/icons/GetApp\";\r\n\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport useStyles from \"./styles/SidebarHeaderStyles\";\r\n\r\nimport { videoCodecs } from \"helpers/consts\";\r\n\r\nfunction DrawerHeader({ toggleSidebar }) {\r\n    const classes = useStyles();\r\n    const dispatch = useContext(DispatchContext);\r\n    const {\r\n        capture: { codec: currentCodec },\r\n        ascii: { enable: asciiOn },\r\n    } = useContext(SettingsContext);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const supportedCodecs = videoCodecs.filter(codec =>\r\n                MediaRecorder.isTypeSupported(codec)\r\n            );\r\n            const action = {\r\n                type: \"update\",\r\n                key: \"capture\",\r\n                value: {\r\n                    supportedCodecs: [...supportedCodecs],\r\n                    codec: supportedCodecs[0],\r\n                },\r\n            };\r\n            dispatch(action);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }, [dispatch]);\r\n\r\n    const toggleCapture = () => {\r\n        const action = {\r\n            type: \"toggle\",\r\n            key: \"capture\",\r\n            value: \"enable\",\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <span>Settings</span>\r\n            <div className={classes.closeDrawerButton} onClick={toggleSidebar}>\r\n                <ArrowLeft />\r\n            </div>\r\n            {currentCodec && !asciiOn && (\r\n                <Tooltip\r\n                    title=\"Save animation as video (experimental)\"\r\n                    placement=\"bottom-end\"\r\n                >\r\n                    <div\r\n                        className={classes.downloadButton}\r\n                        onClick={toggleCapture}\r\n                    >\r\n                        <SaveIcon />\r\n                    </div>\r\n                </Tooltip>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DrawerHeader;\r\n","import { lazy, Suspense, useContext } from \"react\";\r\n\r\nimport { SettingsContext } from \"context/SettingsContext\";\r\n\r\nconst SettingBtns = lazy(() => import(\"./SettingBtns\"));\r\nconst ChainMaker = lazy(() => import(\"./ChainMaker\"));\r\nconst AdvancedSettings = lazy(() => import(\"./AdvancedSettings\"));\r\n\r\nconst contentMap = {\r\n    settings: SettingBtns,\r\n    chainMaker: ChainMaker,\r\n    advanced: AdvancedSettings,\r\n};\r\n\r\nfunction SidebarBody({ openModal }) {\r\n    const {\r\n        app: { sidebarContent },\r\n    } = useContext(SettingsContext);\r\n\r\n    const Body = contentMap[sidebarContent];\r\n\r\n    return (\r\n        <Suspense fallback={<div>Loading</div>}>\r\n            <Body openModal={openModal} />\r\n        </Suspense>\r\n    );\r\n}\r\n\r\nexport default SidebarBody;\r\n","import { lazy, Suspense } from \"react\";\r\n\r\nconst CharaSelect = lazy(() => import(\"./CharaSelect\"));\r\nconst FaceSelect = lazy(() => import(\"./FaceSelect\"));\r\nconst WeaponSelect = lazy(() => import(\"./WeaponSelect\"));\r\nconst AnimationSelect = lazy(() => import(\"./AnimationSelect\"));\r\nconst ColorSelect = lazy(() => import(\"./ColorSelect\"));\r\nconst Share = lazy(() => import(\"./Share\"));\r\n\r\nfunction ModalBody({ mode, closeModal, handleSelect }) {\r\n    let Body = null;\r\n    switch (mode) {\r\n        case \"model\":\r\n        case \"texture\":\r\n            Body = CharaSelect;\r\n            break;\r\n        case \"face\":\r\n        case \"eye\":\r\n        case \"mouth\":\r\n            Body = FaceSelect;\r\n            break;\r\n        case \"weapon\":\r\n            Body = WeaponSelect;\r\n            break;\r\n        case \"animation\":\r\n            Body = AnimationSelect;\r\n            break;\r\n        case \"background\":\r\n            Body = ColorSelect;\r\n            break;\r\n        case \"share\":\r\n            Body = Share;\r\n            break;\r\n        default:\r\n            Body = mode.includes(\"-\") ? ColorSelect : null;\r\n    }\r\n\r\n    return (\r\n        <Suspense fallback={<div>Loading</div>}>\r\n            <Body\r\n                mode={mode}\r\n                closeModal={closeModal}\r\n                handleSelect={handleSelect}\r\n            />\r\n        </Suspense>\r\n    );\r\n}\r\n\r\nexport default ModalBody;\r\n","import { createPortal } from \"react-dom\";\r\n\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nimport ModalBody from \"./ModalBody\";\r\n\r\nfunction Modal({ mode, closeModal, handleSelect }) {\r\n    return mode\r\n        ? createPortal(\r\n              <Dialog\r\n                  maxWidth=\"lg\"\r\n                  onClose={closeModal}\r\n                  open={!!mode}\r\n                  scroll=\"paper\"\r\n                  PaperProps={{ classes: { root: \"Modal\" } }}\r\n              >\r\n                  <ModalBody\r\n                      mode={mode}\r\n                      closeModal={closeModal}\r\n                      handleSelect={handleSelect}\r\n                  />\r\n              </Dialog>,\r\n              document.getElementById(\"modal-root\")\r\n          )\r\n        : null;\r\n}\r\n\r\nexport default Modal;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport { DRAWER_WIDTH, DRAWER_BGCOLOR } from \"helpers/consts\";\r\nimport bg from \"./Rose-Petals.svg\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    drawer: {\r\n        width: DRAWER_WIDTH,\r\n        overflowY: \"scroll\",\r\n    },\r\n    drawerPaper: {\r\n        alignItems: \"center\",\r\n        backgroundColor: DRAWER_BGCOLOR,\r\n        backgroundImage: `url(${bg})`,\r\n        /* background by SVGBackgrounds.com */\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        width: DRAWER_WIDTH,\r\n        \"& button\": {\r\n            marginBottom: \"0.2rem\",\r\n        },\r\n    },\r\n}));\r\n\r\nexport default useStyles;\r\n","import { useState, useRef } from \"react\";\r\n\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\n\r\nimport SidebarHeader from \"./SidebarHeader\";\r\nimport SidebarBody from \"./SidebarBody\";\r\nimport Modal from \"./Modal\";\r\n\r\nimport useStyles from \"./styles/SidebarStyles\";\r\n\r\nfunction Sidebar({ open, toggleSidebar }) {\r\n    const classes = useStyles();\r\n\r\n    const [modalMode, setModalMode] = useState(\"\");\r\n    const handler = useRef(null);\r\n\r\n    const openModal = (mode, handleSelect = null) => {\r\n        handler.current = handleSelect;\r\n        setModalMode(mode);\r\n    };\r\n\r\n    const closeModal = () => setModalMode(\"\");\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            variant=\"persistent\"\r\n            anchor=\"left\"\r\n            open={open}\r\n            classes={{\r\n                paper: classes.drawerPaper,\r\n            }}\r\n        >\r\n            <SidebarHeader toggleSidebar={toggleSidebar} />\r\n            <SidebarBody openModal={openModal} />\r\n            <Modal\r\n                mode={modalMode}\r\n                closeModal={closeModal}\r\n                handleSelect={handler.current}\r\n            />\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default Sidebar;\r\n"],"sourceRoot":""}