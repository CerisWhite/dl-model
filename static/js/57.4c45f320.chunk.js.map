{"version":3,"sources":["MainPage/Sidebar/Modal/WeaponSelect/WeaponBtn.js"],"names":["BladeSelector","lazy","BtnIcon","Left","Right","WeaponBtn","id","iconName","name","useState","bladeMode","setBladeMode","useToggleState","clicked","toggleClicked","reverseGrip","toggleReverseGrip","iconPath","process","dispatch","useContext","DispatchContext","weaponIsBlade","isBlade","setWeapon","event","stopPropagation","side","currentTarget","dataset","value","idCode","replace","gripCode","weaponCode","action","type","key","weaponIcon","src","alt","onClick","className","gripSelect","e","checked","onChange","htmlFor","bladeModeSelect","fallback","SetWeaponBtn","data-value"],"mappings":"6MAOMA,EAAgBC,gBAAK,kBAAM,kCAC3BC,EAAU,CAAEC,KAAM,SAAKC,MAAO,UAyFrBC,UAvFf,YAAiD,IAA5BC,EAA2B,EAA3BA,GAA2B,IAAvBC,gBAAuB,MAAZ,GAAY,EAARC,EAAQ,EAARA,KACpC,EAAkCC,mBAAS,SAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAiCC,aAAe,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAyCF,aAAe,GAAxD,mBAAOG,EAAP,KAAoBC,EAApB,KACMC,EAAQ,UAAMC,YAAN,4BAAgDX,GAExDY,EAAWC,qBAAWC,KAEtBC,EAAgBC,YAAQjB,GAExBkB,EAAY,SAAAC,GACdA,EAAMC,kBACN,IAAMC,EAAOF,EAAMG,cAAcC,QAAQC,MAEnCC,EAAuB,WAAdrB,EAAyBJ,EAAG0B,QAAQ,MAAO,OAAS1B,EAC7D2B,EAAWlB,EAAc,IAAM,IAE/BmB,EAAU,UAAMH,GAAN,OAAeE,GACzBE,EAAS,CACXC,KAAM,SACNC,IAAK,QACLP,MAAM,+BAAaH,GAASO,IAEhCf,EAASgB,IAGPG,EAAa/B,GACf,qBACIgC,IAAKtB,EACLa,MAAOxB,EACPkC,IAAKlC,EACLmC,QAAS3B,EACT4B,UAAU,mBAIZC,EAAa9B,GACf,qBACI6B,UAAS,yBAAoBpB,EAAgB,QAAU,IACvDmB,QAAS,SAAAG,GAAC,OAAIA,EAAElB,mBAFpB,SAII,gCACI,uBACIU,KAAK,WACL9B,GAAE,eAAUA,GACZuC,QAAS9B,EACT+B,SAAU9B,IAEd,uBAAO+B,QAAO,eAAUzC,GAAxB,+BAKN0C,EAAkB1B,GACpB,cAAC,WAAD,CAAU2B,SAAU,KAApB,SACI,cAACjD,EAAD,CAAe8B,MAAOpB,EAAW+B,QAAS9B,MAI5CuC,EAAe,SAAC,GAAD,IAAGvB,EAAH,EAAGA,KAAH,OACjB,qBAAKe,UAAU,mBAAmBS,aAAYxB,EAAMc,QAASjB,EAA7D,SACKtB,EAAQyB,MAIjB,OACI,sBAAKe,UAAU,YAAf,UACKJ,EACAzB,EACG,sBAAK6B,UAAU,gBAAgBD,QAAS3B,EAAxC,UACK6B,EACD,sBAAKD,UAAU,wBAAf,UACI,cAACQ,EAAD,CAAcvB,KAAK,SACnB,sCACA,cAACuB,EAAD,CAAcvB,KAAK,aAEtBqB,KAGL,qBAAKN,UAAU,iBAAiBD,QAAS3B,EAAzC,SACKN","file":"static/js/57.4c45f320.chunk.js","sourcesContent":["import { lazy, Suspense, useState, useContext } from \"react\";\r\nimport useToggleState from \"hooks/useToggleState\";\r\nimport \"./styles/WeaponBtn.css\";\r\n\r\nimport { DispatchContext } from \"context/SettingsContext\";\r\nimport { isBlade } from \"helpers/helpers\";\r\n\r\nconst BladeSelector = lazy(() => import(\"components/selectors/BladeSelector\"));\r\nconst BtnIcon = { Left: \"⇐\", Right: \"⇒\" };\r\n\r\nfunction WeaponBtn({ id, iconName = \"\", name }) {\r\n    const [bladeMode, setBladeMode] = useState(\"Blade\");\r\n    const [clicked, toggleClicked] = useToggleState(false);\r\n    const [reverseGrip, toggleReverseGrip] = useToggleState(false);\r\n    const iconPath = `${process.env.PUBLIC_URL}/img/weaponIcons/${iconName}`;\r\n\r\n    const dispatch = useContext(DispatchContext);\r\n\r\n    const weaponIsBlade = isBlade(id);\r\n\r\n    const setWeapon = event => {\r\n        event.stopPropagation();\r\n        const side = event.currentTarget.dataset.value;\r\n        // change id code for sheath if needed\r\n        const idCode = bladeMode === \"Sheath\" ? id.replace(\"_01\", \"_02\") : id;\r\n        const gripCode = reverseGrip ? \"b\" : \"n\";\r\n\r\n        const weaponCode = `${idCode}${gripCode}`;\r\n        const action = {\r\n            type: \"update\",\r\n            key: \"model\",\r\n            value: { [`weapon${side}`]: weaponCode },\r\n        };\r\n        dispatch(action);\r\n    };\r\n\r\n    const weaponIcon = iconName && (\r\n        <img\r\n            src={iconPath}\r\n            value={id}\r\n            alt={id}\r\n            onClick={toggleClicked}\r\n            className=\"WeaponBtn-icon\"\r\n        />\r\n    );\r\n\r\n    const gripSelect = clicked && (\r\n        <div\r\n            className={`WeaponBtn-grip ${weaponIsBlade ? \"blade\" : \"\"}`}\r\n            onClick={e => e.stopPropagation()}\r\n        >\r\n            <div>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    id={`grip-${id}`}\r\n                    checked={reverseGrip}\r\n                    onChange={toggleReverseGrip}\r\n                />\r\n                <label htmlFor={`grip-${id}`}>Reverse Grip</label>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    const bladeModeSelect = weaponIsBlade && (\r\n        <Suspense fallback={null}>\r\n            <BladeSelector value={bladeMode} onClick={setBladeMode} />\r\n        </Suspense>\r\n    );\r\n\r\n    const SetWeaponBtn = ({ side }) => (\r\n        <div className=\"WeaponBtn-addBtn\" data-value={side} onClick={setWeapon}>\r\n            {BtnIcon[side]}\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"WeaponBtn\">\r\n            {weaponIcon}\r\n            {clicked ? (\r\n                <div className=\"WeaponBtn-add\" onClick={toggleClicked}>\r\n                    {gripSelect}\r\n                    <div className=\"WeaponBtn-addBtnGroup\">\r\n                        <SetWeaponBtn side=\"Left\" />\r\n                        <div>ADD</div>\r\n                        <SetWeaponBtn side=\"Right\" />\r\n                    </div>\r\n                    {bladeModeSelect}\r\n                </div>\r\n            ) : (\r\n                <div className=\"WeaponBtn-name\" onClick={toggleClicked}>\r\n                    {name}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeaponBtn;\r\n"],"sourceRoot":""}